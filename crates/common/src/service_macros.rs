#![allow(async_fn_in_trait)]
//! Service Macros –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –≤ MAGRAY CLI
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–∫—Ä–æ—Å—ã –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
//! service methods, –∏—Å–ø–æ–ª—å–∑—É—è DRY –ø—Ä–∏–Ω—Ü–∏–ø.

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö health_check —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
/// –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ fn health_check –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
#[macro_export]
macro_rules! impl_health_check_service {
    ($service_type:ty, $health_data:ty) => {
        #[async_trait::async_trait]
        impl $crate::service_traits::HealthCheckService for $service_type {
            type HealthData = $health_data;

            async fn health_check(&self) -> Result<Self::HealthData, $crate::MagrayCoreError> {
                // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                if !self.is_healthy() {
                    return Err($crate::MagrayCoreError::ServiceNotHealthy(
                        self.name().to_string(),
                    ));
                }

                // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ health data
                let health_data = self.create_health_data().await?;
                Ok(health_data)
            }
        }
    };
}

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö service lifecycle —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
/// –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ fn initialize, fn shutdown, fn is_ready
#[macro_export]
macro_rules! impl_lifecycle_service {
    ($service_type:ty, $init_config:ty) => {
        #[async_trait::async_trait]
        impl $crate::service_traits::InitializableService for $service_type {
            type InitConfig = $init_config;

            async fn initialize(
                &mut self,
                config: Self::InitConfig,
            ) -> Result<(), $crate::MagrayCoreError> {
                tracing::info!("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞: {}", self.name());

                if self.is_initialized() {
                    return Err($crate::MagrayCoreError::ServiceAlreadyInitialized(
                        self.name().to_string(),
                    ));
                }

                self.perform_initialization(config).await?;
                self.set_initialized(true);

                tracing::info!("‚úÖ –°–µ—Ä–≤–∏—Å {} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", self.name());
                Ok(())
            }
        }

        impl $crate::service_traits::BaseService for $service_type {
            fn name(&self) -> &'static str {
                std::any::type_name::<$service_type>()
                    .split("::")
                    .last()
                    .unwrap_or("UnknownService")
            }

            async fn shutdown(&self) -> Result<(), $crate::MagrayCoreError> {
                tracing::info!("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {}", self.name());

                self.perform_shutdown().await?;

                tracing::info!("‚úÖ –°–µ—Ä–≤–∏—Å {} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", self.name());
                Ok(())
            }
        }
    };
}

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö statistics provider —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
/// –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ fn get_stats
#[macro_export]
macro_rules! impl_statistics_provider {
    ($service_type:ty, $stats_type:ty) => {
        impl $crate::service_traits::StatisticsProvider for $service_type {
            type Stats = $stats_type;

            fn get_stats(&self) -> Self::Stats {
                self.collect_stats()
            }

            fn reset_stats(&mut self) {
                tracing::debug!("üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {}", self.name());
                self.perform_stats_reset();
            }
        }
    };
}

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ configuration profile —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
/// –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ fn production, fn minimal
#[macro_export]
macro_rules! impl_configuration_profile {
    ($config_type:ty) => {
        impl $crate::service_traits::ConfigurationProfile<$config_type> for $config_type {
            fn production() -> $config_type {
                let mut config = Self::default();
                config.optimize_for_production();
                config
            }

            fn minimal() -> $config_type {
                let mut config = Self::default();
                config.minimize_resources();
                config
            }

            fn validate_profile(config: &$config_type) -> Result<(), $crate::ConfigError> {
                config.validate_internal()
            }
        }
    };
}

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ buildable service —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π  
/// –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ fn build
#[macro_export]
macro_rules! impl_buildable_service {
    ($service_type:ty, $build_config:ty, $build_error:ty) => {
        impl $crate::service_traits::BuildableService<$service_type> for $service_type {
            type BuildConfig = $build_config;
            type BuildError = $build_error;

            fn build(config: Self::BuildConfig) -> Result<$service_type, Self::BuildError> {
                tracing::info!(
                    "üîß –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {}",
                    std::any::type_name::<$service_type>()
                );

                let service = Self::build_with_config(config)?;

                tracing::info!("‚úÖ –°–µ—Ä–≤–∏—Å —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                Ok(service)
            }
        }
    };
}

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ executable service —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
/// –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ fn execute
#[macro_export]
macro_rules! impl_executable_service {
    ($service_type:ty, $input:ty, $output:ty, $error:ty) => {
        #[async_trait::async_trait]
        impl $crate::service_traits::ExecutableService<$input, $output> for $service_type {
            type ExecuteError = $error;

            async fn execute(&self, input: $input) -> Result<$output, Self::ExecuteError> {
                tracing::debug!("‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ {}", self.name());

                let result = self.perform_execute(input).await?;

                tracing::debug!("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ {}", self.name());
                Ok(result)
            }
        }
    };
}

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ clearable service —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π  
/// –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ fn clear
#[macro_export]
macro_rules! impl_clearable_service {
    ($service_type:ty) => {
        #[async_trait::async_trait]
        impl $crate::service_traits::ClearableService for $service_type {
            async fn clear(&mut self) -> Result<(), $crate::MagrayCoreError> {
                tracing::info!("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {}", self.name());

                if !self.can_clear().await {
                    return Err($crate::MagrayCoreError::OperationNotAllowed(format!(
                        "–û—á–∏—Å—Ç–∫–∞ {} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
                        self.name()
                    )));
                }

                self.perform_clear().await?;

                tracing::info!("‚úÖ –°–µ—Ä–≤–∏—Å {} –æ—á–∏—â–µ–Ω", self.name());
                Ok(())
            }

            async fn can_clear(&self) -> bool {
                self.is_clearable()
            }
        }
    };
}

/// –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –º–∞–∫—Ä–æ—Å –¥–ª—è –ø–æ–ª–Ω–æ–π service —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
/// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ service traits –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
#[macro_export]
macro_rules! impl_full_service {
    (
        $service_type:ty,
        health_data: $health_data:ty,
        init_config: $init_config:ty,
        stats: $stats_type:ty,
        build_config: $build_config:ty,
        build_error: $build_error:ty
    ) => {
        $crate::impl_health_check_service!($service_type, $health_data);
        $crate::impl_lifecycle_service!($service_type, $init_config);
        $crate::impl_statistics_provider!($service_type, $stats_type);
        $crate::impl_buildable_service!($service_type, $build_config, $build_error);
        $crate::impl_clearable_service!($service_type);
    };
}

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ coordinator implementations
/// –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è orchestration coordinators, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –º–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
#[macro_export]
macro_rules! impl_coordinator {
    ($coordinator_type:ty, $metrics_type:ty) => {
        #[async_trait::async_trait]
        impl $crate::orchestration::traits::Coordinator for $coordinator_type {
            async fn initialize(&self) -> anyhow::Result<()> {
                tracing::info!("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", self.name());
                self.perform_coordinator_init().await
            }

            async fn is_ready(&self) -> bool {
                self.check_readiness().await
            }

            async fn health_check(&self) -> anyhow::Result<()> {
                if !self.is_ready().await {
                    return Err(anyhow::anyhow!("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä {} –Ω–µ –≥–æ—Ç–æ–≤", self.name()));
                }
                self.perform_health_check().await
            }

            async fn shutdown(&self) -> anyhow::Result<()> {
                tracing::info!("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", self.name());
                self.perform_coordinator_shutdown().await
            }

            async fn metrics(&self) -> serde_json::Value {
                self.collect_coordinator_metrics().await
            }
        }

        impl $crate::service_traits::BaseService for $coordinator_type {
            fn name(&self) -> &'static str {
                std::any::type_name::<$coordinator_type>()
                    .split("::")
                    .last()
                    .unwrap_or("UnknownCoordinator")
            }

            async fn shutdown(&self) -> Result<(), $crate::MagrayCoreError> {
                self.perform_coordinator_shutdown()
                    .await
                    .map_err(|e| $crate::MagrayCoreError::ServiceShutdownError(e.to_string()))
            }
        }
    };
}

/// Trait helper –¥–ª—è —Ç—Ä–µ–±—É–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ –º–∞–∫—Ä–æ—Å–∞—Ö
/// –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–π –º–∞–∫—Ä–æ—Å—ã
pub trait ServiceMacroHelpers {
    type HealthData;
    type Stats;

    /// –°–æ–∑–¥–∞—Ç—å health data –¥–ª—è service
    async fn create_health_data(&self) -> Result<Self::HealthData, crate::MagrayCoreError>;

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    fn is_initialized(&self) -> bool;

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    fn set_initialized(&self, initialized: bool);

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    async fn perform_initialization<T>(&mut self, config: T) -> Result<(), crate::MagrayCoreError>;

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    async fn perform_shutdown(&self) -> Result<(), crate::MagrayCoreError>;

    /// –°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    fn collect_stats(&self) -> Self::Stats;

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    fn perform_stats_reset(&mut self);

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏
    fn is_clearable(&self) -> bool;

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
    async fn perform_clear(&mut self) -> Result<(), crate::MagrayCoreError>;
}

/// Trait helper –¥–ª—è coordinator –º–∞–∫—Ä–æ—Å–æ–≤
pub trait CoordinatorMacroHelpers {
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    async fn perform_coordinator_init(&self) -> anyhow::Result<()>;

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    async fn check_readiness(&self) -> bool;

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å health check –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    async fn perform_health_check(&self) -> anyhow::Result<()>;

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    async fn perform_coordinator_shutdown(&self) -> anyhow::Result<()>;

    /// –°–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    async fn collect_coordinator_metrics(&self) -> serde_json::Value;
}

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ default trait implementations —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
#[macro_export]
macro_rules! impl_service_defaults {
    ($service_type:ty, name: $service_name:literal) => {
        impl $crate::service_traits::BaseService for $service_type {
            fn name(&self) -> &'static str {
                $service_name
            }
        }
    };

    ($service_type:ty, name: $service_name:literal, version: $version:literal) => {
        impl $crate::service_traits::BaseService for $service_type {
            fn name(&self) -> &'static str {
                $service_name
            }

            fn version(&self) -> &'static str {
                $version
            }
        }
    };
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::service_traits::*;
    use async_trait::async_trait;

    // –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–∫—Ä–æ—Å–æ–≤
    struct TestService {
        initialized: bool,
        name: &'static str,
    }

    impl TestService {
        fn new(name: &'static str) -> Self {
            Self {
                initialized: false,
                name,
            }
        }
    }

    // –†–µ–∞–ª–∏–∑—É–µ–º required helpers
    impl ServiceMacroHelpers for TestService {
        type HealthData = String;
        type Stats = u64;

        async fn create_health_data(&self) -> Result<Self::HealthData, crate::MagrayCoreError> {
            Ok("Healthy".to_string())
        }

        fn is_initialized(&self) -> bool {
            self.initialized
        }

        fn set_initialized(&self, initialized: bool) {
            // –î–ª—è —Ç–µ—Å—Ç–æ–≤ —É–ø—Ä–æ—â–∞–µ–º
        }

        async fn perform_initialization<T>(
            &mut self,
            _config: T,
        ) -> Result<(), crate::MagrayCoreError> {
            Ok(())
        }

        async fn perform_shutdown(&self) -> Result<(), crate::MagrayCoreError> {
            Ok(())
        }

        fn collect_stats(&self) -> Self::Stats {
            42
        }

        fn perform_stats_reset(&mut self) {}

        fn is_clearable(&self) -> bool {
            true
        }

        async fn perform_clear(&mut self) -> Result<(), crate::MagrayCoreError> {
            Ok(())
        }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–∫—Ä–æ—Å
    impl_service_defaults!(TestService, name: "TestService", version: "1.0.0");

    #[tokio::test]
    async fn test_service_defaults_macro() {
        let service = TestService::new("test");
        assert_eq!(service.name(), "TestService");
        assert_eq!(service.version(), "1.0.0");
    }
}
