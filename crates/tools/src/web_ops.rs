use crate::{Tool, ToolInput, ToolOutput, ToolSpec};
use anyhow::Result;
use std::collections::HashMap;

pub struct WebSearch;

impl WebSearch {
    pub fn new() -> Self {
        WebSearch
    }
}

impl Default for WebSearch {
    fn default() -> Self {
        Self::new()
    }
}

#[async_trait::async_trait]
impl Tool for WebSearch {
    fn spec(&self) -> ToolSpec {
        ToolSpec {
            name: "web_search".to_string(),
            description: "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (mock)".to_string(),
            usage: "web_search <–∑–∞–ø—Ä–æ—Å>".to_string(),
            examples: vec![
                "web_search \"Rust –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\"".to_string(),
                "–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏".to_string(),
            ],
            input_schema: r#"{"query": "string"}"#.to_string(),
        }
    }

    async fn execute(&self, input: ToolInput) -> Result<ToolOutput> {
        let query = input.args.get("query")
            .ok_or_else(|| anyhow::anyhow!("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'query'"))?;

        // Mock implementation
        Ok(ToolOutput {
            success: true,
            result: format!("üîç –ü–æ–∏—Å–∫: '{}'\n\n[Mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞]\n1. –†–µ–∑—É–ª—å—Ç–∞—Ç 1\n2. –†–µ–∑—É–ª—å—Ç–∞—Ç 2\n3. –†–µ–∑—É–ª—å—Ç–∞—Ç 3", query),
            formatted_output: None,
            metadata: HashMap::new(),
        })
    }
    
    async fn parse_natural_language(&self, query: &str) -> Result<ToolInput> {
        let mut args = HashMap::new();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        let query_clean = query.replace("–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ", "")
            .replace("–Ω–∞–π—Ç–∏ ", "")
            .replace("–ø–æ–∏—Å–∫ ", "")
            .trim()
            .to_string();
        
        args.insert("query".to_string(), query_clean);
        
        Ok(ToolInput {
            command: "web_search".to_string(),
            args,
            context: Some(query.to_string()),
        })
    }
}

pub struct WebFetch;

impl WebFetch {
    pub fn new() -> Self {
        WebFetch
    }
}

impl Default for WebFetch {
    fn default() -> Self {
        Self::new()
    }
}

#[async_trait::async_trait]
impl Tool for WebFetch {
    fn spec(&self) -> ToolSpec {
        ToolSpec {
            name: "web_fetch".to_string(),
            description: "–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (mock)".to_string(),
            usage: "web_fetch <url>".to_string(),
            examples: vec![
                "web_fetch https://example.com".to_string(),
                "–∑–∞–≥—Ä—É–∑–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É rust-lang.org".to_string(),
            ],
            input_schema: r#"{"url": "string"}"#.to_string(),
        }
    }

    async fn execute(&self, input: ToolInput) -> Result<ToolOutput> {
        let url = input.args.get("url")
            .ok_or_else(|| anyhow::anyhow!("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'url'"))?;

        // Mock implementation
        Ok(ToolOutput {
            success: true,
            result: format!("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {}\n\n[Mock —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ]\n<html>\n  <body>\n    <h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h1>\n    <p>–¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...</p>\n  </body>\n</html>", url),
            formatted_output: None,
            metadata: HashMap::new(),
        })
    }
    
    async fn parse_natural_language(&self, query: &str) -> Result<ToolInput> {
        let mut args = HashMap::new();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        let words: Vec<&str> = query.split_whitespace().collect();
        for word in words {
            if word.starts_with("http://") || word.starts_with("https://") || word.contains(".com") || word.contains(".org") {
                args.insert("url".to_string(), word.to_string());
                break;
            }
        }
        
        // –ï—Å–ª–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å
        if !args.contains_key("url") {
            args.insert("url".to_string(), query.to_string());
        }
        
        Ok(ToolInput {
            command: "web_fetch".to_string(),
            args,
            context: Some(query.to_string()),
        })
    }
}