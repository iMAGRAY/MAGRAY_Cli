// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPU –≤ ONNX Runtime
use ai::config::EmbeddingConfig;
use ai::embeddings_cpu::CpuEmbeddingService;
use ai::gpu_detector::GpuDetector;

fn main() -> anyhow::Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::DEBUG)
        .init();

    println!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPU –≤ ONNX Runtime\n");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
    let gpu_detector = GpuDetector::detect();
    gpu_detector.print_detailed_info();

    if !gpu_detector.available {
        println!("‚ùå GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!");
        return Ok(());
    }

    // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å GPU
    let gpu_config = EmbeddingConfig {
        model_name: "qwen3emb".to_string(),
        batch_size: 32,
        max_length: 512,
        use_gpu: true,
        gpu_config: Some(ai::GpuConfig::auto_optimized()),
        embedding_dim: Some(1024),
    };

    println!("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ embedding —Å–µ—Ä–≤–∏—Å–∞ —Å GPU...");
    match CpuEmbeddingService::new(gpu_config) {
        Ok(service) => {
            println!("‚úÖ –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!");

            // –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π embedding
            let test_text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU".to_string();
            println!("\nüß™ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π embedding...");

            match service.embed(&test_text) {
                Ok(result) => {
                    println!("‚úÖ Embedding –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                    println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", result.embedding.len());
                    println!("   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {:?}", &result.embedding[..5]);
                }
                Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ embedding: {}", e);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU —á–µ—Ä–µ–∑ nvidia-smi
            println!("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ nvidia-smi –ø–æ—Å–ª–µ embedding:");
            std::process::Command::new("nvidia-smi")
                .args(&[
                    "--query-gpu=name,memory.used,utilization.gpu",
                    "--format=csv,noheader",
                ])
                .status()?;
        }
        Err(e) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å: {}", e);
            println!("\nüîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:");
            println!("{:#?}", e);
        }
    }

    Ok(())
}
