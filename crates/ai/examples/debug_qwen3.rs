use anyhow::Result;
use ai::{EmbeddingConfig, CpuEmbeddingService};

fn main() -> Result<()> {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt::init();
    
    println!("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Qwen3 –º–æ–¥–µ–ª–∏...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    let model_path = std::path::Path::new("models/qwen3emb/model.onnx");
    let tokenizer_path = std::path::Path::new("models/qwen3emb/tokenizer.json");
    
    println!("üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:");
    println!("   –ú–æ–¥–µ–ª—å: {} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {})", model_path.display(), model_path.exists());
    println!("   –¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä: {} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {})", tokenizer_path.display(), tokenizer_path.exists());
    
    if !model_path.exists() {
        return Err(anyhow::anyhow!("–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", model_path.display()));
    }
    
    if !tokenizer_path.exists() {
        return Err(anyhow::anyhow!("–§–∞–π–ª —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", tokenizer_path.display()));
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å CPU —Ç–æ–ª—å–∫–æ
    let config = EmbeddingConfig {
        model_name: "qwen3emb".to_string(),
        batch_size: 32,
        max_length: 512,
        use_gpu: false, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        gpu_config: None,
        embedding_dim: Some(1024),
    };
    
    println!("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ CPU embedding —Å–µ—Ä–≤–∏—Å–∞...");
    
    match CpuEmbeddingService::new(config) {
        Ok(_service) => {
            println!("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω CpuEmbeddingService –¥–ª—è qwen3emb!");
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {:?}", e);
            println!("üìã –ü—Ä–∏—á–∏–Ω–∞: {}", e);
            
            // –¶–µ–ø–æ—á–∫–∞ –æ—à–∏–±–æ–∫
            let mut current = e.source();
            let mut level = 1;
            while let Some(err) = current {
                println!("    {}: {}", level, err);
                current = err.source();
                level += 1;
            }
            
            return Err(e);
        }
    }
    
    println!("üéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}