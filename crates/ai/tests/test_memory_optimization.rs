#![cfg(feature = "gpu")]

use ai::{
    gpu_memory_pool::GPU_MEMORY_POOL,
    gpu_pipeline::{GpuPipelineManager, PipelineConfig},
    EmbeddingConfig,
};
use anyhow::Result;
use std::time::Instant;
use tracing_subscriber;

/// –¢–µ—Å—Ç GPU memory pool —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
#[tokio::test]
async fn test_memory_pool_efficiency() -> Result<()> {
    let _ = tracing_subscriber::fmt::try_init();

    println!("üèä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU Memory Pool");

    // –û—á–∏—â–∞–µ–º –ø—É–ª –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    let _ = GPU_MEMORY_POOL.clear_unused();

    // –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–¥–µ–ª–µ–Ω–∏–π –ø–∞–º—è—Ç–∏
    let sizes = vec![1024, 4096, 16384, 65536, 262144]; // –û—Ç 1KB –¥–æ 256KB
    let mut buffers = Vec::new();

    // –í—ã–¥–µ–ª—è–µ–º –±—É—Ñ–µ—Ä—ã
    for size in &sizes {
        for i in 0..5 {
            match GPU_MEMORY_POOL.acquire_buffer(*size) {
                Ok(buffer) => {
                    println!("‚úÖ –í—ã–¥–µ–ª–µ–Ω –±—É—Ñ–µ—Ä #{} —Ä–∞–∑–º–µ—Ä–æ–º {} KB", i, size / 1024);
                    buffers.push(buffer);
                }
                Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞: {}", e);
                }
            }
        }
    }

    // –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è:");
    let _ = GPU_MEMORY_POOL.print_stats();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
    for buffer in buffers {
        let _ = GPU_MEMORY_POOL.release_buffer(buffer);
    }

    // –ü–µ—á–∞—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    println!("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    let stats = GPU_MEMORY_POOL.get_stats()?;

    println!("  üíæ Total allocations: {}", stats.allocations);
    println!("  üíæ Total deallocations: {}", stats.deallocations);
    println!(
        "  üìà Hit rate: {:.1}%",
        if stats.allocations > 0 {
            (stats.hits as f64 / stats.allocations as f64) * 100.0
        } else {
            0.0
        }
    );

    assert!(stats.allocations > 0);

    Ok(())
}

/// –¢–µ—Å—Ç memory leak detection
#[tokio::test]
async fn test_memory_leak_detection() -> Result<()> {
    let _ = tracing_subscriber::fmt::try_init();

    println!("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ memory leak detection");

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let initial_stats = GPU_MEMORY_POOL.get_stats()?;
    println!(
        "üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} –±—É—Ñ–µ—Ä–æ–≤",
        initial_stats.current_buffers
    );

    // –°–∏–º—É–ª–∏—Ä—É–µ–º work cycle
    for cycle in 0..3 {
        println!("üîÑ Work cycle #{}", cycle + 1);

        // –í—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å —Å –ø–æ–º–æ—â—å—é with_buffer
        let results: Result<Vec<Vec<u8>>> = (0..10)
            .map(|i| {
                GPU_MEMORY_POOL.with_buffer(1024 * (i + 1), |buffer| {
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –±—É—Ñ–µ—Ä–æ–º
                    buffer.extend_from_slice(&vec![0u8; 100]);
                    Ok(buffer[0..100].to_vec())
                })
            })
            .collect();

        match results {
            Ok(data) => {
                println!(
                    "‚úÖ Cycle {} completed, processed {} buffers",
                    cycle + 1,
                    data.len()
                );
            }
            Err(e) => {
                println!("‚ùå Cycle {} failed: {}", cycle + 1, e);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
        let cycle_stats = GPU_MEMORY_POOL.get_stats()?;
        println!(
            "  üìä –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞ {}: {} –±—É—Ñ–µ—Ä–æ–≤",
            cycle + 1,
            cycle_stats.current_buffers
        );
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    let _ = GPU_MEMORY_POOL.clear_unused();

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫–∏
    let final_stats = GPU_MEMORY_POOL.get_stats()?;
    println!(
        "üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} –±—É—Ñ–µ—Ä–æ–≤",
        final_stats.current_buffers
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ñ–µ—Ä–æ–≤ –Ω–µ —Ä–∞—Å—Ç—ë—Ç –Ω–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ
    assert!(
        final_stats.current_buffers <= initial_stats.current_buffers + 10,
        "–í–æ–∑–º–æ–∂–Ω–∞—è —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏: {} -> {} –±—É—Ñ–µ—Ä–æ–≤",
        initial_stats.current_buffers,
        final_stats.current_buffers
    );

    Ok(())
}

/// –¢–µ—Å—Ç concurrent memory access
#[tokio::test]
async fn test_concurrent_memory_access() -> Result<()> {
    let _ = tracing_subscriber::fmt::try_init();

    println!("üîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ concurrent memory access");

    let start_time = Instant::now();

    // –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ concurrent tasks
    let tasks: Vec<_> = (0..5)
        .map(|task_id| {
            tokio::spawn(async move {
                let mut local_results = Vec::new();

                for i in 0..10 {
                    let size = 1024 * (i % 8 + 1); // –†–∞–∑–º–µ—Ä—ã –æ—Ç 1KB –¥–æ 8KB

                    let result = GPU_MEMORY_POOL
                        .with_buffer_async(size, |buffer| async move {
                            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
                            tokio::time::sleep(std::time::Duration::from_millis(10)).await;

                            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
                            let mut mut_buffer = buffer;
                            mut_buffer.extend_from_slice(&vec![(task_id * 10 + i) as u8; 100]);

                            Ok((format!("Task {} item {}", task_id, i), mut_buffer))
                        })
                        .await;

                    match result {
                        Ok(data) => local_results.push(data),
                        Err(e) => println!("‚ùå Task {} item {} failed: {}", task_id, i, e),
                    }
                }

                println!(
                    "‚úÖ Task {} completed: {} results",
                    task_id,
                    local_results.len()
                );
                local_results
            })
        })
        .collect();

    // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    let all_results: Vec<_> = futures::future::join_all(tasks).await;
    let total_results: usize = all_results
        .iter()
        .map(|result| result.as_ref().map(|r| r.len()).unwrap_or(0))
        .sum();

    let elapsed = start_time.elapsed();
    println!(
        "üèÅ Concurrent test completed: {} total results in {:?}",
        total_results, elapsed
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞
    let final_stats = GPU_MEMORY_POOL.get_stats()?;
    println!(
        "üìä Final pool stats: {}/{} hits/misses, efficiency: {:.1}%",
        final_stats.hits,
        final_stats.misses,
        if final_stats.allocations > 0 {
            (final_stats.hits as f64 / final_stats.allocations as f64) * 100.0
        } else {
            0.0
        }
    );

    assert!(total_results > 0);
    assert!(final_stats.allocations >= total_results as u64);

    Ok(())
}

/// –¢–µ—Å—Ç adaptive batching —Å memory constraints
#[tokio::test]
async fn test_adaptive_batching_memory() -> Result<()> {
    let _ = tracing_subscriber::fmt::try_init();

    println!("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ adaptive batching —Å memory constraints");

    let config = EmbeddingConfig {
        model_name: "qwen3emb".to_string(),
        max_length: 128,
        batch_size: 16,
        use_gpu: true,
        ..Default::default()
    };

    let pipeline_config = PipelineConfig {
        max_concurrent_batches: 2,
        optimal_batch_size: 32,
        adaptive_batching: true,
        memory_pooling_enabled: true,
        ..Default::default()
    };

    // –°–æ–∑–¥–∞—ë–º pipeline —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å GPU
    let detector = ai::gpu_detector::GpuDetector::detect();
    if !detector.available {
        println!("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º adaptive batching —Ç–µ—Å—Ç");
        return Ok(());
    }

    let pipeline = match GpuPipelineManager::new(config, pipeline_config).await {
        Ok(p) => p,
        Err(e) => {
            println!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å pipeline: {}", e);
            return Ok(());
        }
    };

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    let test_scenarios = vec![
        (10, "small batch"),
        (50, "medium batch"),
        (150, "large batch"),
    ];

    for (batch_size, scenario_name) in test_scenarios {
        println!(
            "üß™ Testing scenario: {} ({} texts)",
            scenario_name, batch_size
        );

        let test_texts: Vec<String> = (0..batch_size)
            .map(|i| format!("Adaptive batch test text #{} for {}", i, scenario_name))
            .collect();

        let start = Instant::now();
        match pipeline.process_texts_optimized(test_texts).await {
            Ok(embeddings) => {
                let elapsed = start.elapsed();
                println!(
                    "‚úÖ {} completed: {} embeddings in {:?} ({:.1} texts/sec)",
                    scenario_name,
                    embeddings.len(),
                    elapsed,
                    embeddings.len() as f32 / elapsed.as_secs_f32()
                );
            }
            Err(e) => {
                println!("‚ùå {} failed: {}", scenario_name, e);
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É pipeline
        let stats = pipeline.get_stats().await;
        println!(
            "  üìä Pipeline stats: avg_batch={:.1}, memory_efficiency={:.1}%",
            stats.avg_batch_size,
            stats.memory_pool_efficiency() * 100.0
        );
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    pipeline.cleanup().await;

    Ok(())
}

/// Stress test –¥–ª—è memory system
#[tokio::test]
async fn test_memory_stress() -> Result<()> {
    let _ = tracing_subscriber::fmt::try_init();

    println!("üí™ Memory stress test");

    let iterations = 100;
    let max_size = 1024 * 1024; // 1MB max buffer

    let start_time = Instant::now();
    let mut successful_ops = 0;
    let mut failed_ops = 0;

    for i in 0..iterations {
        let size = 1024 + (i * 1024) % max_size; // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        let result = GPU_MEMORY_POOL.with_buffer(size, |buffer| {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –±—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã–º–∏
            let fill_value = (i % 256) as u8;
            for byte in buffer.iter_mut().take(1000) {
                *byte = fill_value;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
            let check_ok = buffer.iter().take(1000).all(|&b| b == fill_value);

            if check_ok {
                Ok(buffer.len())
            } else {
                Err(anyhow::anyhow!("Data integrity check failed"))
            }
        });

        match result {
            Ok(_) => successful_ops += 1,
            Err(_) => failed_ops += 1,
        }

        // –ü–µ—á–∞—Ç–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 –æ–ø–µ—Ä–∞—Ü–∏–π
        if (i + 1) % 25 == 0 {
            println!(
                "  üîÑ Progress: {}/{} operations ({} success, {} failed)",
                i + 1,
                iterations,
                successful_ops,
                failed_ops
            );
        }
    }

    let elapsed = start_time.elapsed();
    let ops_per_sec = iterations as f32 / elapsed.as_secs_f32();

    println!("üèÅ Stress test completed:");
    println!("  ‚è±Ô∏è Time: {:?}", elapsed);
    println!("  ‚úÖ Successful ops: {}/{}", successful_ops, iterations);
    println!("  ‚ùå Failed ops: {}", failed_ops);
    println!("  üöÄ Performance: {:.1} ops/sec", ops_per_sec);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞
    let final_stats = GPU_MEMORY_POOL.get_stats()?;
    println!(
        "  üìä Pool efficiency: {:.1}%",
        if final_stats.allocations > 0 {
            (final_stats.hits as f64 / final_stats.allocations as f64) * 100.0
        } else {
            0.0
        }
    );

    // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º
    assert!(
        successful_ops > iterations * 80 / 100,
        "Too many failed operations: {}/{}",
        failed_ops,
        iterations
    );

    Ok(())
}
