use anyhow::Result;
use std::collections::HashMap;
use std::path::PathBuf;
use tracing::{info, warn};

pub struct ModelRegistry {
    models_dir: PathBuf,
    available_models: HashMap<String, ModelInfo>,
}

#[derive(Debug, Clone)]
pub struct ModelInfo {
    pub name: String,
    pub model_type: ModelType,
    pub embedding_dim: usize,
    pub max_length: usize,
    pub description: String,
    pub is_default: bool,
}

#[derive(Debug, Clone, PartialEq)]
pub enum ModelType {
    Embedding,
    Reranker,
}

impl ModelRegistry {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–µ—Å—Ç—Ä –º–æ–¥–µ–ª–µ–π
    pub fn new(models_dir: PathBuf) -> Self {
        let mut registry = Self {
            models_dir,
            available_models: HashMap::new(),
        };

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        registry.register_default_models();
        registry
    }

    /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
    fn register_default_models(&mut self) {
        // Qwen3 –º–æ–¥–µ–ª–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ)
        self.register_model(ModelInfo {
            name: "qwen3emb".to_string(),
            model_type: ModelType::Embedding,
            embedding_dim: 1024,
            max_length: 512,
            description: "Qwen3 embedding model - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞".to_string(),
            is_default: true,
        });

        self.register_model(ModelInfo {
            name: "qwen3_reranker".to_string(),
            model_type: ModelType::Reranker,
            embedding_dim: 0, // Reranker –Ω–µ –∏–º–µ–µ—Ç embedding dim
            max_length: 512,
            description: "Qwen3 reranker - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ".to_string(),
            is_default: true,
        });
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å
    pub fn register_model(&mut self, model: ModelInfo) {
        info!(
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {} ({:?})",
            model.name, model.model_type
        );
        self.available_models.insert(model.name.clone(), model);
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
    pub fn get_model_info(&self, name: &str) -> Option<&ModelInfo> {
        self.available_models.get(name)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞
    pub fn get_default_model(&self, model_type: ModelType) -> Option<&ModelInfo> {
        self.available_models
            .values()
            .find(|model| model.model_type == model_type && model.is_default)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    pub fn get_model_path(&self, name: &str) -> PathBuf {
        self.models_dir.join(name)
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    pub fn is_model_available(&self, name: &str) -> bool {
        let model_path = self.get_model_path(name);
        let model_file = model_path.join("model.onnx");
        let tokenizer_file = model_path.join("tokenizer.json");

        model_file.exists() && tokenizer_file.exists()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–∏–ø—É
    pub fn get_available_models(&self, model_type: Option<ModelType>) -> Vec<&ModelInfo> {
        self.available_models
            .values()
            .filter(|model| {
                if let Some(ref desired_type) = model_type {
                    &model.model_type == desired_type
                } else {
                    true
                }
            })
            .filter(|model| self.is_model_available(&model.name))
            .collect()
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–µ–π
    pub fn diagnose_models(&self) -> Result<()> {
        info!("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...");

        let embedding_models = self.get_available_models(Some(ModelType::Embedding));
        let reranker_models = self.get_available_models(Some(ModelType::Reranker));

        info!("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ embedding –º–æ–¥–µ–ª–∏: {}", embedding_models.len());
        for model in &embedding_models {
            info!("  ‚úÖ {} - {}", model.name, model.description);
        }

        info!("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ reranker –º–æ–¥–µ–ª–∏: {}", reranker_models.len());
        for model in &reranker_models {
            info!("  ‚úÖ {} - {}", model.name, model.description);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if let Some(default_embedding) = self.get_default_model(ModelType::Embedding) {
            if self.is_model_available(&default_embedding.name) {
                info!(
                    "‚úÖ Embedding –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞: {}",
                    default_embedding.name
                );
            } else {
                warn!(
                    "‚ö†Ô∏è Embedding –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {}",
                    default_embedding.name
                );
            }
        }

        if let Some(default_reranker) = self.get_default_model(ModelType::Reranker) {
            if self.is_model_available(&default_reranker.name) {
                info!(
                    "‚úÖ Reranker –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞: {}",
                    default_reranker.name
                );
            } else {
                warn!(
                    "‚ö†Ô∏è Reranker –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {}",
                    default_reranker.name
                );
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
        let old_models_dir = PathBuf::from("crates/memory/models");
        if old_models_dir.exists() {
            warn!("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –º–æ–¥–µ–ª–µ–π: {:?}", old_models_dir);
            warn!(
                "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø–∞–ø–∫—É: {:?}",
                self.models_dir
            );
        }

        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–¥–µ–ª—è–º
    pub fn get_recommendations(&self) -> Vec<String> {
        let mut recommendations = Vec::new();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if let Some(default_embedding) = self.get_default_model(ModelType::Embedding) {
            if !self.is_model_available(&default_embedding.name) {
                recommendations.push(format!(
                    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ embedding –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {} –≤ –ø–∞–ø–∫—É {}",
                    default_embedding.name,
                    self.get_model_path(&default_embedding.name).display()
                ));
            }
        }

        if let Some(default_reranker) = self.get_default_model(ModelType::Reranker) {
            if !self.is_model_available(&default_reranker.name) {
                recommendations.push(format!(
                    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ reranker –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {} –≤ –ø–∞–ø–∫—É {}",
                    default_reranker.name,
                    self.get_model_path(&default_reranker.name).display()
                ));
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        let old_models_dir = PathBuf::from("crates/memory/models");
        if old_models_dir.exists() {
            recommendations.push(format!(
                "–£–¥–∞–ª–∏—Ç–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –º–æ–¥–µ–ª–µ–π: {:?} –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é: {:?}",
                old_models_dir, self.models_dir
            ));
        }

        recommendations
    }
}

lazy_static::lazy_static! {
    /// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –º–æ–¥–µ–ª–µ–π
    pub static ref MODEL_REGISTRY: ModelRegistry = {
        let models_dir = std::env::var("MAGRAY_MODELS_DIR")
            .map(PathBuf::from)
            .unwrap_or_else(|_| PathBuf::from("models"));

        ModelRegistry::new(models_dir)
    };
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::TempDir;

    #[test]
    fn test_model_registry() {
        let temp_dir = TempDir::new().unwrap();
        let registry = ModelRegistry::new(temp_dir.path().to_path_buf());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let default_embedding = registry.get_default_model(ModelType::Embedding);
        assert!(default_embedding.is_some());
        assert_eq!(default_embedding.unwrap().name, "qwen3emb");

        let default_reranker = registry.get_default_model(ModelType::Reranker);
        assert!(default_reranker.is_some());
        assert_eq!(default_reranker.unwrap().name, "qwen3_reranker");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        let qwen3_info = registry.get_model_info("qwen3emb");
        assert!(qwen3_info.is_some());
        assert_eq!(qwen3_info.unwrap().embedding_dim, 1024);
    }

    #[test]
    fn test_model_availability() {
        let temp_dir = TempDir::new().unwrap();
        let registry = ModelRegistry::new(temp_dir.path().to_path_buf());

        // –ú–æ–¥–µ–ª—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
        assert!(!registry.is_model_available("qwen3emb"));

        // –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
        let model_dir = temp_dir.path().join("qwen3emb");
        std::fs::create_dir_all(&model_dir).unwrap();
        std::fs::write(model_dir.join("model.onnx"), b"dummy").unwrap();
        std::fs::write(model_dir.join("tokenizer.json"), b"{}").unwrap();

        // –¢–µ–ø–µ—Ä—å –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞
        assert!(registry.is_model_available("qwen3emb"));
    }
}
