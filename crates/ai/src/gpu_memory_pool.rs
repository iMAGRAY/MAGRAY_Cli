use std::collections::VecDeque;
use std::sync::{Arc, Mutex};
use anyhow::Result;
use tracing::{info, debug, warn};

pub struct GpuMemoryPool {
    /// –ü—É–ª –±—É—Ñ–µ—Ä–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    pools: Arc<Mutex<Vec<BufferPool>>>,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
    max_pool_size: usize,
    /// –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤
    current_size: Arc<Mutex<usize>>,
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    stats: Arc<Mutex<PoolStats>>,
}

struct BufferPool {
    size: usize,
    buffers: VecDeque<Vec<u8>>,
    max_buffers: usize,
}

#[derive(Debug, Default, Clone)]
pub struct PoolStats {
    pub allocations: u64,
    pub deallocations: u64,
    pub hits: u64,
    pub misses: u64,
    pub current_buffers: usize,
    pub peak_memory_usage: usize,
}

impl GpuMemoryPool {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—É–ª –ø–∞–º—è—Ç–∏
    pub fn new(max_pool_size: usize) -> Self {
        info!("üèä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPU memory pool (max: {} MB)", max_pool_size / 1024 / 1024);
        
        // –°–æ–∑–¥–∞—ë–º –ø—É–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ (—Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏)
        let mut pools = Vec::new();
        let sizes = vec![
            1024,           // 1KB
            4 * 1024,       // 4KB
            16 * 1024,      // 16KB
            64 * 1024,      // 64KB
            256 * 1024,     // 256KB
            1024 * 1024,    // 1MB
            4 * 1024 * 1024,  // 4MB
            16 * 1024 * 1024, // 16MB
        ];
        
        for size in sizes {
            let max_buffers = (max_pool_size / size / 8).max(2); // –î–µ–ª–∏–º –Ω–∞ 8 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            pools.push(BufferPool {
                size,
                buffers: VecDeque::with_capacity(max_buffers),
                max_buffers,
            });
        }
        
        Self {
            pools: Arc::new(Mutex::new(pools)),
            max_pool_size,
            current_size: Arc::new(Mutex::new(0)),
            stats: Arc::new(Mutex::new(PoolStats::default())),
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –±—É—Ñ–µ—Ä –∏–∑ –ø—É–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
    pub fn acquire_buffer(&self, required_size: usize) -> Result<Vec<u8>> {
        let mut stats = self.stats.lock()
            .map_err(|e| anyhow::anyhow!("Failed to acquire stats lock: {}", e))?;
        stats.allocations += 1;
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä (–±–ª–∏–∂–∞–π—à–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏)
        let actual_size = required_size.next_power_of_two();
        
        let mut pools = self.pools.lock()
            .map_err(|e| anyhow::anyhow!("Failed to acquire pools lock: {}", e))?;
        
        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–ª
        for pool in pools.iter_mut() {
            if pool.size >= actual_size && pool.size <= actual_size * 2 {
                // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –ø—É–ª–∞
                if let Some(buffer) = pool.buffers.pop_front() {
                    stats.hits += 1;
                    debug!("‚úÖ –í–∑—è—Ç –±—É—Ñ–µ—Ä {}KB –∏–∑ –ø—É–ª–∞", pool.size / 1024);
                    return Ok(buffer);
                }
                
                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä –µ—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç–æ–π
                stats.misses += 1;
                let current = *self.current_size.lock()
                    .map_err(|_| anyhow::anyhow!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞"))?;
                
                if current + pool.size <= self.max_pool_size {
                    let buffer = vec![0u8; pool.size];
                    *self.current_size.lock()
                        .map_err(|_| anyhow::anyhow!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞"))? += pool.size;
                    stats.current_buffers += 1;
                    
                    if current + pool.size > stats.peak_memory_usage {
                        stats.peak_memory_usage = current + pool.size;
                    }
                    
                    debug!("üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä {}KB", pool.size / 1024);
                    return Ok(buffer);
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–ª, —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
        warn!("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä {}KB (–≤–Ω–µ –ø—É–ª–∞)", actual_size / 1024);
        Ok(vec![0u8; actual_size])
    }
    
    /// –í–µ—Ä–Ω—É—Ç—å –±—É—Ñ–µ—Ä –≤ –ø—É–ª
    pub fn release_buffer(&self, mut buffer: Vec<u8>) -> Result<()> {
        let mut stats = self.stats.lock()
            .map_err(|e| anyhow::anyhow!("Failed to acquire stats lock: {}", e))?;
        stats.deallocations += 1;
        
        let size = buffer.capacity();
        buffer.clear(); // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        
        let mut pools = self.pools.lock()
            .map_err(|e| anyhow::anyhow!("Failed to acquire pools lock: {}", e))?;
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–ª
        for pool in pools.iter_mut() {
            if pool.size == size && pool.buffers.len() < pool.max_buffers {
                pool.buffers.push_back(buffer);
                debug!("‚ôªÔ∏è –ë—É—Ñ–µ—Ä {}KB –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –ø—É–ª", size / 1024);
                return Ok(());
            }
        }
        
        // –ï—Å–ª–∏ –ø—É–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ—Å—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        let mut current = self.current_size.lock()
            .map_err(|e| anyhow::anyhow!("Failed to acquire current_size lock: {}", e))?;
        *current = current.saturating_sub(size);
        drop(current);
        stats.current_buffers = stats.current_buffers.saturating_sub(1);
        debug!("üóëÔ∏è –ë—É—Ñ–µ—Ä {}KB —É–¥–∞–ª—ë–Ω (–ø—É–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω)", size / 1024);
        Ok(())
    }
    
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –±—É—Ñ–µ—Ä–æ–º
    pub fn with_buffer<F, R>(&self, size: usize, f: F) -> Result<R>
    where
        F: FnOnce(&mut Vec<u8>) -> Result<R>,
    {
        let mut buffer = self.acquire_buffer(size)?;
        let result = f(&mut buffer);
        let _ = self.release_buffer(buffer); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É release –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        result
    }
    
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è with_buffer
    pub async fn with_buffer_async<F, Fut, R>(&self, size: usize, f: F) -> Result<R>
    where
        F: FnOnce(Vec<u8>) -> Fut,
        Fut: std::future::Future<Output = Result<(R, Vec<u8>)>>,
    {
        let buffer = self.acquire_buffer(size)?;
        let (result, returned_buffer) = f(buffer).await?;
        let _ = self.release_buffer(returned_buffer); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É release –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        Ok(result)
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±—É—Ñ–µ—Ä—ã
    pub fn clear_unused(&self) -> Result<()> {
        let mut pools = self.pools.lock()
            .map_err(|e| anyhow::anyhow!("Failed to acquire pools lock: {}", e))?;
        let mut freed = 0;
        
        for pool in pools.iter_mut() {
            let count = pool.buffers.len();
            if count > 0 {
                freed += count * pool.size;
                pool.buffers.clear();
            }
        }
        
        if freed > 0 {
            *self.current_size.lock()
                .map_err(|e| anyhow::anyhow!("Failed to update current_size: {}", e))? -= freed;
            let mut stats = self.stats.lock()
                .map_err(|e| anyhow::anyhow!("Failed to update stats: {}", e))?;
            stats.current_buffers = 0;
            info!("üßπ –û—á–∏—â–µ–Ω–æ {} MB –∏–∑ –ø—É–ª–∞ –ø–∞–º—è—Ç–∏", freed / 1024 / 1024);
        }
        Ok(())
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    pub fn get_stats(&self) -> Result<PoolStats> {
        let stats = self.stats.lock()
            .map_err(|e| anyhow::anyhow!("Failed to acquire stats lock: {}", e))?
            .clone();
        Ok(stats)
    }
    
    /// –í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    pub fn print_stats(&self) -> Result<()> {
        let stats = self.get_stats()?;
        let current = *self.current_size.lock()
            .map_err(|e| anyhow::anyhow!("Failed to acquire current_size lock: {}", e))?;
        
        info!("üìä GPU Memory Pool —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        info!("  - –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {} MB / {} MB", current / 1024 / 1024, self.max_pool_size / 1024 / 1024);
        info!("  - –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {} MB", stats.peak_memory_usage / 1024 / 1024);
        info!("  - Allocations: {} (hits: {}, misses: {})", 
            stats.allocations, stats.hits, stats.misses);
        info!("  - Hit rate: {:.1}%", 
            if stats.allocations > 0 { 
                (stats.hits as f64 / stats.allocations as f64) * 100.0 
            } else { 
                0.0 
            });
        info!("  - –¢–µ–∫—É—â–∏—Ö –±—É—Ñ–µ—Ä–æ–≤: {}", stats.current_buffers);
        Ok(())
    }
}

lazy_static::lazy_static! {
    /// –ì–ª–æ–±–∞–ª—å–Ω—ã–π GPU memory pool
    pub static ref GPU_MEMORY_POOL: GpuMemoryPool = {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π GPU –ø–∞–º—è—Ç–∏
        let pool_size = if let Ok(detector) = std::panic::catch_unwind(|| {
            crate::gpu_detector::GpuDetector::detect()
        }) {
            if detector.available {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º 25% –æ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏ GPU –¥–ª—è –ø—É–ª–∞
                let free_memory = detector.total_free_memory_mb() as usize;
                (free_memory * 1024 * 1024 / 4).min(2 * 1024 * 1024 * 1024) // –ú–∞–∫—Å–∏–º—É–º 2GB
            } else {
                512 * 1024 * 1024 // 512MB –¥–ª—è CPU
            }
        } else {
            512 * 1024 * 1024 // 512MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };
        
        GpuMemoryPool::new(pool_size)
    };
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_memory_pool() {
        let pool = GpuMemoryPool::new(10 * 1024 * 1024); // 10MB
        
        // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        let result = pool.with_buffer(1024, |buffer| {
            buffer.extend_from_slice(&[1, 2, 3, 4]);
            Ok(buffer.len())
        });
        assert!(result.is_ok());
        
        // –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        let _ = pool.acquire_buffer(1024).expect("Failed to acquire buffer");
        let _ = pool.acquire_buffer(1024).expect("Failed to acquire buffer");
        
        let stats = pool.get_stats().expect("Failed to get stats");
        assert!(stats.allocations >= 2);
        
        let _ = pool.print_stats(); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É print –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    }
}