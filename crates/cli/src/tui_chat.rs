use crate::services;
use anyhow::Result;
use crossterm::{
    event::{self, DisableMouseCapture, EnableMouseCapture, Event, KeyCode, KeyModifiers},
    execute,
    terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},
};
use ratatui::{
    backend::CrosstermBackend,
    layout::{Alignment, Constraint, Direction, Layout, Rect},
    style::{Color, Modifier, Style},
    text::{Line, Span},
    widgets::{Block, Borders, List, ListItem, Paragraph, Wrap},
    Frame, Terminal,
};
use std::io;
use std::sync::{Arc, RwLock};
use std::time::Duration;
use tokio::time::{timeout, Duration as TokioDuration};

/// –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
#[derive(Debug, Clone)]
struct ChatMessage {
    role: String,
    content: String,
    timestamp: String,
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ TUI —á–∞—Ç–∞
struct TuiChatState {
    messages: Vec<ChatMessage>,
    input: String,
    cursor_position: usize,
    scroll_offset: usize,
    is_processing: bool,
}

impl TuiChatState {
    fn new() -> Self {
        let mut state = Self {
            messages: Vec::new(),
            input: String::new(),
            cursor_position: 0,
            scroll_offset: 0,
            is_processing: false,
        };

        state.add_message(
            "System".to_string(),
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MAGRAY CLI TUI Chat! \n\n‚ú® –≠—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —á–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–∫ –≤ Claude Code!\n\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: Enter\n‚Ä¢ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: Page Up/Down\n‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: —Å—Ç—Ä–µ–ª–∫–∏\n‚Ä¢ –í—ã—Ö–æ–¥: ESC –∏–ª–∏ Ctrl+C\n\nü§ñ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:".to_string(),
        );

        state
    }

    fn add_message(&mut self, role: String, content: String) {
        self.messages.push(ChatMessage {
            role,
            content,
            timestamp: chrono::Local::now().format("%H:%M:%S").to_string(),
        });
    }

    /// Converts character position to byte index for UTF-8 string operations
    fn char_to_byte_index(&self, char_pos: usize) -> usize {
        self.input
            .char_indices()
            .nth(char_pos)
            .map(|(byte_idx, _)| byte_idx)
            .unwrap_or(self.input.len())
    }

    /// Converts byte index to character position for cursor positioning
    #[allow(dead_code)]
    fn byte_to_char_index(&self, byte_idx: usize) -> usize {
        self.input[..byte_idx.min(self.input.len())].chars().count()
    }

    /// Get the maximum cursor position (character count)
    fn max_cursor_position(&self) -> usize {
        self.input.chars().count()
    }

    /// Safely insert character at cursor position
    fn insert_char(&mut self, c: char) {
        let byte_idx = self.char_to_byte_index(self.cursor_position);
        self.input.insert(byte_idx, c);
        self.cursor_position += 1;
    }

    /// Safely remove character before cursor position
    fn backspace(&mut self) {
        if self.cursor_position > 0 {
            self.cursor_position -= 1;
            let byte_idx = self.char_to_byte_index(self.cursor_position);
            if let Some(ch) = self.input.chars().nth(self.cursor_position) {
                let char_len = ch.len_utf8();
                for _ in 0..char_len {
                    if byte_idx < self.input.len() {
                        self.input.remove(byte_idx);
                    }
                }
            }
        }
    }

    /// Move cursor left by one character
    fn move_cursor_left(&mut self) {
        if self.cursor_position > 0 {
            self.cursor_position -= 1;
        }
    }

    /// Move cursor right by one character
    fn move_cursor_right(&mut self) {
        let max_pos = self.max_cursor_position();
        if self.cursor_position < max_pos {
            self.cursor_position += 1;
        }
    }
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç TUI —á–∞—Ç
pub async fn run_tui_chat(service: &crate::services::OrchestrationService) -> Result<()> {
    println!("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TUI —á–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...");
    println!("üì± –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —á–∞—Ç –∫–∞–∫ –≤ Claude Code...");

    // –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    enable_raw_mode()
        .map_err(|e| anyhow::format_err!("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å raw mode —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {}", e))?;

    let mut stdout = io::stdout();
    execute!(stdout, EnterAlternateScreen, EnableMouseCapture)
        .map_err(|e| anyhow::format_err!("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª: {}", e))?;

    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)
        .map_err(|e| anyhow::format_err!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª: {}", e))?;

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    let mut state = TuiChatState::new();

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    loop {
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI
        if let Err(e) = terminal.draw(|f| render_ui(f, &state)) {
            return Err(anyhow::format_err!("Terminal draw failed: {}", e));
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        if event::poll(Duration::from_millis(100))? {
            if let Event::Key(key) = event::read()? {
                // –í—ã—Ö–æ–¥ (Ctrl+C –∏–ª–∏ ESC)
                if (key.modifiers.contains(KeyModifiers::CONTROL) && key.code == KeyCode::Char('c'))
                    || key.code == KeyCode::Esc
                {
                    break;
                }

                if !state.is_processing {
                    match key.code {
                        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        KeyCode::Enter => {
                            if !state.input.trim().is_empty() {
                                let message = state.input.clone();
                                state.add_message("You".to_string(), message.clone());
                                state.input.clear();
                                state.cursor_position = 0;
                                state.is_processing = true;

                                // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                                terminal.draw(|f| render_ui(f, &state))?;

                                // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å timeout –∑–∞—â–∏—Ç–æ–π
                                let request_future = service.process_user_request(&message);
                                match timeout(TokioDuration::from_secs(60), request_future).await {
                                    Ok(Ok(response)) => {
                                        state.add_message("Assistant".to_string(), response);
                                    }
                                    Ok(Err(e)) => {
                                        state.add_message(
                                            "Error".to_string(),
                                            format!("–û—à–∏–±–∫–∞: {e}"),
                                        );
                                    }
                                    Err(_) => {
                                        state.add_message(
                                            "Error".to_string(),
                                            "Timeout: –ó–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥".to_string(),
                                        );
                                    }
                                }

                                state.is_processing = false;
                            }
                        }
                        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
                        KeyCode::Left => {
                            if state.cursor_position > 0 {
                                state.cursor_position -= 1;
                            }
                        }
                        KeyCode::Right => {
                            if state.cursor_position < state.input.len() {
                                state.cursor_position += 1;
                            }
                        }
                        KeyCode::Home => {
                            state.cursor_position = 0;
                        }
                        KeyCode::End => {
                            state.cursor_position = state.input.len();
                        }
                        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                        KeyCode::Backspace => {
                            if state.cursor_position > 0 {
                                state.input.remove(state.cursor_position - 1);
                                state.cursor_position -= 1;
                            }
                        }
                        KeyCode::Delete => {
                            if state.cursor_position < state.input.len() {
                                state.input.remove(state.cursor_position);
                            }
                        }
                        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
                        KeyCode::PageUp => {
                            state.scroll_offset = state.scroll_offset.saturating_sub(5);
                        }
                        KeyCode::PageDown => {
                            state.scroll_offset = state.scroll_offset.saturating_add(5);
                        }
                        // –í–≤–æ–¥ —Å–∏–º–≤–æ–ª–æ–≤
                        KeyCode::Char(c) => {
                            state.input.insert(state.cursor_position, c);
                            state.cursor_position += 1;
                        }
                        _ => {}
                    }
                }
            }
        }
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    let cleanup_result = (|| -> Result<()> {
        disable_raw_mode()?;
        execute!(
            terminal.backend_mut(),
            LeaveAlternateScreen,
            DisableMouseCapture
        )?;
        terminal.show_cursor()?;
        Ok(())
    })();

    if let Err(e) = cleanup_result {
        eprintln!("‚ö†Ô∏è  Warning: Terminal cleanup error: {e}");
        // –ü–æ–ø—ã—Ç–∫–∞ force cleanup
        let _ = disable_raw_mode();
    }

    Ok(())
}

/// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI
fn render_ui(f: &mut Frame, state: &TuiChatState) {
    let chunks = Layout::default()
        .direction(Direction::Vertical)
        .constraints([
            Constraint::Length(3), // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Constraint::Min(1),    // –ß–∞—Ç
            Constraint::Length(3), // –í–≤–æ–¥
            Constraint::Length(1), // –°—Ç–∞—Ç—É—Å
        ])
        .split(f.area());

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    let header = Paragraph::new(Line::from(vec![
        Span::styled(
            "ü§ñ MAGRAY CLI",
            Style::default()
                .fg(Color::Cyan)
                .add_modifier(Modifier::BOLD),
        ),
        Span::raw(" | "),
        Span::styled(
            "üí¨ Claude Code-Style Chat",
            Style::default().fg(Color::Green),
        ),
        Span::raw(" | "),
        Span::styled("ESC or Ctrl+C to exit", Style::default().fg(Color::Gray)),
    ]))
    .block(Block::default().borders(Borders::ALL))
    .alignment(Alignment::Center);
    f.render_widget(header, chunks[0]);

    // –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
    render_chat_history(f, chunks[1], state);

    // –ü–æ–ª–µ –≤–≤–æ–¥–∞
    render_input_field(f, chunks[2], state);

    // –°—Ç–∞—Ç—É—Å –±–∞—Ä
    render_status_bar(f, chunks[3], state);
}

/// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
fn render_chat_history(f: &mut Frame, area: Rect, state: &TuiChatState) {
    let messages: Vec<ListItem> = state
        .messages
        .iter()
        .skip(state.scroll_offset)
        .flat_map(|msg| {
            let style = match msg.role.as_str() {
                "You" => Style::default().fg(Color::Cyan),
                "Assistant" => Style::default().fg(Color::Green),
                "System" => Style::default().fg(Color::Yellow),
                "Error" => Style::default().fg(Color::Red),
                _ => Style::default(),
            };

            let mut lines = vec![];

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            lines.push(ListItem::new(Line::from(vec![
                Span::styled(
                    format!("[{}] ", msg.timestamp),
                    Style::default().fg(Color::Gray),
                ),
                Span::styled(
                    format!("{}: ", msg.role),
                    style.add_modifier(Modifier::BOLD),
                ),
            ])));

            // –ö–æ–Ω—Ç–µ–Ω—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            let max_width = (area.width - 4) as usize;
            for line in msg.content.lines() {
                if line.len() <= max_width {
                    lines.push(ListItem::new(Line::from(Span::styled(
                        format!("  {line}"),
                        style,
                    ))));
                } else {
                    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    for chunk in line.chars().collect::<Vec<char>>().chunks(max_width) {
                        lines.push(ListItem::new(Line::from(Span::styled(
                            format!("  {}", chunk.iter().collect::<String>()),
                            style,
                        ))));
                    }
                }
            }

            // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            lines.push(ListItem::new(Line::from("")));

            lines
        })
        .collect();

    let messages_list = List::new(messages).block(
        Block::default()
            .borders(Borders::ALL)
            .title("üí¨ Chat History (Claude Code Style)"),
    );

    f.render_widget(messages_list, area);
}

/// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
fn render_input_field(f: &mut Frame, area: Rect, state: &TuiChatState) {
    let input = Paragraph::new(state.input.as_str())
        .style(if state.is_processing {
            Style::default().fg(Color::Gray)
        } else {
            Style::default().fg(Color::White)
        })
        .block(
            Block::default()
                .borders(Borders::ALL)
                .title(if state.is_processing {
                    "üîÑ AI Processing..."
                } else {
                    "‚úçÔ∏è Your Message (Enter to send)"
                })
                .border_style(if state.is_processing {
                    Style::default().fg(Color::Gray)
                } else {
                    Style::default().fg(Color::Cyan)
                }),
        )
        .wrap(Wrap { trim: false });

    f.render_widget(input, area);

    // –ö—É—Ä—Å–æ—Ä
    if !state.is_processing && area.width > 2 {
        let cursor_x = area.x + 1 + (state.cursor_position as u16).min(area.width - 2);
        let cursor_y = area.y + 1;
        f.set_cursor_position((cursor_x, cursor_y));
    }
}

/// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
fn render_status_bar(f: &mut Frame, area: Rect, state: &TuiChatState) {
    let status = Line::from(vec![
        Span::styled(
            format!("Messages: {} ", state.messages.len()),
            Style::default().fg(Color::Gray),
        ),
        Span::raw("| "),
        if state.is_processing {
            Span::styled("Processing...", Style::default().fg(Color::Yellow))
        } else {
            Span::styled("Ready", Style::default().fg(Color::Green))
        },
        Span::raw(" | "),
        Span::styled(
            "‚Üë‚Üì scroll | Enter send | ESC/Ctrl+C exit",
            Style::default().fg(Color::DarkGray),
        ),
    ]);

    let status_bar = Paragraph::new(status);
    f.render_widget(status_bar, area);
}

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
struct AsyncServiceState {
    service: Arc<RwLock<Option<Arc<services::OrchestrationService>>>>,
    is_initializing: Arc<RwLock<bool>>,
    init_error: Arc<RwLock<Option<String>>>,
}

impl AsyncServiceState {
    fn new() -> Self {
        Self {
            service: Arc::new(RwLock::new(None)),
            is_initializing: Arc::new(RwLock::new(true)),
            init_error: Arc::new(RwLock::new(None)),
        }
    }

    async fn start_initialization(&self) {
        let service_clone = Arc::clone(&self.service);
        let is_initializing_clone = Arc::clone(&self.is_initializing);
        let init_error_clone = Arc::clone(&self.init_error);

        tokio::spawn(async move {
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å OrchestrationService —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            let service_future = crate::create_orchestrator_service();
            match timeout(TokioDuration::from_secs(10), service_future).await {
                Ok(Ok(service)) => {
                    if let Ok(mut service_lock) = service_clone.write() {
                        *service_lock = Some(Arc::new(service));
                    }
                }
                Ok(Err(e)) => {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
                    match services::OrchestrationService::with_llm_fallback().await {
                        Ok(fallback_service) => {
                            if let Ok(mut service_lock) = service_clone.write() {
                                *service_lock = Some(Arc::new(fallback_service));
                            }
                        }
                        Err(fallback_err) => {
                            if let Ok(mut error_lock) = init_error_clone.write() {
                                *error_lock = Some(format!(
                                    "Failed to initialize: {e} (fallback: {fallback_err})"
                                ));
                            }
                        }
                    }
                }
                Err(_) => {
                    // –¢–∞–π–º–∞—É—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                    match services::OrchestrationService::with_llm_fallback().await {
                        Ok(fallback_service) => {
                            if let Ok(mut service_lock) = service_clone.write() {
                                *service_lock = Some(Arc::new(fallback_service));
                            }
                        }
                        Err(fallback_err) => {
                            if let Ok(mut error_lock) = init_error_clone.write() {
                                *error_lock = Some(format!(
                                    "Initialization timeout (fallback: {fallback_err})"
                                ));
                            }
                        }
                    }
                }
            }

            // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if let Ok(mut init_lock) = is_initializing_clone.write() {
                *init_lock = false;
            }
        });
    }
}

/// –ó–∞–ø—É—Å–∫ TUI —á–∞—Ç–∞ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–∞
pub async fn run_tui_chat_with_async_init() -> Result<()> {
    // –û—á–∏—Å—Ç–∏–º —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π TUI
    print!("\x1b[2J\x1b[H"); // Clear screen and move cursor to home
    std::io::Write::flush(&mut std::io::stdout()).ok();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    enable_raw_mode().map_err(|e| anyhow::anyhow!("Failed to enable raw mode: {}", e))?;
    let mut stdout = io::stdout();
    execute!(stdout, EnterAlternateScreen, EnableMouseCapture)
        .map_err(|e| anyhow::anyhow!("Failed to setup terminal: {}", e))?;
    let backend = CrosstermBackend::new(stdout);
    let mut terminal =
        Terminal::new(backend).map_err(|e| anyhow::anyhow!("Failed to create terminal: {}", e))?;

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
    let mut state = TuiChatState::new();
    state.add_message(
        "System".to_string(),
        "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAGRAY AI —Å–∏—Å—Ç–µ–º—ã...\n‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ..."
            .to_string(),
    );

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    let async_state = AsyncServiceState::new();
    async_state.start_initialization().await;

    let result = run_tui_loop(&mut terminal, &mut state, &async_state).await;

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    disable_raw_mode().ok();
    execute!(
        terminal.backend_mut(),
        LeaveAlternateScreen,
        DisableMouseCapture
    )
    .ok();

    result
}

/// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª TUI —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
async fn run_tui_loop(
    terminal: &mut Terminal<CrosstermBackend<io::Stdout>>,
    state: &mut TuiChatState,
    async_state: &AsyncServiceState,
) -> Result<()> {
    let mut service_ready = false;
    let mut last_init_check = std::time::Instant::now();

    loop {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 500ms
        if !service_ready && last_init_check.elapsed() >= std::time::Duration::from_millis(500) {
            last_init_check = std::time::Instant::now();

            if let Ok(is_initializing) = async_state.is_initializing.read() {
                if !*is_initializing {
                    if let Ok(error) = async_state.init_error.read() {
                        if let Some(err_msg) = &*error {
                            state.add_message(
                                "System".to_string(),
                                format!(
                                    "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {err_msg}\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã"
                                ),
                            );
                        } else {
                            state.add_message(
                                "System".to_string(),
                                "‚úÖ AI —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!\nüí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:"
                                    .to_string(),
                            );
                        }
                    }
                    service_ready = true;
                }
            }
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        terminal.draw(|f| {
            render_ui(f, state);
        })?;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        if event::poll(Duration::from_millis(100))? {
            if let Event::Key(key) = event::read()? {
                if (key.modifiers.contains(KeyModifiers::CONTROL) && key.code == KeyCode::Char('c'))
                    || key.code == KeyCode::Esc
                {
                    break;
                }

                if !state.is_processing {
                    match key.code {
                        KeyCode::Enter => {
                            if !state.input.trim().is_empty() {
                                let message = state.input.clone();
                                state.add_message("You".to_string(), message.clone());
                                state.input.clear();
                                state.cursor_position = 0;
                                state.is_processing = true;

                                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                                if let Ok(service_lock) = async_state.service.read() {
                                    if let Some(service) = &*service_lock {
                                        let service_clone = Arc::clone(service);
                                        let response =
                                            process_message_async(service_clone, message).await;
                                        state.add_message("AI".to_string(), response);
                                    } else {
                                        state.add_message(
                                            "AI".to_string(),
                                            "–°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.".to_string(),
                                        );
                                    }
                                }
                                state.is_processing = false;
                            }
                        }
                        KeyCode::Char(c) => {
                            // Use UTF-8 safe character insertion
                            state.insert_char(c);
                        }
                        KeyCode::Backspace => {
                            // Use UTF-8 safe backspace operation
                            state.backspace();
                        }
                        KeyCode::Left => {
                            // Move cursor left by one character (UTF-8 safe)
                            state.move_cursor_left();
                        }
                        KeyCode::Right => {
                            // Move cursor right by one character (UTF-8 safe)
                            state.move_cursor_right();
                        }
                        KeyCode::PageUp => {
                            if state.scroll_offset > 0 {
                                state.scroll_offset -= 1;
                            }
                        }
                        KeyCode::PageDown => {
                            if state.scroll_offset < state.messages.len().saturating_sub(1) {
                                state.scroll_offset += 1;
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
    }

    Ok(())
}

/// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è TUI (–±–µ–∑ workflow –ª–æ–≥–æ–≤)
async fn process_message_async(
    service: Arc<services::OrchestrationService>,
    message: String,
) -> String {
    match timeout(
        TokioDuration::from_secs(30),
        service.process_tui_message(&message),
    )
    .await
    {
        Ok(Ok(response)) => response,
        Ok(Err(e)) => format!("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"),
        Err(_) => "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫)".to_string(),
    }
}
