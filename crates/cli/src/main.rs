use anyhow::Result;
use clap::{Parser, Subcommand, CommandFactory};
use common::init_structured_logging;
use console::{style, Term};
use indicatif::ProgressStyle;
use llm::LlmClient;
use std::io::{self, Write};
use std::sync::Arc;
use std::time::Duration;
use tokio::time::sleep;
use common::{events, topics};
use serde_json::json;

use ai::{ModelType, MODEL_REGISTRY};

mod commands;
mod health_checks;
mod progress;
mod util;

#[cfg(test)]
mod status_tests;

use cli::agent_traits::AgentResponse;
use cli::agent_traits::{RequestContext, RequestProcessorTrait};
use cli::unified_agent_v2::UnifiedAgentV2;
use commands::{GpuCommand, MemoryCommand, ModelsCommand, ToolsCommand, SmartCommand, TasksCommand};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
static ROBOT_ICON: AnimatedIcon = AnimatedIcon::new(&["[AI]", "[‚ñ≤I]", "[‚óèI]", "[‚ô¶I]"]);
static USER_ICON: &str = "[‚ñ∫]";

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ASCII –∏–∫–æ–Ω–∫–∏
struct AnimatedIcon {
    frames: &'static [&'static str],
}

impl AnimatedIcon {
    const fn new(frames: &'static [&'static str]) -> Self {
        Self { frames }
    }

    fn get_frame(&self, index: usize) -> &'static str {
        self.frames[index % self.frames.len()]
    }
}

#[derive(Parser)]
#[command(name = "magray")]
#[command(about = "[AI] MAGRAY - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π CLI –∞–≥–µ–Ω—Ç")]
#[command(version = "0.1.0")]
struct Cli {
    #[command(subcommand)]
    command: Option<Commands>,
}

#[derive(Subcommand)]
enum Commands {
    /// [‚ñ∫] –ß–∞—Ç —Å LLM –º–æ–¥–µ–ª—å—é
    Chat {
        /// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)
        message: Option<String>,
    },
    /// [‚óè] –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –∫—Ä–∞—Å–∏–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    Read {
        /// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        path: String,
    },
    /// [‚ñ∫] –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
    Write {
        /// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        path: String,
        /// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content: String,
    },
    /// [‚óè] –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    List {
        /// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
        path: Option<String>,
    },
    /// [AI] –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    Tool {
        /// –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
        action: String,
    },
    /// [‚òÖ] –£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–±–µ–∑ LLM –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ)
    Smart(SmartCommand),
    /// [üéÆ] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
    Gpu(GpuCommand),
    /// [üß†] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏
    Memory(MemoryCommand),
    /// [üì¶] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ AI
    Models(ModelsCommand),
    /// [üõ†] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (–≤–∫–ª—é—á–∞—è MCP)
    Tools(ToolsCommand),
    /// [‚òë] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
    Tasks(TasksCommand),
    /// [üè•] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    Health,
    /// [üìä] –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    Status,
    /// [ü§ñ] –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    LlmStatus,
    /// [üìà] –ü–æ–∫–∞–∑–∞—Ç—å performance –º–µ—Ç—Ä–∏–∫–∏ DI —Å–∏—Å—Ç–µ–º—ã
    Performance,
    /// [üîí] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ (–∞—É–¥–∏—Ç/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
    Policy {
        /// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
        #[arg(long)]
        list: bool,
        /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ Allow –¥–ª—è shell_exec —á–µ—Ä–µ–∑ env JSON (–¥–µ–º–æ)
        #[arg(long)]
        allow_shell: bool,
    },
}

#[tokio::main]
async fn main() -> Result<()> {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    init_structured_logging()?;

    let cli = Cli::parse();

    // –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–≤ —Ç–µ—Å—Ç–∞—Ö –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ MAGRAY_NO_ANIM)
    if std::env::var("MAGRAY_NO_ANIM").is_err() {
        show_welcome_animation().await?;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ensure_default_models_installed_interactive()?;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ONNX Runtime –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    ensure_ort_installed_interactive()?;

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300—Å)
    let top_timeout_secs: u64 = std::env::var("MAGRAY_CMD_TIMEOUT")
        .ok()
        .and_then(|s| s.parse().ok())
        .unwrap_or(300);

    use tokio::time::{timeout, Duration};

    let exec_fut = async {
        // Publish intent event for observability
        let cmd_name = match &cli.command {
            Some(Commands::Chat { .. }) => "chat",
            Some(Commands::Read { .. }) => "read",
            Some(Commands::Write { .. }) => "write",
            Some(Commands::List { .. }) => "list",
            Some(Commands::Tool { .. }) => "tool",
            Some(Commands::Smart(_)) => "smart",
            Some(Commands::Gpu(_)) => "gpu",
            Some(Commands::Memory(_)) => "memory",
            Some(Commands::Models(_)) => "models",
            Some(Commands::Tasks(_)) => "tasks",
            Some(Commands::Health) => "health",
            Some(Commands::Status) => "status",
            Some(Commands::LlmStatus) => "llm_status",
            Some(Commands::Performance) => "performance",
            Some(Commands::Policy { .. }) => "policy",
            Some(Commands::Tools(_)) => "tools",
            None => "help",
        };
        tokio::spawn(events::publish(topics::TOPIC_INTENT, json!({"command": cmd_name})));

        match cli.command {
            Some(Commands::Chat { message }) => {
                handle_chat(message).await?
            }
            Some(Commands::Read { path }) => {
                let agent = create_unified_agent_v2().await?;
                let message = format!("–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª {path}");
                let response = process_agent_message(&agent, &message).await?;
                display_response(response).await;
            }
            Some(Commands::Write { path, content }) => {
                let agent = create_unified_agent_v2().await?;
                let message = format!("—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª {path} —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {content}");
                let response = process_agent_message(&agent, &message).await?;
                display_response(response).await;
            }
            Some(Commands::List { path }) => {
                let agent = create_unified_agent_v2().await?;
                let message = format!("–ø–æ–∫–∞–∂–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {}", path.as_deref().unwrap_or("."));
                let response = process_agent_message(&agent, &message).await?;
                display_response(response).await;
            }
            Some(Commands::Tool { action }) => {
                let agent = create_unified_agent_v2().await?;
                let response = process_agent_message(&agent, &action).await?;
                display_response(response).await;
            }
            Some(Commands::Smart(cmd)) => {
                cmd.execute().await?;
            }
            Some(Commands::Gpu(gpu_command)) => {
                // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç 300—Å
                timeout(Duration::from_secs(300), gpu_command.execute()).await.map_err(|_| anyhow::anyhow!("GPU command timeout"))??;
            }
            Some(Commands::Memory(cmd)) => {
                timeout(Duration::from_secs(180), cmd.execute()).await.map_err(|_| anyhow::anyhow!("Memory command timeout"))??;
            }
            Some(Commands::Models(cmd)) => {
                timeout(Duration::from_secs(120), cmd.execute()).await.map_err(|_| anyhow::anyhow!("Models command timeout"))??;
            }
            Some(Commands::Tasks(cmd)) => {
                timeout(Duration::from_secs(180), cmd.execute()).await.map_err(|_| anyhow::anyhow!("Tasks command timeout"))??;
            }
            Some(Commands::Health) => {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è health check
                let llm_client = LlmClient::from_env().ok().map(Arc::new);
                let memory_service: Option<Arc<memory::di::UnifiedContainer>> = None;

                timeout(Duration::from_secs(60), health_checks::run_health_checks(llm_client, memory_service))
                    .await
                    .map_err(|_| anyhow::anyhow!("Health checks timeout"))??;
            }
            Some(Commands::Status) => {
                timeout(Duration::from_secs(60), show_system_status()).await.map_err(|_| anyhow::anyhow!("Status command timeout"))??;
            }
            Some(Commands::LlmStatus) => {
                timeout(Duration::from_secs(60), show_llm_status()).await.map_err(|_| anyhow::anyhow!("LLM status timeout"))??;
            }
            Some(Commands::Performance) => {
                timeout(Duration::from_secs(120), show_performance_metrics()).await.map_err(|_| anyhow::anyhow!("Performance command timeout"))??;
            }
            Some(Commands::Policy { list, allow_shell }) => {
                use common::policy::{load_effective_policy, PolicyDocument, PolicyRule, PolicyAction, PolicySubjectKind};
                let mut home = util::magray_home(); home.push("policy.json");
                if list {
                    let effective = load_effective_policy(if home.exists() { Some(&home) } else { None });
                    println!("=== Effective Policy ===\n{}", serde_json::to_string_pretty(&effective).unwrap_or_else(|_| "{}".into()));
                }
                if allow_shell {
                    // Merge small override into MAGRAY_POLICY_JSON
                    let override_doc = PolicyDocument { rules: vec![PolicyRule { subject_kind: PolicySubjectKind::Tool, subject_name: "shell_exec".into(), when_contains_args: None, action: PolicyAction::Allow, reason: Some("cli override".into()) }] };
                    let json = serde_json::to_string(&override_doc)?;
                    std::env::set_var("MAGRAY_POLICY_JSON", json);
                    println!("Applied in-memory override: Allow shell_exec (MAGRAY_POLICY_JSON)\nNote: persist by writing ~/.magray/policy.json");
                }
            }
            Some(Commands::Tools(cmd)) => {
                timeout(Duration::from_secs(300), cmd.execute()).await.map_err(|_| anyhow::anyhow!("Tools command timeout"))??;
            }
            None => {
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
                println!("{}", Cli::command().render_long_help());
            }
        }
        // Publish job completion progress
        tokio::spawn(events::publish(topics::TOPIC_JOB_PROGRESS, json!({"command": cmd_name, "stage": "done"})));
        Ok::<(), anyhow::Error>(())
    };

    match timeout(Duration::from_secs(top_timeout_secs), exec_fut).await {
        Ok(res) => {
            if let Err(e) = res {
                tokio::spawn(events::publish(topics::TOPIC_ERROR, json!({"error": e.to_string()})));
                return Err(e);
            }
        }
        Err(_) => {
            eprintln!("[‚úó] –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç {}—Å", top_timeout_secs);
            tokio::spawn(events::publish(topics::TOPIC_ERROR, json!({"error": "global_timeout", "timeout_secs": top_timeout_secs})));
            return Err(anyhow::anyhow!("Global command timeout"));
        }
    }

    Ok(())
}

async fn show_welcome_animation() -> Result<()> {
    let term = Term::stdout();

    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    let spinner = indicatif::ProgressBar::new_spinner();
    spinner.set_style(
        ProgressStyle::default_spinner()
            .tick_chars("[|][/][-][\\]")
            .template("{spinner:.cyan} {msg}")
            .unwrap_or_else(|e| {
                eprintln!("Warning: Failed to create spinner template: {}", e);
                ProgressStyle::default_spinner()
            }),
    );

    spinner.set_message("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAGRAY CLI...");

    // –ö—Ä–∞—Å–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    let messages = [
        "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π...",
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–≤–∞–Ω—Ç–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º...",
        "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞...",
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏...",
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
    ];

    for msg in messages.iter() {
        spinner.set_message(*msg);
        sleep(Duration::from_millis(400)).await;
    }

    spinner.finish_and_clear();

    // –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    term.clear_screen()?;
    println!();
    println!(
        "{}",
        style("  ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó")
            .cyan()
            .bold()
    );
    println!(
        "{}",
        style("  ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù")
            .cyan()
            .bold()
    );
    println!(
        "{}",
        style("  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ")
            .cyan()
            .bold()
    );
    println!(
        "{}",
        style("  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë  ‚ïö‚ñà‚ñà‚ïî‚ïù  ")
            .cyan()
            .bold()
    );
    println!(
        "{}",
        style("  ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ")
            .cyan()
            .bold()
    );
    println!(
        "{}",
        style("  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ")
            .cyan()
            .bold()
    );
    println!();
    println!(
        "       {} {}",
        style("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π CLI –∞–≥–µ–Ω—Ç").bright().bold(),
        style("v0.1.0").dim()
    );
    println!("       {}", style("Powered by AI ‚Ä¢ Made with Rust").dim());
    println!();

    Ok(())
}

async fn handle_chat(message: Option<String>) -> Result<()> {
    use tokio::time::{timeout, Duration as TokioDuration};

    let _term = Term::stdout();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ pipe/stdin
    let mut stdin_message = None;
    if message.is_none() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ stdin
        match std::thread::spawn(|| {
            use std::io::{self, Read};
            let mut input = String::new();
            match io::stdin().read_to_string(&mut input) {
                Ok(0) => None, // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                Ok(_) => {
                    let trimmed = input.trim();
                    if trimmed.is_empty() {
                        None
                    } else {
                        Some(trimmed.to_string())
                    }
                }
                Err(_) => None, // –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è
            }
        })
        .join()
        {
            Ok(result) => stdin_message = result,
            Err(_) => {} // –ü–∞–Ω–∏–∫–∞ –≤ —Ç—Ä–µ–¥–µ
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    let spinner = indicatif::ProgressBar::new_spinner();
    spinner.set_style(
        ProgressStyle::default_spinner()
            .tick_chars("[‚óè][‚óê][‚óë][‚óí][‚óì][‚óè]")
            .template("{spinner} {msg}")
            .unwrap_or_else(|e| {
                eprintln!("Warning: Failed to create LLM spinner template: {}", e);
                ProgressStyle::default_spinner()
            }),
    );
    spinner.set_message("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...");

    let _llm_client = match LlmClient::from_env() {
        Ok(client) => {
            spinner.finish_with_message("[‚úì] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ LLM!");
            sleep(Duration::from_millis(500)).await;
            spinner.finish_and_clear();
            client
        }
        Err(e) => {
            spinner.finish_with_message("[‚úó] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!");
            println!();
            println!(
                "{} {}",
                style("–û—à–∏–±–∫–∞:").red().bold(),
                style(format!("{e}")).red()
            );
            println!();
            println!(
                "{} –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:",
                style("[i] –†–µ—à–µ–Ω–∏–µ:").yellow().bold()
            );
            println!(
                "   {} {}",
                style("$").green(),
                style("cp .env.example .env").cyan()
            );
            println!(
                "   {} {}",
                style("#").dim(),
                style("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à API –∫–ª—é—á").dim()
            );
            return Err(e);
        }
    };

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Clean Architecture –∞–≥–µ–Ω—Ç —Å timeout –∑–∞—â–∏—Ç–æ–π
    let agent_future = create_unified_agent_v2();
    let agent = match timeout(TokioDuration::from_secs(30), agent_future).await {
        Ok(Ok(agent)) => agent,
        Ok(Err(e)) => return Err(e),
        Err(_) => {
            return Err(anyhow::anyhow!(
                "Agent initialization timeout after 30 seconds"
            ))
        }
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    let final_message = message.or(stdin_message);

    if let Some(msg) = final_message {
        // –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ stdin)
        process_single_message(&agent, &msg).await?;
    } else {
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        run_interactive_chat(&agent).await?;
    }

    Ok(())
}

async fn process_single_message(agent: &UnifiedAgentV2, message: &str) -> Result<()> {
    use tokio::time::{timeout, Duration as TokioDuration};

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º 60 —Å–µ–∫—É–Ω–¥
    let process_future = process_agent_message(agent, message);
    let response = match timeout(TokioDuration::from_secs(60), process_future).await {
        Ok(Ok(response)) => response,
        Ok(Err(e)) => return Err(e),
        Err(_) => {
            println!(
                "{} Message processing timeout after 60 seconds",
                style("[‚ö†]").yellow().bold()
            );
            return Err(anyhow::anyhow!("Message processing timeout"));
        }
    };

    display_response(response).await;
    Ok(())
}

async fn run_interactive_chat(agent: &UnifiedAgentV2) -> Result<()> {
    use tokio::time::{timeout, Duration as TokioDuration};

    println!(
        "{} {}",
        style("[‚òÖ]").green().bold(),
        style("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º!")
            .bright()
            .bold()
    );
    println!(
        "{} {}",
        style("[‚ñ∫]").cyan(),
        style("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏").dim()
    );
    println!(
        "{} {} {}",
        style("   ").dim(),
        style("'exit'").yellow().bold(),
        style("–¥–ª—è –≤—ã—Ö–æ–¥–∞").dim()
    );
    println!();

    loop {
        // –ö—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–º–ø—Ç
        print!(
            "{} {} ",
            style(USER_ICON).bright().green(),
            style("–í—ã:").bright().bold()
        );
        io::stdout().flush()?;

        // –ß–∏—Ç–∞–µ–º –≤–≤–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è
        let input_future = tokio::task::spawn_blocking(|| {
            let mut input = String::new();
            match io::stdin().read_line(&mut input) {
                Ok(_) => Ok(input),
                Err(e) => Err(e),
            }
        });

        let input = match timeout(TokioDuration::from_secs(300), input_future).await {
            Ok(Ok(Ok(input))) => input.trim().to_string(),
            Ok(Ok(Err(e))) => {
                println!("{} Input error: {}", style("[‚úó]").red().bold(), e);
                continue;
            }
            Ok(Err(_)) => {
                println!("{} Input thread panicked", style("[‚úó]").red().bold());
                continue;
            }
            Err(_) => {
                println!(
                    "{} Input timeout after 5 minutes - exiting",
                    style("[‚ö†]").yellow().bold()
                );
                break;
            }
        };

        if input.is_empty() {
            continue;
        }

        if input == "exit" || input == "quit" {
            show_goodbye_animation().await?;
            break;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å timeout –∑–∞—â–∏—Ç–æ–π
        let process_future = process_agent_message(agent, &input);
        let response = match timeout(TokioDuration::from_secs(60), process_future).await {
            Ok(Ok(response)) => response,
            Ok(Err(e)) => {
                println!("{} Processing error: {}", style("[‚úó]").red().bold(), e);
                continue;
            }
            Err(_) => {
                println!(
                    "{} Message processing timeout after 60 seconds",
                    style("[‚ö†]").yellow().bold()
                );
                continue;
            }
        };

        display_response(response).await;
        println!();
    }

    Ok(())
}

async fn display_response(response: AgentResponse) {
    match response {
        AgentResponse::Chat(text) => {
            display_chat_response(&text).await;
        }
        AgentResponse::ToolExecution(result) => {
            println!("{result}");
        }
        AgentResponse::Admin(admin_response) => {
            use cli::agent_traits::AdminResponse;
            match admin_response {
                AdminResponse::SystemStats(stats) => println!("{}", stats),
                AdminResponse::HealthStatus(status) => println!("{}", status),
                AdminResponse::PerformanceMetrics(metrics) => println!("{}", metrics),
                AdminResponse::OperationResult(result) => println!("{}", result),
            }
        }
        AgentResponse::Error(error_msg) => {
            println!("{} {}", style("[‚úó]").red().bold(), style(error_msg).red());
        }
    }
}

async fn display_chat_response(text: &str) {
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    print!(
        "{} {} ",
        style(ROBOT_ICON.get_frame(0)).bright().blue(),
        style("AI:").bright().green().bold()
    );

    // –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
    for char in text.chars() {
        print!("{}", style(char).bright());
        if let Err(e) = io::stdout().flush() {
            eprintln!("Warning: Failed to flush stdout: {}", e);
        }
        sleep(Duration::from_millis(20)).await;
    }
    println!();
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedAgentV2
async fn create_unified_agent_v2() -> Result<UnifiedAgentV2> {
    let mut agent = UnifiedAgentV2::new().await?;
    agent.initialize().await?;
    Ok(agent)
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ UnifiedAgentV2 API
async fn process_agent_message(agent: &UnifiedAgentV2, message: &str) -> Result<AgentResponse> {
    let context = RequestContext {
        message: message.to_string(),
        session_id: "main_session".to_string(),
        metadata: std::collections::HashMap::new(),
    };

    let result = agent.process_user_request(context).await?;

    // result.response —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è AgentResponse
    Ok(result.response)
}

async fn show_goodbye_animation() -> Result<()> {
    let spinner = indicatif::ProgressBar::new_spinner();
    spinner.set_style(
        ProgressStyle::default_spinner()
            .tick_chars("[‚óÑ][‚óÅ][‚óÄ][‚ñ†]")
            .template("{spinner} {msg}")
            .unwrap_or_else(|e| {
                eprintln!("Warning: Failed to create goodbye spinner template: {}", e);
                ProgressStyle::default_spinner()
            }),
    );

    let goodbye_messages = [
        "–°–æ—Ö—Ä–∞–Ω—è—é —Å–µ—Å—Å–∏—é...",
        "–ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...",
        "–û—á–∏—â–∞—é –ø–∞–º—è—Ç—å...",
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
    ];

    for msg in goodbye_messages.iter() {
        spinner.set_message(*msg);
        sleep(Duration::from_millis(300)).await;
    }

    spinner.finish_and_clear();

    println!();
    println!(
        "{} {}",
        style("[‚òÖ]").bright().yellow(),
        style("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ MAGRAY CLI!")
            .bright()
            .bold()
    );
    println!(
        "{} {}",
        style("[‚ñ∫]").cyan(),
        style("–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!").cyan()
    );
    println!();

    Ok(())
}

async fn show_system_status() -> Result<()> {
    use colored::Colorize;
    use tracing::{info, warn};

    let spinner = progress::ProgressBuilder::fast("Checking system status...");

    // –í —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ñ–∏–ª–µ memory —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
    let memory_status: Option<(String, usize, f64)> = None;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    let llm_status = match LlmClient::from_env() {
        Ok(_client) => {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–ª—Å—è, —Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            "Connected"
        }
        Err(_) => "Not configured",
    };

    spinner.finish_success(Some("System status checked!"));

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
    println!("{}", style("=== MAGRAY System Status ===").bold().cyan());
    println!();

    // LLM Status
    let llm_icon = match llm_status {
        "Connected" => "‚úì".green(),
        "Connection error" => "‚ö†".yellow(),
        _ => "‚úó".red(),
    };
    println!("{} {}: {}", llm_icon, "LLM Service".bold(), llm_status);

    // Memory Status —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    if let Some((health, record_count, hit_rate)) = memory_status {
        let (memory_icon, status_msg) = match health.as_str() {
            "healthy" => ("‚úì".green(), "Healthy".to_string()),
            "degraded" => ("‚ö†".yellow(), "Degraded (CPU only)".to_string()),
            "cpu-only" => ("‚ö†".yellow(), "CPU only (no GPU)".to_string()),
            "error" => ("‚úó".red(), "Service error".to_string()),
            "timeout" => ("‚åõ".yellow(), "Initialization timeout".to_string()),
            "config-error" => ("‚úó".red(), "Configuration error".to_string()),
            _ => ("?".cyan(), format!("Unknown ({health})")),
        };

        if record_count > 0 || hit_rate > 0.0 {
            println!(
                "{} {}: {} ({} records, {:.1}% cache hit)",
                memory_icon,
                "Memory Service".bold(),
                status_msg,
                record_count,
                hit_rate * 100.0
            );
        } else {
            println!(
                "{} {}: {}",
                memory_icon,
                "Memory Service".bold(),
                status_msg
            );
        }
    } else {
        println!("{} {}: Not available", "‚úó".red(), "Memory Service".bold());
    }

    // Binary info
    let binary_size = std::env::current_exe()
        .and_then(|path| path.metadata())
        .map(|meta| meta.len())
        .unwrap_or(0);

    let version = env!("CARGO_PKG_VERSION");
    println!(
        "{} {}: v{} ({:.1} MB)",
        "‚Ñπ".blue(),
        "Binary".bold(),
        version,
        binary_size as f64 / (1024.0 * 1024.0)
    );

    // Environment
    let log_level = std::env::var("RUST_LOG").unwrap_or_else(|_| "info".to_string());
    println!("{} {}: {}", "‚Ñπ".blue(), "Log Level".bold(), log_level);

    // Policy audit
    use common::policy::{load_effective_policy};
    let mut home = crate::util::magray_home();
    home.push("policy.json");
    let has_file = home.exists();
    let effective = load_effective_policy(if has_file { Some(&home) } else { None });
    let rules_count = effective.rules.len();
    let src = if std::env::var("MAGRAY_POLICY_JSON").ok().filter(|s| !s.trim().is_empty()).is_some() {
        "env-json"
    } else if std::env::var("MAGRAY_POLICY_PATH").is_ok() || has_file {
        "file"
    } else {
        "default"
    };
    println!("{} {}: {} (rules: {})", "üîí", "Policy", src, rules_count);

    println!();

    Ok(())
}

async fn show_llm_status() -> Result<()> {
    use colored::Colorize;
    use tracing::info;

    let spinner = progress::ProgressBuilder::fast("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...");

    info!("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LLM —Å–∏—Å—Ç–µ–º—ã");

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å multi-provider –∫–ª–∏–µ–Ω—Ç
    let client_result = LlmClient::from_env_multi();

    match client_result {
        Ok(client) => {
            spinner.finish_success(Some("Multi-provider —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!"));

            if let Some(status_report) = client.get_status_report().await {
                println!("\n{}", status_report);
            } else {
                println!("\nüîß Multi-provider —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }
        }
        Err(e) => {
            spinner.finish_success(Some("Fallback –∫ single-provider —Ä–µ–∂–∏–º—É"));

            match LlmClient::from_env() {
                Ok(_single_client) => {
                    println!("\nüîß Single Provider Mode");
                    println!(
                        "{} LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                        "‚úì".green().bold()
                    );
                    println!();
                    println!("üí° –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ multi-provider —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ:");
                    println!("  ‚Ä¢ OPENAI_API_KEY=your_openai_key");
                    println!("  ‚Ä¢ ANTHROPIC_API_KEY=your_anthropic_key");
                    println!("  ‚Ä¢ GROQ_API_KEY=your_groq_key");
                    println!("  ‚Ä¢ OLLAMA_URL=http://localhost:11434");
                    println!("  ‚Ä¢ LMSTUDIO_URL=http://localhost:1234");
                }
                Err(single_err) => {
                    println!("\n{} –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LLM", "‚ùå".red().bold());
                    println!("Multi-provider –æ—à–∏–±–∫–∞: {}", e);
                    println!("Single-provider –æ—à–∏–±–∫–∞: {}", single_err);
                    println!();
                    println!("üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä:");
                    println!("  LLM_PROVIDER=openai");
                    println!("  OPENAI_API_KEY=your_key_here");
                }
            }
        }
    }

    println!();
    Ok(())
}

async fn show_performance_metrics() -> Result<()> {
    use colored::Colorize;
    use tracing::info;

    let spinner = progress::ProgressBuilder::fast("Collecting performance metrics...");

    info!("üìà Initializing UnifiedAgent for performance metrics");

    // –°–æ–∑–¥–∞–µ–º UnifiedAgent –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ DI —Å–∏—Å—Ç–µ–º–µ
    let agent = match create_unified_agent_v2().await {
        Ok(agent) => {
            info!("‚úÖ UnifiedAgent initialized successfully");
            agent
        }
        Err(e) => {
            spinner.finish_error(&format!("Failed to initialize agent: {}", e));
            println!("{} Error: {}", "‚úó".red(), e);
            return Ok(());
        }
    };

    spinner.finish_success(Some("Performance metrics collected!"));

    // –í—ã–≤–æ–¥–∏–º performance –æ—Ç—á–µ—Ç
    println!(
        "{}",
        style("=== MAGRAY Performance Metrics ===").bold().cyan()
    );
    println!();

    // –í –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ DI-–º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    let mock_metrics = memory::DIPerformanceMetrics::default();

    if mock_metrics.total_resolutions > 0 {
        println!();
        println!("{}", style("=== Detailed Analysis ===").bold().yellow());
        println!("‚ÑπÔ∏è Detailed DI metrics are not available in minimal build.");

        println!();
        println!(
            "{} Use 'magray performance' again to track improvements",
            "‚ÑπÔ∏è".blue()
        );
    } else {
        println!();
        println!("{} No performance data available yet.", "‚ÑπÔ∏è".blue());
        println!("  Try running some commands first to generate metrics.");
    }

    println!();

    Ok(())
}

fn ensure_default_models_installed_interactive() -> Result<()> {
    use std::io::{self, Write};

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
    let default_emb = MODEL_REGISTRY
        .get_default_model(ModelType::Embedding)
        .map(|m| m.name.clone())
        .unwrap_or_else(|| "qwen3emb".to_string());
    let default_rer = MODEL_REGISTRY
        .get_default_model(ModelType::Reranker)
        .map(|m| m.name.clone())
        .unwrap_or_else(|| "qwen3_reranker".to_string());

    let emb_ok = MODEL_REGISTRY.is_model_available(&default_emb);
    let rer_ok = MODEL_REGISTRY.is_model_available(&default_rer);

    if emb_ok && rer_ok {
        return Ok(());
    }

    // ENV overrides for non-interactive/CI
    let auto_env = std::env::var("MAGRAY_AUTO_INSTALL_MODELS").unwrap_or_default();
    let ci_env = std::env::var("CI").unwrap_or_default();

    let mut auto_choice: Option<bool> = None; // Some(true)=yes, Some(false)=no
    match auto_env.to_lowercase().as_str() {
        "1" | "true" | "yes" | "y" => auto_choice = Some(true),
        "0" | "false" | "no" | "n" => auto_choice = Some(false),
        _ => {}
    }

    if auto_choice.is_none() && !ci_env.is_empty() {
        // –í CI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
        auto_choice = Some(true);
    }

    println!("\n[!] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —á—Ç–æ –º–æ–¥–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:");
    if !emb_ok {
        println!("    - Embedding: {}", default_emb);
    }
    if !rer_ok {
        println!("    - Reranker: {}", default_rer);
    }

    let install = if let Some(choice) = auto_choice {
        choice
    } else {
        print!("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å? [Y/n]: ");
        io::stdout().flush().ok();
        let mut answer = String::new();
        if io::stdin().read_line(&mut answer).is_ok() {
            let ans = answer.trim().to_lowercase();
            !(ans == "n" || ans == "no")
        } else {
            true // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∞
        }
    };

    if !install {
        println!("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–æ–¥–µ–ª–µ–π.");
        return Ok(());
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç–∞–ª–ª–µ—Ä, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
    match run_models_installer() {
        Ok(()) => {
            println!("‚úÖ –ú–æ–¥–µ–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã");
            Ok(())
        }
        Err(e) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {}", e);
            println!("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: cargo run --manifest-path tools/install_models_crate/Cargo.toml");
            Ok(())
        }
    }
}

fn run_models_installer() -> Result<()> {
    use std::process::Command;
    use std::path::{Path, PathBuf};

    fn candidate_paths(script: &str) -> Vec<PathBuf> {
        let mut paths = Vec::new();
        // 1) Current dir
        paths.push(PathBuf::from(script));
        // 2) Parent dirs
        paths.push(Path::new("..").join(script));
        paths.push(Path::new("../..").join(script));
        // 3) Workspace env
        if let Ok(root) = std::env::var("MAGRAY_ROOT_DIR") {
            paths.push(Path::new(&root).join(script));
        }
        // 4) Using executable path
        if let Ok(exe) = std::env::current_exe() {
            if let Some(dir) = exe.parent() {
                // try up to 4 levels up
                let mut p = dir.to_path_buf();
                for _ in 0..4 {
                    p = p.join("..");
                    paths.push(p.join(script));
                }
            }
        }
        paths
    }

    let full_scripts = candidate_paths("scripts/install_qwen3_onnx.py");
    let min_scripts = candidate_paths("scripts/install_qwen3_minimal.py");

    // Try full installer (export to ONNX) with timeout
    for path in &full_scripts {
        if path.exists() {
            let status = std::process::Command::new("python3")
                .arg(path)
                .args(["--models-dir", "models"]) // relative output
                .env("PYTHONUNBUFFERED", "1")
                .spawn()
                .and_then(|mut child| {
                    // wait with timeout 600s
                    let start = std::time::Instant::now();
                    let timeout = std::time::Duration::from_secs(600);
                    loop {
                        match child.try_wait()? {
                            Some(status) => break Ok(status),
                            None => {
                                if start.elapsed() > timeout {
                                    let _ = child.kill();
                                    // wait for process to exit and return its status (likely non-success)
                                    let status = child.wait()?;
                                    break Ok(status);
                                }
                                std::thread::sleep(std::time::Duration::from_millis(200));
                            }
                        }
                    }
                });
            if matches!(status, Ok(s) if s.success()) {
                return Ok(());
            }
        }
    }

    eprintln!("Full installer failed or timed out, trying minimal...");

    // Try minimal installer (tokenizer/config + placeholder onnx) with timeout
    for path in &min_scripts {
        if path.exists() {
            let status = Command::new("python3")
                .arg(path)
                .args(["--models-dir", "models"]) // prepare placeholders
                .env("PYTHONUNBUFFERED", "1")
                .spawn()
                .and_then(|mut child| {
                    let start = std::time::Instant::now();
                    let timeout = std::time::Duration::from_secs(300);
                    loop {
                        match child.try_wait()? {
                            Some(status) => break Ok(status),
                            None => {
                                if start.elapsed() > timeout {
                                    let _ = child.kill();
                                    let status = child.wait()?;
                                    break Ok(status);
                                }
                                std::thread::sleep(std::time::Duration::from_millis(200));
                            }
                        }
                    }
                });
            if matches!(status, Ok(s) if s.success()) {
                return Ok(());
            }
        }
    }

    // Last resort: create placeholders
    create_placeholder_models();
    Ok(())
}

fn create_placeholder_models() {
    use std::fs;
    use std::path::PathBuf;

    let pairs = [("qwen3emb", true), ("qwen3_reranker", true)];

    for (name, need_tokenizer) in pairs {    
        let dir = PathBuf::from("models").join(name);
        let _ = fs::create_dir_all(&dir);
        let onnx = dir.join("model.onnx");
        if !onnx.exists() {
            let _ = fs::write(&onnx, b"ONNX_PLACEHOLDER");
        }
        if need_tokenizer {
            let tok = dir.join("tokenizer.json");
            if !tok.exists() {
                let _ = fs::write(&tok, b"{}");
            }
            let cfg = dir.join("config.json");
            if !cfg.exists() {
                let _ = fs::write(&cfg, b"{}");
            }
        }
    }
}

fn ensure_ort_installed_interactive() -> Result<()> {
    // –ë—ã—Å—Ç—Ä—ã–π —Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –µ—Å–ª–∏ —É–∂–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω
    if std::env::var("ORT_DYLIB_PATH").is_ok() {
        return Ok(());
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ-–∫–æ–Ω—Ñ–∏–≥ (–ø–æ–∏—Å–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—É—Ç—è—Ö)
    ai::ort_setup::configure_ort_env();
    if std::env::var("ORT_DYLIB_PATH").is_ok() {
        return Ok(());
    }

    // –ù–µ –Ω–∞—à–ª–∏ ‚Äî —Å–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let auto_env = std::env::var("MAGRAY_AUTO_INSTALL_ORT").unwrap_or_default();
    let mut auto_choice: Option<bool> = None;
    match auto_env.to_lowercase().as_str() {
        "1" | "true" | "yes" | "y" => auto_choice = Some(true),
        "0" | "false" | "no" | "n" => auto_choice = Some(false),
        _ => {}
    }

    let install = if let Some(choice) = auto_choice {
        choice
    } else {
        print!("ONNX Runtime –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ —Å–µ–π—á–∞—Å? [Y/n]: ");
        io::stdout().flush().ok();
        let mut answer = String::new();
        if io::stdin().read_line(&mut answer).is_ok() {
            let ans = answer.trim().to_lowercase();
            !(ans == "n" || ans == "no")
        } else {
            true
        }
    };

    if !install {
        println!("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É ONNX Runtime. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ AI –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
        return Ok(());
    }

    // –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    use std::path::{Path, PathBuf};
    use std::process::Command;

    fn candidate_paths(script: &str) -> Vec<PathBuf> {
        let mut paths = Vec::new();
        paths.push(PathBuf::from(script));
        paths.push(Path::new("..").join(script));
        paths.push(Path::new("../..").join(script));
        if let Ok(root) = std::env::var("MAGRAY_ROOT_DIR") {
            paths.push(Path::new(&root).join(script));
        }
        if let Ok(exe) = std::env::current_exe() {
            if let Some(dir) = exe.parent() {
                let mut p = dir.to_path_buf();
                for _ in 0..4 {
                    p = p.join("..");
                    paths.push(p.join(script));
                }
            }
        }
        paths
    }

    let scripts = candidate_paths("scripts/install_onnxruntime.sh");
    for path in &scripts {
        if path.exists() {
            let status = Command::new("bash")
                .arg(path)
                .arg("./scripts/onnxruntime")
                .status();
            if matches!(status, Ok(s) if s.success()) {
                // –ü—Ä–∏–º–µ–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
                // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å setup_ort_env.sh –∏ source –Ω–µ–ª—å–∑—è –∑–¥–µ—Å—å; –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º –∞–≤—Ç–æ-–∫–æ–Ω—Ñ–∏–≥
                ai::ort_setup::configure_ort_env();
                break;
            }
        }
    }

    Ok(())
}
