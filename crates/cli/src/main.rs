use anyhow::Result;
use clap::{Parser, Subcommand, CommandFactory};
use common::init_structured_logging;
use console::{style, Term};
use indicatif::ProgressStyle;
use llm::LlmClient;
use std::io::{self, Write};
use std::sync::Arc;
use std::time::Duration;
use tokio::time::sleep;

mod commands;
mod health_checks;
mod progress;
mod util;

#[cfg(test)]
mod status_tests;

use cli::agent_traits::AgentResponse;
use cli::agent_traits::{RequestContext, RequestProcessorTrait};
use cli::unified_agent_v2::UnifiedAgentV2;
use commands::{GpuCommand, MemoryCommand, ModelsCommand, ToolsCommand, SmartCommand, TasksCommand};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
static ROBOT_ICON: AnimatedIcon = AnimatedIcon::new(&["[AI]", "[‚ñ≤I]", "[‚óèI]", "[‚ô¶I]"]);
static USER_ICON: &str = "[‚ñ∫]";

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ASCII –∏–∫–æ–Ω–∫–∏
struct AnimatedIcon {
    frames: &'static [&'static str],
}

impl AnimatedIcon {
    const fn new(frames: &'static [&'static str]) -> Self {
        Self { frames }
    }

    fn get_frame(&self, index: usize) -> &'static str {
        self.frames[index % self.frames.len()]
    }
}

#[derive(Parser)]
#[command(name = "magray")]
#[command(about = "[AI] MAGRAY - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π CLI –∞–≥–µ–Ω—Ç")]
#[command(version = "0.1.0")]
struct Cli {
    #[command(subcommand)]
    command: Option<Commands>,
}

#[derive(Subcommand)]
enum Commands {
    /// [‚ñ∫] –ß–∞—Ç —Å LLM –º–æ–¥–µ–ª—å—é
    Chat {
        /// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)
        message: Option<String>,
    },
    /// [‚óè] –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –∫—Ä–∞—Å–∏–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    Read {
        /// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        path: String,
    },
    /// [‚ñ∫] –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
    Write {
        /// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        path: String,
        /// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content: String,
    },
    /// [‚óè] –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    List {
        /// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
        path: Option<String>,
    },
    /// [AI] –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    Tool {
        /// –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
        action: String,
    },
    /// [‚òÖ] –£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–±–µ–∑ LLM –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ)
    Smart(SmartCommand),
    /// [üéÆ] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
    Gpu(GpuCommand),
    /// [üß†] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏
    Memory(MemoryCommand),
    /// [üì¶] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ AI
    Models(ModelsCommand),
    /// [üõ†] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (–≤–∫–ª—é—á–∞—è MCP)
    Tools(ToolsCommand),
    /// [‚òë] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
    Tasks(TasksCommand),
    /// [üè•] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    Health,
    /// [üìä] –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    Status,
    /// [ü§ñ] –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    LlmStatus,
    /// [üìà] –ü–æ–∫–∞–∑–∞—Ç—å performance –º–µ—Ç—Ä–∏–∫–∏ DI —Å–∏—Å—Ç–µ–º—ã
    Performance,
}

#[tokio::main]
async fn main() -> Result<()> {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    init_structured_logging()?;

    let cli = Cli::parse();

    // –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–≤ —Ç–µ—Å—Ç–∞—Ö –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ MAGRAY_NO_ANIM)
    if std::env::var("MAGRAY_NO_ANIM").is_err() {
        show_welcome_animation().await?;
    }

    match cli.command {
        Some(Commands::Chat { message }) => {
            handle_chat(message).await?;
        }
        Some(Commands::Read { path }) => {
            let agent = create_unified_agent_v2().await?;
            let message = format!("–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª {path}");
            let response = process_agent_message(&agent, &message).await?;
            display_response(response).await;
        }
        Some(Commands::Write { path, content }) => {
            let agent = create_unified_agent_v2().await?;
            let message = format!("—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª {path} —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {content}");
            let response = process_agent_message(&agent, &message).await?;
            display_response(response).await;
        }
        Some(Commands::List { path }) => {
            let agent = create_unified_agent_v2().await?;
            let message = format!("–ø–æ–∫–∞–∂–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {}", path.as_deref().unwrap_or("."));
            let response = process_agent_message(&agent, &message).await?;
            display_response(response).await;
        }
        Some(Commands::Tool { action }) => {
            let agent = create_unified_agent_v2().await?;
            let response = process_agent_message(&agent, &action).await?;
            display_response(response).await;
        }
        Some(Commands::Smart(cmd)) => {
            cmd.execute().await?;
        }
        Some(Commands::Gpu(gpu_command)) => {
            gpu_command.execute().await?;
        }
        // Some(Commands::Memory(memory_command)) => {
        //     commands::memory::handle_memory_command(memory_command).await?;
        // }
        Some(Commands::Health) => {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è health check
            let llm_client = LlmClient::from_env().ok().map(Arc::new);
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞–º—è—Ç–∏ –¥–ª—è health check (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è)
            let legacy_config = memory::di::LegacyMemoryConfig::default();
            let memory_service = memory::DIMemoryService::new(legacy_config)
                .await
                .ok()
                .map(Arc::new);

            health_checks::run_health_checks(llm_client, memory_service).await?;
        }
        Some(Commands::Memory(cmd)) => {
            cmd.execute().await?;
        }
        Some(Commands::Models(cmd)) => {
            cmd.execute().await?;
        }
        Some(Commands::Tasks(cmd)) => {
            cmd.execute().await?;
        }
        Some(Commands::Status) => {
            show_system_status().await?;
        }
        Some(Commands::LlmStatus) => {
            show_llm_status().await?;
        }
        Some(Commands::Performance) => {
            show_performance_metrics().await?;
        }
        Some(Commands::Tools(cmd)) => {
            cmd.execute().await?;
        }
        None => {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
            println!("{}", Cli::command().render_long_help());
        }
    }

    Ok(())
}

async fn show_welcome_animation() -> Result<()> {
    let term = Term::stdout();

    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    let spinner = indicatif::ProgressBar::new_spinner();
    spinner.set_style(
        ProgressStyle::default_spinner()
            .tick_chars("[|][/][-][\\]")
            .template("{spinner:.cyan} {msg}")
            .unwrap_or_else(|e| {
                eprintln!("Warning: Failed to create spinner template: {}", e);
                ProgressStyle::default_spinner()
            }),
    );

    spinner.set_message("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAGRAY CLI...");

    // –ö—Ä–∞—Å–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    let messages = [
        "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π...",
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–≤–∞–Ω—Ç–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º...",
        "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞...",
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏...",
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
    ];

    for msg in messages.iter() {
        spinner.set_message(*msg);
        sleep(Duration::from_millis(400)).await;
    }

    spinner.finish_and_clear();

    // –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    term.clear_screen()?;
    println!();
    println!(
        "{}",
        style("  ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó")
            .cyan()
            .bold()
    );
    println!(
        "{}",
        style("  ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù")
            .cyan()
            .bold()
    );
    println!(
        "{}",
        style("  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ")
            .cyan()
            .bold()
    );
    println!(
        "{}",
        style("  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë  ‚ïö‚ñà‚ñà‚ïî‚ïù  ")
            .cyan()
            .bold()
    );
    println!(
        "{}",
        style("  ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ")
            .cyan()
            .bold()
    );
    println!(
        "{}",
        style("  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ")
            .cyan()
            .bold()
    );
    println!();
    println!(
        "       {} {}",
        style("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π CLI –∞–≥–µ–Ω—Ç").bright().bold(),
        style("v0.1.0").dim()
    );
    println!("       {}", style("Powered by AI ‚Ä¢ Made with Rust").dim());
    println!();

    Ok(())
}

async fn handle_chat(message: Option<String>) -> Result<()> {
    use tokio::time::{timeout, Duration as TokioDuration};

    let _term = Term::stdout();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ pipe/stdin
    let mut stdin_message = None;
    if message.is_none() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ stdin
        match std::thread::spawn(|| {
            use std::io::{self, Read};
            let mut input = String::new();
            match io::stdin().read_to_string(&mut input) {
                Ok(0) => None, // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                Ok(_) => {
                    let trimmed = input.trim();
                    if trimmed.is_empty() {
                        None
                    } else {
                        Some(trimmed.to_string())
                    }
                }
                Err(_) => None, // –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è
            }
        })
        .join()
        {
            Ok(result) => stdin_message = result,
            Err(_) => {} // –ü–∞–Ω–∏–∫–∞ –≤ —Ç—Ä–µ–¥–µ
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    let spinner = indicatif::ProgressBar::new_spinner();
    spinner.set_style(
        ProgressStyle::default_spinner()
            .tick_chars("[‚óè][‚óê][‚óë][‚óí][‚óì][‚óè]")
            .template("{spinner} {msg}")
            .unwrap_or_else(|e| {
                eprintln!("Warning: Failed to create LLM spinner template: {}", e);
                ProgressStyle::default_spinner()
            }),
    );
    spinner.set_message("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...");

    let _llm_client = match LlmClient::from_env() {
        Ok(client) => {
            spinner.finish_with_message("[‚úì] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ LLM!");
            sleep(Duration::from_millis(500)).await;
            spinner.finish_and_clear();
            client
        }
        Err(e) => {
            spinner.finish_with_message("[‚úó] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!");
            println!();
            println!(
                "{} {}",
                style("–û—à–∏–±–∫–∞:").red().bold(),
                style(format!("{e}")).red()
            );
            println!();
            println!(
                "{} –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:",
                style("[i] –†–µ—à–µ–Ω–∏–µ:").yellow().bold()
            );
            println!(
                "   {} {}",
                style("$").green(),
                style("cp .env.example .env").cyan()
            );
            println!(
                "   {} {}",
                style("#").dim(),
                style("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à API –∫–ª—é—á").dim()
            );
            return Err(e);
        }
    };

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Clean Architecture –∞–≥–µ–Ω—Ç —Å timeout –∑–∞—â–∏—Ç–æ–π
    let agent_future = create_unified_agent_v2();
    let agent = match timeout(TokioDuration::from_secs(30), agent_future).await {
        Ok(Ok(agent)) => agent,
        Ok(Err(e)) => return Err(e),
        Err(_) => {
            return Err(anyhow::anyhow!(
                "Agent initialization timeout after 30 seconds"
            ))
        }
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    let final_message = message.or(stdin_message);

    if let Some(msg) = final_message {
        // –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ stdin)
        process_single_message(&agent, &msg).await?;
    } else {
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        run_interactive_chat(&agent).await?;
    }

    Ok(())
}

async fn process_single_message(agent: &UnifiedAgentV2, message: &str) -> Result<()> {
    use tokio::time::{timeout, Duration as TokioDuration};

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º 60 —Å–µ–∫—É–Ω–¥
    let process_future = process_agent_message(agent, message);
    let response = match timeout(TokioDuration::from_secs(60), process_future).await {
        Ok(Ok(response)) => response,
        Ok(Err(e)) => return Err(e),
        Err(_) => {
            println!(
                "{} Message processing timeout after 60 seconds",
                style("[‚ö†]").yellow().bold()
            );
            return Err(anyhow::anyhow!("Message processing timeout"));
        }
    };

    display_response(response).await;
    Ok(())
}

async fn run_interactive_chat(agent: &UnifiedAgentV2) -> Result<()> {
    use tokio::time::{timeout, Duration as TokioDuration};

    println!(
        "{} {}",
        style("[‚òÖ]").green().bold(),
        style("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º!")
            .bright()
            .bold()
    );
    println!(
        "{} {}",
        style("[‚ñ∫]").cyan(),
        style("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏").dim()
    );
    println!(
        "{} {} {}",
        style("   ").dim(),
        style("'exit'").yellow().bold(),
        style("–¥–ª—è –≤—ã—Ö–æ–¥–∞").dim()
    );
    println!();

    loop {
        // –ö—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–º–ø—Ç
        print!(
            "{} {} ",
            style(USER_ICON).bright().green(),
            style("–í—ã:").bright().bold()
        );
        io::stdout().flush()?;

        // –ß–∏—Ç–∞–µ–º –≤–≤–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è
        let input_future = tokio::task::spawn_blocking(|| {
            let mut input = String::new();
            match io::stdin().read_line(&mut input) {
                Ok(_) => Ok(input),
                Err(e) => Err(e),
            }
        });

        let input = match timeout(TokioDuration::from_secs(300), input_future).await {
            Ok(Ok(Ok(input))) => input.trim().to_string(),
            Ok(Ok(Err(e))) => {
                println!("{} Input error: {}", style("[‚úó]").red().bold(), e);
                continue;
            }
            Ok(Err(_)) => {
                println!("{} Input thread panicked", style("[‚úó]").red().bold());
                continue;
            }
            Err(_) => {
                println!(
                    "{} Input timeout after 5 minutes - exiting",
                    style("[‚ö†]").yellow().bold()
                );
                break;
            }
        };

        if input.is_empty() {
            continue;
        }

        if input == "exit" || input == "quit" {
            show_goodbye_animation().await?;
            break;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å timeout –∑–∞—â–∏—Ç–æ–π
        let process_future = process_agent_message(agent, &input);
        let response = match timeout(TokioDuration::from_secs(60), process_future).await {
            Ok(Ok(response)) => response,
            Ok(Err(e)) => {
                println!("{} Processing error: {}", style("[‚úó]").red().bold(), e);
                continue;
            }
            Err(_) => {
                println!(
                    "{} Message processing timeout after 60 seconds",
                    style("[‚ö†]").yellow().bold()
                );
                continue;
            }
        };

        display_response(response).await;
        println!();
    }

    Ok(())
}

async fn display_response(response: AgentResponse) {
    match response {
        AgentResponse::Chat(text) => {
            display_chat_response(&text).await;
        }
        AgentResponse::ToolExecution(result) => {
            println!("{result}");
        }
        AgentResponse::Admin(admin_response) => {
            use cli::agent_traits::AdminResponse;
            match admin_response {
                AdminResponse::SystemStats(stats) => println!("{}", stats),
                AdminResponse::HealthStatus(status) => println!("{}", status),
                AdminResponse::PerformanceMetrics(metrics) => println!("{}", metrics),
                AdminResponse::OperationResult(result) => println!("{}", result),
            }
        }
        AgentResponse::Error(error_msg) => {
            println!("{} {}", style("[‚úó]").red().bold(), style(error_msg).red());
        }
    }
}

async fn display_chat_response(text: &str) {
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    print!(
        "{} {} ",
        style(ROBOT_ICON.get_frame(0)).bright().blue(),
        style("AI:").bright().green().bold()
    );

    // –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
    for char in text.chars() {
        print!("{}", style(char).bright());
        if let Err(e) = io::stdout().flush() {
            eprintln!("Warning: Failed to flush stdout: {}", e);
        }
        sleep(Duration::from_millis(20)).await;
    }
    println!();
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedAgentV2
async fn create_unified_agent_v2() -> Result<UnifiedAgentV2> {
    let mut agent = UnifiedAgentV2::new().await?;
    agent.initialize().await?;
    Ok(agent)
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ UnifiedAgentV2 API
async fn process_agent_message(agent: &UnifiedAgentV2, message: &str) -> Result<AgentResponse> {
    let context = RequestContext {
        message: message.to_string(),
        session_id: "main_session".to_string(),
        metadata: std::collections::HashMap::new(),
    };

    let result = agent.process_user_request(context).await?;

    // result.response —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è AgentResponse
    Ok(result.response)
}

async fn show_goodbye_animation() -> Result<()> {
    let spinner = indicatif::ProgressBar::new_spinner();
    spinner.set_style(
        ProgressStyle::default_spinner()
            .tick_chars("[‚óÑ][‚óÅ][‚óÄ][‚ñ†]")
            .template("{spinner} {msg}")
            .unwrap_or_else(|e| {
                eprintln!("Warning: Failed to create goodbye spinner template: {}", e);
                ProgressStyle::default_spinner()
            }),
    );

    let goodbye_messages = [
        "–°–æ—Ö—Ä–∞–Ω—è—é —Å–µ—Å—Å–∏—é...",
        "–ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...",
        "–û—á–∏—â–∞—é –ø–∞–º—è—Ç—å...",
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
    ];

    for msg in goodbye_messages.iter() {
        spinner.set_message(*msg);
        sleep(Duration::from_millis(300)).await;
    }

    spinner.finish_and_clear();

    println!();
    println!(
        "{} {}",
        style("[‚òÖ]").bright().yellow(),
        style("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ MAGRAY CLI!")
            .bright()
            .bold()
    );
    println!(
        "{} {}",
        style("[‚ñ∫]").cyan(),
        style("–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!").cyan()
    );
    println!();

    Ok(())
}

async fn show_system_status() -> Result<()> {
    use colored::Colorize;
    use memory::DIMemoryService as MemoryService;
    use std::sync::Arc;
    use tracing::{info, warn};

    let spinner = progress::ProgressBuilder::fast("Checking system status...");

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–µ
    let legacy_config = memory::di::LegacyMemoryConfig::default();
    let memory_status = match tokio::time::timeout(Duration::from_secs(5), MemoryService::new(legacy_config)).await {
        Ok(Ok(service)) => {
            let service = Arc::new(service);
            let status = service.check_health().await.ok();
            let health_str = match status {
                Some(s) if s.healthy => "healthy".to_string(),
                Some(_) => "degraded".to_string(),
                None => "error".to_string(),
            };
            Some((health_str, 0, 0.0))
        }
        Ok(Err(e)) => {
            warn!("‚ö†Ô∏è Memory service init error: {}", e);
            Some(("error".to_string(), 0, 0.0))
        }
        Err(_) => Some(("timeout".to_string(), 0, 0.0)),
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    let llm_status = match LlmClient::from_env() {
        Ok(_client) => {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–ª—Å—è, —Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            "Connected"
        }
        Err(_) => "Not configured",
    };

    spinner.finish_success(Some("System status checked!"));

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
    println!("{}", style("=== MAGRAY System Status ===").bold().cyan());
    println!();

    // LLM Status
    let llm_icon = match llm_status {
        "Connected" => "‚úì".green(),
        "Connection error" => "‚ö†".yellow(),
        _ => "‚úó".red(),
    };
    println!("{} {}: {}", llm_icon, "LLM Service".bold(), llm_status);

    // Memory Status —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    if let Some((health, record_count, hit_rate)) = memory_status {
        let (memory_icon, status_msg) = match health.as_str() {
            "healthy" => ("‚úì".green(), "Healthy".to_string()),
            "degraded" => ("‚ö†".yellow(), "Degraded (CPU only)".to_string()),
            "cpu-only" => ("‚ö†".yellow(), "CPU only (no GPU)".to_string()),
            "error" => ("‚úó".red(), "Service error".to_string()),
            "timeout" => ("‚åõ".yellow(), "Initialization timeout".to_string()),
            "config-error" => ("‚úó".red(), "Configuration error".to_string()),
            _ => ("?".cyan(), format!("Unknown ({health})")),
        };

        if record_count > 0 || hit_rate > 0.0 {
            println!(
                "{} {}: {} ({} records, {:.1}% cache hit)",
                memory_icon,
                "Memory Service".bold(),
                status_msg,
                record_count,
                hit_rate * 100.0
            );
        } else {
            println!(
                "{} {}: {}",
                memory_icon,
                "Memory Service".bold(),
                status_msg
            );
        }
    } else {
        println!("{} {}: Not available", "‚úó".red(), "Memory Service".bold());
    }

    // Binary info
    let binary_size = std::env::current_exe()
        .and_then(|path| path.metadata())
        .map(|meta| meta.len())
        .unwrap_or(0);

    let version = env!("CARGO_PKG_VERSION");
    println!(
        "{} {}: v{} ({:.1} MB)",
        "‚Ñπ".blue(),
        "Binary".bold(),
        version,
        binary_size as f64 / (1024.0 * 1024.0)
    );

    // Environment
    let log_level = std::env::var("RUST_LOG").unwrap_or_else(|_| "info".to_string());
    println!("{} {}: {}", "‚Ñπ".blue(), "Log Level".bold(), log_level);

    println!();

    Ok(())
}

async fn show_llm_status() -> Result<()> {
    use colored::Colorize;
    use tracing::info;

    let spinner = progress::ProgressBuilder::fast("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...");

    info!("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LLM —Å–∏—Å—Ç–µ–º—ã");

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å multi-provider –∫–ª–∏–µ–Ω—Ç
    let client_result = LlmClient::from_env_multi();

    match client_result {
        Ok(client) => {
            spinner.finish_success(Some("Multi-provider —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!"));

            if let Some(status_report) = client.get_status_report().await {
                println!("\n{}", status_report);
            } else {
                println!("\nüîß Multi-provider —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }
        }
        Err(e) => {
            spinner.finish_success(Some("Fallback –∫ single-provider —Ä–µ–∂–∏–º—É"));

            match LlmClient::from_env() {
                Ok(_single_client) => {
                    println!("\nüîß Single Provider Mode");
                    println!(
                        "{} LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                        "‚úì".green().bold()
                    );
                    println!();
                    println!("üí° –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ multi-provider —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ:");
                    println!("  ‚Ä¢ OPENAI_API_KEY=your_openai_key");
                    println!("  ‚Ä¢ ANTHROPIC_API_KEY=your_anthropic_key");
                    println!("  ‚Ä¢ GROQ_API_KEY=your_groq_key");
                    println!("  ‚Ä¢ OLLAMA_URL=http://localhost:11434");
                    println!("  ‚Ä¢ LMSTUDIO_URL=http://localhost:1234");
                }
                Err(single_err) => {
                    println!("\n{} –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LLM", "‚ùå".red().bold());
                    println!("Multi-provider –æ—à–∏–±–∫–∞: {}", e);
                    println!("Single-provider –æ—à–∏–±–∫–∞: {}", single_err);
                    println!();
                    println!("üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä:");
                    println!("  LLM_PROVIDER=openai");
                    println!("  OPENAI_API_KEY=your_key_here");
                }
            }
        }
    }

    println!();
    Ok(())
}

async fn show_performance_metrics() -> Result<()> {
    use colored::Colorize;
    use tracing::info;

    let spinner = progress::ProgressBuilder::fast("Collecting performance metrics...");

    info!("üìà Initializing UnifiedAgent for performance metrics");

    // –°–æ–∑–¥–∞–µ–º UnifiedAgent –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ DI —Å–∏—Å—Ç–µ–º–µ
    let agent = match create_unified_agent_v2().await {
        Ok(agent) => {
            info!("‚úÖ UnifiedAgent initialized successfully");
            agent
        }
        Err(e) => {
            spinner.finish_error(&format!("Failed to initialize agent: {}", e));
            println!("{} Error: {}", "‚úó".red(), e);
            return Ok(());
        }
    };

    spinner.finish_success(Some("Performance metrics collected!"));

    // –í—ã–≤–æ–¥–∏–º performance –æ—Ç—á–µ—Ç
    println!(
        "{}",
        style("=== MAGRAY Performance Metrics ===").bold().cyan()
    );
    println!();

    // –í –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ DI-–º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    let mock_metrics = memory::DIPerformanceMetrics::default();

    if mock_metrics.total_resolutions > 0 {
        println!();
        println!("{}", style("=== Detailed Analysis ===").bold().yellow());
        println!("‚ÑπÔ∏è Detailed DI metrics are not available in minimal build.");

        println!();
        println!(
            "{} Use 'magray performance' again to track improvements",
            "‚ÑπÔ∏è".blue()
        );
    } else {
        println!();
        println!("{} No performance data available yet.", "‚ÑπÔ∏è".blue());
        println!("  Try running some commands first to generate metrics.");
    }

    println!();

    Ok(())
}
