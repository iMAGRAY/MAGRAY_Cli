//! Performance Monitor - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//!
//! –†–µ–∞–ª–∏–∑—É–µ—Ç Single Responsibility –¥–ª—è performance monitoring
//! –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ DI —Å —Å–∏—Å—Ç–µ–º–æ–π –º–µ—Ç—Ä–∏–∫

use anyhow::Result;
use async_trait::async_trait;
use std::collections::HashMap;
use std::sync::{Arc, Mutex};
use std::time::{Instant, SystemTime};
use tracing::{debug, info, warn};
use uuid::Uuid;

use crate::agent_traits::{ComponentLifecycleTrait, PerformanceMonitoringTrait};

pub struct PerformanceMonitor {
    operations: Arc<Mutex<HashMap<String, OperationMetrics>>>,
    aggregated_metrics: Arc<Mutex<HashMap<String, AggregatedMetrics>>>,
    initialized: bool,
}

/// –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
#[derive(Debug, Clone)]
struct OperationMetrics {
    id: String,
    name: String,
    start_time: Instant,
    #[allow(dead_code)] // –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
    start_timestamp: SystemTime,
}

/// –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
#[derive(Debug, Clone)]
struct AggregatedMetrics {
    operation_name: String,
    total_count: u64,
    success_count: u64,
    failure_count: u64,
    total_duration_ms: u64,
    avg_duration_ms: f64,
    min_duration_ms: u64,
    max_duration_ms: u64,
    last_operation: SystemTime,
}

impl Default for AggregatedMetrics {
    fn default() -> Self {
        Self {
            operation_name: String::new(),
            total_count: 0,
            success_count: 0,
            failure_count: 0,
            total_duration_ms: 0,
            avg_duration_ms: 0.0,
            min_duration_ms: u64::MAX,
            max_duration_ms: 0,
            last_operation: SystemTime::now(),
        }
    }
}

impl PerformanceMonitor {
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ PerformanceMonitor
    pub fn new() -> Self {
        Self {
            operations: Arc::new(Mutex::new(HashMap::new())),
            aggregated_metrics: Arc::new(Mutex::new(HashMap::new())),
            initialized: false,
        }
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
    pub async fn get_detailed_metrics(&self, period_minutes: u32) -> Result<String> {
        if !self.initialized {
            return Err(anyhow::anyhow!("PerformanceMonitor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"));
        }

        let aggregated = self
            .aggregated_metrics
            .lock()
            .map_err(|_| anyhow::anyhow!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫"))?;

        let mut result = format!(
            "=== –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {} –º–∏–Ω—É—Ç) ===\n",
            period_minutes
        );

        if aggregated.is_empty() {
            result.push_str("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ç—Ä–∏–∫–∞—Ö\n");
            return Ok(result);
        }

        for (op_name, metrics) in aggregated.iter() {
            result.push_str(&format!(
                "\nüìä –û–ø–µ—Ä–∞—Ü–∏—è: {}\n\
                 ‚îú‚îÄ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}\n\
                 ‚îú‚îÄ –£—Å–ø–µ—à–Ω—ã—Ö: {} ({:.1}%)\n\
                 ‚îú‚îÄ –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {} ({:.1}%)\n\
                 ‚îú‚îÄ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {:.2} –º—Å\n\
                 ‚îú‚îÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {} –º—Å\n\
                 ‚îú‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {} –º—Å\n\
                 ‚îî‚îÄ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è: {:?}\n",
                op_name,
                metrics.total_count,
                metrics.success_count,
                if metrics.total_count > 0 {
                    metrics.success_count as f64 / metrics.total_count as f64 * 100.0
                } else {
                    0.0
                },
                metrics.failure_count,
                if metrics.total_count > 0 {
                    metrics.failure_count as f64 / metrics.total_count as f64 * 100.0
                } else {
                    0.0
                },
                metrics.avg_duration_ms,
                if metrics.min_duration_ms == u64::MAX {
                    0
                } else {
                    metrics.min_duration_ms
                },
                metrics.max_duration_ms,
                metrics.last_operation
            ));
        }

        Ok(result)
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    pub fn get_active_operations(&self) -> Result<Vec<String>> {
        let operations = self
            .operations
            .lock()
            .map_err(|_| anyhow::anyhow!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"))?;

        let active: Vec<String> = operations
            .iter()
            .map(|(id, op)| {
                format!(
                    "{}: {} (–∑–∞–ø—É—â–µ–Ω–∞ {:?} –Ω–∞–∑–∞–¥)",
                    id,
                    op.name,
                    op.start_time.elapsed()
                )
            })
            .collect();

        Ok(active)
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    pub fn get_slowest_operations(&self, limit: usize) -> Result<Vec<(String, f64)>> {
        let aggregated = self
            .aggregated_metrics
            .lock()
            .map_err(|_| anyhow::anyhow!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫"))?;

        let mut operations: Vec<(String, f64)> = aggregated
            .iter()
            .map(|(name, metrics)| (name.clone(), metrics.avg_duration_ms))
            .collect();

        operations.sort_by(|a, b| b.1.partial_cmp(&a.1).unwrap_or(std::cmp::Ordering::Equal));
        operations.truncate(limit);

        Ok(operations)
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    pub fn get_success_rates(&self) -> Result<HashMap<String, f64>> {
        let aggregated = self
            .aggregated_metrics
            .lock()
            .map_err(|_| anyhow::anyhow!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫"))?;

        let success_rates: HashMap<String, f64> = aggregated
            .iter()
            .map(|(name, metrics)| {
                let rate = if metrics.total_count > 0 {
                    metrics.success_count as f64 / metrics.total_count as f64 * 100.0
                } else {
                    0.0
                };
                (name.clone(), rate)
            })
            .collect();

        Ok(success_rates)
    }

    /// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫ (maintenance)
    pub fn cleanup_old_metrics(&self, max_age_hours: u64) -> Result<usize> {
        let mut cleaned = 0;

        // –û—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–∏—Å—à–∏–µ)
        {
            let mut operations = self
                .operations
                .lock()
                .map_err(|_| anyhow::anyhow!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"))?;

            let max_age = std::time::Duration::from_secs(max_age_hours * 3600);
            operations.retain(|_, op| {
                if op.start_time.elapsed() > max_age {
                    cleaned += 1;
                    warn!("–£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å—à—É—é –æ–ø–µ—Ä–∞—Ü–∏—é: {} (id: {})", op.name, op.id);
                    false
                } else {
                    true
                }
            });
        }

        debug!("PerformanceMonitor: –æ—á–∏—â–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫", cleaned);
        Ok(cleaned)
    }
}

#[async_trait]
impl PerformanceMonitoringTrait for PerformanceMonitor {
    fn start_operation(&self, operation_name: &str) -> String {
        let operation_id = Uuid::new_v4().to_string();

        let metrics = OperationMetrics {
            id: operation_id.clone(),
            name: operation_name.to_string(),
            start_time: Instant::now(),
            start_timestamp: SystemTime::now(),
        };

        if let Ok(mut operations) = self.operations.lock() {
            operations.insert(operation_id.clone(), metrics);
            debug!(
                "PerformanceMonitor: –Ω–∞—á–∞–ª–∞—Å—å –æ–ø–µ—Ä–∞—Ü–∏—è '{}' —Å ID {}",
                operation_name, operation_id
            );
        }

        operation_id
    }

    fn finish_operation(&self, operation_id: &str, success: bool) {
        let operation = {
            let mut operations = match self.operations.lock() {
                Ok(ops) => ops,
                Err(_) => {
                    warn!("PerformanceMonitor: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
                    return;
                }
            };

            operations.remove(operation_id)
        };

        if let Some(op) = operation {
            let duration_ms = op.start_time.elapsed().as_millis() as u64;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if let Ok(mut aggregated) = self.aggregated_metrics.lock() {
                let metrics = aggregated.entry(op.name.clone()).or_default();
                metrics.operation_name = op.name.clone();
                metrics.total_count += 1;

                if success {
                    metrics.success_count += 1;
                } else {
                    metrics.failure_count += 1;
                }

                metrics.total_duration_ms += duration_ms;
                metrics.avg_duration_ms =
                    metrics.total_duration_ms as f64 / metrics.total_count as f64;
                metrics.min_duration_ms = metrics.min_duration_ms.min(duration_ms);
                metrics.max_duration_ms = metrics.max_duration_ms.max(duration_ms);
                metrics.last_operation = SystemTime::now();
            }

            debug!(
                "PerformanceMonitor: –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è '{}' –∑–∞ {} –º—Å (—É—Å–ø–µ—Ö: {})",
                op.name, duration_ms, success
            );
        } else {
            warn!(
                "PerformanceMonitor: –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é: {}",
                operation_id
            );
        }
    }

    async fn get_metrics(&self, _period_minutes: u32) -> Result<HashMap<String, f64>> {
        if !self.initialized {
            return Err(anyhow::anyhow!("PerformanceMonitor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"));
        }

        let aggregated = self
            .aggregated_metrics
            .lock()
            .map_err(|_| anyhow::anyhow!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫"))?;

        let mut metrics = HashMap::new();

        for (op_name, op_metrics) in aggregated.iter() {
            metrics.insert(
                format!("{}_total_count", op_name),
                op_metrics.total_count as f64,
            );
            metrics.insert(
                format!("{}_success_rate", op_name),
                if op_metrics.total_count > 0 {
                    op_metrics.success_count as f64 / op_metrics.total_count as f64 * 100.0
                } else {
                    0.0
                },
            );
            metrics.insert(
                format!("{}_avg_duration_ms", op_name),
                op_metrics.avg_duration_ms,
            );
            metrics.insert(
                format!("{}_max_duration_ms", op_name),
                op_metrics.max_duration_ms as f64,
            );
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        let active_ops = self.operations.lock().map(|ops| ops.len()).unwrap_or(0);
        metrics.insert("active_operations_count".to_string(), active_ops as f64);

        Ok(metrics)
    }

    fn reset_metrics(&self) {
        if let Ok(mut operations) = self.operations.lock() {
            operations.clear();
        }

        if let Ok(mut aggregated) = self.aggregated_metrics.lock() {
            aggregated.clear();
        }

        info!("PerformanceMonitor: –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
    }
}

#[async_trait]
impl ComponentLifecycleTrait for PerformanceMonitor {
    async fn initialize(&self) -> Result<()> {
        info!("PerformanceMonitor: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞");

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        self.reset_metrics();

        info!("PerformanceMonitor: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        Ok(())
    }

    async fn health_check(&self) -> Result<()> {
        if !self.initialized {
            return Err(anyhow::anyhow!("PerformanceMonitor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –∑–∞–≤–∏—Å–ª–∏
        {
            let _operations = self
                .operations
                .lock()
                .map_err(|_| anyhow::anyhow!("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"))?;
            let _aggregated = self
                .aggregated_metrics
                .lock()
                .map_err(|_| anyhow::anyhow!("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"))?;
        }

        debug!("PerformanceMonitor: health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
        Ok(())
    }

    async fn shutdown(&self) -> Result<()> {
        info!("PerformanceMonitor: –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown");

        // –í production –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
        // - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        // - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ persistent storage
        // - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ monitoring —Å–∏—Å—Ç–µ–º—É

        // –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.reset_metrics();

        info!("PerformanceMonitor: shutdown –∑–∞–≤–µ—Ä—à–µ–Ω");
        Ok(())
    }
}

#[cfg(all(test, feature = "extended-tests"))]
mod tests {
    use super::*;
    use tokio::time::{sleep, Duration};

    #[tokio::test]
    async fn test_operation_tracking() {
        let monitor = PerformanceMonitor::new();
        monitor.initialize().await.unwrap();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        let op_id = monitor.start_operation("test_operation");
        assert!(!op_id.is_empty());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
        let active = monitor.get_active_operations().unwrap();
        assert_eq!(active.len(), 1);
        assert!(active[0].contains("test_operation"));

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        monitor.finish_operation(&op_id, true);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        let active = monitor.get_active_operations().unwrap();
        assert_eq!(active.len(), 0);
    }

    #[tokio::test]
    async fn test_metrics_aggregation() {
        let monitor = PerformanceMonitor::new();
        monitor.initialize().await.unwrap();

        // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π
        for i in 0..5 {
            let op_id = monitor.start_operation("test_op");
            sleep(Duration::from_millis(10)).await;
            monitor.finish_operation(&op_id, i % 2 == 0); // 60% —É—Å–ø–µ—à–Ω—ã—Ö
        }

        let metrics = monitor.get_metrics(60).await.unwrap();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        assert_eq!(metrics.get("test_op_total_count"), Some(&5.0));
        assert_eq!(metrics.get("test_op_success_rate"), Some(&60.0));
        assert!(metrics.contains_key("test_op_avg_duration_ms"));
    }

    #[tokio::test]
    async fn test_success_rates() {
        let monitor = PerformanceMonitor::new();
        monitor.initialize().await.unwrap();

        // –£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        for _ in 0..8 {
            let op_id = monitor.start_operation("successful_op");
            monitor.finish_operation(&op_id, true);
        }

        // –ù–µ—É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        for _ in 0..2 {
            let op_id = monitor.start_operation("successful_op");
            monitor.finish_operation(&op_id, false);
        }

        let success_rates = monitor.get_success_rates().unwrap();
        assert_eq!(success_rates.get("successful_op"), Some(&80.0));
    }

    #[tokio::test]
    async fn test_detailed_metrics_report() {
        let monitor = PerformanceMonitor::new();
        monitor.initialize().await.unwrap();

        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        let op_id = monitor.start_operation("detailed_test");
        monitor.finish_operation(&op_id, true);

        let report = monitor.get_detailed_metrics(60).await.unwrap();
        assert!(report.contains("detailed_test"));
        assert!(report.contains("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1"));
        assert!(report.contains("–£—Å–ø–µ—à–Ω—ã—Ö: 1"));
    }
}
