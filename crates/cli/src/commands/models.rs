use anyhow::Result;
use clap::{Args, Subcommand};
use ai::{MODEL_REGISTRY, ModelType};
use tracing::{info, warn, error};

#[derive(Debug, Args)]
pub struct ModelsCommand {
    #[command(subcommand)]
    command: ModelsSubcommand,
}

#[derive(Debug, Subcommand)]
enum ModelsSubcommand {
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
    #[command(visible_alias = "ls")]
    List {
        /// –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –º–æ–¥–µ–ª–∏
        #[arg(short, long)]
        model_type: Option<String>,
        
        /// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        #[arg(short, long)]
        available_only: bool,
    },
    
    /// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    #[command(visible_alias = "diag")]
    Diagnose,
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    #[command(visible_alias = "info")]
    Show {
        /// –ò–º—è –º–æ–¥–µ–ª–∏
        model_name: String,
    },
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–¥–µ–ª—è–º
    #[command(visible_alias = "rec")]
    Recommendations,
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π
    #[command(visible_alias = "check")]
    Check,
}

impl ModelsCommand {
    pub async fn execute(self) -> Result<()> {
        match self.command {
            ModelsSubcommand::List { model_type, available_only } => {
                Self::list_models(model_type, available_only)
            }
            ModelsSubcommand::Diagnose => Self::diagnose_models(),
            ModelsSubcommand::Show { model_name } => Self::show_model(&model_name),
            ModelsSubcommand::Recommendations => Self::show_recommendations(),
            ModelsSubcommand::Check => Self::check_models(),
        }
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    fn list_models(model_type_filter: Option<String>, available_only: bool) -> Result<()> {
        info!("üìã –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:");
        
        // –ü–∞—Ä—Å–∏–º —Ñ–∏–ª—å—Ç—Ä —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        let filter_type = match model_type_filter.as_deref() {
            Some("embedding") | Some("emb") => Some(ModelType::Embedding),
            Some("reranker") | Some("rerank") => Some(ModelType::Reranker),
            Some(unknown) => {
                warn!("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏: {}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: embedding, reranker", unknown);
                None
            }
            None => None,
        };
        
        let models = MODEL_REGISTRY.get_available_models(filter_type);
        
        if models.is_empty() {
            warn!("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º");
            return Ok(());
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        let mut embedding_models = Vec::new();
        let mut reranker_models = Vec::new();
        
        for model in models {
            if available_only && !MODEL_REGISTRY.is_model_available(&model.name) {
                continue;
            }
            
            match model.model_type {
                ModelType::Embedding => embedding_models.push(model),
                ModelType::Reranker => reranker_models.push(model),
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º embedding –º–æ–¥–µ–ª–∏
        if !embedding_models.is_empty() {
            info!("\nüî§ Embedding –º–æ–¥–µ–ª–∏:");
            for model in embedding_models {
                let status = if MODEL_REGISTRY.is_model_available(&model.name) {
                    "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞"
                } else {
                    "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                };
                let default_mark = if model.is_default { " [–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é]" } else { "" };
                
                info!("  üì¶ {}{}", model.name, default_mark);
                info!("     –°—Ç–∞—Ç—É—Å: {}", status);
                info!("     –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", model.embedding_dim);
                info!("     –ú–∞–∫—Å. –¥–ª–∏–Ω–∞: {}", model.max_length);
                info!("     –û–ø–∏—Å–∞–Ω–∏–µ: {}", model.description);
                info!("");
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º reranker –º–æ–¥–µ–ª–∏
        if !reranker_models.is_empty() {
            info!("üîÑ Reranker –º–æ–¥–µ–ª–∏:");
            for model in reranker_models {
                let status = if MODEL_REGISTRY.is_model_available(&model.name) {
                    "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞"
                } else {
                    "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                };
                let default_mark = if model.is_default { " [–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é]" } else { "" };
                
                info!("  üì¶ {}{}", model.name, default_mark);
                info!("     –°—Ç–∞—Ç—É—Å: {}", status);
                info!("     –ú–∞–∫—Å. –¥–ª–∏–Ω–∞: {}", model.max_length);
                info!("     –û–ø–∏—Å–∞–Ω–∏–µ: {}", model.description);
                info!("");
            }
        }
        
        Ok(())
    }
    
    /// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π
    fn diagnose_models() -> Result<()> {
        info!("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ–ª–µ–π...");
        
        MODEL_REGISTRY.diagnose_models()?;
        
        info!("\nüìÇ –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º:");
        info!("  - –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: models/");
        info!("  - –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: MAGRAY_MODELS_DIR");
        
        Ok(())
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    fn show_model(model_name: &str) -> Result<()> {
        if let Some(model_info) = MODEL_REGISTRY.get_model_info(model_name) {
            info!("üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏: {}", model_name);
            info!("  üè∑Ô∏è –¢–∏–ø: {:?}", model_info.model_type);
            info!("  üìè –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", model_info.embedding_dim);
            info!("  üìê –ú–∞–∫—Å. –¥–ª–∏–Ω–∞: {}", model_info.max_length);
            info!("  üéØ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {}", if model_info.is_default { "–î–∞" } else { "–ù–µ—Ç" });
            info!("  üìù –û–ø–∏—Å–∞–Ω–∏–µ: {}", model_info.description);
            
            let model_path = MODEL_REGISTRY.get_model_path(model_name);
            info!("  üìÇ –ü—É—Ç—å: {}", model_path.display());
            
            let is_available = MODEL_REGISTRY.is_model_available(model_name);
            info!("  ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞: {}", if is_available { "–î–∞" } else { "–ù–µ—Ç" });
            
            if is_available {
                let model_file = model_path.join("model.onnx");
                let tokenizer_file = model_path.join("tokenizer.json");
                
                if let Ok(model_metadata) = std::fs::metadata(&model_file) {
                    info!("  üìä –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {:.1} MB", 
                        model_metadata.len() as f64 / 1024.0 / 1024.0);
                }
                
                if tokenizer_file.exists() {
                    info!("  üî§ –¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
                }
            } else {
                error!("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—É—Ç–∏");
                info!("üí° –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏");
            }
        } else {
            error!("‚ùå –ú–æ–¥–µ–ª—å '{}' –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", model_name);
            info!("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'magray models list' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π");
        }
        
        Ok(())
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    fn show_recommendations() -> Result<()> {
        info!("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–¥–µ–ª–µ–π:");
        
        let recommendations = MODEL_REGISTRY.get_recommendations();
        
        if recommendations.is_empty() {
            info!("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
        } else {
            for (i, recommendation) in recommendations.iter().enumerate() {
                info!("  {}. {}", i + 1, recommendation);
            }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        info!("\nüéØ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
        info!("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Qwen3 –º–æ–¥–µ–ª–∏ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞");
        info!("  ‚Ä¢ BGE –º–æ–¥–µ–ª–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á");
        info!("  ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ models/ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞");
        info!("  ‚Ä¢ –î–ª—è GPU —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --features gpu –ø—Ä–∏ —Å–±–æ—Ä–∫–µ");
        
        Ok(())
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π
    fn check_models() -> Result<()> {
        info!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π...");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        let ai_config = ai::AiConfig::default();
        info!("üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π: {}", ai_config.models_dir.display());
        
        info!("üî§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ embedding:");
        info!("  - –ú–æ–¥–µ–ª—å: {}", ai_config.embedding.model_name);
        info!("  - Batch size: {}", ai_config.embedding.batch_size);
        info!("  - Max length: {}", ai_config.embedding.max_length);
        info!("  - Use GPU: {}", ai_config.embedding.use_gpu);
        
        info!("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ reranking:");
        info!("  - –ú–æ–¥–µ–ª—å: {}", ai_config.reranking.model_name);
        info!("  - Batch size: {}", ai_config.reranking.batch_size);
        info!("  - Max length: {}", ai_config.reranking.max_length);
        info!("  - Use GPU: {}", ai_config.reranking.use_gpu);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let embedding_available = MODEL_REGISTRY.is_model_available(&ai_config.embedding.model_name);
        let reranking_available = MODEL_REGISTRY.is_model_available(&ai_config.reranking.model_name);
        
        info!("\nüìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:");
        info!("  - Embedding ({}): {}", 
            ai_config.embedding.model_name,
            if embedding_available { "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" } else { "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞" }
        );
        info!("  - Reranking ({}): {}", 
            ai_config.reranking.model_name,
            if reranking_available { "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" } else { "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞" }
        );
        
        if !embedding_available || !reranking_available {
            warn!("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
            info!("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'magray models recommendations' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π");
        } else {
            info!("\n‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã!");
        }
        
        Ok(())
    }
}