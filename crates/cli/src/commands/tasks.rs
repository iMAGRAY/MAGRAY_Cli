use anyhow::Result;
use clap::{Args, Subcommand};
use colored::*;
use todo::{create_default_service, Priority, TaskState};

#[derive(Debug, Args)]
pub struct TasksCommand {
    #[command(subcommand)]
    command: TasksSubcommand,
}

#[derive(Debug, Clone, Subcommand)]
pub enum TasksSubcommand {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    #[command(name = "create")]
    Create {
        /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
        title: String,
        /// –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        #[arg(short, long)]
        description: Option<String>,
        /// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (low, medium, high, critical)
        #[arg(short, long, default_value = "medium")]
        priority: String,
        /// –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        #[arg(short, long)]
        tags: Option<String>,
    },
    /// –ü–æ–∫–∞–∑–∞—Ç—å N –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
    #[command(name = "list")]
    List {
        #[arg(long, default_value_t = 20)]
        limit: usize,
        /// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        #[arg(long)]
        state: Option<String>,
    },
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID
    #[command(name = "show")]
    Show { id: String },
    /// –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
    #[command(name = "done")]
    Done { id: String },
    /// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ cancelled)
    #[command(name = "rm")]
    Rm { id: String },
    /// –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
    #[command(name = "depends")]
    Depends {
        /// ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç
        task_id: String,
        /// ID –∑–∞–¥–∞—á–∏, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –∑–∞–≤–∏—Å–∏—Ç
        depends_on: String,
    },
    /// –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    #[command(name = "graph")]
    Graph {
        /// –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (text, mermaid)
        #[arg(short, long, default_value = "text")]
        format: String,
        /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≥—Ä–∞—Ñ–∞
        #[arg(long, default_value_t = 5)]
        depth: usize,
    },
    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    #[command(name = "stats")]
    Stats,
}

impl TasksCommand {
    pub async fn execute(self) -> Result<()> {
        handle(self.command).await
    }
}

async fn handle(cmd: TasksSubcommand) -> Result<()> {
    let db_path = super::super::util::default_tasks_db_path();
    let svc = create_default_service(db_path).await?;

    match cmd {
        TasksSubcommand::Create {
            title,
            description,
            priority,
            tags,
        } => {
            let priority = match priority.to_lowercase().as_str() {
                "low" => Priority::Low,
                "medium" => Priority::Medium,
                "high" => Priority::High,
                "critical" => Priority::Critical,
                _ => {
                    println!(
                        "{} Unknown priority '{}'. Using 'medium'",
                        "‚ö†".yellow(),
                        priority
                    );
                    Priority::Medium
                }
            };

            let tags = if let Some(tags_str) = tags {
                tags_str
                    .split(',')
                    .map(|s| s.trim().to_string())
                    .filter(|s| !s.is_empty())
                    .collect()
            } else {
                vec![]
            };

            let task = svc
                .create_task(
                    title,
                    description.unwrap_or_else(|| "No description".to_string()),
                    priority,
                    tags,
                )
                .await?;

            println!(
                "{} –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {} [{}]",
                "‚úì".green(),
                task.title.bold(),
                task.id
            );
            println!("   –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {:?}", task.priority);
            println!("   —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {:?}", task.state);
        }
        TasksSubcommand::List { limit, state } => {
            let tasks = if let Some(state_str) = state {
                let state_enum = match state_str.to_lowercase().as_str() {
                    "ready" => TaskState::Ready,
                    "in_progress" => TaskState::InProgress,
                    "done" => TaskState::Done,
                    "blocked" => TaskState::Blocked,
                    "failed" => TaskState::Failed,
                    "cancelled" => TaskState::Cancelled,
                    "planned" => TaskState::Planned,
                    _ => {
                        println!(
                            "{} Unknown state '{}'. Using search",
                            "‚ö†".yellow(),
                            state_str
                        );
                        return Ok(());
                    }
                };
                svc.get_by_state(state_enum, limit).await?
            } else {
                svc.get_next_ready(limit).await?
            };
            println!(
                "{} {}",
                "‚úì".green(),
                format!("–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {}", tasks.len()).bold()
            );
            for t in tasks {
                let state_icon = match t.state {
                    TaskState::Ready => "‚ö°".yellow(),
                    TaskState::InProgress => "üîÑ".cyan(),
                    TaskState::Done => "‚úÖ".green(),
                    TaskState::Blocked => "üö´".red(),
                    TaskState::Failed => "‚ùå".red(),
                    TaskState::Cancelled => "‚ö™".white(),
                    TaskState::Planned => "üìã".blue(),
                };

                println!(
                    "{} {} {} [{}] {}",
                    state_icon,
                    t.id.to_string()
                        .get(0..8)
                        .unwrap_or(&t.id.to_string())
                        .dimmed(),
                    t.title.bold(),
                    format!("{:?}", t.priority).to_lowercase(),
                    format!("{:?}", t.state).to_lowercase().dimmed()
                );

                if !t.tags.is_empty() {
                    println!("     tags: {}", t.tags.join(", ").cyan());
                }
            }
        }
        TasksSubcommand::Show { id } => {
            let id = uuid::Uuid::parse_str(&id)?;
            if let Some(t) = svc.get_cached(&id).await? {
                println!("{} {}", "‚òê".cyan(), t.title.bold());
                println!("  id: {}", t.id);
                println!("  state: {:?}", t.state);
                println!("  created: {}", t.created_at);
                println!("  updated: {}", t.updated_at);
                if let Some(r) = &t.reasoning {
                    println!("  reasoning: {r}");
                }
                if let Some(tool) = &t.tool_hint {
                    println!("  tool_hint: {tool}");
                }
            } else {
                println!("{} –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "‚úó".red());
            }
        }
        TasksSubcommand::Done { id } => {
            let id = uuid::Uuid::parse_str(&id)?;
            svc.update_state(&id, TaskState::Done).await?;
            println!("{} –ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", "‚úì".green());
        }
        TasksSubcommand::Rm { id } => {
            let id = uuid::Uuid::parse_str(&id)?;
            svc.update_state(&id, TaskState::Cancelled).await?;
            println!("{} –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", "‚úì".green());
        }
        TasksSubcommand::Depends {
            task_id,
            depends_on,
        } => {
            let task_uuid = uuid::Uuid::parse_str(&task_id)?;
            let depends_uuid = uuid::Uuid::parse_str(&depends_on)?;

            svc.add_dependency(&task_uuid, &depends_uuid).await?;

            println!(
                "{} –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {} ‚Üí {}",
                "üîó".cyan(),
                task_id,
                depends_on
            );
        }
        TasksSubcommand::Graph { format, depth } => match format.to_lowercase().as_str() {
            "text" => {
                println!("{} –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:", "üìä".blue());
                let graph_text = svc.visualize_graph_text(depth).await?;
                println!("{graph_text}");
            }
            "mermaid" => {
                println!("{} Mermaid –≥—Ä–∞—Ñ:", "üìä".blue());
                let mermaid_graph = svc.visualize_graph_mermaid(depth).await?;
                println!("{mermaid_graph}");
            }
            _ => {
                println!(
                    "{} Unknown format '{}'. Supported: text, mermaid",
                    "‚úó".red(),
                    format
                );
            }
        },
        TasksSubcommand::Stats => {
            let (task_stats, graph_stats) = svc.get_stats().await?;
            println!("{} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á", "üìä".yellow());
            println!("  total: {}", task_stats.total);
            println!(
                "  ‚ö° ready: {}  üîÑ in_progress: {}  üö´ blocked: {}",
                task_stats.ready, task_stats.in_progress, task_stats.blocked
            );
            println!(
                "  ‚úÖ done: {}  ‚ùå failed: {}  ‚ö™ cancelled: {}",
                task_stats.done, task_stats.failed, task_stats.cancelled
            );
            println!("  üìã planned: {}", task_stats.planned);
            println!(
                "{} –ì—Ä–∞—Ñ: –∑–∞–¥–∞—á={}, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π={}, –∫—ç—à={}",
                "üîó".blue(),
                graph_stats.total_tasks,
                graph_stats.total_dependencies,
                graph_stats.cache_size
            );
        }
    }
    Ok(())
}
