use anyhow::Result;
use clap::{Args, Subcommand};
use colored::*;

#[derive(Debug, Args)]
pub struct MemoryCommand {
    #[command(subcommand)]
    command: MemorySubcommand,
}

#[derive(Debug, Clone, Subcommand)]
pub enum MemorySubcommand {
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
    #[command(name = "store")]
    Store {
        /// –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        #[arg(long)]
        text: String,
        /// –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ–ª–∞–≥–∏ –¥–ª—è —Ç–µ–≥–æ–≤
        #[arg(long, num_args=0..)]
        tag: Vec<String>,
    },
    /// –ü–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
    #[command(name = "search")]
    Search {
        /// –ó–∞–ø—Ä–æ—Å (–ø–æ–¥—Å—Ç—Ä–æ–∫–∞)
        #[arg(long)]
        query: String,
        /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        #[arg(long, default_value_t = 10)]
        top_k: usize,
    },
    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
    #[command(name = "stats")]
    Stats,
}

impl MemoryCommand {
    pub async fn execute(self) -> Result<()> { handle(self.command).await }
}

async fn handle(cmd: MemorySubcommand) -> Result<()> {
    let legacy = memory::di::LegacyMemoryConfig::default();
    let svc = memory::DIMemoryService::new(legacy).await?;

    match cmd {
        MemorySubcommand::Store { text, tag } => {
            let id = svc.store(&text, tag).await?;
            println!("{} –ó–∞–ø–∏—Å–∞–Ω–æ —Å id={}", "‚úì".green(), id);
        }
        MemorySubcommand::Search { query, top_k } => {
            let results = svc.search(&query, top_k).await?;
            println!("{} –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", "üîé".yellow(), results.len());
            for (i, rec) in results.iter().enumerate() {
                println!("{} {} {}", format!("{}.", i + 1).bold(), rec.id, rec.created_ms);
                if !rec.tags.is_empty() { println!("   tags: {:?}", rec.tags); }
                println!("   {}", rec.text);
            }
        }
        MemorySubcommand::Stats => {
            let h = svc.check_health().await?;
            println!("{} healthy={}, records={}", "Œ£".yellow(), h.healthy, h.records);
        }
    }
    Ok(())
}