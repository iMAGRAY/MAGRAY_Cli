//! Request Routing Service - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
//!
//! –°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ —Ç–æ–º, –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å:
//! - –ß–∞—Ç —Å LLM
//! - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SmartRouter

#![allow(dead_code)] // Allow unused code during development
//! - –°–º–µ—à–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
//!
//! –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ IntentAnalysisService –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç
//! business logic –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.

use super::types::{AgentResponse, IntentDecision, OperationResult, RequestContext};
use anyhow::Result;
use router::SmartRouter;
use std::sync::Arc;
use std::time::Duration;
use tracing::{debug, info, warn};

/// Trait –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
#[async_trait::async_trait]
pub trait RequestRoutingService: Send + Sync {
    /// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
    async fn route_request(
        &self,
        context: &RequestContext,
        intent: &IntentDecision,
    ) -> Result<OperationResult<AgentResponse>>;

    /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    async fn recommend_routing(
        &self,
        context: &RequestContext,
        intent: &IntentDecision,
    ) -> Result<RoutingRecommendation>;

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    async fn get_routing_stats(&self) -> RoutingStats;

    /// –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    async fn reset_stats(&self);
}

/// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
#[derive(Debug, Clone)]
pub struct RoutingRecommendation {
    pub route_type: RouteType,
    pub confidence: f64,
    pub reasoning: String,
    pub estimated_duration: Duration,
    pub resource_requirements: ResourceRequirements,
}

/// –¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum RouteType {
    /// –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç —Å LLM
    DirectChat,
    /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SmartRouter
    ToolExecution,
    /// –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (—á–∞—Ç + –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
    Hybrid,
    /// –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏)
    Reject,
}

/// –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Å—É—Ä—Å–∞–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
#[derive(Debug, Clone)]
pub struct ResourceRequirements {
    pub estimated_memory_mb: u64,
    pub estimated_cpu_cores: f32,
    pub requires_network: bool,
    pub requires_file_system: bool,
    pub estimated_tokens: Option<u64>,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
#[derive(Debug, Clone)]
pub struct RoutingStats {
    pub total_requests: u64,
    pub route_distribution: std::collections::HashMap<RouteType, u64>,
    pub avg_routing_time_ms: f64,
    pub successful_routes: u64,
    pub failed_routes: u64,
    pub rejected_routes: u64,
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
pub struct DefaultRequestRoutingService {
    /// SmartRouter –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    smart_router: SmartRouter,

    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
    stats: parking_lot::RwLock<RoutingStats>,

    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    config: RoutingConfig,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
#[derive(Debug, Clone)]
pub struct RoutingConfig {
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    pub min_confidence_direct: f64,

    /// –ü–æ—Ä–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    pub hybrid_threshold: f64,

    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    pub max_execution_time: Duration,

    /// –í–∫–ª—é—á–∏—Ç—å –ª–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
    pub enable_smart_routing: bool,

    /// –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    pub blocked_patterns: Vec<String>,
}

impl Default for RoutingConfig {
    fn default() -> Self {
        Self {
            min_confidence_direct: 0.7,
            hybrid_threshold: 0.5,
            max_execution_time: Duration::from_secs(120),
            enable_smart_routing: true,
            blocked_patterns: vec![
                "rm -rf".to_string(),
                "format c:".to_string(),
                "delete system32".to_string(),
            ],
        }
    }
}

impl DefaultRequestRoutingService {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    pub fn new(smart_router: SmartRouter) -> Self {
        Self::with_config(smart_router, RoutingConfig::default())
    }

    /// –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn with_config(smart_router: SmartRouter, config: RoutingConfig) -> Self {
        Self {
            smart_router,
            stats: parking_lot::RwLock::new(RoutingStats::default()),
            config,
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
    fn is_request_blocked(&self, message: &str) -> bool {
        let message_lower = message.to_lowercase();
        self.config
            .blocked_patterns
            .iter()
            .any(|pattern| message_lower.contains(&pattern.to_lowercase()))
    }

    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å business logic –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    fn determine_route_type(&self, intent: &IntentDecision, context: &RequestContext) -> RouteType {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if self.is_request_blocked(&context.message) {
            warn!(
                "üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {}",
                context.message
            );
            return RouteType::Reject;
        }

        let confidence = intent.confidence;
        let action_type = intent.action_type.as_str();

        match action_type {
            "chat" => {
                if confidence >= self.config.min_confidence_direct {
                    RouteType::DirectChat
                } else if confidence >= self.config.hybrid_threshold {
                    // –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ - –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    RouteType::Hybrid
                } else {
                    RouteType::DirectChat // Fallback
                }
            }
            "tools" => {
                if confidence >= self.config.min_confidence_direct {
                    RouteType::ToolExecution
                } else if confidence >= self.config.hybrid_threshold {
                    // –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö - –¥–æ–±–∞–≤–∏–º —á–∞—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
                    RouteType::Hybrid
                } else {
                    RouteType::ToolExecution // Fallback
                }
            }
            _ => {
                // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                warn!(
                    "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                    action_type
                );
                RouteType::Hybrid
            }
        }
    }

    /// –û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Å—É—Ä—Å–∞–º
    fn estimate_resource_requirements(
        &self,
        route_type: &RouteType,
        context: &RequestContext,
    ) -> ResourceRequirements {
        match route_type {
            RouteType::DirectChat => ResourceRequirements {
                estimated_memory_mb: 50,
                estimated_cpu_cores: 0.5,
                requires_network: true,
                requires_file_system: false,
                estimated_tokens: Some(context.message.len() as u64 * 2), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            },
            RouteType::ToolExecution => ResourceRequirements {
                estimated_memory_mb: 100,
                estimated_cpu_cores: 1.0,
                requires_network: true,
                requires_file_system: true,
                estimated_tokens: Some(context.message.len() as u64 * 4),
            },
            RouteType::Hybrid => ResourceRequirements {
                estimated_memory_mb: 150,
                estimated_cpu_cores: 1.5,
                requires_network: true,
                requires_file_system: true,
                estimated_tokens: Some(context.message.len() as u64 * 6),
            },
            RouteType::Reject => ResourceRequirements {
                estimated_memory_mb: 1,
                estimated_cpu_cores: 0.01,
                requires_network: false,
                requires_file_system: false,
                estimated_tokens: None,
            },
        }
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    fn update_stats(&self, route_type: RouteType, duration: Duration, success: bool) {
        let mut stats = self.stats.write();
        stats.total_requests += 1;

        *stats
            .route_distribution
            .entry(route_type.clone())
            .or_insert(0) += 1;

        if success {
            stats.successful_routes += 1;
        } else {
            stats.failed_routes += 1;
        }

        if route_type == RouteType::Reject {
            stats.rejected_routes += 1;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        let duration_ms = duration.as_millis() as f64;
        let total = stats.total_requests as f64;
        stats.avg_routing_time_ms =
            ((stats.avg_routing_time_ms * (total - 1.0)) + duration_ms) / total;
    }
}

#[async_trait::async_trait]
impl RequestRoutingService for DefaultRequestRoutingService {
    async fn route_request(
        &self,
        context: &RequestContext,
        intent: &IntentDecision,
    ) -> Result<OperationResult<AgentResponse>> {
        use std::time::Instant;
        use tokio::time::timeout;

        let start_time = Instant::now();

        debug!("üîÄ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞: {}", context.message);

        let route_type = self.determine_route_type(intent, context);

        debug!(
            "üìç –í—ã–±—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç: {:?} (confidence: {:.2})",
            route_type, intent.confidence
        );

        let result = match route_type {
            RouteType::DirectChat => {
                // –î–ª—è —á–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω LlmCommunicationService
                Ok(AgentResponse::Chat(format!(
                    "ROUTE_TO_CHAT: {}",
                    context.message
                )))
            }
            RouteType::ToolExecution => {
                // –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ SmartRouter —Å timeout
                info!("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SmartRouter: {}", context.message);
                let router_future = self.smart_router.process_smart_request(&context.message);
                match timeout(self.config.max_execution_time, router_future).await {
                    Ok(Ok(result)) => Ok(AgentResponse::ToolExecution(result)),
                    Ok(Err(e)) => Err(e),
                    Err(_) => Err(anyhow::anyhow!(
                        "SmartRouter timeout after {:?}",
                        self.config.max_execution_time
                    )),
                }
            }
            RouteType::Hybrid => {
                // –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —Å–Ω–∞—á–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –ø–æ—Ç–æ–º —á–∞—Ç –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
                info!("üîÄ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: {}", context.message);
                let router_future = self.smart_router.process_smart_request(&context.message);
                match timeout(self.config.max_execution_time, router_future).await {
                    Ok(Ok(tool_result)) => {
                        // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —á–∞—Ç
                        let combined_response = format!(
                            "HYBRID_RESULT: {}\nCHAT_FOLLOWUP: {}",
                            tool_result, context.message
                        );
                        Ok(AgentResponse::ToolExecution(combined_response))
                    }
                    Ok(Err(_)) => {
                        // Fallback –Ω–∞ —á–∞—Ç –µ—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                        warn!("‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã failed –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ, fallback –Ω–∞ —á–∞—Ç");
                        Ok(AgentResponse::Chat(format!(
                            "ROUTE_TO_CHAT: {}",
                            context.message
                        )))
                    }
                    Err(_) => {
                        warn!("‚ö†Ô∏è Timeout –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ, fallback –Ω–∞ —á–∞—Ç");
                        Ok(AgentResponse::Chat(format!(
                            "ROUTE_TO_CHAT: {}",
                            context.message
                        )))
                    }
                }
            }
            RouteType::Reject => {
                warn!("üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω: {}", context.message);
                Err(anyhow::anyhow!("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –ø–æ –ø–æ–ª–∏—Ç–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"))
            }
        };

        let duration = start_time.elapsed();
        let success = result.is_ok();

        self.update_stats(route_type, duration, success);

        Ok(OperationResult {
            result,
            duration,
            retries: 0, // –ü–æ–∫–∞ –±–µ–∑ retry –ª–æ–≥–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            from_cache: false,
        })
    }

    async fn recommend_routing(
        &self,
        context: &RequestContext,
        intent: &IntentDecision,
    ) -> Result<RoutingRecommendation> {
        let route_type = self.determine_route_type(intent, context);
        let resource_requirements = self.estimate_resource_requirements(&route_type, context);

        let estimated_duration = match route_type {
            RouteType::DirectChat => Duration::from_secs(10),
            RouteType::ToolExecution => Duration::from_secs(30),
            RouteType::Hybrid => Duration::from_secs(45),
            RouteType::Reject => Duration::from_millis(1),
        };

        let reasoning = match route_type {
            RouteType::DirectChat => "–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —á–∞—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–∏".to_string(),
            RouteType::ToolExecution => "–ß—ë—Ç–∫–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã".to_string(),
            RouteType::Hybrid => "–ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥".to_string(),
            RouteType::Reject => "–ó–∞–ø—Ä–æ—Å –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏".to_string(),
        };

        Ok(RoutingRecommendation {
            route_type,
            confidence: intent.confidence,
            reasoning,
            estimated_duration,
            resource_requirements,
        })
    }

    async fn get_routing_stats(&self) -> RoutingStats {
        let stats = self.stats.read();
        stats.clone()
    }

    async fn reset_stats(&self) {
        let mut stats = self.stats.write();
        *stats = RoutingStats::default();
        debug!("üîÑ Routing stats reset");
    }
}

impl Default for RoutingStats {
    fn default() -> Self {
        Self {
            total_requests: 0,
            route_distribution: std::collections::HashMap::new(),
            avg_routing_time_ms: 0.0,
            successful_routes: 0,
            failed_routes: 0,
            rejected_routes: 0,
        }
    }
}

/// Factory —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
pub fn create_request_routing_service(smart_router: SmartRouter) -> Arc<dyn RequestRoutingService> {
    Arc::new(DefaultRequestRoutingService::new(smart_router))
}

/// Factory —Ñ—É–Ω–∫—Ü–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
pub fn create_request_routing_service_with_config(
    smart_router: SmartRouter,
    config: RoutingConfig,
) -> Arc<dyn RequestRoutingService> {
    Arc::new(DefaultRequestRoutingService::with_config(
        smart_router,
        config,
    ))
}

#[cfg(test)]
mod tests {
    use super::*;
    use chrono::Utc;

    fn create_test_context(message: &str) -> RequestContext {
        RequestContext {
            message: message.to_string(),
            user_id: Some("test_user".to_string()),
            session_id: Some("test_session".to_string()),
            timestamp: Utc::now(),
            metadata: std::collections::HashMap::new(),
        }
    }

    fn create_test_intent(action_type: &str, confidence: f64) -> IntentDecision {
        IntentDecision {
            action_type: action_type.to_string(),
            confidence,
            reasoning: "Test decision".to_string(),
            extracted_params: std::collections::HashMap::new(),
        }
    }

    #[test]
    fn test_blocked_requests() {
        // –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–æ–∫ SmartRouter
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —ç—Ç–æ –±—ã–ª –±—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π mock
        let smart_router = SmartRouter::new(
            llm::LlmClient::from_env().expect("Operation failed - converted from unwrap()"),
        );
        let service = DefaultRequestRoutingService::new(smart_router);

        assert!(service.is_request_blocked("rm -rf /"));
        assert!(service.is_request_blocked("Please format c: drive"));
        assert!(!service.is_request_blocked("–ü–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ"));
    }

    #[test]
    fn test_route_type_determination() {
        let smart_router = SmartRouter::new(
            llm::LlmClient::from_env().expect("Operation failed - converted from unwrap()"),
        );
        let service = DefaultRequestRoutingService::new(smart_router);

        let context = create_test_context("–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª test.rs");

        // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        let intent = create_test_intent("tools", 0.9);
        let route_type = service.determine_route_type(&intent, &context);
        assert_eq!(route_type, RouteType::ToolExecution);

        // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ
        let intent = create_test_intent("chat", 0.9);
        let route_type = service.determine_route_type(&intent, &context);
        assert_eq!(route_type, RouteType::DirectChat);

        // –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        let intent = create_test_intent("tools", 0.4);
        let route_type = service.determine_route_type(&intent, &context);
        assert_eq!(route_type, RouteType::ToolExecution); // Fallback
    }

    #[test]
    fn test_resource_estimation() {
        let smart_router = SmartRouter::new(
            llm::LlmClient::from_env().expect("Operation failed - converted from unwrap()"),
        );
        let service = DefaultRequestRoutingService::new(smart_router);

        let context = create_test_context("–ø—Ä–∏–≤–µ—Ç –º–∏—Ä");

        let chat_resources =
            service.estimate_resource_requirements(&RouteType::DirectChat, &context);
        assert_eq!(chat_resources.estimated_memory_mb, 50);
        assert!(chat_resources.requires_network);
        assert!(!chat_resources.requires_file_system);

        let tool_resources =
            service.estimate_resource_requirements(&RouteType::ToolExecution, &context);
        assert_eq!(tool_resources.estimated_memory_mb, 100);
        assert!(tool_resources.requires_file_system);
    }
}
