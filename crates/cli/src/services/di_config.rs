//! DI Configuration –¥–ª—è Service Layer
//!
//! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Dependency Injection –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
//! –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Service Layer: IntentAnalysisService, RequestRoutingService,
//! LlmCommunicationService, ResilienceService, –∏ ServiceOrchestrator.

use anyhow::Result;
use llm::IntentAnalyzerAgent;
use llm::LlmClient;
use memory::di::DIContainer;
use memory::di::UnifiedContainer as DIMemoryService;
use memory::service_di::default_config;
use router::SmartRouter;
use std::sync::Arc;

use super::{
    intent_analysis::create_intent_analysis_service,
    llm_communication::create_llm_communication_service,
    orchestrator::create_service_orchestrator,
    request_routing::create_request_routing_service,
    resilience::{create_resilience_service, DefaultResilienceService},
    IntentAnalysisService, LlmCommunicationService, RequestRoutingService, ServiceOrchestrator,
};

/// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ  
pub fn register_services(_container: &DIContainer, _llm_client: LlmClient) -> Result<()> {
    tracing::info!("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Services Layer –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ");

    // Note: DI Container API has changed, services will be instantiated directly when needed
    // This is a temporary workaround until DI API is stabilized

    tracing::info!("‚úÖ Services Layer registration completed (direct instantiation mode)");
    Ok(())
}

/// –°–æ–∑–¥–∞–Ω–∏–µ Services Container —Å Direct Instantiation
///
/// –ü–æ—Å–∫–æ–ª—å–∫—É DI Container API –∏–∑–º–µ–Ω–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
/// —Å –∏–Ω—ä–µ–∫—Ü–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ factory —Ñ—É–Ω–∫—Ü–∏–∏.
pub async fn create_services_container() -> Result<ServicesContainer> {
    tracing::info!("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ Services Container —Å –ø—Ä—è–º–æ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–µ–π");

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    let llm_client = LlmClient::from_env()?;
    let memory_service = DIMemoryService::new();
    let memory_service_for_orchestrator = DIMemoryService::new();

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    let intent_analyzer = IntentAnalyzerAgent::new(llm_client.clone());
    let intent_analysis = create_intent_analysis_service(intent_analyzer);

    let smart_router = SmartRouter::new(llm_client.clone());
    let request_routing = create_request_routing_service(smart_router);

    let llm_communication = create_llm_communication_service(llm_client.clone());
    let resilience = create_resilience_service();

    let orchestrator = create_service_orchestrator(
        intent_analysis.clone(),
        request_routing.clone(),
        llm_communication.clone(),
        resilience.clone(),
        memory_service_for_orchestrator,
    );

    tracing::info!("‚úÖ Services Container –≥–æ—Ç–æ–≤");

    Ok(ServicesContainer {
        intent_analysis,
        request_routing,
        llm_communication,
        resilience,
        orchestrator,
        memory_service,
        llm_client: Arc::new(llm_client),
    })
}

/// Container –¥–ª—è –≤—Å–µ—Ö Services Layer —Å–µ—Ä–≤–∏—Å–æ–≤
///
/// –ü–æ—Å–∫–æ–ª—å–∫—É DI Container API –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π struct
/// –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.
pub struct ServicesContainer {
    pub intent_analysis: Arc<dyn IntentAnalysisService>,
    pub request_routing: Arc<dyn RequestRoutingService>,
    pub llm_communication: Arc<dyn LlmCommunicationService>,
    pub resilience: Arc<DefaultResilienceService>,
    pub orchestrator: Arc<dyn ServiceOrchestrator>,
    pub memory_service: DIMemoryService,
    pub llm_client: Arc<LlmClient>,
}

impl ServicesContainer {
    /// –ü–æ–ª—É—á–∏—Ç—å service orchestrator
    pub fn get_orchestrator(&self) -> Arc<dyn ServiceOrchestrator> {
        self.orchestrator.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å intent analysis service
    pub fn get_intent_analysis(&self) -> Arc<dyn IntentAnalysisService> {
        self.intent_analysis.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å request routing service
    pub fn get_request_routing(&self) -> Arc<dyn RequestRoutingService> {
        self.request_routing.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å LLM communication service
    pub fn get_llm_communication(&self) -> Arc<dyn LlmCommunicationService> {
        self.llm_communication.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å resilience service
    pub fn get_resilience(&self) -> Arc<DefaultResilienceService> {
        self.resilience.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å memory service
    pub fn get_memory_service(&self) -> &DIMemoryService {
        &self.memory_service
    }

    /// –ü–æ–ª—É—á–∏—Ç—å LLM client
    pub fn get_llm_client(&self) -> Arc<LlmClient> {
        self.llm_client.clone()
    }
}

/// Legacy function –¥–ª—è compatibility - —Å–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π DI container
pub async fn create_services_container_legacy() -> Result<DIContainer> {
    tracing::info!("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ Legacy DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞");

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    let container = DIContainer::new();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º memory —Å–µ—Ä–≤–∏—Å—ã
    let _memory_config = default_config()?;
    let _memory_service = DIMemoryService::new();
    // Note: DI Container interface has changed, using direct instantiation

    // –°–æ–∑–¥–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
    let llm_client = LlmClient::from_env()?;

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    register_services(&container, llm_client)?;

    // Note: Validation removed due to API changes

    tracing::info!("‚úÖ Legacy DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–æ—Ç–æ–≤");
    Ok(container)
}
