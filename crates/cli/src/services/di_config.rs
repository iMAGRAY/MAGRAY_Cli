//! DI Configuration –¥–ª—è Services Layer
//! 
//! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
//! –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º memory DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º.

use anyhow::Result;
use std::sync::Arc;
use memory::{DIContainer, Lifetime};
use llm::{LlmClient, IntentAnalyzerAgent};
use router::SmartRouter;
use memory::di::UnifiedContainer as DIMemoryService;

use super::{
    IntentAnalysisService, RequestRoutingService, LlmCommunicationService,
    ResilienceService, ServiceOrchestrator,
    intent_analysis::{create_intent_analysis_service, DefaultIntentAnalysisService},
    request_routing::{create_request_routing_service, DefaultRequestRoutingService},
    llm_communication::{create_llm_communication_service, DefaultLlmCommunicationService},
    resilience::{create_resilience_service, DefaultResilienceService},
    orchestrator::{create_service_orchestrator, DefaultServiceOrchestrator},
};

/// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
pub fn register_services(container: &DIContainer, llm_client: LlmClient) -> Result<()> {
    tracing::info!("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Services Layer –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ");
    
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    container.register_instance(llm_client.clone())?;
    
    // 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Intent Analysis Service
    container.register(
        |container| {
            let llm_client = container.resolve::<LlmClient>()?;
            let intent_analyzer = IntentAnalyzerAgent::new(llm_client.clone());
            Ok(create_intent_analysis_service(intent_analyzer))
        },
        Lifetime::Singleton,
    )?;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    container.add_dependency_info::<Arc<dyn IntentAnalysisService>, LlmClient>()?;
    
    // 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Request Routing Service  
    container.register(
        |container| {
            let llm_client = container.resolve::<LlmClient>()?;
            let smart_router = SmartRouter::new(llm_client.clone());
            Ok(create_request_routing_service(smart_router))
        },
        Lifetime::Singleton,
    )?;
    
    container.add_dependency_info::<Arc<dyn RequestRoutingService>, LlmClient>()?;
    
    // 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º LLM Communication Service
    container.register(
        |container| {
            let llm_client = container.resolve::<LlmClient>()?;
            Ok(create_llm_communication_service(llm_client.clone()))
        },
        Lifetime::Singleton,
    )?;
    
    container.add_dependency_info::<Arc<dyn LlmCommunicationService>, LlmClient>()?;
    
    // 5. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Resilience Service (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    container.register(
        |_container| {
            Ok(create_resilience_service())
        },
        Lifetime::Singleton,
    )?;
    
    // 6. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Orchestrator (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö)
    container.register(
        |container| {
            let intent_analysis = container.resolve::<Arc<dyn IntentAnalysisService>>()?;
            let request_routing = container.resolve::<Arc<dyn RequestRoutingService>>()?;
            let llm_communication = container.resolve::<Arc<dyn LlmCommunicationService>>()?;
            let resilience = container.resolve::<Arc<dyn ResilienceService>>()?;
            let memory_service = container.resolve::<DIMemoryService>()?;
            
            Ok(create_service_orchestrator(
                intent_analysis,
                request_routing,
                llm_communication,
                resilience,
                memory_service,
            ))
        },
        Lifetime::Singleton,
    )?;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    container.add_dependency_info::<Arc<dyn ServiceOrchestrator>, Arc<dyn IntentAnalysisService>>()?;
    container.add_dependency_info::<Arc<dyn ServiceOrchestrator>, Arc<dyn RequestRoutingService>>()?;
    container.add_dependency_info::<Arc<dyn ServiceOrchestrator>, Arc<dyn LlmCommunicationService>>()?;
    container.add_dependency_info::<Arc<dyn ServiceOrchestrator>, Arc<dyn ResilienceService>>()?;
    container.add_dependency_info::<Arc<dyn ServiceOrchestrator>, DIMemoryService>()?;
    
    tracing::info!("‚úÖ Services Layer –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ");
    Ok(())
}

/// –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å services layer
pub async fn create_services_container() -> Result<DIContainer> {
    use memory::{DIContainerBuilder, default_config};
    
    tracing::info!("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å Services Layer");
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    let container = DIContainerBuilder::new().build()?;
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º memory —Å–µ—Ä–≤–∏—Å—ã
    let memory_config = default_config()?;
    let memory_service = DIMemoryService::new(memory_config).await?;
    container.register_instance(memory_service)?;
    
    // –°–æ–∑–¥–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
    let llm_client = LlmClient::from_env()?;
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    register_services(&container, llm_client)?;  
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    container.validate_dependencies()?;
    
    tracing::info!("‚úÖ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å Services Layer –≥–æ—Ç–æ–≤");
    Ok(container)
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#[cfg(test)]
pub mod test_helpers {
    use super::*;
    use memory::di::UnifiedContainer as DIMemoryService;
    
    pub async fn create_test_container() -> Result<DIContainer> {
        let container = DIContainerBuilder::new().build()?;
        
        // –°–æ–∑–¥–∞–µ–º mock memory service –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        let memory_config = default_config()?;
        let memory_service = DIMemoryService::new(memory_config).await?;
        container.register_instance(memory_service)?;
        
        // –°–æ–∑–¥–∞–µ–º test LLM client
        let llm_client = LlmClient::from_env()?;
        
        register_services(&container, llm_client)?;
        container.validate_dependencies()?;
        
        Ok(container)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[tokio::test]
    async fn test_services_di_registration() -> Result<()> {
        let container = test_helpers::create_test_container().await?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        assert!(container.is_registered::<Arc<dyn IntentAnalysisService>>());
        assert!(container.is_registered::<Arc<dyn RequestRoutingService>>());
        assert!(container.is_registered::<Arc<dyn LlmCommunicationService>>());
        assert!(container.is_registered::<Arc<dyn ResilienceService>>());
        assert!(container.is_registered::<Arc<dyn ServiceOrchestrator>>());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –∏—Ö —Ä–∞–∑—Ä–µ—à–∏—Ç—å
        let _intent_service = container.resolve::<Arc<dyn IntentAnalysisService>>()?;
        let _routing_service = container.resolve::<Arc<dyn RequestRoutingService>>()?;
        let _llm_service = container.resolve::<Arc<dyn LlmCommunicationService>>()?;
        let _resilience_service = container.resolve::<Arc<dyn ResilienceService>>()?;
        let _orchestrator = container.resolve::<Arc<dyn ServiceOrchestrator>>()?;
        
        Ok(())
    }
    
    #[tokio::test] 
    async fn test_orchestrator_dependencies() -> Result<()> {
        let container = test_helpers::create_test_container().await?;
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        let orchestrator = container.resolve::<Arc<dyn ServiceOrchestrator>>()?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        let health = orchestrator.health_check().await;
        assert!(!health.service_statuses.is_empty());
        
        let stats = orchestrator.get_orchestrator_stats().await;
        assert_eq!(stats.total_requests, 0);
        
        Ok(())
    }
    
    #[tokio::test]
    async fn test_no_circular_dependencies() -> Result<()> {
        let container = test_helpers::create_test_container().await?;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ –±–µ–∑ –æ—à–∏–±–æ–∫ —Ü–∏—Ä–∫—É–ª—è—Ä–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        container.validate_dependencies()?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–∏–∫–ª–æ–≤ –Ω–µ—Ç
        let cycles = container.get_dependency_cycles();
        assert!(cycles.is_empty(), "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {:?}", cycles);
        
        Ok(())
    }
}