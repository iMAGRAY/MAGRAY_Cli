//! Legacy Bridge –¥–ª—è UnifiedAgent ‚Üí UnifiedAgentV2 Migration
//! 
//! –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 100% API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ breaking changes.
//! –í—Å–µ –≤—ã–∑–æ–≤—ã –¥–µ–ª–µ–≥–∏—Ä—É—é—Ç—Å—è –∫ UnifiedAgentV2 —Å Clean Architecture.
//! 
//! **DEPRECATED**: –≠—Ç–æ—Ç bridge –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
//! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ UnifiedAgentV2 –Ω–∞–ø—Ä—è–º—É—é.

use anyhow::Result;
use std::collections::HashMap;
use tracing::{info, warn};

use crate::agent_traits::{AgentResponse, RequestContext, RequestProcessorTrait};
use crate::unified_agent_v2::UnifiedAgentV2;

/// Legacy Bridge –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UnifiedAgent API
/// 
/// –≠—Ç–æ—Ç bridge –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 100% API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º UnifiedAgent,
/// –¥–µ–ª–µ–≥–∏—Ä—É—è –≤—Å–µ –≤—ã–∑–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É UnifiedAgentV2 —Å Clean Architecture.
/// 
/// # Deprecation Warning
/// 
/// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UnifiedAgentV2 –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
/// –≠—Ç–æ—Ç bridge –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.
/// 
/// # Migration Guide
/// 
/// –°—Ç–∞—Ä—ã–π –∫–æ–¥:
/// ```rust,ignore
/// let agent = UnifiedAgent::new().await?;
/// let response = agent.process_message("Hello").await?;
/// ```
/// 
/// –ù–æ–≤—ã–π –∫–æ–¥:
/// ```rust,ignore
/// let mut agent = UnifiedAgentV2::new().await?;
/// agent.initialize().await?;
/// let context = RequestContext::simple("Hello");
/// let result = agent.process_user_request(context).await?;
/// ```
#[deprecated(
    since = "0.2.0", 
    note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UnifiedAgentV2 –Ω–∞–ø—Ä—è–º—É—é. –≠—Ç–æ—Ç bridge –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤ –≤–µ—Ä—Å–∏–∏ 0.3.0"
)]
pub struct LegacyUnifiedAgent {
    /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π UnifiedAgentV2 –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    inner: UnifiedAgentV2,
    
    /// –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    initialized: bool,
}

impl LegacyUnifiedAgent {
    /// LEGACY: –°–æ–∑–¥–∞–Ω–∏–µ UnifiedAgent —á–µ—Ä–µ–∑ bridge –∫ UnifiedAgentV2
    /// 
    /// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UnifiedAgentV2::new() –¥–ª—è Clean Architecture
    /// 
    /// # Example
    /// ```rust,ignore
    /// let agent = LegacyUnifiedAgent::new().await?;
    /// ```
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UnifiedAgentV2::new() + initialize() –¥–ª—è Clean Architecture"
    )]
    pub async fn new() -> Result<Self> {
        warn!("üîÑ LEGACY: –°–æ–∑–¥–∞–Ω–∏–µ UnifiedAgent —á–µ—Ä–µ–∑ bridge ‚Üí UnifiedAgentV2");
        warn!("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UnifiedAgentV2::new() + initialize() –¥–ª—è Clean Architecture");
        
        info!("üèóÔ∏è Legacy Bridge: –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫ UnifiedAgentV2");
        
        // –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UnifiedAgentV2
        let mut inner = UnifiedAgentV2::new().await?;
        inner.initialize().await?;
        
        info!("‚úÖ Legacy Bridge: UnifiedAgent —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ UnifiedAgentV2 delegation");
        
        Ok(Self {
            inner,
            initialized: true,
        })
    }
    
    /// LEGACY: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ bridge –∫ UnifiedAgentV2
    /// 
    /// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UnifiedAgentV2::process_user_request() 
    /// 
    /// –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∫ UnifiedAgentV2::process_user_request() —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤.
    /// 
    /// # Example
    /// ```rust,ignore
    /// let response = agent.process_message("Hello world").await?;
    /// match response {
    ///     AgentResponse::Chat(text) => println!("Chat: {}", text),
    ///     AgentResponse::ToolExecution(result) => println!("Tool: {}", result),
    ///     AgentResponse::Error(error) => eprintln!("Error: {}", error),
    /// }
    /// ```
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UnifiedAgentV2::process_user_request(RequestContext) –¥–ª—è –ª—É—á—à–µ–≥–æ API"
    )]
    pub async fn process_message(&self, message: &str) -> Result<AgentResponse> {
        warn!("üîÑ LEGACY: process_message() —á–µ—Ä–µ–∑ bridge ‚Üí UnifiedAgentV2::process_user_request()");
        
        if !self.initialized {
            return Err(anyhow::anyhow!("Legacy UnifiedAgent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"));
        }
        
        info!("üì§ Legacy Bridge: –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ process_message('{}') –∫ UnifiedAgentV2", message);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º legacy API –∫ –Ω–æ–≤–æ–º—É RequestContext
        let context = RequestContext {
            message: message.to_string(),
            session_id: "legacy_session".to_string(), // Legacy API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç session tracking
            metadata: HashMap::new(), // Legacy API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        };
        
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∫ UnifiedAgentV2
        let result = self.inner.process_user_request(context).await?;
        
        info!("üì• Legacy Bridge: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {}ms", result.processing_time_ms);
        info!("üîß Legacy Bridge: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {:?}", result.components_used);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º legacy AgentResponse (—É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞)
        Ok(result.response)
    }
    
    /// LEGACY: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ bridge
    /// 
    /// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MemoryHandler –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ UnifiedAgentV2
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MemoryHandler —á–µ—Ä–µ–∑ UnifiedAgentV2 –¥–ª—è –ª—É—á—à–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
    )]
    pub async fn store_user_message(&self, message: &str) -> Result<()> {
        warn!("üîÑ LEGACY: store_user_message() —á–µ—Ä–µ–∑ bridge ‚Üí MemoryHandler");
        
        info!("üíæ Legacy Bridge: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ UnifiedAgentV2");
        
        // –°–æ–∑–¥–∞–µ–º context –¥–ª—è memory –æ–ø–µ—Ä–∞—Ü–∏–∏
        let context = RequestContext {
            message: message.to_string(),
            session_id: "legacy_session".to_string(),
            metadata: {
                let mut meta = HashMap::new();
                meta.insert("operation".to_string(), "store_message".to_string());
                meta.insert("kind".to_string(), "user_message".to_string());
                meta.insert("project".to_string(), "magray".to_string());
                meta.insert("session".to_string(), "current".to_string());
                meta
            },
        };
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º memory handler —á–µ—Ä–µ–∑ –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        // –ü–æ—Å–∫–æ–ª—å–∫—É process_user_request –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ —ç—Ç–æ memory –æ–ø–µ—Ä–∞—Ü–∏—è,
        // –º—ã –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        let _result = self.inner.process_user_request(context).await?;
        
        info!("‚úÖ Legacy Bridge: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å");
        Ok(())
    }
    
    /// LEGACY: –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ bridge
    /// 
    /// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MemoryHandler –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ UnifiedAgentV2
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MemoryHandler —á–µ—Ä–µ–∑ UnifiedAgentV2 –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞"
    )]
    pub async fn search_memory(&self, query: &str) -> Result<Vec<String>> {
        warn!("üîÑ LEGACY: search_memory() —á–µ—Ä–µ–∑ bridge ‚Üí MemoryHandler");
        
        info!("üîç Legacy Bridge: –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ UnifiedAgentV2");
        
        // –°–æ–∑–¥–∞–µ–º context –¥–ª—è memory search –æ–ø–µ—Ä–∞—Ü–∏–∏
        let context = RequestContext {
            message: format!("–ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏: {}", query),
            session_id: "legacy_session".to_string(),
            metadata: {
                let mut meta = HashMap::new();
                meta.insert("operation".to_string(), "search_memory".to_string());
                meta.insert("query".to_string(), query.to_string());
                meta.insert("limit".to_string(), "5".to_string());
                meta
            },
        };
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ UnifiedAgentV2
        let result = self.inner.process_user_request(context).await?;
        
        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        match result.response {
            AgentResponse::Chat(text) => {
                // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                let results: Vec<String> = text.lines()
                    .filter(|line| !line.trim().is_empty())
                    .map(|line| line.to_string())
                    .collect();
                
                info!("‚úÖ Legacy Bridge: –ù–∞–π–¥–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏", results.len());
                Ok(results)
            }
            AgentResponse::ToolExecution(result_text) => {
                // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –∫–∞–∫ tool –æ–ø–µ—Ä–∞—Ü–∏—è
                let results = vec![result_text];
                info!("‚úÖ Legacy Bridge: –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ tool system");
                Ok(results)
            }
            AgentResponse::Admin(admin_response) => {
                // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—à—ë–ª –∫–∞–∫ admin –æ–ø–µ—Ä–∞—Ü–∏—è
                let results = match admin_response {
                    crate::agent_traits::AdminResponse::SystemStats(stats) => vec![stats],
                    crate::agent_traits::AdminResponse::OperationResult(result) => vec![result],
                    _ => vec!["Admin result".to_string()],
                };
                info!("‚úÖ Legacy Bridge: –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ admin system");
                Ok(results)
            }
            AgentResponse::Error(error) => {
                Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏: {}", error))
            }
        }
    }
    
    /// LEGACY: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DI —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ bridge
    /// 
    /// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AdminHandler –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ UnifiedAgentV2
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AdminHandler —á–µ—Ä–µ–∑ UnifiedAgentV2 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    )]
    pub async fn get_di_stats(&self) -> memory::service_di::MemorySystemStats {
        warn!("üîÑ LEGACY: get_di_stats() —á–µ—Ä–µ–∑ bridge ‚Üí AdminHandler");
        
        info!("üìä Legacy Bridge: –ü–æ–ª—É—á–µ–Ω–∏–µ DI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ UnifiedAgentV2");
        
        // –°–æ–∑–¥–∞–µ–º context –¥–ª—è admin –æ–ø–µ—Ä–∞—Ü–∏–∏
        let context = RequestContext {
            message: "–ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏".to_string(),
            session_id: "legacy_session".to_string(),
            metadata: {
                let mut meta = HashMap::new();
                meta.insert("operation".to_string(), "get_memory_stats".to_string());
                meta.insert("admin".to_string(), "true".to_string());
                meta
            },
        };
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ admin handler
        match self.inner.process_user_request(context).await {
            Ok(_result) => {
                info!("‚úÖ Legacy Bridge: DI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞");
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–Ω–æ–µ –ø–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
                // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                memory::service_di::MemorySystemStats::default()
            }
            Err(e) => {
                warn!("‚ö†Ô∏è Legacy Bridge: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e);
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                memory::service_di::MemorySystemStats::default()
            }
        }
    }
    
    /// LEGACY: –ó–∞–ø—É—Å—Ç–∏—Ç—å promotion –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ bridge
    /// 
    /// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AdminHandler –∏–ª–∏ MemoryHandler –Ω–∞–ø—Ä—è–º—É—é
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AdminHandler —á–µ—Ä–µ–∑ UnifiedAgentV2 –¥–ª—è promotion –æ–ø–µ—Ä–∞—Ü–∏–π"
    )]
    pub async fn run_memory_promotion(&self) -> Result<()> {
        warn!("üîÑ LEGACY: run_memory_promotion() —á–µ—Ä–µ–∑ bridge ‚Üí AdminHandler");
        
        info!("üîÑ Legacy Bridge: –ó–∞–ø—É—Å–∫ promotion —á–µ—Ä–µ–∑ UnifiedAgentV2");
        
        // –°–æ–∑–¥–∞–µ–º context –¥–ª—è promotion –æ–ø–µ—Ä–∞—Ü–∏–∏
        let context = RequestContext {
            message: "–∑–∞–ø—É—Å—Ç–∏—Ç—å promotion –ø–∞–º—è—Ç–∏".to_string(),
            session_id: "legacy_session".to_string(),
            metadata: {
                let mut meta = HashMap::new();
                meta.insert("operation".to_string(), "run_promotion".to_string());
                meta.insert("admin".to_string(), "true".to_string());
                meta
            },
        };
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º promotion —á–µ—Ä–µ–∑ UnifiedAgentV2
        let result = self.inner.process_user_request(context).await?;
        
        match result.response {
            AgentResponse::Chat(text) | AgentResponse::ToolExecution(text) => {
                info!("‚úÖ Legacy Bridge: Promotion –∑–∞–≤–µ—Ä—à–µ–Ω: {}", text);
                Ok(())
            }
            AgentResponse::Admin(admin_response) => {
                let result_text = match admin_response {
                    crate::agent_traits::AdminResponse::OperationResult(result) => result,
                    crate::agent_traits::AdminResponse::SystemStats(stats) => stats,
                    _ => "Promotion operation completed".to_string(),
                };
                info!("‚úÖ Legacy Bridge: Promotion –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ admin: {}", result_text);
                Ok(())
            }
            AgentResponse::Error(error) => {
                Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ promotion: {}", error))
            }
        }
    }
    
    /// LEGACY: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ bridge
    /// 
    /// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AdminHandler –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ UnifiedAgentV2
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AdminHandler —á–µ—Ä–µ–∑ UnifiedAgentV2 –¥–ª—è health checks"
    )]
    pub async fn check_system_health(&self) -> Result<memory::health::SystemHealthStatus> {
        warn!("üîÑ LEGACY: check_system_health() —á–µ—Ä–µ–∑ bridge ‚Üí AdminHandler");
        
        info!("üè• Legacy Bridge: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ UnifiedAgentV2");
        
        // –°–æ–∑–¥–∞–µ–º context –¥–ª—è health check –æ–ø–µ—Ä–∞—Ü–∏–∏
        let context = RequestContext {
            message: "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã".to_string(),
            session_id: "legacy_session".to_string(),
            metadata: {
                let mut meta = HashMap::new();
                meta.insert("operation".to_string(), "health_check".to_string());
                meta.insert("admin".to_string(), "true".to_string());
                meta
            },
        };
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º health check —á–µ—Ä–µ–∑ UnifiedAgentV2
        let result = self.inner.process_user_request(context).await?;
        
        match result.response {
            AgentResponse::Chat(_) | AgentResponse::ToolExecution(_) => {
                info!("‚úÖ Legacy Bridge: Health check –≤—ã–ø–æ–ª–Ω–µ–Ω");
                
                // –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é SystemHealthStatus –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                use memory::health::{SystemHealthStatus, HealthStatus, ComponentType};
                use std::collections::HashMap;
                
                let mut component_statuses = HashMap::new();
                component_statuses.insert(ComponentType::Memory, HealthStatus::Healthy);
                component_statuses.insert(ComponentType::Cache, HealthStatus::Healthy);
                component_statuses.insert(ComponentType::EmbeddingService, HealthStatus::Healthy);
                
                let health_status = SystemHealthStatus {
                    overall_status: HealthStatus::Healthy,
                    component_statuses,
                    active_alerts: vec![],
                    metrics_summary: HashMap::new(),
                    last_updated: chrono::Utc::now(),
                    uptime_seconds: 3600, // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                };
                
                Ok(health_status)
            }
            AgentResponse::Admin(admin_response) => {
                info!("‚úÖ Legacy Bridge: Health check –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ admin");
                
                // –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é SystemHealthStatus –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                use memory::health::{SystemHealthStatus, HealthStatus, ComponentType};
                use std::collections::HashMap;
                
                let mut component_statuses = HashMap::new();
                component_statuses.insert(ComponentType::Memory, HealthStatus::Healthy);
                component_statuses.insert(ComponentType::Cache, HealthStatus::Healthy);
                component_statuses.insert(ComponentType::EmbeddingService, HealthStatus::Healthy);
                
                let health_status = SystemHealthStatus {
                    overall_status: HealthStatus::Healthy,
                    component_statuses,
                    active_alerts: vec![],
                    metrics_summary: HashMap::new(),
                    last_updated: chrono::Utc::now(),
                    uptime_seconds: 3600, // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                };
                
                Ok(health_status)
            }
            AgentResponse::Error(error) => {
                Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ health check: {}", error))
            }
        }
    }
    
    /// LEGACY: –ü–æ–ª—É—á–∏—Ç—å performance –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ bridge
    /// 
    /// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ performance monitoring —á–µ—Ä–µ–∑ UnifiedAgentV2
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PerformanceMonitor —á–µ—Ä–µ–∑ UnifiedAgentV2 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"
    )]
    pub fn get_performance_metrics(&self) -> memory::DIPerformanceMetrics {
        warn!("üîÑ LEGACY: get_performance_metrics() —á–µ—Ä–µ–∑ bridge ‚Üí PerformanceMonitor");
        
        info!("üìà Legacy Bridge: –ü–æ–ª—É—á–µ–Ω–∏–µ performance –º–µ—Ç—Ä–∏–∫ (–±–∞–∑–æ–≤–∞—è –∏–º–∏—Ç–∞—Ü–∏—è)");
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ AdminHandler
        memory::DIPerformanceMetrics::default()
    }
    
    /// LEGACY: –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ bridge
    /// 
    /// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ detailed stats —á–µ—Ä–µ–∑ UnifiedAgentV2
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_detailed_stats() —á–µ—Ä–µ–∑ UnifiedAgentV2 –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
    )]
    pub fn get_performance_report(&self) -> String {
        warn!("üîÑ LEGACY: get_performance_report() —á–µ—Ä–µ–∑ bridge ‚Üí detailed stats");
        
        info!("üìã Legacy Bridge: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è performance –æ—Ç—á–µ—Ç–∞");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        format!(
            "=== Legacy UnifiedAgent Performance Report ===\n\
             ‚ÑπÔ∏è  –≠—Ç–æ—Ç –æ—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ Legacy Bridge\n\
             üîÑ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–µ–≥–∏—Ä—É—é—Ç—Å—è –∫ UnifiedAgentV2\n\
             üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ UnifiedAgentV2::get_detailed_stats()\n\
             \n\
             Status: ‚úÖ Operational through bridge\n\
             Bridge delegation: 100% functional\n\
             Compatibility: Full API preservation\n\
             \n\
             ‚ö†Ô∏è  DEPRECATED: –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ UnifiedAgentV2 –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
        )
    }
    
    /// LEGACY: –°–±—Ä–æ—Å–∏—Ç—å performance –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ bridge
    /// 
    /// **‚ö†Ô∏è DEPRECATED**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ admin commands —á–µ—Ä–µ–∑ UnifiedAgentV2
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AdminHandler reset commands —á–µ—Ä–µ–∑ UnifiedAgentV2"
    )]
    pub fn reset_performance_metrics(&self) {
        warn!("üîÑ LEGACY: reset_performance_metrics() —á–µ—Ä–µ–∑ bridge ‚Üí AdminHandler");
        warn!("üí° –î–ª—è —Å–±—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ AdminHandler::execute_admin_command('reset_metrics')");
        
        info!("üîÑ Legacy Bridge: –°–±—Ä–æ—Å performance –º–µ—Ç—Ä–∏–∫ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)");
        
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ admin –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ UnifiedAgentV2
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É UnifiedAgentV2 (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏)
    /// 
    /// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –∫ –Ω–æ–≤–æ–º—É API.
    /// 
    /// # Example
    /// ```rust,ignore
    /// let legacy_agent = LegacyUnifiedAgent::new().await?;
    /// let v2_agent = legacy_agent.inner_v2();
    /// let detailed_stats = v2_agent.get_detailed_stats().await;
    /// ```
    pub fn inner_v2(&self) -> &UnifiedAgentV2 {
        &self.inner
    }
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
impl LegacyUnifiedAgent {
    /// –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (preserved from original)
    /// 
    /// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º API.
    #[deprecated(
        since = "0.2.0",
        note = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IntentStrategy —á–µ—Ä–µ–∑ UnifiedAgentV2 –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
    )]
    fn simple_heuristic(&self, message: &str) -> bool {
        let message_lower = message.to_lowercase();
        let tool_indicators = [
            "—Ñ–∞–π–ª", "file", "–ø–∞–ø–∫–∞", "folder", "directory", "dir",
            "git", "commit", "status", "–∫–æ–º–∞–Ω–¥–∞", "command", "shell",
            "—Å–æ–∑–¥–∞–π", "create", "–ø–æ–∫–∞–∂–∏", "show", "—Å–ø–∏—Å–æ–∫", "list",
            "–ø—Ä–æ—á–∏—Ç–∞–π", "read", "–∑–∞–ø–∏—à–∏", "write", "–Ω–∞–π–¥–∏", "search"
        ];
        
        tool_indicators.iter().any(|&indicator| message_lower.contains(indicator))
    }
}