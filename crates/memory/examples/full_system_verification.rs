use anyhow::Result;
use memory::{
    MemoryConfig, MemoryService, Layer, Record, 
    ComponentType, HealthConfig
};
use tracing::{info, error};
use uuid::Uuid;
use chrono::Utc;

/// –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –í–°–ï–• –°–ò–°–¢–ï–ú –ü–ê–ú–Ø–¢–ò
#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    info!("üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –°–ò–°–¢–ï–ú –ú–ê–ì–†–≠–ô");
    info!("==================================================\n");
    
    let mut overall_score = 0;
    let mut max_possible_score = 0;
    let mut failed_tests = Vec::new();
    
    // ========== –¢–ï–°–¢ 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø MEMORYS SERVICE ==========
    println!("üöÄ –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryService");
    println!("======================================");
    max_possible_score += 100;
    
    let temp_dir = tempfile::tempdir()?;
    let memory_config = MemoryConfig {
        db_path: temp_dir.path().join("full_verification_test"),
        cache_path: temp_dir.path().join("cache"),
        promotion: Default::default(),
        ai_config: Default::default(),
        health_config: HealthConfig::default(),
    };
    
    let memory_service = match MemoryService::new(memory_config).await {
        Ok(service) => {
            println!("  ‚úÖ MemoryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            overall_score += 100;
            service
        },
        Err(e) => {
            error!("  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MemoryService: {}", e);
            failed_tests.push("MemoryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è");
            return Ok(());
        }
    };
    
    // ========== –¢–ï–°–¢ 2: HEALTH MONITORING –°–ò–°–¢–ï–ú–ê ==========
    println!("\nüè• –¢–ï–°–¢ 2: Health Monitoring —Å–∏—Å—Ç–µ–º–∞");
    println!("===================================");
    max_possible_score += 100;
    
    let initial_health = memory_service.get_system_health();
    let health_score = if initial_health.component_statuses.len() >= 3 
        && initial_health.uptime_seconds >= 0 {
        println!("  ‚úÖ Health —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞");
        println!("    üìä –°—Ç–∞—Ç—É—Å: {:?}", initial_health.overall_status);
        println!("    üìà –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {}", initial_health.component_statuses.len());
        100
    } else {
        println!("  ‚ùå Health —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ");
        failed_tests.push("Health monitoring");
        50
    };
    overall_score += health_score;
    
    // ========== –¢–ï–°–¢ 3: VECTOR STORE –ò HNSW ==========
    println!("\nüóÑÔ∏è –¢–ï–°–¢ 3: VectorStore –∏ HNSW –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ");
    println!("============================================");
    max_possible_score += 150;
    
    let test_records = vec![
        create_test_record("–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è HNSW —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", Layer::Interact, 0.9),
        create_test_record("–í—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—å —Å –≤—ã—Å–æ–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é", Layer::Interact, 0.8),
        create_test_record("–¢—Ä–µ—Ç—å—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞", Layer::Insights, 0.7),
        create_test_record("–ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∑–∞–ø–∏—Å—å –≤ Assets —Å–ª–æ–µ", Layer::Assets, 0.6),
        create_test_record("–ü—è—Ç–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏", Layer::Interact, 0.5),
    ];
    
    println!("  üìù –í—Å—Ç–∞–≤–∫–∞ {} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π...", test_records.len());
    let insert_start = std::time::Instant::now();
    
    let mut insert_success = 0;
    for (i, record) in test_records.iter().enumerate() {
        match memory_service.insert(record.clone()).await {
            Ok(_) => {
                insert_success += 1;
                println!("    ‚úÖ –ó–∞–ø–∏—Å—å {} –≤—Å—Ç–∞–≤–ª–µ–Ω–∞", i + 1);
            },
            Err(e) => {
                println!("    ‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ {}: {}", i + 1, e);
            }
        }
    }
    
    let insert_duration = insert_start.elapsed();
    let insert_score = if insert_success == test_records.len() {
        println!("  ‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
        println!("    ‚è±Ô∏è –í—Ä–µ–º—è –≤—Å—Ç–∞–≤–∫–∏: {:?}", insert_duration);
        75
    } else {
        println!("  ‚ö†Ô∏è –í—Å—Ç–∞–≤–ª–µ–Ω–æ {}/{} –∑–∞–ø–∏—Å–µ–π", insert_success, test_records.len());
        failed_tests.push("VectorStore insert");
        25
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    println!("  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º —Å–ª–æ—è–º...");
    let search_start = std::time::Instant::now();
    
    let search_score = match memory_service
        .search("–∑–∞–ø–∏—Å—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        .with_layers(&[Layer::Interact, Layer::Insights, Layer::Assets])
        .top_k(3)
        .execute()
        .await {
        Ok(results) => {
            let search_duration = search_start.elapsed();
            println!("  ‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            println!("    üìä –ù–∞–π–¥–µ–Ω–æ: {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", results.len());
            println!("    ‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:?}", search_duration);
            
            for (i, result) in results.iter().enumerate() {
                println!("    {}. {:?}: {} (score: {:.3})", 
                         i + 1, result.layer, 
                         result.text.chars().take(30).collect::<String>(), 
                         result.score);
            }
            75
        },
        Err(e) => {
            println!("  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {}", e);
            failed_tests.push("VectorStore search");
            0
        }
    };
    
    let total_vectorstore_score = insert_score + search_score;
    overall_score += total_vectorstore_score;
    
    // ========== –¢–ï–°–¢ 4: PROMOTION ENGINE ==========
    println!("\n‚ö° –¢–ï–°–¢ 4: PromotionEngine");
    println!("========================");
    max_possible_score += 100;
    
    let promotion_start = std::time::Instant::now();
    let promotion_result = memory_service.run_promotion_cycle().await;
    
    let promotion_score = match promotion_result {
        Ok(stats) => {
            let promotion_duration = promotion_start.elapsed();
            println!("  ‚úÖ PromotionEngine —Ä–∞–±–æ—Ç–∞–µ—Ç");
            println!("    üìä Interact->Insights: {}", stats.interact_to_insights);
            println!("    üìä Insights->Assets: {}", stats.insights_to_assets);
            println!("    ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {}ms", stats.total_time_ms);
            println!("    ‚è±Ô∏è –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {:?}", promotion_duration);
            100
        },
        Err(e) => {
            println!("  ‚ùå –û—à–∏–±–∫–∞ PromotionEngine: {}", e);
            failed_tests.push("PromotionEngine");
            0
        }
    };
    overall_score += promotion_score;
    
    // ========== –¢–ï–°–¢ 5: BGE RERANKER ==========
    println!("\nü§ñ –¢–ï–°–¢ 5: BGE Reranker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è");
    println!("=================================");
    max_possible_score += 100;
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è reranking
    let documents_for_reranking = vec![
        "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏".to_string(),
        "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏".to_string(),
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö".to_string(),
        "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏".to_string(),
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å reranking —á–µ—Ä–µ–∑ MemoryService
    // (–ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä—è–º–æ–≥–æ API –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Å–≤–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ health status)
    let reranker_health = memory_service.get_component_health(ComponentType::RerankingService);
    
    let reranker_score = if let Some(stats) = reranker_health {
        println!("  ‚úÖ BGE Reranker –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω");
        println!("    üìä Success rate: {:.1}%", stats.success_rate * 100.0);
        println!("    üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", stats.total_requests);
        println!("    ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {:.2}ms", stats.avg_response_time_ms);
        100
    } else {
        println!("  ‚ö†Ô∏è BGE Reranker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        failed_tests.push("BGE Reranker availability");
        50
    };
    overall_score += reranker_score;
    
    // ========== –¢–ï–°–¢ 6: EMBEDDING SERVICE ==========
    println!("\nüß† –¢–ï–°–¢ 6: Embedding Service");
    println!("===========================");
    max_possible_score += 100;
    
    let embedding_health = memory_service.get_component_health(ComponentType::EmbeddingService);
    let embedding_score = if let Some(stats) = embedding_health {
        println!("  ‚úÖ EmbeddingService –∞–∫—Ç–∏–≤–µ–Ω");
        println!("    üìä Success rate: {:.1}%", stats.success_rate * 100.0);
        println!("    üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", stats.total_requests);
        
        if stats.success_rate >= 0.9 {
            100
        } else if stats.success_rate >= 0.5 {
            70
        } else {
            30
        }
    } else {
        println!("  ‚ùå EmbeddingService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        failed_tests.push("EmbeddingService");
        0
    };
    overall_score += embedding_score;
    
    // ========== –¢–ï–°–¢ 7: CACHE –°–ò–°–¢–ï–ú–ê ==========
    println!("\nüíæ –¢–ï–°–¢ 7: Cache —Å–∏—Å—Ç–µ–º–∞");
    println!("=======================");
    max_possible_score += 75;
    
    let cache_health = memory_service.get_component_health(ComponentType::Cache);
    let cache_score = if let Some(stats) = cache_health {
        println!("  ‚úÖ Cache —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç");
        println!("    üìä Success rate: {:.1}%", stats.success_rate * 100.0);
        println!("    üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {}", stats.total_requests);
        
        if stats.total_requests > 0 {
            75
        } else {
            50
        }
    } else {
        println!("  ‚ö†Ô∏è Cache —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è");
        50
    };
    overall_score += cache_score;
    
    // ========== –¢–ï–°–¢ 8: HEALTH CHECK –°–ò–°–¢–ï–ú–ê ==========
    println!("\nüîç –¢–ï–°–¢ 8: Health Check –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
    println!("=======================================");
    max_possible_score += 100;
    
    let health_check_start = std::time::Instant::now();
    let health_check_result = memory_service.run_health_check().await;
    
    let health_check_score = match health_check_result {
        Ok(health_status) => {
            let health_check_duration = health_check_start.elapsed();
            println!("  ‚úÖ Health check –≤—ã–ø–æ–ª–Ω–µ–Ω");
            println!("    üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {:?}", health_status.overall_status);
            println!("    üö® –ê–∫—Ç–∏–≤–Ω—ã—Ö alerts: {}", health_status.active_alerts.len());
            println!("    ‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {:?}", health_check_duration);
            
            if !health_status.active_alerts.is_empty() {
                println!("    üö® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:");
                for alert in &health_status.active_alerts {
                    println!("      {:?}: {}", alert.severity, alert.title);
                }
            }
            
            match health_status.overall_status {
                memory::health::HealthStatus::Healthy => 100,
                memory::health::HealthStatus::Degraded => 75,
                memory::health::HealthStatus::Unhealthy => 50,
                memory::health::HealthStatus::Down => 25,
            }
        },
        Err(e) => {
            println!("  ‚ùå –û—à–∏–±–∫–∞ health check: {}", e);
            failed_tests.push("Health check system");
            0
        }
    };
    overall_score += health_check_score;
    
    // ========== –¢–ï–°–¢ 9: PERFORMANCE –¢–ï–°–¢ ==========
    println!("\n‚ö° –¢–ï–°–¢ 9: Performance —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
    println!("=================================");
    max_possible_score += 75;
    
    let performance_start = std::time::Instant::now();
    let mut performance_operations = 0;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for i in 0..10 {
        let record = create_test_record(
            &format!("Performance —Ç–µ—Å—Ç –∑–∞–ø–∏—Å—å {}", i),
            Layer::Interact,
            0.5
        );
        
        if memory_service.insert(record).await.is_ok() {
            performance_operations += 1;
        }
        
        if i % 3 == 0 {
            let _ = memory_service
                .search(&format!("performance {}", i))
                .top_k(2)
                .execute()
                .await;
        }
    }
    
    let performance_duration = performance_start.elapsed();
    let ops_per_second = performance_operations as f64 / performance_duration.as_secs_f64();
    
    let performance_score = if performance_operations >= 8 && ops_per_second > 5.0 {
        println!("  ‚úÖ Performance —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω");
        println!("    üìä –û–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {}/10", performance_operations);
        println!("    ‚ö° –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {:.1}", ops_per_second);
        println!("    ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {:?}", performance_duration);
        75
    } else {
        println!("  ‚ö†Ô∏è Performance –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ");
        println!("    üìä –û–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {}/10", performance_operations);
        println!("    ‚ö° –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {:.1}", ops_per_second);
        failed_tests.push("Performance requirements");
        30
    };
    overall_score += performance_score;
    
    // ========== –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê ==========
    println!("\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò");
    println!("===============================");
    
    let final_percentage = (overall_score as f64 / max_possible_score as f64) * 100.0;
    
    println!("üìä –û–ë–©–ò–ô –°–ß–ï–¢: {}/{} ({:.1}%)", overall_score, max_possible_score, final_percentage);
    
    if failed_tests.is_empty() {
        println!("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!");
    } else {
        println!("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•:");
        for test in &failed_tests {
            println!("  ‚ùå {}", test);
        }
    }
    
    println!("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:");
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    let final_health = memory_service.get_system_health();
    
    println!("üîç –°–¢–ê–¢–£–° –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:");
    for (component, status) in &final_health.component_statuses {
        let status_icon = match status {
            memory::health::HealthStatus::Healthy => "‚úÖ",
            memory::health::HealthStatus::Degraded => "üü°", 
            memory::health::HealthStatus::Unhealthy => "üü†",
            memory::health::HealthStatus::Down => "‚ùå",
        };
        println!("  {} {:?}: {:?}", status_icon, component, status);
    }
    
    println!("\nüìà –ú–ï–¢–†–ò–ö–ò –°–ò–°–¢–ï–ú–´:");
    println!("  üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {} —Å–µ–∫—É–Ω–¥", final_health.uptime_seconds);
    println!("  üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {}", final_health.metrics_summary.len());
    println!("  üö® –ê–∫—Ç–∏–≤–Ω—ã—Ö alerts: {}", final_health.active_alerts.len());
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    println!("\nüéØ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢:");
    
    if final_percentage >= 95.0 && failed_tests.is_empty() {
        println!("üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö PRODUCTION!");
        println!("   –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω–æ!");
    } else if final_percentage >= 85.0 && failed_tests.len() <= 2 {
        println!("üëç –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏");
        println!("   –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ");
    } else if final_percentage >= 70.0 {
        println!("‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –§–£–ù–ö–¶–ò–û–ù–ò–†–£–ï–¢, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏");
        println!("   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏");
    } else {
        println!("‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö PRODUCTION");
        println!("   –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
    }
    
    println!("\\nüìä –ß–ï–°–¢–ù–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨: {:.0}%", final_percentage);
    
    Ok(())
}

/// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
fn create_test_record(text: &str, layer: Layer, score: f32) -> Record {
    Record {
        id: Uuid::new_v4(),
        text: text.to_string(),
        embedding: vec![0.1; 1024], // BGE-M3 —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
        layer,
        kind: "verification_test".to_string(),
        tags: vec!["full_test".to_string()],
        project: "full_verification".to_string(),
        session: Uuid::new_v4().to_string(),
        score,
        access_count: 1,
        ts: Utc::now(),
        last_access: Utc::now(),
    }
}