use anyhow::Result;
use ort::{session::Session, value::Tensor, inputs};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== MXBAI RERANK BASE V2: –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ===\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ MXBai
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("mxbai_rerank_base_v2")
        .join("model.onnx");
    
    println!("ü§î –í–ê–ñ–ù–´–ô –í–û–ü–†–û–°: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª 'mxbai –Ω–µ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è'");
    println!("üìã –ù–û config.json –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: Qwen2ForCausalLM");
    println!("üß™ –ü–†–û–í–ï–†–ò–ú: –ú–æ–∂–µ—Ç –ª–∏ CausalLM —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ reranker?");
    println!("üìÅ –ú–æ–¥–µ–ª—å: {}", model_path.display());
    println!("‚úÖ –ú–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", model_path.exists());
    
    if !model_path.exists() {
        return Err(anyhow::anyhow!("–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ORT
    println!("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime...");
    ort::init()
        .with_name("mxbai_rerank")
        .commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    println!("\n2. –°–æ–∑–¥–∞–Ω–∏–µ ONNX —Å–µ—Å—Å–∏–∏...");
    let mut session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    println!("   –í—Ö–æ–¥–æ–≤: {}", session.inputs.len());
    println!("   –í—ã—Ö–æ–¥–æ–≤: {}", session.outputs.len());
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤ –ø–æ–∫–∞–∂–µ—Ç –∏—Å—Ç–∏–Ω—É
    println!("\n3. üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–•–û–î–û–í:");
    for (i, input) in session.inputs.iter().enumerate() {
        println!("   {}: {} - {:?}", i, input.name, input.input_type);
    }
    
    // –ê–Ω–∞–ª–∏–∑ –≤—ã—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏
    println!("\n4. üîç –ê–ù–ê–õ–ò–ó –í–´–•–û–î–û–í:");
    for (i, output) in session.outputs.iter().enumerate() {
        println!("   {}: {} - {:?}", i, output.name, output.output_type);
    }
    
    // –ì–ò–ü–û–¢–ï–ó–ê: –ï—Å–ª–∏ –≤—Ö–æ–¥–æ–≤ –º–∞–ª–æ (3-4), —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ reranker —É–ø—Ä–æ—â–µ–Ω
    let num_inputs = session.inputs.len();
    println!("\n5. üß† –ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò:");
    
    if num_inputs <= 4 {
        println!("   ‚úÖ –í—Ö–æ–¥–æ–≤ –º–∞–ª–æ ({}): –í–æ–∑–º–æ–∂–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞!", num_inputs);
        println!("   üí° –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ–ª–Ω—ã—Ö KV –∫–µ—à–µ–π");
        
        // –ü—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã –¥–ª—è reranker
        println!("\n6. üß™ –¢–ï–°–¢: –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã –¥–ª—è reranker...");
        
        let seq_len = 6;
        let input_ids = vec![151643i64, 3555, 374, 15592, 1029, 151645]; // "What is AI?" + tokens
        let attention_mask = vec![1i64; seq_len];
        let position_ids: Vec<i64> = (0..seq_len as i64).collect();
        
        let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
        let attention_mask_tensor = Tensor::from_array(([1, seq_len], attention_mask))?;
        let position_ids_tensor = Tensor::from_array(([1, seq_len], position_ids))?;
        
        println!("‚úÖ –°–æ–∑–¥–∞–ª–∏ —Ç–µ–Ω–∑–æ—Ä—ã –¥–ª—è reranker —Ç–µ—Å—Ç–∞");
        
        // –ü–æ–ø—ã—Ç–∫–∞ inference —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏
        let result = session.run(inputs![
            "input_ids" => input_ids_tensor,
            "attention_mask" => attention_mask_tensor,
            "position_ids" => position_ids_tensor
        ]);
        
        match result {
            Ok(outputs) => {
                println!("üéâ –ù–ï–í–ï–†–û–Ø–¢–ù–û! MXBAI –†–ê–ë–û–¢–ê–ï–¢ –° 3 –í–•–û–î–ê–ú–ò!");
                println!("   –ü–æ–ª—É—á–µ–Ω–æ {} –≤—ã—Ö–æ–¥–æ–≤", outputs.len());
                
                // –ò—â–µ–º reranking scores
                for (name, output) in outputs.iter() {
                    if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
                        let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
                        println!("   –í—ã—Ö–æ–¥ '{}': —Ñ–æ—Ä–º–∞ {:?}, –¥–∞–Ω–Ω—ã—Ö {}", name, shape_vec, data.len());
                        
                        // –î–ª—è reranker –∏—â–µ–º —Å–∫–∞–ª—è—Ä –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä
                        if shape_vec.len() <= 2 && data.len() > 0 {
                            println!("   üéØ –í–û–ó–ú–û–ñ–ù–´–ï RERANK SCORES!");
                            println!("   –î–∞–Ω–Ω—ã–µ: {:?}", &data[..data.len().min(10)]);
                        }
                    }
                }
                
                println!("\n‚úÖ –û–¢–ö–†–´–¢–ò–ï: MXBai CausalLM –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π reranker!");
                println!("‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω—ã—Ö KV –∫–µ—à–µ–π –¥–ª—è reranking –∑–∞–¥–∞—á!");
                
            },
            Err(e) => {
                println!("‚ùå –í—Å–µ –µ—â–µ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã: {}", e);
                
                if format!("{}", e).contains("Missing Input:") {
                    println!("üí° –ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ö–æ–¥–æ–≤ —á–µ–º –±–∞–∑–æ–≤—ã–µ 3");
                    println!("üí° –í–æ–∑–º–æ–∂–Ω–æ –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ–ª–Ω–∞—è CausalLM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞");
                }
            }
        }
        
    } else {
        println!("   ‚ùå –í—Ö–æ–¥–æ–≤ –º–Ω–æ–≥–æ ({}): –ü–æ–ª–Ω–∞—è CausalLM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", num_inputs);
        println!("   üí° –í–µ—Ä–æ—è—Ç–Ω–æ –Ω—É–∂–Ω—ã KV –∫–µ—à–∏ –∫–∞–∫ —É Qwen3");
    }
    
    // –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
    println!("\n7. üèÜ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –û MXBAI:");
    println!("- Config: Qwen2ForCausalLM (–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)");
    println!("- –í—Ö–æ–¥–æ–≤: {}", num_inputs);
    
    if num_inputs <= 4 {
        println!("- –°—Ç–∞—Ç—É—Å: –í–æ–∑–º–æ–∂–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–ª—è reranking");
        println!("- –ü—Ä–æ–≥–Ω–æ–∑: –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ–ª–Ω—ã—Ö KV –∫–µ—à–µ–π");
    } else {
        println!("- –°—Ç–∞—Ç—É—Å: –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å");
        println!("- –ü—Ä–æ–≥–Ω–æ–∑: –ü–æ—Ç—Ä–µ–±—É–µ—Ç –≤—Å–µ KV –∫–µ—à–∏ –∫–∞–∫ Qwen3");
    }
    
    println!("\nü§î –ü–ê–†–ê–î–û–ö–° –†–ï–®–ï–ù?");
    println!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∏–º–µ—Ç—å –≤ –≤–∏–¥—É:");
    println!("- MXBai –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è reranking (–∑–∞–¥–∞—á–∞ –Ω–µ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è)");
    println!("- –ù–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤—Å–µ –µ—â–µ CausalLM (–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è)");
    println!("- –í–æ–∑–º–æ–∂–Ω–æ fine-tuned –¥–ª—è reranking —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏");
    
    Ok(())
}