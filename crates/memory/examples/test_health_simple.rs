use anyhow::Result;
use memory::{
    MemoryConfig, MemoryService, Layer, Record, 
    ComponentType, AlertSeverity, HealthConfig
};
use tracing::info;
use uuid::Uuid;
use chrono::Utc;
use tokio::time::{sleep, Duration};

/// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç health monitoring —Å–∏—Å—Ç–µ–º—ã
#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    info!("üè• –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Health Monitoring —Å–∏—Å—Ç–µ–º—ã");
    info!("==========================================\n");
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å health monitoring
    let temp_dir = tempfile::tempdir()?;
    let memory_config = MemoryConfig {
        db_path: temp_dir.path().join("health_simple_test"),
        cache_path: temp_dir.path().join("cache"),
        promotion: Default::default(),
        ai_config: Default::default(),
        health_config: HealthConfig::default(),
    };
    
    println!("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è health monitoring —Å–æ–∑–¥–∞–Ω–∞");
    
    // –°–æ–∑–¥–∞–µ–º MemoryService —Å health monitoring
    println!("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ MemoryService —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º Health Monitor...");
    let memory_service = MemoryService::new(memory_config).await?;
    println!("‚úÖ MemoryService —Å Health Monitor —Å–æ–∑–¥–∞–Ω!");
    
    // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π health —Å—Ç–∞—Ç—É—Å
    println!("\nüìä –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ health —Å—Ç–∞—Ç—É—Å–∞");
    println!("==========================================");
    
    let health_status = memory_service.get_system_health();
    println!("  üîç –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {:?}", health_status.overall_status);
    println!("  üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {} —Å–µ–∫—É–Ω–¥", health_status.uptime_seconds);
    println!("  üìà –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {}", health_status.component_statuses.len());
    println!("  üö® –ê–∫—Ç–∏–≤–Ω—ã—Ö alerts: {}", health_status.active_alerts.len());
    
    if !health_status.component_statuses.is_empty() {
        println!("  üìã –°—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:");
        for (component, status) in &health_status.component_statuses {
            println!("    {:?}: {:?}", component, status);
        }
    }
    
    // –¢–µ—Å—Ç 2: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    println!("\nüìù –¢–µ—Å—Ç 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º");
    println!("============================================");
    
    let test_record = Record {
        id: Uuid::new_v4(),
        text: "–¢–µ—Å—Ç health monitoring –æ–ø–µ—Ä–∞—Ü–∏–π".to_string(),
        embedding: vec![0.1; 1024],
        layer: Layer::Interact,
        kind: "health_test".to_string(),
        tags: vec!["monitoring".to_string()],
        project: "health_test".to_string(),
        session: Uuid::new_v4().to_string(),
        score: 0.8,
        access_count: 1,
        ts: Utc::now(),
        last_access: Utc::now(),
    };
    
    println!("  üì§ –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...");
    memory_service.insert(test_record).await?;
    println!("  ‚úÖ –ó–∞–ø–∏—Å—å –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫
    sleep(Duration::from_millis(100)).await;
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ health –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    println!("\nüîç –¢–µ—Å—Ç 3: Health —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π");
    println!("======================================");
    
    let updated_health = memory_service.get_system_health();
    println!("  üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {:?}", updated_health.overall_status);
    println!("  üìà –ú–µ—Ç—Ä–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: {}", updated_health.metrics_summary.len());
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if let Some(vectorstore_stats) = memory_service.get_component_health(ComponentType::VectorStore) {
        println!("  üóÑÔ∏è VectorStore —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        println!("    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {:.2} ms", vectorstore_stats.avg_response_time_ms);
        println!("    Success rate: {:.1}%", vectorstore_stats.success_rate * 100.0);
        println!("    –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", vectorstore_stats.total_requests);
    }
    
    if let Some(cache_stats) = memory_service.get_component_health(ComponentType::Cache) {
        println!("  üíæ Cache —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        println!("    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {:.2} ms", cache_stats.avg_response_time_ms);
        println!("    Success rate: {:.1}%", cache_stats.success_rate * 100.0);
        println!("    –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", cache_stats.total_requests);
    }
    
    // –¢–µ—Å—Ç 4: Health check –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    println!("\nüè• –¢–µ—Å—Ç 4: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã");
    println!("==========================================");
    
    let health_check_result = memory_service.run_health_check().await?;
    println!("  ‚úÖ Health check –≤—ã–ø–æ–ª–Ω–µ–Ω!");
    println!("  üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {:?}", health_check_result.overall_status);
    println!("  üö® Alerts –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {}", health_check_result.active_alerts.len());
    
    if !health_check_result.active_alerts.is_empty() {
        println!("  üö® –ê–∫—Ç–∏–≤–Ω—ã–µ alerts:");
        for alert in &health_check_result.active_alerts {
            println!("    {:?}: {} - {}", 
                     alert.severity, alert.title, alert.description);
        }
    }
    
    // –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ custom alert
    println!("\nüö® –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ custom health alert");
    println!("=====================================");
    
    memory_service.create_health_alert(
        ComponentType::Memory,
        AlertSeverity::Info,
        "Test Alert Created".to_string(),
        "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π alert –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞".to_string()
    );
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    sleep(Duration::from_millis(200)).await;
    
    let final_health = memory_service.get_system_health();
    println!("  üö® Custom alert —Å–æ–∑–¥–∞–Ω!");
    println!("  üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö alerts: {}", final_health.active_alerts.len());
    
    for alert in &final_health.active_alerts {
        println!("    {} {}: {}", 
                 match alert.severity {
                     AlertSeverity::Critical => "üî¥ CRITICAL",
                     AlertSeverity::Warning => "üü° WARNING", 
                     AlertSeverity::Info => "üîµ INFO",
                     AlertSeverity::Fatal => "‚ö´ FATAL",
                 },
                 alert.title, alert.description);
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    println!("\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ HEALTH MONITORING –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:");
    println!("==========================================");
    
    let integration_score = if final_health.component_statuses.len() >= 2 
        && final_health.uptime_seconds > 0
        && final_health.active_alerts.len() >= 1 {
        match final_health.overall_status {
            memory::health::HealthStatus::Healthy => 95,
            memory::health::HealthStatus::Degraded => 85,
            memory::health::HealthStatus::Unhealthy => 70,
            memory::health::HealthStatus::Down => 50,
        }
    } else {
        75
    };
    
    println!("  ‚úÖ Health monitoring —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ MemoryService");
    println!("  ‚úÖ Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω");
    println!("  ‚úÖ Alert —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç");
    println!("  ‚úÖ Health check API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    println!("  ‚úÖ Component performance tracking –≤–∫–ª—é—á–µ–Ω");
    println!("  ‚úÖ Custom alerts —Å–æ–∑–¥–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ");
    
    println!("  üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º: {}", final_health.component_statuses.len());
    println!("  üìà –ú–µ—Ç—Ä–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: {}", final_health.metrics_summary.len());
    println!("  üö® –ê–∫—Ç–∏–≤–Ω—ã—Ö alerts: {}", final_health.active_alerts.len());
    println!("  üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: {} —Å–µ–∫—É–Ω–¥", final_health.uptime_seconds);
    
    println!("  üìä –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {}%", integration_score);
    
    if integration_score >= 90 {
        println!("\nüéâ HEALTH MONITORING –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ê!");
        println!("   Production-ready –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å alerts –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
    } else if integration_score >= 80 {
        println!("\nüëç Health monitoring —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç");
    } else {
        println!("\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
    }
    
    Ok(())
}