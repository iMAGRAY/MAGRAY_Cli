use anyhow::Result;
use ort::{inputs, session::Session};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== –ü–û–õ–ù–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø ORT 2.0 ===\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    println!("–ú–æ–¥–µ–ª—å: {}", model_path.display());
    println!("–ú–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", model_path.exists());
    
    if !model_path.exists() {
        println!("\n‚ùå –§–ê–ô–õ –ú–û–î–ï–õ–ò –ù–ï –ù–ê–ô–î–ï–ù!");
        return Err(anyhow::anyhow!("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
    }
    
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime
    println!("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime...");
    match ort::init()
        .with_name("verification_test")
        .commit() {
        Ok(_) => println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"),
        Err(e) => {
            println!("‚ùå –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ORT: {}", e);
            return Err(e.into());
        }
    }
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    println!("\n2. –°–æ–∑–¥–∞–Ω–∏–µ ONNX —Å–µ—Å—Å–∏–∏...");
    let session = match Session::builder() {
        Ok(builder) => {
            match builder
                .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3) {
                Ok(builder) => {
                    match builder.commit_from_file(&model_path) {
                        Ok(session) => {
                            println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");
                            session
                        },
                        Err(e) => {
                            println!("‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {}", e);
                            return Err(e.into());
                        }
                    }
                },
                Err(e) => {
                    println!("‚ùå –û–®–ò–ë–ö–ê –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e);
                    return Err(e.into());
                }
            }
        },
        Err(e) => {
            println!("‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è builder: {}", e);
            return Err(e.into());
        }
    };
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏
    println!("\n3. –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏:");
    println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤: {}", session.inputs.len());
    
    let mut required_inputs = Vec::new();
    for (i, input) in session.inputs.iter().enumerate() {
        println!("  {}: {} (—Ç–∏–ø: {:?})", i, input.name, input.input_type);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã
        if input.name == "input_ids" || 
           input.name == "attention_mask" || 
           input.name == "position_ids" {
            required_inputs.push(input.name.clone());
        }
    }
    
    println!("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã: {:?}", required_inputs);
    
    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤
    println!("\n4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤...");
    
    let seq_len = 4;
    
    // input_ids: [101, 7592, 2088, 102] - —Ç–∏–ø–∏—á–Ω—ã–µ BERT —Ç–æ–∫–µ–Ω—ã
    let input_ids = vec![101i64, 7592, 2088, 102];
    let attention_mask = vec![1i64, 1, 1, 1];
    let position_ids = vec![0i64, 1, 2, 3]; // –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    
    println!("–°–æ–∑–¥–∞–Ω–∏–µ input_ids —Ç–µ–Ω–∑–æ—Ä–∞...");
    let input_ids_tensor = match ort::value::Tensor::from_array(([1, seq_len], input_ids)) {
        Ok(tensor) => {
            println!("‚úÖ input_ids —Ç–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω");
            tensor
        },
        Err(e) => {
            println!("‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è input_ids: {}", e);
            return Err(e.into());
        }
    };
    
    println!("–°–æ–∑–¥–∞–Ω–∏–µ attention_mask —Ç–µ–Ω–∑–æ—Ä–∞...");
    let attention_mask_tensor = match ort::value::Tensor::from_array(([1, seq_len], attention_mask)) {
        Ok(tensor) => {
            println!("‚úÖ attention_mask —Ç–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω");
            tensor
        },
        Err(e) => {
            println!("‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è attention_mask: {}", e);
            return Err(e.into());
        }
    };
    
    println!("–°–æ–∑–¥–∞–Ω–∏–µ position_ids —Ç–µ–Ω–∑–æ—Ä–∞...");
    let position_ids_tensor = match ort::value::Tensor::from_array(([1, seq_len], position_ids)) {
        Ok(tensor) => {
            println!("‚úÖ position_ids —Ç–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω");
            tensor
        },
        Err(e) => {
            println!("‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è position_ids: {}", e);
            return Err(e.into());
        }
    };
    
    // 5. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    println!("\n5. üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ó–∞–ø—É—Å–∫ ONNX –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...");
    
    let session = std::sync::Mutex::new(session);
    let mut session_guard = session.lock().unwrap();
    
    println!("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ inputs! –º–∞–∫—Ä–æ—Å–∞...");
    let inputs_vec = inputs![
        "input_ids" => input_ids_tensor,
        "attention_mask" => attention_mask_tensor,
        "position_ids" => position_ids_tensor
    ];
    
    println!("–í—ã–∑–æ–≤ session.run()...");
    let outputs = match session_guard.run(inputs_vec) {
        Ok(outputs) => {
            println!("üéâ –£–°–ü–ï–•! –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!");
            outputs
        },
        Err(e) => {
            println!("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {}", e);
            println!("‚ùå ORT 2.0 –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ü–û–õ–ù–û–°–¢–¨–Æ");
            return Err(e.into());
        }
    };
    
    // 6. –ê–Ω–∞–ª–∏–∑ –≤—ã—Ö–æ–¥–æ–≤
    println!("\n6. üéØ –ê–ù–ê–õ–ò–ó –í–´–•–û–î–ù–´–• –î–ê–ù–ù–´–•:");
    println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤: {}", outputs.len());
    
    let mut embedding_found = false;
    
    for (name, output) in outputs.iter() {
        println!("\n–í—ã—Ö–æ–¥ '{}': {:?}", name, output.dtype());
        
        match output.try_extract_tensor::<f32>() {
            Ok((shape, data)) => {
                let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
                println!("   –§–æ—Ä–º–∞: {:?}", shape_vec);
                println!("   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {}", data.len());
                
                if data.len() > 0 {
                    println!("   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {:?}", &data[..5.min(data.len())]);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
                    if shape_vec.len() == 3 && shape_vec[2] > 500 { // [batch, seq, hidden]
                        println!("   üéØ –ù–ê–ô–î–ï–ù–´ –≠–ú–ë–ï–î–î–ò–ù–ì–ò! –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", shape_vec[2]);
                        embedding_found = true;
                    }
                    
                    let min = data.iter().fold(f32::INFINITY, |a, &b| a.min(b));
                    let max = data.iter().fold(f32::NEG_INFINITY, |a, &b| a.max(b));
                    let mean = data.iter().sum::<f32>() / data.len() as f32;
                    println!("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: min={:.4}, max={:.4}, mean={:.4}", min, max, mean);
                }
            },
            Err(e) => {
                println!("   –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–∫ f32: {}", e);
            }
        }
    }
    
    // 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    println!("\n7. üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:");
    
    if embedding_found {
        println!("‚úÖ ‚úÖ ‚úÖ ORT 2.0 –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!");
        println!("‚úÖ ‚úÖ ‚úÖ –†–ï–ê–õ–¨–ù–´–ï –≠–ú–ë–ï–î–î–ò–ù–ì–ò –ì–ï–ù–ï–†–ò–†–£–Æ–¢–°–Ø!");
        println!("‚úÖ ‚úÖ ‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!");
    } else {
        println!("‚ö†Ô∏è  –ò–Ω—Ñ–µ—Ä–µ–Ω—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        println!("‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–æ–≤");
    }
    
    println!("\nüéâ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!");
    
    Ok(())
}