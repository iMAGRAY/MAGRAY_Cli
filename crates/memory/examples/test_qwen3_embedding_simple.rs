use anyhow::Result;
use ort::{session::Session, value::Tensor, inputs};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== QWEN3-EMBEDDING: –¢–ï–°–¢ –° –ü–£–°–¢–´–ú–ò KV –ö–ï–®–ê–ú–ò ===\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    println!("üí° –ì–ò–ü–û–¢–ï–ó–ê: Qwen3-Embedding + –ø—É—Å—Ç—ã–µ KV –∫–µ—à–∏ = –æ–±—ã—á–Ω–∞—è embedding –º–æ–¥–µ–ª—å");
    println!("üí° –ö–µ—à–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è ONNX —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–µ –¥–ª—è functionality");
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    println!("üìÅ –ú–æ–¥–µ–ª—å: {}", model_path.display());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ORT
    println!("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime...");
    ort::init()
        .with_name("qwen3_embedding_simple")
        .commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    println!("\n2. –°–æ–∑–¥–∞–Ω–∏–µ ONNX —Å–µ—Å—Å–∏–∏...");
    let mut session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    println!("   –í—Ö–æ–¥–æ–≤: {}", session.inputs.len());
    println!("   –í—ã—Ö–æ–¥–æ–≤: {}", session.outputs.len());
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    println!("\n3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
    
    let seq_len = 4;
    let input_ids = vec![151643i64, 3555, 374, 15592]; // "What is"
    let attention_mask = vec![1i64; seq_len];
    let position_ids: Vec<i64> = (0..seq_len as i64).collect();
    
    println!("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã –≥–æ—Ç–æ–≤—ã: input_ids, attention_mask, position_ids");
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢: –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ KV –∫–µ—à–∏ –¥–ª—è –≤—Å–µ—Ö 28 —Å–ª–æ–µ–≤
    println!("\n4. üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö KV –∫–µ—à–µ–π –¥–ª—è 28 —Å–ª–æ–µ–≤...");
    
    let batch_size = 1;
    let num_heads = 8;
    let head_dim = 128;
    let past_seq_len = 0; // –ü–£–°–¢–´–ï –∫–µ—à–∏!
    
    // –ë–∞–∑–æ–≤—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã
    let input_ids_tensor = Tensor::from_array(([batch_size, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([batch_size, seq_len], attention_mask))?;
    let position_ids_tensor = Tensor::from_array(([batch_size, seq_len], position_ids))?;
    
    println!("   üì¶ –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ KV –∫–µ—à–∏ –¥–ª—è –≤—Å–µ—Ö 28 —Å–ª–æ–µ–≤...");
    
    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ KV –∫–µ—à–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è
    let mut kv_inputs = Vec::new();
    for layer in 0..28 {
        // –ü—É—Å—Ç—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã —Å —Ñ–æ—Ä–º–æ–π [1, 8, 0, 128] - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø—É—Å—Ç—ã—Ö –∫–µ—à–µ–π
        let empty_key = Tensor::from_array(([batch_size, num_heads, past_seq_len, head_dim], Vec::<f32>::new()))?;
        let empty_value = Tensor::from_array(([batch_size, num_heads, past_seq_len, head_dim], Vec::<f32>::new()))?;
        
        kv_inputs.push((format!("past_key_values.{}.key", layer), empty_key));
        kv_inputs.push((format!("past_key_values.{}.value", layer), empty_value));
        
        if layer == 0 {
            println!("   Layer {}: –ü—É—Å—Ç—ã–µ key/value [1,8,{},128]", layer, past_seq_len);
        } else if layer == 1 {
            println!("   ... (—Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –≤—Å–µ—Ö 28 —Å–ª–æ–µ–≤) ...");
        }
    }
    
    println!("   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {} KV –∫–µ—à–µ–π –¥–ª—è 28 —Å–ª–æ–µ–≤", kv_inputs.len());
    
    // –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢: –ó–∞–ø—É—Å–∫ —Å –ø—É—Å—Ç—ã–º–∏ –∫–µ—à–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è inputs! –º–∞–∫—Ä–æ—Å
    println!("\n5. üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Qwen3-Embedding —Å –ø—É—Å—Ç—ã–º–∏ KV –∫–µ—à–∞–º–∏...");
    
    // –°–æ–∑–¥–∞–µ–º inputs –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ - —ç—Ç–æ —Å–ª–æ–∂–Ω–æ —Å –º–∞–∫—Ä–æ—Å–æ–º, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ-–¥—Ä—É–≥–æ–º—É
    println!("   üí° –ü–æ–ø—ã—Ç–∫–∞ —Å –º–∞–∫—Ä–æ—Å–æ–º inputs! –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API...");
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä—É—á–Ω—É—é –≤—Å–µ –≤—Ö–æ–¥—ã
    let mut all_kv_pairs = vec![
        ("input_ids", input_ids_tensor.into()),
        ("attention_mask", attention_mask_tensor.into()),
        ("position_ids", position_ids_tensor.into()),
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º KV –∫–µ—à–∏
    for (name, tensor) in kv_inputs {
        all_kv_pairs.push((name.as_str(), tensor.into()));
    }
    
    println!("   üìù –í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤: {}", all_kv_pairs.len());
    
    let result = session.run(all_kv_pairs);
    
    match result {
        Ok(outputs) => {
            println!("üéâüéâüéâ –ù–ï–í–ï–†–û–Ø–¢–ù–û! QWEN3-EMBEDDING –†–ê–ë–û–¢–ê–ï–¢!");
            println!("   –ü–æ–ª—É—á–µ–Ω–æ {} –≤—ã—Ö–æ–¥–æ–≤", outputs.len());
            
            // –ò—â–µ–º –≥–ª–∞–≤–Ω—ã–π –≤—ã—Ö–æ–¥ - hidden states
            for (name, output) in outputs.iter() {
                if name == "last_hidden_state" {
                    if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
                        let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
                        println!("   üéØ –ù–ê–ô–î–ï–ù HIDDEN STATE: —Ñ–æ—Ä–º–∞ {:?}, –¥–∞–Ω–Ω—ã—Ö {}", shape_vec, data.len());
                        
                        // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å [1, seq_len, 1024] –¥–ª—è Qwen3
                        if shape_vec.len() == 3 && shape_vec[0] == 1 && shape_vec[1] == seq_len as i64 {
                            let hidden_size = shape_vec[2] as usize;
                            
                            println!("   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–û–†–ú–ê: [1, {}, {}]", seq_len, hidden_size);
                            
                            // Last token pooling –∫–∞–∫ –æ–±—ã—á–Ω–æ
                            let last_token_start = (seq_len - 1) * hidden_size;
                            let last_token_end = last_token_start + hidden_size;
                            
                            if last_token_end <= data.len() {
                                let embedding: Vec<f32> = data[last_token_start..last_token_end].to_vec();
                                let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                                
                                println!("   üèÜ QWEN3 –≠–ú–ë–ï–î–î–ò–ù–ì –ò–ó–í–õ–ï–ß–ï–ù!");
                                println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", embedding.len());
                                println!("   –ù–æ—Ä–º–∞: {:.4}", norm);
                                println!("   –û–±—Ä–∞–∑–µ—Ü: {:?}", &embedding[..3.min(embedding.len())]);
                                
                                if norm > 0.0 {
                                    println!("\nüéäüéäüéä –¢–†–ò–£–ú–§–ê–õ–¨–ù–û–ï –û–¢–ö–†–´–¢–ò–ï!");
                                    println!("‚úÖ Qwen3-Embedding –†–ê–ë–û–¢–ê–ï–¢ –∫–∞–∫ –æ–±—ã—á–Ω–∞—è embedding –º–æ–¥–µ–ª—å!");
                                    println!("‚úÖ KV –∫–µ—à–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è ONNX —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏!");
                                    println!("‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –ø—É—Å—Ç—ã–º–∏ –∫–µ—à–∞–º–∏ = 0 overhead!");
                                    println!("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ CausalLM, –Ω–æ –∑–∞–¥–∞—á–∞ EMBEDDING!");
                                }
                            }
                        }
                    }
                }
            }
            
        },
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞: {}", e);
            
            if format!("{}", e).to_lowercase().contains("invalid dimension") {
                println!("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã");
            } else if format!("{}", e).to_lowercase().contains("missing input") {
                println!("üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–ø—É—â–µ–Ω –∫–∞–∫–æ–π-—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤—Ö–æ–¥");
            }
        }
    }
    
    println!("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê:");
    println!("- Qwen3-Embedding + –ø—É—Å—Ç—ã–µ KV –∫–µ—à–∏ = ?");
    println!("- –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: —ç—Ç–æ –æ–±—ã—á–Ω–∞—è embedding –º–æ–¥–µ–ª—å —Å ONNX overhead");
    println!("- –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–∂–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞");
    
    Ok(())
}