#![cfg(feature = "extended-tests")]

use anyhow::Result;
use chrono::Utc;
use memory::{default_config, DIMemoryService, Layer, MemoryServiceConfig, Record, SearchOptions};
use std::sync::Arc;
use uuid::Uuid;

/// –ü—Ä–∏–º–µ—Ä –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DIMemoryService

#[tokio::main]
async fn main() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    tracing_subscriber::fmt()
        .with_env_filter("memory=debug,ai=info")
        .init();

    println!("=== DI Memory Service Best Practices Demo ===\n");

    // 1. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    println!("1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");
    let config = create_optimized_config()?;

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    println!("2. –°–æ–∑–¥–∞–Ω–∏–µ DI Memory Service...");
    let service = match DIMemoryService::new(config).await {
        Ok(s) => {
            println!("   ‚úÖ –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            Arc::new(s)
        }
        Err(e) => {
            eprintln!("   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {}", e);
            return Err(e);
        }
    };

    // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    println!("3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤ –ø–∞–º—è—Ç–∏...");
    match service.initialize().await {
        Ok(_) => println!("   ‚úÖ –°–ª–æ–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"),
        Err(e) => {
            eprintln!("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–µ–≤: {}", e);
            println!("   ‚ÑπÔ∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É - —Å–ª–æ–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏");
        }
    }

    // 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    println!("\n4. –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...");
    demo_insert_records(&service).await?;

    // 5. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å –æ–ø—Ü–∏—è–º–∏
    println!("\n5. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...");
    demo_efficient_search(&service).await?;

    // 6. –†–∞–±–æ—Ç–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    println!("\n6. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
    demo_performance_analysis(&service).await?;

    // 7. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –∏ promotion
    println!("\n7. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –¥–∞–Ω–Ω—ã—Ö...");
    demo_memory_management(&service).await?;

    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    println!("\n8. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è...");
    demo_health_monitoring(&service).await?;

    // 9. Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    println!("\n9. Batch –æ–ø–µ—Ä–∞—Ü–∏–∏...");
    demo_batch_operations(&service).await?;

    // 10. Graceful shutdown
    println!("\n10. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
    // DIMemoryService –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ drop
    drop(service);
    println!("    ‚úÖ –°–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");

    println!("\n=== Demo completed successfully! ===");
    Ok(())
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
fn create_optimized_config() -> Result<MemoryServiceConfig> {
    let mut config = default_config()?;

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è production
    config.promotion.interact_ttl = 3600; // 1 —á–∞—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    config.promotion.insights_ttl = 86400 * 7; // 1 –Ω–µ–¥–µ–ª—è –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤
    config.promotion.promotion_threshold = 0.7; // –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∞
    use memory::CacheConfig;
    config.cache_config = CacheConfig::production();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    config.health_config.check_interval_seconds = 60;
    config.health_config.enable_auto_recovery = true;

    // Batch –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    config.batch_config.max_batch_size = 100;
    config.batch_config.batch_timeout_ms = 50;

    Ok(config)
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–µ–π
async fn demo_insert_records(service: &Arc<DIMemoryService>) -> Result<()> {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
    let records = vec![
        create_record(
            "Rust async/await –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π",
            Layer::Interact,
            "learning",
            vec!["rust", "async", "programming"],
            "rust-learning",
        ),
        create_record(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Arc<Mutex<T>> –¥–ª—è shared state –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º –∫–æ–¥–µ",
            Layer::Insights,
            "best-practice",
            vec!["rust", "concurrency", "threading"],
            "rust-patterns",
        ),
        create_record(
            "SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–∏–º–µ–Ω–∏–º—ã –∏ –≤ Rust —á–µ—Ä–µ–∑ traits –∏ –º–æ–¥—É–ª–∏",
            Layer::Assets,
            "architecture",
            vec!["design", "solid", "rust"],
            "architecture",
        ),
    ];

    for (i, record) in records.into_iter().enumerate() {
        match service.insert(record).await {
            Ok(_) => println!("   ‚úÖ –ó–∞–ø–∏—Å—å {} –≤—Å—Ç–∞–≤–ª–µ–Ω–∞", i + 1),
            Err(e) => eprintln!("   ‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ {}: {}", i + 1, e),
        }
    }

    Ok(())
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
fn create_record(text: &str, layer: Layer, kind: &str, tags: Vec<&str>, project: &str) -> Record {
    Record {
        id: Uuid::new_v4(),
        text: text.to_string(),
        embedding: vec![], // –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        layer,
        kind: kind.to_string(),
        tags: tags.into_iter().map(String::from).collect(),
        project: project.to_string(),
        session: Uuid::new_v4().to_string(),
        ts: Utc::now(),
        score: 0.0,
        access_count: 0,
        last_access: Utc::now(),
    }
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
async fn demo_efficient_search(service: &Arc<DIMemoryService>) -> Result<()> {
    // –ü–æ–∏—Å–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    let options = SearchOptions {
        top_k: 3,
        score_threshold: 0.5,
        tags: vec!["rust".to_string()],
        project: Some("rust-learning".to_string()),
        layers: vec![Layer::Interact, Layer::Insights],
    };

    let results = service
        .search("async programming", Layer::Interact, options)
        .await?;

    println!("   –ù–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", results.len());
    for (i, record) in results.iter().enumerate() {
        println!(
            "   {}. [{}] {} (score: {:.3})",
            i + 1,
            record.layer,
            &record.text[..50.min(record.text.len())],
            record.score
        );
    }

    Ok(())
}

/// –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async fn demo_performance_analysis(service: &Arc<DIMemoryService>) -> Result<()> {
    let metrics = service.get_performance_metrics();

    println!("   üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:");
    println!("      ‚Ä¢ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π resolve: {}", metrics.total_resolves);
    println!("      ‚Ä¢ Cache hit rate: {:.1}%", metrics.cache_hit_rate());
    println!(
        "      ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å resolve: {:.1}Œºs",
        metrics.avg_resolve_time_us()
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    println!("\n   üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:");
    let report = service.get_performance_report();
    for line in report.lines() {
        println!("      {}", line);
    }

    Ok(())
}

/// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
async fn demo_memory_management(service: &Arc<DIMemoryService>) -> Result<()> {
    // –ó–∞–ø—É—Å–∫–∞–µ–º promotion cycle
    let stats = service.run_promotion().await?;

    println!("   üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã promotion:");
    println!(
        "      ‚Ä¢ Interact ‚Üí Insights: {}",
        stats.interact_to_insights
    );
    println!("      ‚Ä¢ Insights ‚Üí Assets: {}", stats.insights_to_assets);
    println!(
        "      ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö: {} + {}",
        stats.expired_interact, stats.expired_insights
    );
    println!("      ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}ms", stats.total_time_ms);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let system_stats = service.get_stats().await;
    println!("\n   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:");
    println!("      ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {}", system_stats.total_records);
    println!("      ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ—è–º:");
    println!("        - Interact: {}", system_stats.interact_count);
    println!("        - Insights: {}", system_stats.insights_count);
    println!("        - Assets: {}", system_stats.assets_count);

    Ok(())
}

/// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
async fn demo_health_monitoring(service: &Arc<DIMemoryService>) -> Result<()> {
    let health = service.check_health().await?;

    let status_icon = match health.overall_status {
        memory::health::HealthStatus::Healthy => "‚úÖ",
        memory::health::HealthStatus::Degraded => "‚ö†Ô∏è",
        memory::health::HealthStatus::Unhealthy => "‚ùå",
        memory::health::HealthStatus::Down => "üíÄ",
    };

    println!(
        "   {} –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {:?}",
        status_icon, health.overall_status
    );
    println!("   ‚è±Ô∏è  Uptime: {} —Å–µ–∫—É–Ω–¥", health.uptime_seconds);

    if !health.active_alerts.is_empty() {
        println!("   ‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:");
        for alert in &health.active_alerts {
            println!(
                "      ‚Ä¢ [{:?}] {}: {}",
                alert.severity, alert.title, alert.description
            );
        }
    }

    Ok(())
}

/// Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async fn demo_batch_operations(service: &Arc<DIMemoryService>) -> Result<()> {
    // –°–æ–∑–¥–∞–µ–º batch –∑–∞–ø–∏—Å–µ–π
    let batch_records: Vec<Record> = (0..5)
        .map(|i| {
            create_record(
                &format!("Batch record {}: test data for performance", i),
                Layer::Interact,
                "batch-test",
                vec!["batch", "test"],
                "batch-demo",
            )
        })
        .collect();

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ batch –º–µ—Ç–æ–¥—ã –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    let start = std::time::Instant::now();
    for record in batch_records {
        service.insert(record).await?;
    }
    let elapsed = start.elapsed();

    println!("   ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ 5 –∑–∞–ø–∏—Å–µ–π –∑–∞ {:?}", elapsed);
    println!("   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø–∏—Å—å: {:?}", elapsed / 5);

    Ok(())
}
