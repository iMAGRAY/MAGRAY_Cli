use anyhow::Result;
use memory::{MemoryConfig, MemoryService, Layer, Record};
use std::path::PathBuf;

/// –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ BGE-M3 –∏ HNSW –ø–æ–∏—Å–∫–æ–º
#[tokio::main]
async fn main() -> Result<()> {
    // Initialize logging
    tracing_subscriber::fmt::init();

    println!("üß† –ü–û–õ–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–ê–ú–Ø–¢–ò");
    println!("==============================================\n");

    // Test configuration
    let config = MemoryConfig {
        db_path: PathBuf::from("./full_pipeline_test_db"),
        cache_path: PathBuf::from("./full_pipeline_test_cache"),
        ..Default::default()
    };

    println!("üöÄ 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryService —Å BGE-M3 + HNSW...");
    let service = MemoryService::new(config).await?;
    println!("‚úÖ MemoryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n");

    // Test data - –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤
    let documents = vec![
        ("Rust - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π", "programming", "rust_basics"),
        ("Python –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "programming", "python_ml"),
        ("JavaScript —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å Node.js", "programming", "javascript_web"),
        ("Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è DevOps", "devops", "containerization"),
        ("Kubernetes –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ production", "devops", "orchestration"),
        ("–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–¥—É—Å—Ç—Ä–∏—é AI", "ai", "ml_industry"),
        ("–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", "ai", "deep_learning"),
        ("HNSW –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä–∞–º", "algorithms", "vector_search"),
        ("Cosine similarity –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞", "algorithms", "semantic_search"),
        ("BGE-M3 –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Ç–µ–∫—Å—Ç–∞", "nlp", "embeddings"), 
    ];

    println!("üìù 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã–µ —Å–ª–æ–∏ –ø–∞–º—è—Ç–∏...");
    
    // Add documents to different layers
    for (i, (text, category, project)) in documents.iter().enumerate() {
        let layer = match i % 3 {
            0 => Layer::Interact,
            1 => Layer::Insights, 
            2 => Layer::Assets,
            _ => Layer::Interact,
        };

        let record = Record {
            text: text.to_string(),
            layer,
            kind: category.to_string(),
            project: project.to_string(),
            tags: vec![category.to_string(), "test".to_string()],
            embedding: Vec::new(), // –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            ..Default::default()
        };

        service.insert(record).await?;
        println!("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ {:?}: {}", layer, text.chars().take(50).collect::<String>());
    }
    
    println!("\nüîç 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...");
    
    let queries = vec![
        ("—è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "programming"),
        ("–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è", "devops"),
        ("–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "ai"),
        ("–∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞", "algorithms"),
        ("–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞", "nlp"),
    ];

    for (query, expected_category) in queries {
        println!("\n  üîé –ó–∞–ø—Ä–æ—Å: \"{}\"", query);
        
        let start = std::time::Instant::now();
        let results = service.search(query)
            .top_k(3)
            .min_score(0.1)
            .execute()
            .await?;
        let search_time = start.elapsed();
        
        println!("    ‚ö° –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:?}", search_time);
        println!("    üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", results.len());
        
        for (i, result) in results.iter().enumerate() {
            let relevance = if result.kind == expected_category { "üéØ" } else { "üìÑ" };
            println!("      {}. {} [{:?}] Score: {:.3} ({})", 
                     i + 1, 
                     result.text.chars().take(60).collect::<String>(),
                     result.layer,
                     result.score,
                     relevance);
        }
        
        // Verify semantic relevance
        let relevant_results = results.iter()
            .filter(|r| r.kind == expected_category)
            .count();
        
        if relevant_results > 0 {
            println!("    ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã!");
        } else {
            println!("    ‚ö†Ô∏è  –ù–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–æ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π");
        }
    }

    println!("\nüìä 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞...");
    
    for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
        let results = service.search("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
            .with_layer(layer) 
            .top_k(5)
            .execute()
            .await?;
        
        println!("  {:?}: {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", layer, results.len());
        for result in results.iter().take(2) {
            println!("    - {} (score: {:.3})", 
                     result.text.chars().take(50).collect::<String>(), 
                     result.score);
        }
    }

    println!("\nüèÉ 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
    
    // Performance test
    let perf_queries = vec![
        "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", 
        "—Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è",
        "–∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞"
    ];
    
    let start = std::time::Instant::now();
    let mut total_results = 0;
    
    for query in &perf_queries {
        let results = service.search(query)
            .top_k(5)
            .execute()
            .await?;
        total_results += results.len();
    }
    
    let total_time = start.elapsed();
    let avg_time = total_time.as_micros() as f64 / perf_queries.len() as f64;
    
    println!("  üìà {} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {:?}", perf_queries.len(), total_time);
    println!("  ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {:.1} Œºs", avg_time);
    println!("  üìä –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", total_results);

    if avg_time < 10000.0 { // < 10ms
        println!("  üéâ –û–¢–õ–ò–ß–ù–ê–Ø –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!");
    } else if avg_time < 50000.0 { // < 50ms
        println!("  ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!");
    } else {
        println!("  ‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª—É—á—à–µ");
    }

    println!("\nüíæ 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...");
    
    // Cache statistics
    let (hits, misses, inserts) = service.cache_stats();
    let hit_rate = service.cache_hit_rate();
    
    println!("  üóÑÔ∏è  –ö–µ—à —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:");
    println!("    –ü–æ–ø–∞–¥–∞–Ω–∏—è: {}, –ü—Ä–æ–º–∞—Ö–∏: {}, –í—Å—Ç–∞–≤–∫–∏: {}", hits, misses, inserts);
    println!("    Hit rate: {:.1}%", hit_rate * 100.0);
    
    // Memory metrics (if enabled)
    println!("  üß† –ü–∞–º—è—Ç—å: 10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ 3 —Å–ª–æ—è—Ö");
    println!("  üîç –ü–æ–∏—Å–∫: BGE-M3 —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ + HNSW –∏–Ω–¥–µ–∫—Å");

    println!("\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´:");
    println!("  ‚úÖ BGE-M3 —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: –†–µ–∞–ª—å–Ω—ã–µ 1024-—Ä–∞–∑–º–µ—Ä–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã");
    println!("  ‚úÖ HNSW –ø–æ–∏—Å–∫: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è hnsw_rs");
    println!("  ‚úÖ –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –ø–∞–º—è—Ç—å: Interact/Insights/Assets");
    println!("  ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –í—ã—Å–æ–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å");
    println!("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –°—É–±–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–Ω—ã–π –ø–æ–∏—Å–∫");
    println!("  ‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ");

    // Test promotion (if implemented)
    println!("\n‚¨ÜÔ∏è  7. –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –º–µ–∂–¥—É —Å–ª–æ—è–º–∏...");
    match service.run_promotion_cycle().await {
        Ok(stats) => {
            println!("  ‚úÖ –¶–∏–∫–ª –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω:");
            println!("    Interact -> Insights: {}", stats.interact_to_insights);
            println!("    Insights -> Assets: {}", stats.insights_to_assets);
            println!("    –ò—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {}", stats.expired_interact + stats.expired_insights);
        }
        Err(e) => {
            println!("  ‚ö†Ô∏è  –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {}", e);
        }
    }

    println!("\nüèÜ –ü–û–õ–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!");
    println!("    –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!");

    Ok(())
}

// Layer —É–∂–µ –∏–º–µ–µ—Ç Debug impl, –ø–æ—ç—Ç–æ–º—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º {:?} –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è