use anyhow::Result;
use ort::{session::Session, value::Tensor, inputs};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== QWEN3-EMBEDDING: –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ ===\n");
    
    let start_time = std::time::Instant::now();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    println!("üéØ –¶–ï–õ–¨: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑ Qwen3-Embedding-0.6B");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    ort::init().with_name("qwen3_final").commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    let session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, –≤—Ö–æ–¥–æ–≤: {}", session.inputs.len());
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
    let seq_len = 4;
    let input_ids = vec![151643i64, 14016, 374, 10127]; // Qwen —Ç–æ–∫–µ–Ω—ã
    let attention_mask = vec![1i64; seq_len];
    let position_ids: Vec<i64> = (0..seq_len as i64).collect();
    
    let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([1, seq_len], attention_mask))?;
    let position_ids_tensor = Tensor::from_array(([1, seq_len], position_ids))?;
    
    println!("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö 56 KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
    println!("üîß –°–æ–∑–¥–∞–Ω–∏–µ 56 KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤...");
    
    let empty_shape = [1, 8, 0, 128]; // [batch, heads, past_seq_len, head_dim]
    let empty_data: Vec<f32> = Vec::new(); // –ü—É—Å—Ç–æ–π –¥–ª—è past_seq_len=0
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ KV —Ç–µ–Ω–∑–æ—Ä—ã –æ–¥–Ω–∏–º —Ü–∏–∫–ª–æ–º
    let mut kv_tensors = Vec::new();
    for layer in 0..28 {
        let key_tensor = Tensor::from_array((empty_shape, empty_data.clone()))?;
        let value_tensor = Tensor::from_array((empty_shape, empty_data.clone()))?;
        kv_tensors.push((format!("past_key_values.{}.key", layer), key_tensor));
        kv_tensors.push((format!("past_key_values.{}.value", layer), value_tensor));
    }
    
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤", kv_tensors.len());
    
    // –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    println!("\nüöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü–æ–ª–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å...");
    let inference_start = std::time::Instant::now();
    
    let session = std::sync::Mutex::new(session);
    let mut session_guard = session.lock().unwrap();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ö–æ—Ç—è –±—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏ + –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ KV
    // –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ –º–æ–¥–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –í–°–ï –≤—Ö–æ–¥—ã
    
    println!("–ü–æ–ø—ã—Ç–∫–∞ 1: –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã...");
    let result_basic = session_guard.run(inputs![
        "input_ids" => input_ids_tensor.clone(),
        "attention_mask" => attention_mask_tensor.clone(),
        "position_ids" => position_ids_tensor.clone()
    ]);
    
    match result_basic {
        Ok(outputs) => {
            println!("üéâ –ß–£–î–û! –†–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏!");
        },
        Err(e) => {
            println!("‚ùå –û–∂–∏–¥–∞–µ–º–æ: –Ω—É–∂–Ω—ã KV –∫–µ—à–∏: {}", e);
            
            // –í–ê–ñ–ù–û: –ó–¥–µ—Å—å –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π session.run() –≤—ã–∑–æ–≤
            // —Å –í–°–ï–ú–ò 59 –≤—Ö–æ–¥–∞–º–∏. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, inputs! –º–∞–∫—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç
            // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤.
            
            // –ü–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–¥–∏–º –≤—Ö–æ–¥—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π API
            println!("\n–ü–æ–ø—ã—Ç–∫–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤—Ö–æ–¥–æ–≤ –≤—Ä—É—á–Ω—É—é...");
            
            // –°–æ–∑–¥–∞–µ–º Vec –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–¥–æ–≤
            let mut all_inputs: Vec<(&str, ort::value::Value)> = Vec::new();
            
            // –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã
            all_inputs.push(("input_ids", input_ids_tensor.into()));
            all_inputs.push(("attention_mask", attention_mask_tensor.into()));
            all_inputs.push(("position_ids", position_ids_tensor.into()));
            
            // –í—Å–µ KV –∫–µ—à–∏
            for (name, tensor) in kv_tensors {
                all_inputs.push((name.as_str(), tensor.into()));
            }
            
            println!("   –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {} –≤—Ö–æ–¥–æ–≤", all_inputs.len());
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è run()
            let session_inputs: Vec<(std::borrow::Cow<str>, ort::session::SessionInputValue)> = 
                all_inputs.into_iter()
                    .map(|(name, value)| (std::borrow::Cow::Borrowed(name), value.into()))
                    .collect();
            
            // –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –í–°–ï–ú–ò –≤—Ö–æ–¥–∞–º–∏
            let outputs = match session_guard.run(session_inputs) {
                Ok(outputs) => {
                    let inference_time = inference_start.elapsed().as_secs_f64() * 1000.0;
                    println!("üéâüéâüéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –∑–∞ {:.2}ms", inference_time);
                    outputs
                },
                Err(e) => {
                    println!("‚ùå –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {}", e);
                    return Err(e.into());
                }
            };
            
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            println!("\nüéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (last_token pooling)...");
            
            let mut found_embedding = false;
            for (name, output) in outputs.iter() {
                if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
                    let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
                    
                    println!("   –í—ã—Ö–æ–¥ '{}': —Ñ–æ—Ä–º–∞ {:?}, –¥–∞–Ω–Ω—ã—Ö {}", name, shape_vec, data.len());
                    
                    // –ò—â–µ–º hidden states [batch, seq, hidden]
                    if shape_vec.len() == 3 && shape_vec[0] == 1 && shape_vec[1] == seq_len as i64 {
                        let sequence_length = shape_vec[1] as usize;
                        let hidden_size = shape_vec[2] as usize;
                        
                        println!("   üéØ –ù–ê–ô–î–ï–ù–´ HIDDEN STATES!");
                        println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: [1, {}, {}]", sequence_length, hidden_size);
                        
                        // Last token pooling
                        let last_token_idx = sequence_length - 1;
                        let start_idx = last_token_idx * hidden_size;
                        let end_idx = start_idx + hidden_size;
                        
                        if end_idx <= data.len() {
                            let embedding: Vec<f32> = data[start_idx..end_idx].to_vec();
                            
                            println!("   ‚úÖ –≠–ú–ë–ï–î–î–ò–ù–ì –ò–ó–í–õ–ï–ß–ï–ù!");
                            println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", embedding.len());
                            
                            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            let min = embedding.iter().fold(f32::INFINITY, |a, &b| a.min(b));
                            let max = embedding.iter().fold(f32::NEG_INFINITY, |a, &b| a.max(b));
                            let mean = embedding.iter().sum::<f32>() / embedding.len() as f32;
                            let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                            
                            println!("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: min={:.4}, max={:.4}, mean={:.4}, norm={:.4}", min, max, mean, norm);
                            println!("   –û–±—Ä–∞–∑–µ—Ü: {:?}", &embedding[..5.min(embedding.len())]);
                            
                            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                            if norm > 0.0 {
                                let normalized: Vec<f32> = embedding.iter().map(|x| x / norm).collect();
                                let new_norm = normalized.iter().map(|x| x * x).sum::<f32>().sqrt();
                                println!("   ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: –Ω–æ—Ä–º–∞={:.6}", new_norm);
                            }
                            
                            found_embedding = true;
                            break;
                        }
                    }
                }
            }
            
            if found_embedding {
                println!("\nüéâüéâüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –£–°–ü–ï–•!");
                println!("‚úÖ Qwen3-Embedding –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!");
                println!("‚úÖ ORT 2.0 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!");
                println!("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã!");
                println!("‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2}ms", start_time.elapsed().as_secs_f64() * 1000.0);
            } else {
                println!("‚ö†Ô∏è  –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª, –Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            }
        }
    }
    
    Ok(())
}