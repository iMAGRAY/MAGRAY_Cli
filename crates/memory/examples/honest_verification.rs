use anyhow::Result;
use memory::{MemoryService, MemoryConfig, Record, Layer};
use ai::AiConfig;
use std::path::PathBuf;

#[tokio::main]
async fn main() -> Result<()> {
    println!("=== –ß–ï–°–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ ===\n");
    
    // Setup logging
    tracing_subscriber::fmt::init();
    
    println!("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ");
    
    // Create config with BGE-M3 model
    let mut config = MemoryConfig::default();
    config.ai_config = AiConfig {
        models_dir: PathBuf::from("crates/memory/models"),
        embedding: ai::EmbeddingConfig {
            model_name: "bge-m3".to_string(),
            max_length: 512,
            batch_size: 8,
            use_gpu: false,
        },
        reranking: ai::RerankingConfig {
            model_name: "mxbai".to_string(),
            max_length: 512,
            batch_size: 8,
            use_gpu: false,
        },
    };
    
    println!("\n1. –°–æ–∑–¥–∞–µ–º MemoryService...");
    let memory_service = match MemoryService::new(config).await {
        Ok(service) => {
            println!("‚úÖ MemoryService —Å–æ–∑–¥–∞–Ω");
            service
        },
        Err(e) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å MemoryService: {}", e);
            println!("   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ OptimizedEmbeddingService –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
            return Ok(());
        }
    };
    
    println!("\n2. –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...");
    let test_record = Record {
        id: uuid::Uuid::new_v4(),
        text: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤".to_string(),
        embedding: vec![], // Empty - will be computed
        layer: Layer::Interact,
        kind: "test".to_string(),
        tags: vec!["test".to_string()],
        project: "verification".to_string(),
        session: "honest_test".to_string(),
        ts: chrono::Utc::now(),
        last_access: chrono::Utc::now(),
        score: 0.0,
        access_count: 0,
    };
    
    memory_service.insert(test_record).await?;
    println!("‚úÖ –ó–∞–ø–∏—Å—å –≤—Å—Ç–∞–≤–ª–µ–Ω–∞");
    
    println!("\n3. –ò—â–µ–º –ø–æ—Ö–æ–∂—É—é –∑–∞–ø–∏—Å—å...");
    let search_results = memory_service
        .search("—Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —ç–º–±–µ–¥–¥–∏–Ω–≥")
        .with_layer(Layer::Interact)
        .top_k(5)
        .execute()
        .await?;
    
    println!("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:");
    println!("- –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", search_results.len());
    
    if search_results.is_empty() {
        println!("‚ùå –ü–û–ò–°–ö –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!");
        println!("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
        println!("   - –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–æ –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é—Ç—Å—è");
        println!("   - –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ª–æ–º–∞–Ω");
        println!("   - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤");
    } else {
        for (i, result) in search_results.iter().enumerate() {
            println!("   {}. Score: {:.4} | Text: '{}'", 
                     i + 1, result.score, 
                     if result.text.len() > 50 { 
                         format!("{}...", &result.text[..47])
                     } else { 
                         result.text.clone() 
                     });
        }
        println!("‚úÖ –ü–û–ò–°–ö –†–ê–ë–û–¢–ê–ï–¢");
    }
    
    println!("\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OptimizedEmbeddingService...");
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
    match ai::OptimizedEmbeddingService::new(ai::EmbeddingConfig {
        model_name: "bge-m3".to_string(),
        max_length: 512,
        batch_size: 8,
        use_gpu: false,
    }) {
        Ok(service) => {
            println!("‚úÖ OptimizedEmbeddingService —Å–æ–∑–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é");
            
            match service.embed("–ø—Ä—è–º–æ–π —Ç–µ—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∞") {
                Ok(result) => {
                    println!("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é:");
                    println!("   - –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", result.embedding.len());
                    println!("   - –¢–æ–∫–µ–Ω–æ–≤: {}", result.token_count);
                    println!("   - –í—Ä–µ–º—è: {}ms", result.processing_time_ms);
                    println!("   - –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {:?}", &result.embedding[..5]);
                    
                    if result.embedding.len() == 1024 {
                        println!("‚úÖ –†–ê–ó–ú–ï–†–ù–û–°–¢–¨ –í–ï–†–ù–ê (BGE-M3: 1024)");
                    } else {
                        println!("‚ùå –ù–ï–í–ï–†–ù–ê–Ø –†–ê–ó–ú–ï–†–ù–û–°–¢–¨ (–æ–∂–∏–¥–∞–ª–æ—Å—å 1024, –ø–æ–ª—É—á–µ–Ω–æ {})", result.embedding.len());
                    }
                },
                Err(e) => {
                    println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥: {}", e);
                }
            }
        },
        Err(e) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å OptimizedEmbeddingService –Ω–∞–ø—Ä—è–º—É—é: {}", e);
            println!("   –ü—Ä–æ–±–ª–µ–º–∞ –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞");
        }
    }
    
    println!("\nüèÜ –ß–ï–°–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´:");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    let model_exists = std::path::Path::new("crates/memory/models/bge-m3/model.onnx").exists();
    let tokenizer_exists = std::path::Path::new("crates/memory/models/bge-m3/tokenizer.json").exists();
    
    println!("üìÅ –§–ê–ô–õ–´:");
    println!("- BGE-M3 model.onnx: {}", if model_exists { "‚úÖ –ï—Å—Ç—å" } else { "‚ùå –ù–µ—Ç" });
    println!("- BGE-M3 tokenizer.json: {}", if tokenizer_exists { "‚úÖ –ï—Å—Ç—å" } else { "‚ùå –ù–µ—Ç" });
    
    if model_exists && tokenizer_exists {
        println!("\nüéä –†–ï–ê–õ–¨–ù–´–ï –ú–û–î–ï–õ–ò –î–û–°–¢–£–ü–ù–´!");
        if search_results.is_empty() {
            println!("‚ö†Ô∏è –ù–û –ü–û–ò–°–ö –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è —Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π");
        } else {
            println!("üöÄ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢ –†–ï–ê–õ–¨–ù–û!");
        }
    } else {
        println!("\n‚ùå –ú–û–î–ï–õ–ò –û–¢–°–£–¢–°–¢–í–£–Æ–¢ - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–∫–∞—Ö");
    }
    
    Ok(())
}