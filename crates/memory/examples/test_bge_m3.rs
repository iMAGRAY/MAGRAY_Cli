use anyhow::Result;
use ort::{session::{Session, SessionOutputs}, value::Tensor, inputs};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== BGE-M3: XLMROBERTA EMBEDDING –ú–û–î–ï–õ–¨ ===\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    println!("‚úÖ BGE-M3 –ú–û–î–ï–õ–¨: XLMRobertaModel (encoder-only)");
    println!("‚úÖ Pipeline: feature-extraction");
    println!("‚úÖ Quantized: INT8 –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏");
    println!("‚úÖ –û–∂–∏–¥–∞–µ—Ç—Å—è: –ù–ò–ö–ê–ö–ò–• KV –∫–µ—à–µ–π!");
    
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("bge-m3")
        .join("model.onnx");
    
    println!("\nüìÅ –ú–æ–¥–µ–ª—å: {}", model_path.display());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ORT
    println!("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime...");
    ort::init()
        .with_name("bge_m3")
        .commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    println!("\n2. –°–æ–∑–¥–∞–Ω–∏–µ ONNX —Å–µ—Å—Å–∏–∏...");
    let mut session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    println!("   –í—Ö–æ–¥–æ–≤: {}", session.inputs.len());
    println!("   –í—ã—Ö–æ–¥–æ–≤: {}", session.outputs.len());
    
    // –ü–†–û–í–ï–†–ö–ê: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–ª–æ –≤—Ö–æ–¥–æ–≤ (encoder-only)
    println!("\n3. üîç –ê–ù–ê–õ–ò–ó –í–•–û–î–û–í (–æ–∂–∏–¥–∞–µ–º encoder-only!):");
    for (i, input) in session.inputs.iter().enumerate() {
        println!("   {}: {} - {:?}", i, input.name, input.input_type);
    }
    
    println!("\n4. üîç –ê–ù–ê–õ–ò–ó –í–´–•–û–î–û–í:");
    for (i, output) in session.outputs.iter().enumerate() {
        println!("   {}: {} - {:?}", i, output.name, output.output_type);
    }
    
    let num_inputs = session.inputs.len();
    if num_inputs <= 4 {
        println!("\nüéâ –û–¢–õ–ò–ß–ù–û! {} –≤—Ö–æ–¥–æ–≤ - —ç—Ç–æ encoder-only –º–æ–¥–µ–ª—å!", num_inputs);
    } else {
        println!("\n‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: {} –≤—Ö–æ–¥–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å <= 4", num_inputs);
    }
    
    // –¢–ï–°–¢: –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã –¥–ª—è XLMRoberta
    println!("\n5. üß™ –¢–ï–°–¢: BGE-M3 embedding extraction...");
    
    let seq_len = 8;
    // –¢–æ–∫–µ–Ω—ã –¥–ª—è XLMRoberta (–æ–±—ã—á–Ω–æ 0=<s>, 2=</s>, 1=<pad>)
    let input_ids = vec![0i64, 6661, 83, 70, 1788, 111, 23, 2]; // "<s> Hello world test </s>"
    let attention_mask = vec![1i64; seq_len]; // –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã
    let token_type_ids = vec![0i64; seq_len]; // –í—Å–µ —Ç–æ–∫–µ–Ω—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
    
    let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([1, seq_len], attention_mask))?;
    let token_type_ids_tensor = Tensor::from_array(([1, seq_len], token_type_ids))?;
    
    println!("‚úÖ –í—Ö–æ–¥–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");
    println!("   input_ids: [1, {}]", seq_len);
    println!("   attention_mask: [1, {}]", seq_len);
    println!("   token_type_ids: [1, {}]", seq_len);
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: XLMRoberta —Å –±–∞–∑–æ–≤—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏
    println!("\n6. üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: BGE-M3 XLMRoberta...");
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ –≤—Ö–æ–¥–æ–≤
    println!("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å 3 –≤—Ö–æ–¥–∞–º–∏ (–ø–æ–ª–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è)...");
    
    let result = session.run(inputs![
        "input_ids" => input_ids_tensor,
        "attention_mask" => attention_mask_tensor,
        "token_type_ids" => token_type_ids_tensor
    ]);
    
    match result {
        Ok(outputs) => {
            println!("üéâ –£–°–ü–ï–• –° 3 –í–•–û–î–ê–ú–ò!");
            process_embeddings(outputs, seq_len, "BGE-M3")?;
        },
        Err(e) => {
            println!("‚ùå 3 –≤—Ö–æ–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {}", e);
            
            if format!("{}", e).contains("Missing Input:") {
                println!("üí° –ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã");
            }
        }
    }
    
    println!("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° BGE-M3:");
    println!("- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: XLMRobertaModel (encoder-only)");
    println!("- –í—Ö–æ–¥–æ–≤: {}", num_inputs);
    println!("- –¢–∏–ø: {}", if num_inputs <= 4 { "‚úÖ –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å" } else { "‚ö†Ô∏è –°–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å" });
    println!("- –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: 1024 (–∏–∑ config.json)");
    
    Ok(())
}

fn process_embeddings(outputs: SessionOutputs, seq_len: usize, model_name: &str) -> Result<()> {
    println!("   –ü–æ–ª—É—á–µ–Ω–æ {} –≤—ã—Ö–æ–¥–æ–≤", outputs.len());
    
    let mut found_embeddings = false;
    
    for (name, output) in outputs.iter() {
        if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
            let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
            println!("   –í—ã—Ö–æ–¥ '{}': —Ñ–æ—Ä–º–∞ {:?}, –¥–∞–Ω–Ω—ã—Ö {}", name, shape_vec, data.len());
            
            // –ò—â–µ–º hidden states [batch, seq, hidden]
            if shape_vec.len() == 3 && shape_vec[0] == 1 && shape_vec[1] == seq_len as i64 {
                let hidden_size = shape_vec[2] as usize;
                
                println!("   üéØ –ù–ê–ô–î–ï–ù–´ {} –≠–ú–ë–ï–î–î–ò–ù–ì–ò!", model_name);
                println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: [1, {}, {}]", seq_len, hidden_size);
                
                // Mean pooling (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è encoder-only)
                let mut pooled_embedding = vec![0.0f32; hidden_size];
                
                for seq_idx in 0..seq_len {
                    for hidden_idx in 0..hidden_size {
                        let data_idx = seq_idx * hidden_size + hidden_idx;
                        if data_idx < data.len() {
                            pooled_embedding[hidden_idx] += data[data_idx];
                        }
                    }
                }
                
                // –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
                for val in &mut pooled_embedding {
                    *val /= seq_len as f32;
                }
                
                println!("   ‚úÖ MEAN POOLING –ü–†–ò–ú–ï–ù–ï–ù!");
                println!("   –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {}", pooled_embedding.len());
                
                let norm = pooled_embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                println!("   –ù–æ—Ä–º–∞: {:.4}", norm);
                println!("   –û–±—Ä–∞–∑–µ—Ü: {:?}", &pooled_embedding[..5.min(pooled_embedding.len())]);
                
                if norm > 0.0 {
                    let normalized: Vec<f32> = pooled_embedding.iter().map(|x| x / norm).collect();
                    let final_norm = normalized.iter().map(|x| x * x).sum::<f32>().sqrt();
                    
                    println!("   ‚úÖ –≠–ú–ë–ï–î–î–ò–ù–ì –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù!");
                    println!("   –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞: {:.6}", final_norm);
                    println!("   üèÜ –ì–û–¢–û–í–´–ô –≠–ú–ë–ï–î–î–ò–ù–ì: {} —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å", normalized.len());
                    
                    found_embeddings = true;
                    break;
                }
            }
        }
    }
    
    if found_embeddings {
        println!("\nüéäüéäüéä –ü–û–õ–ù–ê–Ø –ü–û–ë–ï–î–ê!");
        println!("‚úÖ {} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —á–∏—Å—Ç–∞—è embedding –º–æ–¥–µ–ª—å!", model_name);
        println!("‚úÖ Encoder-only –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ KV –∫–µ—à–µ–π!");
        println!("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏!");
        println!("‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è production!");
    } else {
        println!("‚ö†Ô∏è –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª, –Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ");
    }
    
    Ok(())
}