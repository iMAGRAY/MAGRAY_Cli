use anyhow::Result;
use memory::promotion_optimized::OptimizedPromotionEngine;
use memory::{MemoryConfig, MemoryService, PromotionConfig, VectorStore};
use std::sync::Arc;
use tracing::info;

#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    info!("üöÄ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ promotion engine");
    info!("================================================\n");
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    let temp_dir = tempfile::tempdir()?;
    let process_id = std::process::id();
    let vector_db_path = temp_dir.path().join(format!("vector_db_{}", process_id));
    let promotion_db_path = temp_dir.path().join(format!("promotion_db_{}", process_id));
    
    println!("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã");
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let promotion_config = PromotionConfig {
        interact_ttl_hours: 1,
        insights_ttl_days: 1,
        promote_threshold: 0.5,
        decay_factor: 0.9,
    };
    
    println!("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    
    // –°–æ–∑–¥–∞–µ–º VectorStore —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—É—Ç–µ–º
    let vector_store = Arc::new(VectorStore::new(&vector_db_path).await?);
    println!("‚úÖ VectorStore —Å–æ–∑–¥–∞–Ω");
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é Sled DB –¥–ª—è promotion –∏–Ω–¥–µ–∫—Å–æ–≤
    let promotion_sled_db = Arc::new(sled::open(&promotion_db_path)?);
    println!("‚úÖ Promotion Sled DB –æ—Ç–∫—Ä—ã—Ç–∞");
    
    // –°–æ–∑–¥–∞–µ–º OptimizedPromotionEngine
    println!("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ OptimizedPromotionEngine...");
    let promotion_engine = OptimizedPromotionEngine::new(
        vector_store,
        promotion_config,
        promotion_sled_db
    ).await?;
    
    println!("‚úÖ OptimizedPromotionEngine —Å–æ–∑–¥–∞–Ω!");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    println!("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
    let perf_stats = promotion_engine.get_performance_stats().await?;
    
    println!("  üìà –†–∞–∑–º–µ—Ä—ã –∏–Ω–¥–µ–∫—Å–æ–≤:");
    println!("    Interact: time={}, score={}", 
             perf_stats.interact_time_index_size,
             perf_stats.interact_score_index_size);
    println!("    Insights: time={}, score={}", 
             perf_stats.insights_time_index_size,
             perf_stats.insights_score_index_size);
    println!("    Assets: time={}, score={}", 
             perf_stats.assets_time_index_size,
             perf_stats.assets_score_index_size);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º promotion —Ü–∏–∫–ª
    println!("\nüîÑ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ promotion —Ü–∏–∫–ª–∞...");
    let start_time = std::time::Instant::now();
    let promotion_stats = promotion_engine.run_optimized_promotion_cycle().await?;
    let duration = start_time.elapsed();
    
    println!("‚úÖ Promotion —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {}ms", duration.as_millis());
    
    println!("  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
    println!("    Interact -> Insights: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.interact_to_insights);
    println!("    Insights -> Assets: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.insights_to_assets);
    println!("    –£–¥–∞–ª–µ–Ω–æ –∏–∑ Interact: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.expired_interact);
    println!("    –£–¥–∞–ª–µ–Ω–æ –∏–∑ Insights: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.expired_insights);
    
    println!("  ‚è±Ô∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:");
    println!("    –û–±—â–µ–µ –≤—Ä–µ–º—è: {}ms", promotion_stats.total_time_ms);
    println!("    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤: {}ms", promotion_stats.index_update_time_ms);
    println!("    Promotion –æ–ø–µ—Ä–∞—Ü–∏–∏: {}ms", promotion_stats.promotion_time_ms);
    println!("    –û—á–∏—Å—Ç–∫–∞: {}ms", promotion_stats.cleanup_time_ms);
    
    // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    println!("\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏...");
    let second_start = std::time::Instant::now();
    let second_stats = promotion_engine.run_optimized_promotion_cycle().await?;
    let second_duration = second_start.elapsed();
    
    println!("‚úÖ –í—Ç–æ—Ä–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {}ms", second_duration.as_millis());
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let final_perf_stats = promotion_engine.get_performance_stats().await?;
    
    println!("\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:");
    println!("  Interact –∏–Ω–¥–µ–∫—Å—ã: {} -> {}", 
             perf_stats.interact_time_index_size,
             final_perf_stats.interact_time_index_size);
    println!("  Insights –∏–Ω–¥–µ–∫—Å—ã: {} -> {}", 
             perf_stats.insights_time_index_size,
             final_perf_stats.insights_time_index_size);
    println!("  Assets –∏–Ω–¥–µ–∫—Å—ã: {} -> {}", 
             perf_stats.assets_time_index_size,
             final_perf_stats.assets_time_index_size);
    
    println!("\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:");
    println!("===================");
    println!("  ‚úÖ OptimizedPromotionEngine: –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");
    println!("  ‚úÖ Time-based –∏–Ω–¥–µ–∫—Å—ã: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    println!("  ‚úÖ Performance stats: –†–∞–±–æ—Ç–∞—é—Ç");
    println!("  ‚úÖ Promotion —Ü–∏–∫–ª: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫"); 
    println!("  ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ü–∏–∫–ª—ã: –°—Ç–∞–±–∏–ª—å–Ω—ã");
    
    let avg_time = (duration.as_millis() + second_duration.as_millis()) / 2;
    println!("  üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {}ms", avg_time);
    
    if avg_time < 50 {
        println!("  üöÄ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!");
    } else if avg_time < 200 {
        println!("  ‚ö° –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!");
    } else {
        println!("  üìà –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
    }
    
    println!("\nüéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø PROMOTION ENGINE –ó–ê–í–ï–†–®–ï–ù–ê!");
    println!("   Time-based –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É");
    
    Ok(())
}