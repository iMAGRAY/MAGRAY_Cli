use memory::{migration::MigrationManager, VectorStore};
use anyhow::Result;
use clap::{Arg, Command};
use tracing::{info, warn};

#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    let matches = Command::new("migrate_to_hnsw_simple")
        .about("–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å VectorIndexHnswSimple")
        .arg(
            Arg::new("db_path")
                .help("–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                .required(true)
                .index(1),
        )
        .arg(
            Arg::new("command")
                .help("–ö–æ–º–∞–Ω–¥–∞: stats | migrate | clear | benchmark")
                .required(true)
                .index(2),
        )
        .get_matches();

    let db_path = matches.get_one::<String>("db_path").unwrap();
    let command = matches.get_one::<String>("command").unwrap();

    match command.as_str() {
        "stats" => show_stats(db_path).await?,
        "migrate" => run_migration(db_path).await?,
        "clear" => clear_all_data(db_path).await?,
        "benchmark" => run_benchmark(db_path).await?,
        _ => {
            eprintln!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {}", command);
            eprintln!("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: stats, migrate, clear, benchmark");
        }
    }

    Ok(())
}

async fn show_stats(db_path: &str) -> Result<()> {
    info!("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    
    let migration_manager = MigrationManager::new(db_path)?;
    let stats = migration_manager.get_stats().await?;
    
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:");
    println!("  –í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: {}", stats.schema_version);
    println!("  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {:.2} MB", stats.total_size_bytes as f64 / 1_048_576.0);
    println!();
    
    println!("üìù –°–ª–æ–π Interact:");
    println!("  –ó–∞–ø–∏—Å–µ–π: {}", stats.interact.record_count);
    println!("  –†–∞–∑–º–µ—Ä: {:.2} KB", stats.interact.total_size_bytes as f64 / 1024.0);
    println!("  –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö: {}", stats.interact.corrupted_count);
    println!("  –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {:.1}", stats.interact.avg_embedding_dim);
    println!();
    
    println!("üí° –°–ª–æ–π Insights:");
    println!("  –ó–∞–ø–∏—Å–µ–π: {}", stats.insights.record_count);
    println!("  –†–∞–∑–º–µ—Ä: {:.2} KB", stats.insights.total_size_bytes as f64 / 1024.0);
    println!("  –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö: {}", stats.insights.corrupted_count);
    println!("  –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {:.1}", stats.insights.avg_embedding_dim);
    println!();
    
    println!("üóÉÔ∏è –°–ª–æ–π Assets:");
    println!("  –ó–∞–ø–∏—Å–µ–π: {}", stats.assets.record_count);
    println!("  –†–∞–∑–º–µ—Ä: {:.2} KB", stats.assets.total_size_bytes as f64 / 1024.0);
    println!("  –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö: {}", stats.assets.corrupted_count);
    println!("  –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {:.1}", stats.assets.avg_embedding_dim);
    
    Ok(())
}

async fn run_migration(db_path: &str) -> Result<()> {
    info!("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...");
    
    let migration_manager = MigrationManager::new(db_path)?;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é
    migration_manager.migrate().await?;
    
    // –°–æ–∑–¥–∞—ë–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –Ω–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
    info!("üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å HnswSimple...");
    let vector_store = VectorStore::new(db_path).await?;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    use memory::Layer;
    for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
        vector_store.init_layer(layer).await?;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ—è
        let mut count = 0;
        let iter = vector_store.iter_layer(layer).await?;
        for result in iter {
            if result.is_ok() {
                count += 1;
            }
        }
        
        info!("‚úÖ –°–ª–æ–π {:?}: {} –∑–∞–ø–∏—Å–µ–π", layer, count);
    }
    
    info!("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    info!("üí° –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è VectorIndexHnswSimple –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    
    Ok(())
}

async fn clear_all_data(db_path: &str) -> Result<()> {
    warn!("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã...");
    
    let migration_manager = MigrationManager::new(db_path)?;
    migration_manager.clear_all_data().await?;
    
    info!("üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");
    
    Ok(())
}

async fn run_benchmark(db_path: &str) -> Result<()> {
    use std::time::Instant;
    use memory::{Layer, Record};
    use uuid::Uuid;
    use chrono::Utc;
    
    info!("üèÉ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
    
    let vector_store = VectorStore::new(db_path).await?;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    info!("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
    let mut test_records = Vec::new();
    
    for i in 0..1000 {
        let embedding: Vec<f32> = (0..1024)
            .map(|j| ((i + j) as f32 * 0.1).sin())
            .collect();
            
        let record = Record {
            id: Uuid::new_v4(),
            text: format!("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å {}", i),
            embedding,
            layer: Layer::Interact,
            kind: "test".to_string(),
            tags: vec!["benchmark".to_string()],
            project: "test_project".to_string(),
            session: "test_session".to_string(),
            ts: Utc::now(),
            last_access: Utc::now(),
            score: 0.0,
            access_count: 0,
        };
        
        test_records.push(record);
    }
    
    // –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
    info!("üì• –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏...");
    let start = Instant::now();
    
    let record_refs: Vec<&Record> = test_records.iter().collect();
    vector_store.insert_batch(&record_refs).await?;
    
    let insert_time = start.elapsed();
    info!("‚úÖ –í—Å—Ç–∞–≤–∫–∞ 1000 –∑–∞–ø–∏—Å–µ–π: {:?}", insert_time);
    
    // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    info!("üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞...");
    let query_embedding: Vec<f32> = (0..1024)
        .map(|i| (i as f32 * 0.05).sin())
        .collect();
    
    let start = Instant::now();
    let search_results = vector_store.search(&query_embedding, Layer::Interact, 10).await?;
    let search_time = start.elapsed();
    
    info!("‚úÖ –ü–æ–∏—Å–∫ top-10: {:?} (–Ω–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)", 
          search_time, search_results.len());
    
    // Multiple searches –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    info!("üîÑ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...");
    let start = Instant::now();
    
    for _ in 0..100 {
        let query: Vec<f32> = (0..1024)
            .map(|i| (i as f32 * 0.01).sin())
            .collect();
        vector_store.search(&query, Layer::Interact, 5).await?;
    }
    
    let multi_search_time = start.elapsed();
    info!("‚úÖ 100 –ø–æ–∏—Å–∫–æ–≤: {:?} (—Å—Ä–µ–¥–Ω–µ–µ: {:?})", 
          multi_search_time, multi_search_time / 100);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    println!();
    println!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞:");
    println!("  –ü–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ (1000 –∑–∞–ø–∏—Å–µ–π): {:?}", insert_time);
    println!("  –ü–æ–∏—Å–∫ top-10: {:?}", search_time);
    println!("  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:?}", multi_search_time / 100);
    println!("  –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {:.0} –ø–æ–∏—Å–∫–æ–≤/—Å–µ–∫", 
             100.0 / multi_search_time.as_secs_f64());
    
    Ok(())
}