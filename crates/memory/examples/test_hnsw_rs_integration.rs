use anyhow::Result;
use memory::{Layer, MemoryConfig, MemoryService, Record};
use std::path::PathBuf;

/// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hnsw_rs
#[tokio::main]
async fn main() -> Result<()> {
    // Initialize logging
    tracing_subscriber::fmt::init();

    println!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ô –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ hnsw_rs...\n");

    // Configure memory service
    let config = MemoryConfig {
        db_path: PathBuf::from("./test_hnsw_rs_lancedb"),
        cache_path: PathBuf::from("./test_hnsw_rs_cache"),
        ..Default::default()
    };

    println!("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryService —Å hnsw_rs...");
    let service = MemoryService::new(config).await?;

    // Insert –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å HNSW 
    println!("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π —Å –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ú–ò —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ 1024 —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏...");
    
    let mut records = Vec::new();
    for i in 0..50 {
        let mut vector = vec![0.0; 1024];
        // –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ 1024 (BGE-M3)
        for j in 0..1024 {
            vector[j] = (i as f32 + j as f32 * 0.001) / 100.0;
        }
        
        records.push(Record {
            text: format!("–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–æ–º–µ—Ä {} –¥–ª—è hnsw_rs –ø—Ä–æ–≤–µ—Ä–∫–∏", i),
            layer: Layer::Interact,
            kind: "test".to_string(),
            project: "hnsw_test".to_string(),
            tags: vec!["hnsw".to_string(), "test".to_string()],
            embedding: vector, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—ë–º 1024-—Ä–∞–∑–º–µ—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
            ..Default::default()
        });
    }

    service.insert_batch(records).await?;
    println!("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 50 –∑–∞–ø–∏—Å–µ–π");

    // –ü–æ–∏—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    println!("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å hnsw_rs...");
    let query = "hnsw —Ç–µ—Å—Ç –ø–æ–∏—Å–∫";
    
    let start = std::time::Instant::now();
    let results = service.search(query)
        .with_layer(Layer::Interact)
        .top_k(10)
        .execute()
        .await?;
    let duration = start.elapsed();
    
    println!("‚ö° –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞: {:?}", duration);
    println!("üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", results.len());
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    for (i, record) in results.iter().take(3).enumerate() {
        println!("  {}. {} (score: {:.3})", i + 1, 
                 record.text.chars().take(50).collect::<String>(), 
                 record.score);
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    println!("\nüî• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ hnsw_rs...");
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ VectorStore, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    println!("üìà –ï—Å–ª–∏ —ç—Ç–æ hnsw_rs, –ø–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–º –¥–∞–∂–µ –¥–ª—è 50 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤");
    
    if duration.as_millis() < 10 {
        println!("‚úÖ –û–¢–õ–ò–ß–ù–û: –ü–æ–∏—Å–∫ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π ({:?}) - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HNSW", duration);
    } else if duration.as_millis() < 100 {
        println!("‚úÖ –•–û–†–û–®–û: –ü–æ–∏—Å–∫ –±—ã—Å—Ç—Ä—ã–π ({:?}) - –≤–µ—Ä–æ—è—Ç–Ω–æ HNSW –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å", duration);
    } else {
        println!("‚ö†Ô∏è  –ú–ï–î–õ–ï–ù–ù–û: –ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª {:?} - –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫?", duration);
    }

    // –¢–µ—Å—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏ - –¥–æ–±–∞–≤–∏–º –µ—â—ë –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    println!("\nüìà –¢–µ—Å—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏: –¥–æ–±–∞–≤–ª—è–µ–º –µ—â—ë 100 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...");
    
    let mut more_records = Vec::new();
    for i in 50..150 {
        let mut vector = vec![0.0; 1024];
        // –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ 1024 (BGE-M3)
        for j in 0..1024 {
            vector[j] = (i as f32 + j as f32 * 0.001) / 100.0;
        }
        
        more_records.push(Record {
            text: format!("–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –¥–æ–∫—É–º–µ–Ω—Ç {} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HNSW –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", i),
            layer: Layer::Interact,
            kind: "scale_test".to_string(),
            project: "hnsw_scale".to_string(),
            tags: vec!["scale".to_string(), "hnsw".to_string()],
            embedding: vector, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—ë–º 1024-—Ä–∞–∑–º–µ—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
            ..Default::default()
        });
    }

    service.insert_batch(more_records).await?;
    println!("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –µ—â—ë 100 –∑–∞–ø–∏—Å–µ–π (–≤—Å–µ–≥–æ 150)");

    // –ü–æ–∏—Å–∫ –ø–æ –±–æ–ª—å—à–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É
    let start = std::time::Instant::now();
    let big_results = service.search("–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        .with_layer(Layer::Interact)
        .top_k(15)
        .execute()
        .await?;
    let big_duration = start.elapsed();
    
    println!("‚ö° –ü–æ–∏—Å–∫ –ø–æ 150 –¥–æ–∫—É–º–µ–Ω—Ç–∞–º: {:?}", big_duration);
    println!("üìä –ù–∞–π–¥–µ–Ω–æ: {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", big_results.len());
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if big_duration.as_millis() < 20 {
        println!("üéâ –ü–†–ï–í–û–°–•–û–î–ù–û: hnsw_rs –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!");
        println!("   –ü–æ–∏—Å–∫ –ø–æ 150 –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∑–∞ {:?} - —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ HNSW!", big_duration);
    } else if big_duration.as_millis() < 100 {
        println!("‚úÖ –•–û–†–û–®–û: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è ({:?})", big_duration);
    } else {
        println!("‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª—É—á—à–µ: {:?}", big_duration);
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
    let (hits, misses, inserts) = service.cache_stats();
    println!("\nüíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞:");
    println!("   –ü–æ–ø–∞–¥–∞–Ω–∏—è: {}", hits);
    println!("   –ü—Ä–æ–º–∞—Ö–∏: {}", misses);
    println!("   –í—Å—Ç–∞–≤–∫–∏: {}", inserts);
    println!("   Hit rate: {:.1}%", service.cache_hit_rate() * 100.0);

    println!("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:");
    println!("   VectorStore –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: VectorIndexHnswRs");
    println!("   –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: hnsw_rs –æ—Ç Jean-Pierre Both");
    println!("   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: M=24, ef_construction=400, ef_search=100");
    println!("   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è");
    println!("   –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: ‚úÖ");

    Ok(())
}