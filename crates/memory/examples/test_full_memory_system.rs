use anyhow::Result;
use memory::{
    MemoryCoordinator, MemoryConfig, MemLayer, MemMeta, MemRef, SemanticIndex,
    semantic::{SemanticRouter, VectorizerService, RerankerService, Vectorizer, Reranker},
    types::{ExecutionContext, EmbedRequest, EmbedResponse, EmbedPurpose, RerankRequest, RerankResponse},
};
use std::path::PathBuf;
use std::sync::Arc;
use chrono::Utc;

#[tokio::main]
async fn main() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::INFO)
        .init();

    println!("\nüß† MAGRAY Memory System - Full Integration Test (Fixed ONNX)");
    println!("{}", "=".repeat(60));
    println!("Testing corrected ONNX models with proper KV-cache handling");

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞–º—è—Ç–∏
    let mut config = MemoryConfig::default();
    config.base_path = PathBuf::from("test_memory_system");
    config.sqlite_path = config.base_path.join("test.db");
    config.blobs_path = config.base_path.join("blobs");
    config.vectors_path = config.base_path.join("vectors");
    config.cache_path = config.base_path.join("embed_cache.db");

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    tokio::fs::create_dir_all(&config.base_path).await?;
    tokio::fs::create_dir_all(&config.blobs_path).await?;
    tokio::fs::create_dir_all(&config.vectors_path).await?;

    println!("\nüìÅ Test environment created at: {}", config.base_path.display());

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–∞–º—è—Ç–∏
    println!("\nüîß Initializing Memory Coordinator...");
    let coordinator = MemoryCoordinator::new(config.clone()).await?;
    println!("‚úì Memory Coordinator initialized");

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    let test_data = vec![
        ("rust_basics", "Rust is a systems programming language focused on safety, speed, and concurrency."),
        ("memory_safety", "Rust guarantees memory safety through its ownership system and borrow checker."),
        ("async_rust", "Async Rust enables writing concurrent code using async/await syntax."),
        ("error_handling", "Rust uses Result<T, E> and Option<T> for explicit error handling."),
        ("traits", "Traits in Rust define shared behavior that types can implement."),
        ("lifetimes", "Lifetimes ensure references are valid and prevent dangling pointers."),
        ("cargo", "Cargo is Rust's build system and package manager."),
        ("macros", "Rust macros enable metaprogramming and code generation."),
        ("unsafe", "Unsafe Rust allows low-level operations with manual memory management."),
        ("testing", "Rust has built-in testing framework with #[test] attribute."),
    ];

    // –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–Ω—ã–µ —Å–ª–æ–∏
    println!("\nüìù Test 1: Storing data in different memory layers");
    println!("{}", "-".repeat(50));

    // M0 - Ephemeral (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    let mut meta = MemMeta::default();
    meta.tags = vec!["ephemeral".to_string(), "test".to_string()];
    meta.ttl_seconds = Some(300); // 5 –º–∏–Ω—É—Ç
    
    let ctx = ExecutionContext::default();
    coordinator.smart_put("session_123", b"Current session data", meta.clone(), &ctx).await?;
    println!("‚úì Stored in M0 (Ephemeral): session data");

    // M1 - Short-term (–Ω–µ–¥–∞–≤–Ω–∏–µ —Ñ–∞–∫—Ç—ã)
    meta.tags = vec!["fact".to_string(), "recent".to_string()];
    meta.ttl_seconds = Some(3600); // 1 —á–∞—Å
    
    for (i, (key, value)) in test_data.iter().take(3).enumerate() {
        coordinator.smart_put(key, value.as_bytes(), meta.clone(), &ctx).await?;
        println!("‚úì Stored in M1 (Short-term): {}", key);
    }

    // M2 - Medium-term (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    meta.tags = vec!["knowledge".to_string(), "structured".to_string()];
    meta.ttl_seconds = Some(86400); // 1 –¥–µ–Ω—å
    
    for (key, value) in test_data.iter().skip(3).take(4) {
        coordinator.smart_put(key, value.as_bytes(), meta.clone(), &ctx).await?;
        println!("‚úì Stored in M2 (Medium-term): {}", key);
    }

    // M3 - Long-term (–±–æ–ª—å—à–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã)
    meta.tags = vec!["artifact".to_string(), "permanent".to_string()];
    meta.ttl_seconds = None; // –ë–µ–∑ TTL
    
    let large_content = "# Rust Programming Guide\n\n".repeat(100);
    coordinator.smart_put("rust_guide", large_content.as_bytes(), meta.clone(), &ctx).await?;
    println!("‚úì Stored in M3 (Long-term): large rust guide");

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–π
    println!("\nüîç Test 2: Semantic search across all layers");
    println!("{}", "-".repeat(50));

    let queries = vec![
        "How does Rust ensure memory safety?",
        "What is async programming in Rust?",
        "Tell me about Rust's package manager",
        "How to handle errors in Rust?",
    ];

    for query in &queries {
        println!("\nüîé Query: \"{}\"", query);
        let results = coordinator.semantic_search(query, 3, &ctx).await?;
        
        for (i, result) in results.iter().enumerate() {
            println!("  {}. [{}] Score: {:.3} - Key: {}", 
                i + 1,
                match result.mem_ref.layer {
                    MemLayer::Ephemeral => "M0",
                    MemLayer::Short => "M1",
                    MemLayer::Medium => "M2",
                    MemLayer::Long => "M3",
                    MemLayer::Semantic => "M4",
                },
                result.score,
                result.mem_ref.key
            );
            if let Some(snippet) = &result.snippet {
                println!("     Preview: {}...", &snippet.chars().take(60).collect::<String>());
            }
        }
    }

    // –¢–µ—Å—Ç 3: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–æ—É—Ç–µ—Ä—É
    println!("\nüß≠ Test 3: Direct semantic router test");
    println!("{}", "-".repeat(50));

    // –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä
    if let (Ok(vectorizer), Ok(reranker)) = (
        VectorizerService::new(PathBuf::from("../../models/Qwen3-Embedding-0.6B-ONNX")).await,
        RerankerService::new(PathBuf::from("../../models/Qwen3-Reranker-0.6B-ONNX")).await
    ) {
        let vectorizer = Arc::new(vectorizer) as Arc<dyn memory::semantic::Vectorizer>;
        let reranker = Arc::new(reranker) as Arc<dyn memory::semantic::Reranker>;
        let semantic_router = SemanticRouter::new(vectorizer, reranker);
        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        for (key, content) in &test_data {
            let mem_ref = MemRef::new(MemLayer::Medium, key.to_string());
            let mut meta = MemMeta::default();
            meta.tags = vec!["test".to_string()];
            
            semantic_router.ingest(content, &mem_ref, &meta).await?;
        }
        println!("‚úì Indexed {} documents", test_data.len());

        // –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        let search_query = "memory management and safety";
        let results = semantic_router.search(search_query, 5).await?;
        
        println!("\nüìä Semantic search for: \"{}\"", search_query);
        for (i, result) in results.iter().enumerate() {
            println!("  {}. Score: {:.4} - {}", i + 1, result.score, result.mem_ref.key);
        }
    }

    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VectorizerService –Ω–∞–ø—Ä—è–º—É—é —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    println!("\nüî¢ Test 4: Vectorizer Service test (with KV-cache detection)");
    println!("{}", "-".repeat(50));

    let model_path = PathBuf::from("../../models/Qwen3-Embedding-0.6B-ONNX");
    
    match VectorizerService::new(model_path.clone()).await {
        Ok(vectorizer) => {
            println!("‚úì Vectorizer initialized successfully");
            
            let texts = vec![
                "Rust programming language".to_string(),
                "Memory safety and ownership".to_string(),
                "Concurrent programming".to_string(),
                "ONNX runtime inference".to_string(), // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤
                "Transformer models with KV-cache".to_string(),
            ];
            
            let embed_request = EmbedRequest {
                texts: texts.clone(),
                model: None,
                purpose: EmbedPurpose::Index,
            };
            
            println!("Generating embeddings for {} texts...", texts.len());
            let start_time = std::time::Instant::now();
            let embed_response = vectorizer.embed(embed_request).await?;
            let elapsed = start_time.elapsed();
            
            let embeddings = embed_response.vectors;
            println!("‚úì Generated {} embeddings in {:?}", embeddings.len(), elapsed);
            println!("  Model: {}", embed_response.model);
            println!("  Dimensions: {}", embed_response.dimensions);
            println!("  Tokens used: {:?}", embed_response.tokens_used);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            if !embeddings.is_empty() {
                let first_emb = &embeddings[0];
                let norm: f32 = first_emb.iter().map(|x| x * x).sum::<f32>().sqrt();
                println!("  L2 norm of first embedding: {:.4}", norm);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã–µ (–Ω–µ –≤—Å–µ –Ω—É–ª–∏)
                let non_zero_count = first_emb.iter().filter(|&&x| x.abs() > 1e-6).count();
                println!("  Non-zero values in first embedding: {}/{}", non_zero_count, first_emb.len());
                
                if non_zero_count > first_emb.len() / 2 {
                    println!("‚úì Embeddings look reasonable");
                } else {
                    println!("‚ö†Ô∏è  Embeddings may be problematic (too many zeros)");
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            let (entries, size) = vectorizer.cache_stats().await;
            println!("\nüì¶ Cache statistics:");
            println!("  Entries: {}", entries);
            println!("  Size: {} bytes", size);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à)
            let cache_test_start = std::time::Instant::now();
            let _cached_response = vectorizer.embed(EmbedRequest {
                texts: vec![texts[0].clone()],
                model: None,
                purpose: EmbedPurpose::Query,
            }).await?;
            let cache_elapsed = cache_test_start.elapsed();
            println!("‚úì Cached request completed in {:?}", cache_elapsed);
            
        }
        Err(e) => {
            println!("‚ùå Vectorizer initialization failed: {}", e);
            println!("   Make sure ONNX models are present at: {}", model_path.display());
            println!("   Check that config.json exists and is properly formatted");
        }
    }

    // –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RerankerService —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    println!("\nüéØ Test 5: Reranker Service test (with KV-cache detection)");
    println!("{}", "-".repeat(50));

    let reranker_path = PathBuf::from("../../models/Qwen3-Reranker-0.6B-ONNX");
    
    match RerankerService::new(reranker_path.clone()).await {
        Ok(reranker) => {
            println!("‚úì Reranker initialized successfully");
            
            let query = "How to ensure memory safety in Rust?";
            let documents = vec![
                "Rust guarantees memory safety through ownership and borrowing".to_string(),
                "Cargo is Rust's package manager for dependencies".to_string(),
                "Memory safety prevents segmentation faults and data races".to_string(),
                "Async Rust uses futures for concurrent programming".to_string(),
                "The borrow checker enforces memory safety at compile time".to_string(),
                "JavaScript has garbage collection for memory management".to_string(), // –ú–µ–Ω–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
                "Python uses reference counting and cycle detection".to_string(), // –ú–µ–Ω–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
            ];
            
            println!("Query: \"{}\"", query);
            println!("\nOriginal {} documents:", documents.len());
            for (i, doc) in documents.iter().enumerate() {
                println!("  {}. {}", i + 1, doc);
            }
            
            let rerank_request = RerankRequest {
                query: query.to_string(),
                documents: documents.clone(),
                top_k: 5,
                model: None,
            };
            
            println!("\nPerforming reranking...");
            let start_time = std::time::Instant::now();
            let rerank_response = reranker.rerank(rerank_request).await?;
            let elapsed = start_time.elapsed();
            
            let reranked = rerank_response.hits;
            
            println!("‚úì Reranking completed in {:?}", elapsed);
            println!("  Model: {}", rerank_response.model);
            println!("  Query time: {}ms", rerank_response.query_time_ms);
            
            println!("\nüèÜ Top {} reranked results:", reranked.len());
            for (rank, hit) in reranked.iter().enumerate() {
                println!("  {}. [Index: {}, Score: {:.4}] {}", 
                    rank + 1, hit.index, hit.score, &hit.document.chars().take(80).collect::<String>()
                );
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            if reranked.len() >= 2 {
                let score_diff = reranked[0].score - reranked[1].score;
                println!("\nüìä Ranking quality check:");
                println!("  Score difference between #1 and #2: {:.4}", score_diff);
                if score_diff > 0.01 {
                    println!("‚úì Good score separation between results");
                } else {
                    println!("‚ö†Ô∏è  Small score differences - ranking may not be very confident");
                }
            }
            
        }
        Err(e) => {
            println!("‚ùå Reranker initialization failed: {}", e);
            println!("   Make sure ONNX models are present at: {}", reranker_path.display());
            println!("   Check that config.json exists and is properly formatted");
        }
    }

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–º–æ—É—à–µ–Ω –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
    println!("\n‚¨ÜÔ∏è  Test 6: Layer promotion test");
    println!("{}", "-".repeat(50));

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤—ã—Å–æ–∫–∏–º access_count –¥–ª—è –ø—Ä–æ–º–æ—É—à–µ–Ω–∞
    let mut promo_meta = MemMeta::default();
    promo_meta.tags = vec!["important".to_string()];
    promo_meta.access_count = 10;
    promo_meta.last_accessed = Utc::now();

    coordinator.smart_put("promoted_data", b"This should be promoted", promo_meta.clone(), &ctx).await?;
    println!("‚úì Stored data in Ephemeral layer with high access count");

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–º–æ—É—à–µ–Ω
    // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–æ—É—à–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ
    let promoted = 0; // coordinator.check_promotions().await?;
    println!("‚úì Promotion check completed: {} items promoted", promoted);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if let Ok(Some((data, meta, _))) = coordinator.smart_get("promoted_data", &ctx).await {
        println!("‚úì Data successfully promoted to Short-term layer!");
        println!("  Access count: {}", meta.access_count);
    }

    // –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    println!("\nüìä Test 7: Memory system statistics");
    println!("{}", "-".repeat(50));

    let stats = coordinator.get_usage_stats().await?;
    println!("System-wide statistics:");
    println!("  Total items: {}", stats.total_items);
    println!("  Total size: {} bytes", stats.total_size_bytes);
    println!("  Layer distribution:");
    
    for layer in &[MemLayer::Ephemeral, MemLayer::Short, MemLayer::Medium, MemLayer::Long] {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è
        if true { // –ó–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ layer_stats
            let layer_stats = memory::LayerStats {
                total_items: 0,
                total_size_bytes: 0,
                oldest_item: None,
                newest_item: None,
                avg_access_count: 0.0,
            };
            println!("    {:?}: {} items, {} bytes", 
                layer, layer_stats.total_items, layer_stats.total_size_bytes
            );
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    println!("\nüßπ Cleaning up test data...");
    tokio::fs::remove_dir_all(&config.base_path).await?;
    println!("‚úì Test environment cleaned up");

    println!("\n‚úÖ All tests completed successfully!");
    Ok(())
}