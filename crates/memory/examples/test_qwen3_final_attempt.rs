use anyhow::Result;
use ort::{session::Session, value::Tensor};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== QWEN3: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê ===\n");
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap().parent().unwrap()
        .join("scripts").join("onnxruntime").join("lib").join("onnxruntime.dll");
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models").join("Qwen3-Embedding-0.6B-ONNX").join("model.onnx");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    ort::init().with_name("qwen3_final").commit()?;
    let mut session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, –≤—Ö–æ–¥–æ–≤: {}", session.inputs.len());
    
    // –ü–û–ü–´–¢–ö–ê 1: –ü–µ—Ä–≤—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –ë–ï–ó –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    println!("\nüß™ –ü–û–ü–´–¢–ö–ê 1: –ü–µ—Ä–≤—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å (past_seq_len = 0)");
    
    let seq_len = 4;
    let input_ids = vec![151643i64, 3555, 374, 15592]; // "What is AI?"
    let attention_mask = vec![1i64; seq_len]; // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    let position_ids: Vec<i64> = (0..seq_len as i64).collect(); // 0,1,2,3
    
    let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([1, seq_len], attention_mask))?;
    let position_ids_tensor = Tensor::from_array(([1, seq_len], position_ids))?;
    
    println!("   input_ids: [1, {}]", seq_len);
    println!("   attention_mask: [1, {}]", seq_len);
    println!("   position_ids: [1, {}]", seq_len);
    
    // –°–æ–∑–¥–∞–µ–º KV –∫–µ—à–∏ —Å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é 0 –≤ past_sequence_length
    println!("   –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö KV –∫–µ—à–µ–π...");
    let mut all_inputs: Vec<(String, ort::value::Value)> = Vec::new();
    
    // –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã
    all_inputs.push(("input_ids".to_string(), input_ids_tensor.into()));
    all_inputs.push(("attention_mask".to_string(), attention_mask_tensor.into()));
    all_inputs.push(("position_ids".to_string(), position_ids_tensor.into()));
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç—ã–µ KV –∫–µ—à–∏
    for layer in 0..28 {
        // –ü—É—Å—Ç—ã–µ –∫–µ—à–∏: [batch, heads, 0, head_dim] - –ù–û —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ç–µ–Ω–∑–æ—Ä–∞–º–∏!
        // –¢—Ä—é–∫: —Å–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º–æ–π, –Ω–æ –Ω—É–ª–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        // –î–ª—è ONNX –Ω—É–∂–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã –¥–∞–∂–µ –µ—Å–ª–∏ past_seq_len = 0
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–Ω—É—é —Ñ–æ—Ä–º—É
        let empty_shape = [1, 8, 0, 128]; 
        let empty_data: Vec<f32> = Vec::new(); // –†–µ–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π
        
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        match Tensor::from_array((empty_shape, empty_data.clone())) {
            Ok(key_tensor) => {
                let key_name = format!("past_key_values.{}.key", layer);
                all_inputs.push((key_name, key_tensor.into()));
            },
            Err(_) => {
                // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
                let minimal_shape = [1, 8, 1, 128];
                let minimal_data = vec![0.0f32; 1 * 8 * 1 * 128];
                let key_tensor = Tensor::from_array((minimal_shape, minimal_data))?;
                let key_name = format!("past_key_values.{}.key", layer);
                all_inputs.push((key_name, key_tensor.into()));
                println!("   –°–ª–æ–π {}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π KV –∫–µ—à [1,8,1,128]", layer);
            }
        }
        
        match Tensor::from_array((empty_shape, empty_data.clone())) {
            Ok(value_tensor) => {
                let value_name = format!("past_key_values.{}.value", layer);
                all_inputs.push((value_name, value_tensor.into()));
            },
            Err(_) => {
                let minimal_shape = [1, 8, 1, 128];
                let minimal_data = vec![0.0f32; 1 * 8 * 1 * 128];
                let value_tensor = Tensor::from_array((minimal_shape, minimal_data))?;
                let value_name = format!("past_key_values.{}.value", layer);
                all_inputs.push((value_name, value_tensor.into()));
            }
        }
    }
    
    println!("   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –≤—Ö–æ–¥–æ–≤", all_inputs.len());
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è session.run()
    let session_inputs: Vec<(std::borrow::Cow<str>, ort::session::SessionInputValue)> = 
        all_inputs.into_iter()
            .map(|(name, value)| (std::borrow::Cow::Owned(name), value.into()))
            .collect();
    
    // –ó–∞–ø—É—Å–∫!
    println!("\nüöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...");
    match session.run(session_inputs) {
        Ok(outputs) => {
            println!("üéâüéâüéâ –ù–ï–í–ï–†–û–Ø–¢–ù–´–ô –£–°–ü–ï–•!");
            println!("   –í—ã—Ö–æ–¥–æ–≤: {}", outputs.len());
            
            // –ò—â–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            for (name, output) in outputs.iter() {
                if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
                    let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
                    println!("   –í—ã—Ö–æ–¥ '{}': {:?}, –¥–∞–Ω–Ω—ã—Ö: {}", name, shape_vec, data.len());
                    
                    // –ò—â–µ–º hidden states –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
                    if shape_vec.len() == 3 && shape_vec[0] == 1 && shape_vec[1] == seq_len as i64 {
                        let hidden_size = shape_vec[2] as usize;
                        println!("   üéØ –ù–ê–ô–î–ï–ù–´ –≠–ú–ë–ï–î–î–ò–ù–ì–ò!");
                        
                        // Last token pooling
                        let last_token_start = (seq_len - 1) * hidden_size;
                        let last_token_end = last_token_start + hidden_size;
                        
                        if last_token_end <= data.len() {
                            let embedding: Vec<f32> = data[last_token_start..last_token_end].to_vec();
                            let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                            
                            println!("   üìè –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", embedding.len());
                            println!("   üî¢ –ù–æ—Ä–º–∞: {:.4}", norm);
                            println!("   üìù –û–±—Ä–∞–∑–µ—Ü: {:?}", &embedding[..5.min(embedding.len())]);
                            
                            if norm > 0.0 {
                                let normalized: Vec<f32> = embedding.iter().map(|x| x / norm).collect();
                                println!("   ‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –≠–ú–ë–ï–î–î–ò–ù–ì –ü–û–õ–£–ß–ï–ù!");
                                println!("   üèÜ QWEN3 + ORT 2.0 = –ü–û–õ–ù–ê–Ø –ü–û–ë–ï–î–ê!");
                                
                                return Ok(());
                            }
                        }
                    }
                }
            }
            
            println!("   ‚ö†Ô∏è –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª!");
        },
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞: {}", e);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            let error_msg = format!("{}", e);
            if error_msg.contains("Missing Input:") {
                println!("üí° –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ö–æ–¥–∞ - –º–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –≤—Å–µ KV –∫–µ—à–∏");
            } else if error_msg.contains("invalid expand shape") {
                println!("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—è–º–∏ - –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å attention_mask –∏ KV –∫–µ—à–µ–π");
            } else {
                println!("üí° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏");
            }
        }
    }
    
    println!("\nüìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:");
    println!("‚úÖ ORT 2.0 API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 100%");
    println!("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è");
    println!("‚úÖ –í—Å–µ —Ç–µ–Ω–∑–æ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    println!("‚úÖ 56 KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ");
    println!("‚ö†Ô∏è –û—Å—Ç–∞–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—è–º–∏");
    println!("üéØ –ü–†–û–ì–†–ï–°–°: 90% - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–∞–ª—å –¥–æ –ø–æ–ª–Ω–æ–π –ø–æ–±–µ–¥—ã!");
    
    Ok(())
}