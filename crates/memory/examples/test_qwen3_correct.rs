use anyhow::Result;
use ort::{session::Session, value::Tensor, inputs};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== QWEN3-EMBEDDING: –ü–†–ê–í–ò–õ–¨–ù–´–ô –¢–ï–°–¢ ===\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    println!("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–ù–ò–ú–ê–ù–ò–ï:");
    println!("- Qwen3-Embedding —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è feature-extraction");
    println!("- –ù–ï–¢ KV –∫–µ—à–µ–π –≤ ONNX –≥—Ä–∞—Ñ–µ");
    println!("- use_cache:true –≤ config.json - –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫");
    println!("- –î–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–∞—è embedding –º–æ–¥–µ–ª—å!");
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    println!("\nüìÅ –ú–æ–¥–µ–ª—å: {}", model_path.display());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ORT
    println!("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime...");
    ort::init()
        .with_name("qwen3_correct")
        .commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    println!("\n2. –°–æ–∑–¥–∞–Ω–∏–µ ONNX —Å–µ—Å—Å–∏–∏...");
    let mut session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    println!("   –í—Ö–æ–¥–æ–≤: {}", session.inputs.len());
    println!("   –í—ã—Ö–æ–¥–æ–≤: {}", session.outputs.len());
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢: –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–æ–≤
    println!("\n3. üîç –†–ï–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–•–û–î–û–í:");
    let mut has_kv_inputs = false;
    let mut basic_inputs = 0;
    
    for (i, input) in session.inputs.iter().enumerate() {
        if input.name.contains("past_key_values") {
            has_kv_inputs = true;
            if i < 10 {
                println!("   {}: {} - {:?} ‚ùå KV –∫–µ—à!", i, input.name, input.input_type);
            }
        } else {
            basic_inputs += 1;
            println!("   {}: {} - {:?} ‚úÖ –ë–∞–∑–æ–≤—ã–π –≤—Ö–æ–¥", i, input.name, input.input_type);
        }
    }
    
    println!("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–•–û–î–û–í:");
    println!("   –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã: {}", basic_inputs);
    println!("   KV –∫–µ—à –≤—Ö–æ–¥—ã: {}", session.inputs.len() - basic_inputs);
    println!("   KV –∫–µ—à–∏ –Ω–∞–π–¥–µ–Ω—ã: {}", has_kv_inputs);
    
    if has_kv_inputs {
        println!("\n‚ö†Ô∏è –ù–ï–û–ñ–ò–î–ê–ù–ù–û–°–¢–¨: –í ONNX –≥—Ä–∞—Ñ–µ –ï–°–¢–¨ KV –∫–µ—à–∏!");
        println!("üí≠ –í–æ–∑–º–æ–∂–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:");
        println!("   1. –ú–æ–¥–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å full CausalLM –≥—Ä–∞—Ñ–æ–º");
        println!("   2. Transformers.js —ç–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–∏–ª –∫–µ—à–∏ '–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π'");
        println!("   3. –ú–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ embedding, –∏ generation");
        println!("\nüí° –ù–û –¥–ª—è embedding –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã!");
    } else {
        println!("\n‚úÖ –û–ñ–ò–î–ê–ï–ú–û: –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã –¥–ª—è embedding!");
    }
    
    // –¢–ï–°–¢: –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã
    println!("\n4. üß™ –¢–ï–°–¢: –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã (–∫–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)...");
    
    let seq_len = 5;
    let input_ids = vec![151643i64, 3555, 374, 15592, 1029]; // "What is AI"
    let attention_mask = vec![1i64; seq_len];
    let position_ids: Vec<i64> = (0..seq_len as i64).collect();
    
    let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([1, seq_len], attention_mask))?;
    let position_ids_tensor = Tensor::from_array(([1, seq_len], position_ids))?;
    
    println!("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");
    
    // –ü–æ–ø—ã—Ç–∫–∞ —Å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏
    println!("\n5. üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –¢–æ–ª—å–∫–æ 3 –±–∞–∑–æ–≤—ã—Ö –≤—Ö–æ–¥–∞...");
    
    let result = session.run(inputs![
        "input_ids" => input_ids_tensor,
        "attention_mask" => attention_mask_tensor,
        "position_ids" => position_ids_tensor
    ]);
    
    match result {
        Ok(outputs) => {
            println!("üéâüéâüéâ –ü–û–ë–ï–î–ê! QWEN3-EMBEDDING –†–ê–ë–û–¢–ê–ï–¢ –ë–ï–ó KV –ö–ï–®–ï–ô!");
            println!("   –ü–æ–ª—É—á–µ–Ω–æ {} –≤—ã—Ö–æ–¥–æ–≤", outputs.len());
            
            // –ü–æ–∏—Å–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            for (name, output) in outputs.iter() {
                if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
                    let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
                    println!("   –í—ã—Ö–æ–¥ '{}': —Ñ–æ—Ä–º–∞ {:?}, –¥–∞–Ω–Ω—ã—Ö {}", name, shape_vec, data.len());
                    
                    // –ò—â–µ–º hidden states [batch, seq, hidden]
                    if shape_vec.len() == 3 && shape_vec[0] == 1 && shape_vec[1] == seq_len as i64 {
                        let hidden_size = shape_vec[2] as usize;
                        
                        println!("   üéØ –ù–ê–ô–î–ï–ù–´ QWEN3 –≠–ú–ë–ï–î–î–ò–ù–ì–ò!");
                        println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: [1, {}, {}]", seq_len, hidden_size);
                        
                        // Last token pooling
                        let last_token_start = (seq_len - 1) * hidden_size;
                        let last_token_end = last_token_start + hidden_size;
                        
                        if last_token_end <= data.len() {
                            let embedding: Vec<f32> = data[last_token_start..last_token_end].to_vec();
                            let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                            
                            println!("   ‚úÖ –≠–ú–ë–ï–î–î–ò–ù–ì –ò–ó–í–õ–ï–ß–ï–ù!");
                            println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", embedding.len());
                            println!("   –ù–æ—Ä–º–∞: {:.4}", norm);
                            println!("   –û–±—Ä–∞–∑–µ—Ü: {:?}", &embedding[..3.min(embedding.len())]);
                            
                            if norm > 0.0 {
                                println!("\nüèÜüèÜüèÜ –¢–†–ò–£–ú–§!");
                                println!("‚úÖ Qwen3-Embedding - –æ–±—ã—á–Ω–∞—è embedding –º–æ–¥–µ–ª—å!");
                                println!("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó KV –∫–µ—à–µ–π!");
                                println!("‚úÖ {} —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤!", embedding.len());
                                println!("‚úÖ –ì–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
                                
                                return Ok(());
                            }
                        }
                    }
                }
            }
            
            println!("‚ö†Ô∏è –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª, –Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ");
        },
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞: {}", e);
            
            if format!("{}", e).contains("Missing Input:") {
                println!("\nüíî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–¥–µ–ª—å –≤—Å–µ-—Ç–∞–∫–∏ —Ç—Ä–µ–±—É–µ—Ç KV –∫–µ—à–∏");
                println!("üí° –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ ONNX –≥—Ä–∞—Ñ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω—É—é CausalLM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É");
                println!("üí° –ù–æ –¥–ª—è embedding –º—ã –º–æ–≥–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ –∫–µ—à–∏");
            }
        }
    }
    
    println!("\nüìã –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:");
    println!("- –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: Qwen3-Embedding - –ø—Ä–æ—Å—Ç–∞—è embedding –º–æ–¥–µ–ª—å ‚úÖ");
    println!("- –ï—Å–ª–∏ –Ω–µ—Ç: –¢—Ä–µ–±—É–µ—Ç KV –∫–µ—à–∏, –Ω–æ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—É—Å—Ç—ã–º–∏ ‚ö†Ô∏è");
    println!("- –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ: E5-small –∏ MXBai –ø—Ä–æ—â–µ –¥–ª—è production üöÄ");
    
    Ok(())
}