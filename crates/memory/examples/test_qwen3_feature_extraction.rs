use anyhow::Result;
use ort::{session::Session, value::Tensor, inputs};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== QWEN3-EMBEDDING: –ù–ê–°–¢–û–Ø–©–ê–Ø FEATURE-EXTRACTION –ú–û–î–ï–õ–¨ ===\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    println!("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨: Qwen3-Embedding feature-extraction");
    println!("‚úÖ –û–∂–∏–¥–∞–µ—Ç—Å—è: –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã (input_ids, attention_mask, position_ids)");
    println!("‚úÖ –ë–ï–ó KV –∫–µ—à–µ–π - —á–∏—Å—Ç–∞—è embedding –º–æ–¥–µ–ª—å!");
    
    // –ü—É—Ç—å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    println!("\nüìÅ –ú–æ–¥–µ–ª—å: {}", model_path.display());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ORT
    println!("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime...");
    ort::init()
        .with_name("qwen3_feature_extraction")
        .commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    println!("\n2. –°–æ–∑–¥–∞–Ω–∏–µ ONNX —Å–µ—Å—Å–∏–∏...");
    let mut session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    println!("   –í—Ö–æ–¥–æ–≤: {}", session.inputs.len());
    println!("   –í—ã—Ö–æ–¥–æ–≤: {}", session.outputs.len());
    
    // –ü–†–û–í–ï–†–ö–ê: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 3 –≤—Ö–æ–¥–∞
    println!("\n3. üîç –ê–ù–ê–õ–ò–ó –í–•–û–î–û–í (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3!):");
    for (i, input) in session.inputs.iter().enumerate() {
        println!("   {}: {} - {:?}", i, input.name, input.input_type);
    }
    
    println!("\n4. üîç –ê–ù–ê–õ–ò–ó –í–´–•–û–î–û–í:");
    for (i, output) in session.outputs.iter().enumerate() {
        println!("   {}: {} - {:?}", i, output.name, output.output_type);
    }
    
    let num_inputs = session.inputs.len();
    if num_inputs == 3 {
        println!("\nüéâ –û–¢–õ–ò–ß–ù–û! –¢–æ—á–Ω–æ 3 –≤—Ö–æ–¥–∞ - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è feature-extraction –º–æ–¥–µ–ª—å!");
    } else {
        println!("\n‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: {} –≤—Ö–æ–¥–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å 3", num_inputs);
    }
    
    // –¢–ï–°–¢: –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã –¥–ª—è embedding
    println!("\n5. üß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...");
    
    let seq_len = 6;
    let input_ids = vec![151643i64, 3555, 374, 15592, 1029, 151645]; // "What is AI?"
    let attention_mask = vec![1i64; seq_len];
    let position_ids: Vec<i64> = (0..seq_len as i64).collect();
    
    let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([1, seq_len], attention_mask))?;
    let position_ids_tensor = Tensor::from_array(([1, seq_len], position_ids))?;
    
    println!("‚úÖ –í—Ö–æ–¥–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");
    println!("   input_ids: [1, {}]", seq_len);
    println!("   attention_mask: [1, {}]", seq_len);
    println!("   position_ids: [1, {}]", seq_len);
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢: –ó–∞–ø—É—Å–∫ feature extraction
    println!("\n6. üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Qwen3 Feature Extraction...");
    
    let result = session.run(inputs![
        "input_ids" => input_ids_tensor,
        "attention_mask" => attention_mask_tensor,
        "position_ids" => position_ids_tensor
    ]);
    
    match result {
        Ok(outputs) => {
            println!("üéâüéâüéâ –ù–ï–í–ï–†–û–Ø–¢–ù–´–ô –£–°–ü–ï–•!");
            println!("   –ü–æ–ª—É—á–µ–Ω–æ {} –≤—ã—Ö–æ–¥–æ–≤", outputs.len());
            
            // –ü–æ–∏—Å–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            let mut found_embeddings = false;
            
            for (name, output) in outputs.iter() {
                if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
                    let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
                    println!("   –í—ã—Ö–æ–¥ '{}': —Ñ–æ—Ä–º–∞ {:?}, –¥–∞–Ω–Ω—ã—Ö {}", name, shape_vec, data.len());
                    
                    // –ò—â–µ–º hidden states [batch, seq, hidden]
                    if shape_vec.len() == 3 && shape_vec[0] == 1 && shape_vec[1] == seq_len as i64 {
                        let hidden_size = shape_vec[2] as usize;
                        
                        println!("   üéØ –ù–ê–ô–î–ï–ù–´ QWEN3 HIDDEN STATES!");
                        println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: [1, {}, {}]", seq_len, hidden_size);
                        
                        // Last token pooling (–∫–∞–∫ –≤ README)
                        let last_token_start = (seq_len - 1) * hidden_size;
                        let last_token_end = last_token_start + hidden_size;
                        
                        if last_token_end <= data.len() {
                            let embedding: Vec<f32> = data[last_token_start..last_token_end].to_vec();
                            let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                            
                            println!("   ‚úÖ –ü–û–°–õ–ï–î–ù–ò–ô –¢–û–ö–ï–ù –ò–ó–í–õ–ï–ß–ï–ù!");
                            println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {}", embedding.len());
                            println!("   –ù–æ—Ä–º–∞: {:.4}", norm);
                            println!("   –û–±—Ä–∞–∑–µ—Ü: {:?}", &embedding[..5.min(embedding.len())]);
                            
                            if norm > 0.0 {
                                // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–∫–∞–∫ –≤ README: normalize: true)
                                let normalized: Vec<f32> = embedding.iter().map(|x| x / norm).collect();
                                let final_norm = normalized.iter().map(|x| x * x).sum::<f32>().sqrt();
                                
                                println!("   ‚úÖ –≠–ú–ë–ï–î–î–ò–ù–ì –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù!");
                                println!("   –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞: {:.6}", final_norm);
                                println!("   üèÜ –ì–û–¢–û–í–´–ô QWEN3 –≠–ú–ë–ï–î–î–ò–ù–ì: {} —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å", normalized.len());
                                
                                found_embeddings = true;
                                break;
                            }
                        }
                    }
                }
            }
            
            if found_embeddings {
                println!("\nüéäüéäüéä –ü–û–õ–ù–ê–Ø –ü–û–ë–ï–î–ê!");
                println!("‚úÖ Qwen3-Embedding feature-extraction –†–ê–ë–û–¢–ê–ï–¢!");
                println!("‚úÖ –¢–æ–ª—å–∫–æ 3 –≤—Ö–æ–¥–∞ - –Ω–∏–∫–∞–∫–∏—Ö KV –∫–µ—à–µ–π!");
                println!("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏!");
                println!("‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!");
                
                println!("\nüöÄ –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô:");
                println!("- E5-small: 384 dim, BertModel, –ø—Ä–æ—Å—Ç–∞—è");
                println!("- MXBai: 896 dim, Qwen2ForCausalLM, rerank");
                println!("- Qwen3-Embedding: 1024 dim, Qwen3ForCausalLM, embedding ‚ú®");
                println!("- Qwen3-Reranker: logits, Qwen3ForCausalLM, rerank");
                
                println!("\nüéØ –í–°–ï –ß–ï–¢–´–†–ï –ú–û–î–ï–õ–ò –†–ê–ë–û–¢–ê–Æ–¢ –° ORT 2.0!");
                
            } else {
                println!("‚ö†Ô∏è –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª, –Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ");
            }
        },
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞: {}", e);
            
            if format!("{}", e).contains("Missing Input:") {
                println!("üíî –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –º–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã");
                println!("üí° –í–æ–∑–º–æ–∂–Ω–æ, —Å–∫–∞—á–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è");
            }
        }
    }
    
    println!("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°:");
    println!("- –í—Ö–æ–¥–æ–≤ –≤ –º–æ–¥–µ–ª–∏: {}", num_inputs);
    println!("- –û–∂–∏–¥–∞–ª–æ—Å—å: 3 (–¥–ª—è feature-extraction)");
    println!("- –°—Ç–∞—Ç—É—Å: {}", if num_inputs == 3 { "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å" } else { "‚ùå –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è" });
    
    Ok(())
}