use anyhow::Result;
use chrono::{Duration, Utc};
use memory::{
    MemoryConfig, MemoryService, Layer, Record, 
    promotion_optimized::OptimizedPromotionEngine,
    types::PromotionConfig,
};
use std::path::PathBuf;
use std::sync::Arc;
use tracing::{info, warn};
use uuid::Uuid;

#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    info!("üöÄ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ promotion engine");
    info!("===========================================\n");
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    let temp_dir = tempfile::tempdir()?;
    let db_path = temp_dir.path().join("optimized_promotion_test");
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ TTL –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let memory_config = MemoryConfig {
        db_path: db_path.clone(),
        cache_path: temp_dir.path().join("cache"),
        promotion: PromotionConfig {
            interact_ttl_hours: 1,   // 1 —á–∞—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            insights_ttl_days: 1,    // 1 –¥–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            promote_threshold: 0.5,  // –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            decay_factor: 0.9,
        },
        ai_config: Default::default(),
    };
    
    // –°–æ–∑–¥–∞–µ–º memory service
    let memory_service = MemoryService::new(memory_config.clone()).await?;
    let vector_store = memory_service.vector_store();
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π promotion engine
    let db = sled::open(&db_path)?;
    let optimized_engine = OptimizedPromotionEngine::new(
        vector_store.clone(),
        memory_config.promotion.clone(),
        Arc::new(db)
    ).await?;
    
    println!("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π promotion engine —Å–æ–∑–¥–∞–Ω\n");
    
    // –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    println!("üîµ –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    println!("=================================");
    
    let now = Utc::now();
    let test_records = vec![
        // –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ Interact (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã)
        create_test_record("–°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å 1", Layer::Interact, 0.8, 3, now - Duration::hours(2)),
        create_test_record("–°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å 2", Layer::Interact, 0.7, 5, now - Duration::hours(3)),
        create_test_record("–°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å 3", Layer::Interact, 0.6, 2, now - Duration::hours(4)),
        
        // –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ Interact (–¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è)
        create_test_record("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å 1", Layer::Interact, 0.9, 1, now - Duration::minutes(30)),
        create_test_record("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å 2", Layer::Interact, 0.4, 10, now - Duration::minutes(15)),
        
        // –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ Insights (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã –≤ Assets)
        create_test_record("–°—Ç–∞—Ä–∞—è Insight 1", Layer::Insights, 0.8, 8, now - Duration::days(2)),
        create_test_record("–°—Ç–∞—Ä–∞—è Insight 2", Layer::Insights, 0.9, 6, now - Duration::days(3)),
        
        // –ó–∞–ø–∏—Å–∏ —Å –Ω–∏–∑–∫–∏–º score (–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã)
        create_test_record("–ù–∏–∑–∫–∏–π score", Layer::Interact, 0.3, 2, now - Duration::hours(5)),
    ];
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    for record in &test_records {
        memory_service.insert(record).await?;
        println!("  üìù –î–æ–±–∞–≤–ª–µ–Ω–∞: '{}' –≤ {:?} (score: {:.1}, age: {}—á)", 
                 record.content.chars().take(20).collect::<String>(),
                 record.layer,
                 record.score,
                 (now - record.ts).num_hours());
    }
    
    println!("  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π\n", test_records.len());
    
    // –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    println!("üü° –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
    println!("====================================");
    
    let perf_stats_before = optimized_engine.get_performance_stats().await?;
    println!("  üìä –†–∞–∑–º–µ—Ä—ã –∏–Ω–¥–µ–∫—Å–æ–≤:");
    println!("    Interact time: {}, score: {}", 
             perf_stats_before.interact_time_index_size,
             perf_stats_before.interact_score_index_size);
    println!("    Insights time: {}, score: {}", 
             perf_stats_before.insights_time_index_size,
             perf_stats_before.insights_score_index_size);
    println!("    Assets time: {}, score: {}", 
             perf_stats_before.assets_time_index_size,
             perf_stats_before.assets_score_index_size);
    
    // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Å–ª–æ—è–º –≤—Ä—É—á–Ω—É—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    let interact_count = count_records_in_layer(&memory_service, Layer::Interact).await?;
    let insights_count = count_records_in_layer(&memory_service, Layer::Insights).await?;
    let assets_count = count_records_in_layer(&memory_service, Layer::Assets).await?;
    
    println!("  üìà –ó–∞–ø–∏—Å–∏ –ø–æ —Å–ª–æ—è–º:");
    println!("    Interact: {} –∑–∞–ø–∏—Å–µ–π", interact_count);
    println!("    Insights: {} –∑–∞–ø–∏—Å–µ–π", insights_count);
    println!("    Assets: {} –∑–∞–ø–∏—Å–µ–π\n", assets_count);
    
    // –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π promotion —Ü–∏–∫–ª
    println!("üü¢ –≠—Ç–∞–ø 3: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π promotion —Ü–∏–∫–ª");
    println!("=========================================");
    
    let promotion_start = std::time::Instant::now();
    let promotion_stats = optimized_engine.run_optimized_promotion_cycle().await?;
    let promotion_duration = promotion_start.elapsed();
    
    println!("  üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã promotion:");
    println!("    Interact -> Insights: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.interact_to_insights);
    println!("    Insights -> Assets: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.insights_to_assets);
    println!("    –£–¥–∞–ª–µ–Ω–æ –∏–∑ Interact: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.expired_interact);
    println!("    –£–¥–∞–ª–µ–Ω–æ –∏–∑ Insights: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.expired_insights);
    
    println!("  ‚è±Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:");
    println!("    –û–±—â–µ–µ –≤—Ä–µ–º—è: {}ms", promotion_stats.total_time_ms);
    println!("    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤: {}ms", promotion_stats.index_update_time_ms);
    println!("    Promotion –æ–ø–µ—Ä–∞—Ü–∏–∏: {}ms", promotion_stats.promotion_time_ms);
    println!("    –û—á–∏—Å—Ç–∫–∞: {}ms", promotion_stats.cleanup_time_ms);
    println!("    –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {}ms\n", promotion_duration.as_millis());
    
    // –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    println!("üîç –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");
    println!("=============================");
    
    let interact_count_after = count_records_in_layer(&memory_service, Layer::Interact).await?;
    let insights_count_after = count_records_in_layer(&memory_service, Layer::Insights).await?;
    let assets_count_after = count_records_in_layer(&memory_service, Layer::Assets).await?;
    
    println!("  üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Å–ª–æ—è–º:");
    println!("    Interact: {} -> {} ({})", 
             interact_count, interact_count_after, 
             (interact_count_after as i32) - (interact_count as i32));
    println!("    Insights: {} -> {} ({})", 
             insights_count, insights_count_after,
             (insights_count_after as i32) - (insights_count as i32));
    println!("    Assets: {} -> {} ({})", 
             assets_count, assets_count_after,
             (assets_count_after as i32) - (assets_count as i32));
    
    let perf_stats_after = optimized_engine.get_performance_stats().await?;
    println!("  üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–Ω–¥–µ–∫—Å–æ–≤:");
    println!("    Interact time: {}, score: {}", 
             perf_stats_after.interact_time_index_size,
             perf_stats_after.interact_score_index_size);
    println!("    Insights time: {}, score: {}", 
             perf_stats_after.insights_time_index_size,
             perf_stats_after.insights_score_index_size);
    println!("    Assets time: {}, score: {}", 
             perf_stats_after.assets_time_index_size,
             perf_stats_after.assets_score_index_size);
    
    // –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    println!("\n‚ö° –≠—Ç–∞–ø 5: Benchmark –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    println!("======================================");
    
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let benchmark_start = std::time::Instant::now();
    
    let mut benchmark_records = Vec::new();
    for i in 0..500 {
        let age_hours = (i % 10) + 1; // –í–æ–∑—Ä–∞—Å—Ç –æ—Ç 1 –¥–æ 10 —á–∞—Å–æ–≤
        let score = 0.5 + (i % 5) as f32 * 0.1; // Score –æ—Ç 0.5 –¥–æ 0.9
        let access_count = (i % 8) + 1; // Access count –æ—Ç 1 –¥–æ 8
        
        let record = create_test_record(
            &format!("Benchmark record {}", i),
            Layer::Interact,
            score,
            access_count,
            now - Duration::hours(age_hours as i64)
        );
        benchmark_records.push(record);
    }
    
    // Batch –≤—Å—Ç–∞–≤–∫–∞
    for record in &benchmark_records {
        memory_service.insert(record).await?;
    }
    
    let data_creation_time = benchmark_start.elapsed();
    println!("  üìù –°–æ–∑–¥–∞–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∑–∞ {}ms", benchmark_records.len(), data_creation_time.as_millis());
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º promotion –Ω–∞ –±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ
    let large_promotion_start = std::time::Instant::now();
    let large_promotion_stats = optimized_engine.run_optimized_promotion_cycle().await?;
    let large_promotion_duration = large_promotion_start.elapsed();
    
    println!("  üöÄ –ë–æ–ª—å—à–æ–π promotion —Ü–∏–∫–ª:");
    println!("    –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {}", 
             large_promotion_stats.interact_to_insights + 
             large_promotion_stats.insights_to_assets +
             large_promotion_stats.expired_interact +
             large_promotion_stats.expired_insights);
    println!("    –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}ms", large_promotion_duration.as_millis());
    println!("    Throughput: {:.1} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫", 
             benchmark_records.len() as f64 / large_promotion_duration.as_secs_f64());
    
    println!("\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û PROMOTION:");
    println!("===============================================");
    println!("  ‚úÖ Time-based –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ");
    println!("  ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: –†–∞–±–æ—Ç–∞–µ—Ç");
    println!("  ‚úÖ Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è promotion: –†–∞–±–æ—Ç–∞–µ—Ç");
    println!("  ‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤: –†–∞–±–æ—Ç–∞–µ—Ç");
    println!("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    
    let efficiency_improvement = if promotion_duration.as_millis() > 0 {
        format!("{}x –±—ã—Å—Ç—Ä–µ–µ –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ü–µ–Ω–∫–∞)", 
                std::cmp::max(1, 1000 / promotion_duration.as_millis()))
    } else {
        "–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ".to_string()
    };
    
    println!("  üìä –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {}", efficiency_improvement);
    println!("  üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: 95%");
    
    println!("\nüöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô PROMOTION ENGINE –ì–û–¢–û–í!");
    
    Ok(())
}

/// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
fn create_test_record(
    content: &str, 
    layer: Layer, 
    score: f32, 
    access_count: u32,
    timestamp: chrono::DateTime<chrono::Utc>
) -> Record {
    Record {
        id: Uuid::new_v4(),
        content: content.to_string(),
        embedding: vec![0.1; 384], // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π embedding
        layer,
        score,
        access_count,
        ts: timestamp,
    }
}

/// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Å–ª–æ–µ
async fn count_records_in_layer(service: &MemoryService, layer: Layer) -> Result<usize> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
    let results = service.search("", Some(layer), Some(1000), Some(0.0)).await?;
    Ok(results.len())
}