use anyhow::Result;
use ort::{session::Session, value::Tensor, inputs};
use std::path::PathBuf;

/// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö 56 KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤
fn create_all_kv_caches() -> Result<Vec<(String, Tensor<f32>)>> {
    println!("üîß –°–æ–∑–¥–∞–Ω–∏–µ 56 KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ...");
    
    let empty_shape = [1, 8, 1, 128]; // [batch, heads, past_seq_len, head_dim]  
    let empty_data: Vec<f32> = vec![0.0f32; 1 * 8 * 1 * 128]; // –ù—É–ª–µ–≤–æ–π –∫–µ—à
    
    let mut kv_tensors = Vec::with_capacity(56); // –ü—Ä–µ–¥–∞–ª–ª–æ–∫–∞—Ü–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ 56 —Ç–µ–Ω–∑–æ—Ä–æ–≤ –æ–¥–Ω–∏–º —Ü–∏–∫–ª–æ–º (28 —Å–ª–æ–µ–≤ √ó 2)
    for layer in 0..28 {
        // Key —Ç–µ–Ω–∑–æ—Ä
        let key_name = format!("past_key_values.{}.key", layer);
        let key_tensor = Tensor::from_array((empty_shape, empty_data.clone()))?;
        kv_tensors.push((key_name, key_tensor));
        
        // Value —Ç–µ–Ω–∑–æ—Ä  
        let value_name = format!("past_key_values.{}.value", layer);
        let value_tensor = Tensor::from_array((empty_shape, empty_data.clone()))?;
        kv_tensors.push((value_name, value_tensor));
    }
    
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ", kv_tensors.len());
    
    Ok(kv_tensors)
}

/// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ –≤—Å–µ–º–∏ 59 –≤—Ö–æ–¥–∞–º–∏
fn run_full_inference(
    session: &mut Session,
    input_ids: Tensor<i64>,
    attention_mask: Tensor<i64>,
    position_ids: Tensor<i64>,
    kv_caches: Vec<(String, Tensor<f32>)>
) -> Result<ort::session::SessionOutputs> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ —Å {} –≤—Ö–æ–¥–∞–º–∏...", 3 + kv_caches.len());
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
    let mut all_inputs: Vec<(String, ort::value::Value)> = Vec::with_capacity(59);
    
    // –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã
    all_inputs.push(("input_ids".to_string(), input_ids.into()));
    all_inputs.push(("attention_mask".to_string(), attention_mask.into()));
    all_inputs.push(("position_ids".to_string(), position_ids.into()));
    
    // –í—Å–µ KV –∫–µ—à–∏
    for (name, tensor) in kv_caches {
        all_inputs.push((name, tensor.into()));
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è session.run()
    let session_inputs: Vec<(std::borrow::Cow<str>, ort::session::SessionInputValue)> = 
        all_inputs.into_iter()
            .map(|(name, value)| (std::borrow::Cow::Owned(name), value.into()))
            .collect();
    
    // –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    let outputs = session.run(session_inputs)?;
    
    Ok(outputs)
}

/// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Å last_token pooling + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
fn extract_embedding_efficiently(outputs: &ort::session::SessionOutputs, seq_len: usize) -> Result<Vec<f32>> {
    println!("üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Å last_token pooling...");
    
    for (name, output) in outputs.iter() {
        if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
            let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
            
            // –ò—â–µ–º hidden states [batch, seq, hidden]
            if shape_vec.len() == 3 && shape_vec[0] == 1 && shape_vec[1] == seq_len as i64 {
                let sequence_length = shape_vec[1] as usize;
                let hidden_size = shape_vec[2] as usize;
                
                println!("   üéØ –ù–∞–π–¥–µ–Ω—ã hidden states: [1, {}, {}]", sequence_length, hidden_size);
                
                // Last token pooling (—Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
                let last_token_idx = sequence_length - 1;
                let start_idx = last_token_idx * hidden_size;
                let end_idx = start_idx + hidden_size;
                
                if end_idx <= data.len() {
                    let embedding: Vec<f32> = data[start_idx..end_idx].to_vec();
                    
                    println!("   ‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑–≤–ª–µ—á–µ–Ω: {} —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å", embedding.len());
                    
                    // –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                    println!("   –ù–æ—Ä–º–∞ –¥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {:.4}", norm);
                    
                    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (—Å–æ–≥–ª–∞—Å–Ω–æ README: normalize: true)
                    if norm > 0.0 {
                        let normalized: Vec<f32> = embedding.iter().map(|x| x / norm).collect();
                        let new_norm = normalized.iter().map(|x| x * x).sum::<f32>().sqrt();
                        println!("   ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞={:.6}", new_norm);
                        return Ok(normalized);
                    } else {
                        return Ok(embedding);
                    }
                }
            }
        }
    }
    
    Err(anyhow::anyhow!("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã—Ö–æ–¥–∞—Ö –º–æ–¥–µ–ª–∏"))
}

fn main() -> Result<()> {
    println!("=== QWEN3-EMBEDDING: –ü–£–¢–¨ –ö –ü–û–ë–ï–î–ï! ===\n");
    let total_start = std::time::Instant::now();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    println!("üéØ –¶–ï–õ–¨: Qwen3-Embedding-0.6B + ORT 2.0 = –†–ï–ê–õ–¨–ù–´–ï –≠–ú–ë–ï–î–î–ò–ù–ì–ò");
    println!("üìÅ –ú–æ–¥–µ–ª—å: {}", model_path.display());
    
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ORT 2.0
    println!("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime 2.0...");
    let init_start = std::time::Instant::now();
    ort::init()
        .with_name("qwen3_victory")
        .commit()?;
    println!("‚úÖ ORT 2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {:.1}ms", init_start.elapsed().as_secs_f64() * 1000.0);
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    println!("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π ONNX —Å–µ—Å—Å–∏–∏...");
    let session_start = std::time::Instant::now();
    let mut session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)? // –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        .with_inter_threads(2)? // –ú–µ–∂–æ–ø–µ—Ä–∞—Ç–æ—Ä–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ {:.1}ms", session_start.elapsed().as_secs_f64() * 1000.0);  
    println!("   –í—Ö–æ–¥–æ–≤: {}, –í—ã—Ö–æ–¥–æ–≤: {}", session.inputs.len(), session.outputs.len());
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    println!("\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
    let data_start = std::time::Instant::now();
    
    let seq_len = 4;
    let past_seq_len = 1; // –î–ª–∏–Ω–∞ KV –∫–µ—à–∞
    let total_seq_len = seq_len + past_seq_len; // –û–±—â–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ Qwen —Ç–æ–∫–µ–Ω—ã –¥–ª—è "What is AI?"
    let input_ids = vec![151643i64, 3555, 374, 15592]; // <|endoftext|> What is AI
    let attention_mask = vec![1i64; total_seq_len]; // –ú–∞—Å–∫–∞ –¥–ª—è total_sequence_length
    let position_ids: Vec<i64> = (past_seq_len as i64..(past_seq_len + seq_len) as i64).collect(); // 1,2,3,4
    
    let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([1, total_seq_len], attention_mask))?;
    let position_ids_tensor = Tensor::from_array(([1, seq_len], position_ids))?;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö KV –∫–µ—à–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
    let kv_caches = create_all_kv_caches()?;
    
    println!("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∑–∞ {:.1}ms", data_start.elapsed().as_secs_f64() * 1000.0);
    println!("   –í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤: {}", 3 + kv_caches.len());
    
    // 4. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢: –ü–æ–ª–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
    println!("\n4. üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢: –ü–æ–ª–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å Qwen3...");
    let inference_start = std::time::Instant::now();
    
    let outputs = match run_full_inference(
        &mut session,
        input_ids_tensor,
        attention_mask_tensor,
        position_ids_tensor,
        kv_caches
    ) {
        Ok(outputs) => {
            let inference_time = inference_start.elapsed().as_secs_f64() * 1000.0;
            println!("üéâüéâüéâ –ü–û–ë–ï–î–ê! –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {:.1}ms", inference_time);
            outputs
        },
        Err(e) => {
            println!("‚ùå –ü–û–†–ê–ñ–ï–ù–ò–ï: {}", e);
            return Err(e);
        }
    };
    
    // 5. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
    println!("\n5. üèÜ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞...");
    let extract_start = std::time::Instant::now();
    
    let final_embedding = extract_embedding_efficiently(&outputs, seq_len)?;
    
    println!("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑–≤–ª–µ—á–µ–Ω –∑–∞ {:.1}ms", extract_start.elapsed().as_secs_f64() * 1000.0);
    
    // 6. –¢–†–ò–£–ú–§–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
    println!("\n6. üèÜüèÜüèÜ –¢–†–ò–£–ú–§–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!");
    let total_time = total_start.elapsed().as_secs_f64() * 1000.0;
    
    println!("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    println!("üéâ –ü–û–õ–ù–ê–Ø –ü–û–ë–ï–î–ê –î–û–°–¢–ò–ì–ù–£–¢–ê!");
    println!("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    println!("‚úÖ Qwen3-Embedding-0.6B –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    println!("‚úÖ ONNX Runtime 2.0 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!");
    println!("‚úÖ –í—Å–µ 59 –≤—Ö–æ–¥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
    println!("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã!");
    println!("");
    println!("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
    println!("   üöÄ –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.1}ms", total_time);
    println!("   üìè –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {}", final_embedding.len());
    println!("   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –µ–¥–∏–Ω–∏—á–Ω–æ–π –¥–ª–∏–Ω—ã");
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
    let sample_size = 10.min(final_embedding.len());
    println!("   üìù –û–±—Ä–∞–∑–µ—Ü (–ø–µ—Ä–≤—ã–µ {}): {:?}", sample_size, &final_embedding[..sample_size]);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    let norm_check = final_embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
    let max_abs = final_embedding.iter().map(|x| x.abs()).fold(0.0f32, |a, b| a.max(b));
    
    println!("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º—ã: {:.6} (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ~1.0)", norm_check);
    println!("   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {:.4} (—Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)", max_abs);
    
    if (norm_check - 1.0).abs() < 0.01 && max_abs > 0.001 && max_abs < 2.0 {
        println!("   üéØ –ö–ê–ß–ï–°–¢–í–û –≠–ú–ë–ï–î–î–ò–ù–ì–ê: –ü–†–ï–í–û–°–•–û–î–ù–û–ï!");
    } else {
        println!("   ‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏");
    }
    
    println!("");
    println!("üéä –ó–ê–î–ê–ß–ê –ü–û–õ–ù–û–°–¢–¨–Æ –í–´–ü–û–õ–ù–ï–ù–ê!");
    println!("üéä ORT 2.0 + Qwen3-Embedding = –£–°–ü–ï–•!");
    
    Ok(())
}