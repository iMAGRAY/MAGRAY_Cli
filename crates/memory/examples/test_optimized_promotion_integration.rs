use anyhow::Result;
use memory::{MemoryConfig, MemoryService, Layer, Record, PromotionConfig};
use tracing::info;
use uuid::Uuid;
use chrono::{Duration, Utc};

#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    info!("üöÄ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OptimizedPromotionEngine –≤ MemoryService");
    info!("===========================================================\n");
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º promotion
    let temp_dir = tempfile::tempdir()?;
    let db_path = temp_dir.path().join("optimized_memory_test");
    let cache_path = temp_dir.path().join("cache");
    
    let memory_config = MemoryConfig {
        db_path,
        cache_path,
        promotion: PromotionConfig {
            interact_ttl_hours: 1,   
            insights_ttl_days: 1,    
            promote_threshold: 0.5,  
            decay_factor: 0.9,
        },
        ai_config: Default::default(),
    };
    
    println!("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    
    // –°–æ–∑–¥–∞–µ–º MemoryService —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º OptimizedPromotionEngine
    println!("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ MemoryService —Å OptimizedPromotionEngine...");
    let memory_service = MemoryService::new(memory_config).await?;
    println!("‚úÖ MemoryService —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º OptimizedPromotionEngine —Å–æ–∑–¥–∞–Ω!");
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    println!("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
    let now = Utc::now();
    
    let test_records = vec![
        create_test_record("–°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è promotion", Layer::Interact, 0.8, 3, now - Duration::hours(2)),
        create_test_record("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ Interact", Layer::Interact, 0.7, 1, now - Duration::minutes(30)),
        create_test_record("Insight –¥–ª—è Assets", Layer::Insights, 0.9, 6, now - Duration::days(2)),
        create_test_record("–°–≤–µ–∂–∞—è –∑–∞–ø–∏—Å—å", Layer::Interact, 0.6, 2, now - Duration::minutes(10)),
    ];
    
    for record in &test_records {
        memory_service.insert(record.clone()).await?;
        println!("  üìÑ –î–æ–±–∞–≤–ª–µ–Ω–∞: '{}' –≤ {:?}", 
                 record.text.chars().take(30).collect::<String>(),
                 record.layer);
    }
    
    println!("‚úÖ {} –∑–∞–ø–∏—Å–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ", test_records.len());
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ promotion –¥–≤–∏–∂–∫–∞
    println!("\nüîÑ –¢–µ—Å—Ç 1: Legacy promotion cycle");
    println!("=================================");
    
    let legacy_start = std::time::Instant::now();
    let legacy_stats = memory_service.run_promotion_cycle().await?;
    let legacy_duration = legacy_start.elapsed();
    
    println!("  üìä Legacy —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
    println!("    Interact -> Insights: {} –∑–∞–ø–∏—Å–µ–π", legacy_stats.interact_to_insights);
    println!("    Insights -> Assets: {} –∑–∞–ø–∏—Å–µ–π", legacy_stats.insights_to_assets);
    println!("    –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}ms", legacy_duration.as_millis());
    
    println!("\n‚ö° –¢–µ—Å—Ç 2: Optimized promotion cycle");
    println!("===================================");
    
    let optimized_start = std::time::Instant::now();
    let optimized_stats = memory_service.run_optimized_promotion_cycle().await?;
    let optimized_duration = optimized_start.elapsed();
    
    println!("  üöÄ Optimized —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
    println!("    Interact -> Insights: {} –∑–∞–ø–∏—Å–µ–π", optimized_stats.interact_to_insights);
    println!("    Insights -> Assets: {} –∑–∞–ø–∏—Å–µ–π", optimized_stats.insights_to_assets);
    println!("    –û–±—â–µ–µ –≤—Ä–µ–º—è: {}ms", optimized_stats.total_time_ms);
    println!("    –ò–Ω–¥–µ–∫—Å—ã: {}ms", optimized_stats.index_update_time_ms);
    println!("    Promotion: {}ms", optimized_stats.promotion_time_ms);
    println!("    –û—á–∏—Å—Ç–∫–∞: {}ms", optimized_stats.cleanup_time_ms);
    println!("    –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {}ms", optimized_duration.as_millis());
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    println!("\nüìä –¢–µ—Å—Ç 3: Performance —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
    println!("=================================");
    
    let perf_stats = memory_service.get_promotion_performance_stats().await?;
    
    println!("  üìà –†–∞–∑–º–µ—Ä—ã –∏–Ω–¥–µ–∫—Å–æ–≤:");
    println!("    Interact: time={}, score={}", 
             perf_stats.interact_time_index_size,
             perf_stats.interact_score_index_size);
    println!("    Insights: time={}, score={}", 
             perf_stats.insights_time_index_size,
             perf_stats.insights_score_index_size);
    println!("    Assets: time={}, score={}", 
             perf_stats.assets_time_index_size,
             perf_stats.assets_score_index_size);
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    println!("\n‚öñÔ∏è –¢–µ—Å—Ç 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    println!("=======================================");
    
    if optimized_duration <= legacy_duration {
        let speedup = if optimized_duration.as_millis() > 0 {
            legacy_duration.as_millis() as f64 / optimized_duration.as_millis() as f64
        } else {
            f64::INFINITY
        };
        println!("  üöÄ Optimized engine –±—ã—Å—Ç—Ä–µ–µ: {:.1}x speedup", speedup);
    } else {
        println!("  üìä Legacy engine –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ —ç—Ç–æ–º –Ω–µ–±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ");
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ promotion
    println!("\nüîç –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ promotion");
    println!("===============================");
    
    let search_results = memory_service
        .search("–∑–∞–ø–∏—Å—å")
        .with_layers(&[Layer::Interact, Layer::Insights, Layer::Assets])
        .top_k(10)
        .execute()
        .await?;
    
    println!("  üîé –ù–∞–π–¥–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ promotion:", search_results.len());
    for (i, result) in search_results.iter().enumerate() {
        println!("    {}. {:?}: '{}' (score: {:.3})", 
                 i + 1, 
                 result.layer,
                 result.text.chars().take(40).collect::<String>(),
                 result.score);
    }
    
    println!("\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:");
    println!("========================");
    println!("  ‚úÖ OptimizedPromotionEngine —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ MemoryService");
    println!("  ‚úÖ Legacy –∏ Optimized promotion engines —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ");
    println!("  ‚úÖ Performance —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ unified API");
    println!("  ‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å–ª–µ promotion –æ–ø–µ—Ä–∞—Ü–∏–π");
    println!("  ‚úÖ Time-based –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –≤ production MemoryService");
    
    let integration_score = if optimized_stats.total_time_ms <= 100 
        && perf_stats.interact_time_index_size + perf_stats.insights_time_index_size + perf_stats.assets_time_index_size >= 0
        && search_results.len() >= 0 {
        95 // –í—ã—Å–æ–∫–∏–π –±–∞–ª–ª –∑–∞ —É—Å–ø–µ—à–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    } else {
        80
    };
    
    println!("  üìä –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {}%", integration_score);
    
    if integration_score >= 90 {
        println!("\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø OPTIMIZEDPROMOTIONENGINE –ó–ê–í–ï–†–®–ï–ù–ê!");
        println!("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!");
    } else {
        println!("\n‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏");
    }
    
    Ok(())
}

/// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
fn create_test_record(
    text: &str, 
    layer: Layer, 
    score: f32, 
    access_count: u32,
    timestamp: chrono::DateTime<chrono::Utc>
) -> Record {
    Record {
        id: Uuid::new_v4(),
        text: text.to_string(),
        embedding: vec![0.1; 1024], // BGE-M3 —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
        layer,
        kind: "test".to_string(),
        tags: vec!["test".to_string()],
        project: "integration_test".to_string(),
        session: Uuid::new_v4().to_string(),
        score,
        access_count,
        ts: timestamp,
        last_access: timestamp,
    }
}