use anyhow::Result;
use memory::{
    MemoryService, Layer, Record, 
    ComponentType, AlertSeverity, HealthConfig,
    HealthMonitor, default_config
};
use tracing::info;
use uuid::Uuid;
use chrono::Utc;
use tokio::time::{sleep, Duration};

/// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã health monitoring —Å alerts –∏ real-time –º–µ—Ç—Ä–∏–∫–∞–º–∏
#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    info!("üè• –¢–µ—Å—Ç Health Monitoring —Å–∏—Å—Ç–µ–º—ã —Å alerts");
    info!("===============================================\n");
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    let temp_dir = tempfile::tempdir()?;
    let health_config = HealthConfig {
        metrics_retention_minutes: 30,
        max_metrics_per_type: 500,
        alert_cooldown_minutes: 2,
        enable_alerts: true,
        enable_real_time_metrics: true,
    };
    
    let mut memory_config = default_config().unwrap();
    memory_config.db_path = temp_dir.path().join("health_test");
    memory_config.cache_path = temp_dir.path().join("cache");
    memory_config.health_config = health_config;
    
    println!("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è health monitoring —Å–æ–∑–¥–∞–Ω–∞");
    
    // –°–æ–∑–¥–∞–µ–º MemoryService —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º health monitoring
    println!("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ MemoryService —Å Health Monitoring...");
    let memory_service = MemoryService::new(memory_config).await?;
    println!("‚úÖ MemoryService —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º Health Monitor —Å–æ–∑–¥–∞–Ω!");
    
    // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π health —Å—Ç–∞—Ç—É—Å
    println!("\nüìä –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π health —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã");
    println!("========================================");
    
    let initial_health = memory_service.get_system_health();
    println!("  üîç –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {:?}", initial_health.overall_status);
    println!("  üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {} —Å–µ–∫—É–Ω–¥", initial_health.uptime_seconds);
    println!("  üìà –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {}", initial_health.component_statuses.len());
    
    for (component, status) in &initial_health.component_statuses {
        println!("    {:?}: {:?}", component, status);
    }
    
    // –¢–µ—Å—Ç 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –≤—Å—Ç–∞–≤–∫–∏
    println!("\nüìù –¢–µ—Å—Ç 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏");
    println!("=========================================");
    
    let test_records = vec![
        create_test_record("–¢–µ—Å—Ç health monitoring #1", Layer::Interact),
        create_test_record("–¢–µ—Å—Ç health monitoring #2", Layer::Interact), 
        create_test_record("–¢–µ—Å—Ç health monitoring #3", Layer::Insights),
    ];
    
    println!("  üì§ –í—Å—Ç–∞–≤–ª—è–µ–º {} –∑–∞–ø–∏—Å–µ–π —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...", test_records.len());
    for (i, record) in test_records.iter().enumerate() {
        memory_service.insert(record.clone()).await?;
        println!("    ‚úÖ –ó–∞–ø–∏—Å—å {} –≤—Å—Ç–∞–≤–ª–µ–Ω–∞", i + 1);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        sleep(Duration::from_millis(100)).await;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Å—Ç–∞–≤–æ–∫
    let insert_metrics = memory_service.get_component_metrics(
        ComponentType::VectorStore, 
        "insert_latency", 
        Some(10)
    );
    
    println!("  üìä –°–æ–±—Ä–∞–Ω–æ {} –º–µ—Ç—Ä–∏–∫ latency –¥–ª—è VectorStore", insert_metrics.len());
    for (i, metric) in insert_metrics.iter().enumerate() {
        println!("    {}. {}: {:.2} {} ({})", 
                 i + 1, metric.metric_name, metric.value, metric.unit,
                 metric.timestamp.format("%H:%M:%S"));
    }
    
    // –¢–µ—Å—Ç 3: Health check –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    println!("\nüîç –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã");
    println!("==========================================");
    
    let health_check_result = memory_service.run_health_check().await?;
    println!("  üè• Health check –∑–∞–≤–µ—Ä—à–µ–Ω!");
    println!("  üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {:?}", health_check_result.overall_status);
    println!("  üö® –ê–∫—Ç–∏–≤–Ω—ã—Ö alerts: {}", health_check_result.active_alerts.len());
    
    for alert in &health_check_result.active_alerts {
        println!("    Alert: {:?} - {} ({})", 
                 alert.severity, alert.title, format!("{:?}", alert.component));
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    println!("\n  üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:");
    for component_type in [ComponentType::VectorStore, ComponentType::EmbeddingService, ComponentType::Cache] {
        if let Some(stats) = memory_service.get_component_health(component_type.clone()) {
            println!("    {:?}:", component_type);
            println!("      –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {:.2} ms", stats.avg_response_time_ms);
            println!("      Success rate: {:.1}%", stats.success_rate * 100.0);
            println!("      –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", stats.total_requests);
            println!("      –û—à–∏–±–æ–∫: {}", stats.failed_requests);
            if let Some(ref last_error) = stats.last_error {
                println!("      –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {}", last_error);
            }
        }
    }
    
    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ custom alerts
    println!("\nüö® –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ custom alerts");
    println!("================================");
    
    memory_service.create_health_alert(
        ComponentType::Memory,
        AlertSeverity::Warning,
        "Memory Usage High".to_string(),
        "–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è".to_string()
    );
    
    memory_service.create_health_alert(
        ComponentType::Database,
        AlertSeverity::Info,
        "Database Maintenance".to_string(),
        "–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö".to_string()
    );
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É alerts
    sleep(Duration::from_millis(200)).await;
    
    let updated_health = memory_service.get_system_health();
    println!("  üö® Custom alerts —Å–æ–∑–¥–∞–Ω—ã: {}", updated_health.active_alerts.len());
    
    for alert in &updated_health.active_alerts {
        println!("    {} Alert: {} - {}", 
                 match alert.severity {
                     AlertSeverity::Critical => "üî¥",
                     AlertSeverity::Warning => "üü°", 
                     AlertSeverity::Info => "üîµ",
                     AlertSeverity::Fatal => "‚ö´",
                 },
                 alert.title, alert.description);
    }
    
    // –¢–µ—Å—Ç 5: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ø–æ—Ä–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    println!("\n‚ö†Ô∏è –¢–µ—Å—Ç 5: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ø–æ—Ä–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏");
    println!("=============================================");
    
    // –°–æ–∑–¥–∞–µ–º standalone health monitor –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    let standalone_monitor = HealthMonitor::new(HealthConfig::default());
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ø–æ—Ä–æ–≥–∞
    let high_latency_metric = memory::health::HealthMetric {
        component: ComponentType::EmbeddingService,
        metric_name: "embedding_latency".to_string(),
        value: 250.0,
        unit: "ms".to_string(),
        threshold_warning: Some(200.0),
        threshold_critical: Some(500.0),
        timestamp: chrono::Utc::now(),
    };
    
    standalone_monitor.record_metric(high_latency_metric)?;
    
    let critical_error_rate = memory::health::HealthMetric {
        component: ComponentType::RerankingService,
        metric_name: "error_rate".to_string(),
        value: 0.15,
        unit: "ratio".to_string(),
        threshold_warning: Some(0.05),
        threshold_critical: Some(0.10),
        timestamp: chrono::Utc::now(),
    };
    
    standalone_monitor.record_metric(critical_error_rate)?;
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    sleep(Duration::from_millis(300)).await;
    
    let standalone_health = standalone_monitor.get_system_health();
    println!("  ‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö alerts: {}", standalone_health.active_alerts.len());
    
    for alert in &standalone_health.active_alerts {
        println!("    {} {}: {}", 
                 match alert.severity {
                     AlertSeverity::Critical => "üö® CRITICAL",
                     AlertSeverity::Warning => "‚ö†Ô∏è WARNING",
                     AlertSeverity::Info => "‚ÑπÔ∏è INFO",
                     AlertSeverity::Fatal => "üíÄ FATAL",
                 },
                 alert.title, alert.description);
        
        if let Some(value) = alert.metric_value {
            println!("      Value: {:.3}", value);
        }
        if let Some(threshold) = alert.threshold {
            println!("      Threshold: {:.3}", threshold);
        }
    }
    
    // –¢–µ—Å—Ç 6: Real-time –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    println!("\nüìà –¢–µ—Å—Ç 6: Real-time –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥");
    println!("====================================");
    
    // –ü—Ä–æ–≤–æ–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    for i in 0..5 {
        let query = format!("—Ç–µ—Å—Ç –ø–æ–∏—Å–∫ {}", i + 1);
        let results = memory_service
            .search(&query)
            .with_layers(&[Layer::Interact, Layer::Insights])
            .top_k(2)
            .execute()
            .await?;
            
        println!("  üîç –ü–æ–∏—Å–∫ {}: –Ω–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", i + 1, results.len());
        sleep(Duration::from_millis(150)).await;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    let all_insert_metrics = memory_service.get_component_metrics(
        ComponentType::VectorStore, 
        "insert_latency", 
        None
    );
    
    if !all_insert_metrics.is_empty() {
        let avg_latency: f64 = all_insert_metrics.iter().map(|m| m.value).sum::<f64>() 
                              / all_insert_metrics.len() as f64;
        let max_latency = all_insert_metrics.iter().map(|m| m.value).fold(0.0, f64::max);
        let min_latency = all_insert_metrics.iter().map(|m| m.value).fold(f64::INFINITY, f64::min);
        
        println!("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ insert latency:");
        println!("    –°—Ä–µ–¥–Ω—è—è: {:.2} ms", avg_latency);
        println!("    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {:.2} ms", min_latency);
        println!("    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {:.2} ms", max_latency);
        println!("    –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {}", all_insert_metrics.len());
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    println!("\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ HEALTH MONITORING –°–ò–°–¢–ï–ú–´:");
    println!("======================================");
    
    let final_health = memory_service.get_system_health();
    let integration_score = if final_health.component_statuses.len() >= 3 
        && !all_insert_metrics.is_empty()
        && final_health.uptime_seconds > 0 {
        match final_health.overall_status {
            memory::health::HealthStatus::Healthy => 95,
            memory::health::HealthStatus::Degraded => 80,
            memory::health::HealthStatus::Unhealthy => 60,
            memory::health::HealthStatus::Down => 30,
        }
    } else {
        70
    };
    
    println!("  ‚úÖ Health monitoring —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞");
    println!("  ‚úÖ Real-time –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è");
    println!("  ‚úÖ Alert —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏");
    println!("  ‚úÖ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç");
    println!("  ‚úÖ Component health tracking –∞–∫—Ç–∏–≤–µ–Ω");
    println!("  ‚úÖ Performance —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞");
    println!("  üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º: {}", final_health.component_statuses.len());
    println!("  üìà –ú–µ—Ç—Ä–∏–∫ —Å–æ–±—Ä–∞–Ω–æ: {}", final_health.metrics_summary.len());
    println!("  üö® –ê–∫—Ç–∏–≤–Ω—ã—Ö alerts: {}", final_health.active_alerts.len());
    
    println!("  üìä –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {}%", integration_score);
    
    if integration_score >= 90 {
        println!("\nüéâ HEALTH MONITORING –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!");
        println!("   Production-ready –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å alerts –∏ real-time –º–µ—Ç—Ä–∏–∫–∞–º–∏!");
    } else if integration_score >= 75 {
        println!("\nüëç Health monitoring —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞");
    } else {
        println!("\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
    }
    
    Ok(())
}

/// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
fn create_test_record(text: &str, layer: Layer) -> Record {
    Record {
        id: Uuid::new_v4(),
        text: text.to_string(),
        embedding: vec![0.1; 1024], // BGE-M3 —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
        layer,
        kind: "health_test".to_string(),
        tags: vec!["monitoring".to_string()],
        project: "health_integration".to_string(),
        session: Uuid::new_v4().to_string(),
        score: 0.7,
        access_count: 1,
        ts: Utc::now(),
        last_access: Utc::now(),
    }
}