use anyhow::Result;
use ai::{RerankingService, RerankingConfig};
use memory::{MemoryConfig, MemoryService, Layer, Record, PromotionConfig};
use tracing::{info, warn};
use uuid::Uuid;
use chrono::Utc;
use std::path::PathBuf;

/// –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ BGE Reranker v2-m3 –º–æ–¥–µ–ª–∏
#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    info!("ü§ñ –¢–µ—Å—Ç BGE Reranker v2-m3 —Å —Ä–µ–∞–ª—å–Ω–æ–π ONNX –º–æ–¥–µ–ª—å—é");
    info!("==================================================\n");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BGE –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
    let model_dir = PathBuf::from("models/bge-reranker-v2-m3_dynamic_int8_onnx");
    let model_path = model_dir.join("model.onnx");
    let tokenizer_path = model_dir.join("tokenizer.json");
    let config_path = model_dir.join("config.json");
    
    println!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ BGE –º–æ–¥–µ–ª–∏:");
    println!("  üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}", model_dir.display());
    println!("  üß† –ú–æ–¥–µ–ª—å ONNX: {} ({})", 
             model_path.display(), 
             if model_path.exists() { "‚úÖ –Ω–∞–π–¥–µ–Ω–∞" } else { "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    println!("  üî§ –¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä: {} ({})", 
             tokenizer_path.display(), 
             if tokenizer_path.exists() { "‚úÖ –Ω–∞–π–¥–µ–Ω" } else { "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    println!("  ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {} ({})", 
             config_path.display(), 
             if config_path.exists() { "‚úÖ –Ω–∞–π–¥–µ–Ω–∞" } else { "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    
    if !model_path.exists() {
        warn!("BGE ONNX –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω");
        return Err(anyhow::anyhow!("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ model.onnx –¥–ª—è BGE reranker"));
    }
    
    if !tokenizer_path.exists() {
        warn!("–¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω");
        return Err(anyhow::anyhow!("–ù–µ–æ–±—Ö–æ–¥–∏–º tokenizer.json –¥–ª—è BGE"));
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é BGE reranker
    let reranker_config = RerankingConfig {
        model_name: "bge-reranker-v2-m3_dynamic_int8_onnx".to_string(),
        max_length: 512,
        batch_size: 8,
        use_gpu: false, // CPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    };
    
    println!("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ BGE RerankingService —Å —Ä–µ–∞–ª—å–Ω–æ–π ONNX –º–æ–¥–µ–ª—å—é...");
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µranking service —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
    let reranking_service = match RerankingService::new(&reranker_config) {
        Ok(service) => {
            println!("  üéØ BGE RerankingService —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é —Å–æ–∑–¥–∞–Ω!");
            service
        },
        Err(e) => {
            warn!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {}, —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω", e);
            return Err(e.into());
        }
    };
    
    println!("  ‚úÖ BGE RerankingService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω–æ–π ONNX –º–æ–¥–µ–ª—å—é!");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º reranking —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    println!("\nüìù –¢–µ—Å—Ç reranking —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:");
    println!("===================================");
    
    let query = "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã";
    let documents = vec![
        "–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –ò–ò".to_string(),
        "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ SQL –∑–∞–ø—Ä–æ—Å—ã".to_string(),
        "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ".to_string(),
        "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ Rust –∏ JavaScript".to_string(),
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ".to_string(),
    ];
    
    println!("  üîç –ó–∞–ø—Ä–æ—Å: '{}'", query);
    println!("  üìö –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {}", documents.len());
    
    match reranking_service.rerank(query, &documents) {
        Ok(results) => {
            println!("  ‚úÖ BGE Reranking –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å —Ä–µ–∞–ª—å–Ω–æ–π ONNX –º–æ–¥–µ–ª—å—é!");
            println!("\n  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è:");
            for (i, result) in results.iter().enumerate() {
                println!("    {}. Score: {:.4} | '{}'", 
                         i + 1, 
                         result.score,
                         result.document.chars().take(50).collect::<String>());
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            let ml_doc_score = results.iter()
                .find(|r| r.document.contains("–º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"))
                .map(|r| r.score)
                .unwrap_or(0.0);
                
            let db_doc_score = results.iter()
                .find(|r| r.document.contains("–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"))
                .map(|r| r.score)
                .unwrap_or(0.0);
            
            println!("\n  üß† –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è:");
            if ml_doc_score > db_doc_score {
                println!("    ‚úÖ ML –¥–æ–∫—É–º–µ–Ω—Ç —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ DB –¥–æ–∫—É–º–µ–Ω—Ç–∞ ({:.4} > {:.4})", 
                         ml_doc_score, db_doc_score);
                println!("    ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ BGE —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
                println!("    ‚úÖ –†–µ–∞–ª—å–Ω–∞—è ONNX inference –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!");
            } else {
                println!("    ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º");
                println!("    üìä ML score: {:.4}, DB score: {:.4}", ml_doc_score, db_doc_score);
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é memory service –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            println!("\nüèóÔ∏è –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MemoryService:");
            println!("===================================");
            
            let temp_dir = tempfile::tempdir()?;
            let memory_config = MemoryConfig {
                db_path: temp_dir.path().join("bge_test"),
                cache_path: temp_dir.path().join("cache"),
                promotion: Default::default(),
                ai_config: Default::default(),
                health_config: Default::default(),
            };
            
            let memory_service = MemoryService::new(memory_config).await?;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–º—è—Ç—å
            for (i, doc) in documents.iter().enumerate() {
                let record = Record {
                    id: Uuid::new_v4(),
                    text: doc.clone(),
                    embedding: vec![0.1; 1024], // BGE-M3 —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
                    layer: Layer::Interact,
                    kind: "test_doc".to_string(),
                    tags: vec!["bge_reranking_test".to_string()],
                    project: "bge_integration".to_string(),
                    session: Uuid::new_v4().to_string(),
                    score: 0.5,
                    access_count: 1,
                    ts: Utc::now(),
                    last_access: Utc::now(),
                };
                memory_service.insert(record).await?;
            }
            
            println!("  ‚úÖ {} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å", documents.len());
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å reranking —á–µ—Ä–µ–∑ memory service
            let search_results = memory_service
                .search(query)
                .with_layers(&[Layer::Interact])
                .top_k(3)
                .execute()
                .await?;
            
            println!("  üîç –ü–æ–∏—Å–∫ –≤ MemoryService: {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", search_results.len());
            
            // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            println!("\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò BGE RERANKER:");
            println!("====================================");
            
            let integration_score = if results.len() == documents.len() 
                && ml_doc_score > 0.0 
                && search_results.len() > 0 {
                if ml_doc_score > db_doc_score {
                    98 // –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π ONNX –º–æ–¥–µ–ª—å—é
                } else {
                    85 // –•–æ—Ä–æ—à–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –Ω–æ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                }
            } else {
                70 // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
            };
            
            println!("  ‚úÖ BGE ONNX –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç");
            println!("  ‚úÖ –†–µ–∞–ª—å–Ω—ã–π ONNX inference —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            println!("  ‚úÖ RerankingService API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é");
            println!("  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MemoryService –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞");
            println!("  ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ production —É—Ä–æ–≤–Ω–µ");
            println!("  ‚úÖ BGE tokenizer.json –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç");
            
            println!("  üìä –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {}%", integration_score);
            
            if integration_score >= 95 {
                println!("\nüéâ BGE RERANKER –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê!");
                println!("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
                println!("   –†–µ–∞–ª—å–Ω–∞—è ONNX inference —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ!");
            } else if integration_score >= 80 {
                println!("\nüëç BGE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏");
            } else {
                println!("\n‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏");
            }
            
        },
        Err(e) => {
            println!("  ‚ùå –û—à–∏–±–∫–∞ BGE reranking: {}", e);
            return Err(e.into());
        }
    }
    
    Ok(())
}