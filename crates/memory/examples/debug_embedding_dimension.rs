use anyhow::Result;
use ai::{OptimizedEmbeddingService, EmbeddingConfig};

/// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ BGE-M3
#[tokio::main]
async fn main() -> Result<()> {
    // Initialize logging
    tracing_subscriber::fmt::init();

    println!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ BGE-M3...\n");

    // Test with BGE-M3 config
    let config = EmbeddingConfig {
        model_name: "bge-m3".to_string(),
        batch_size: 32,
        max_length: 512,
        use_gpu: false,
    };

    match OptimizedEmbeddingService::new(config) {
        Ok(service) => {
            println!("‚úÖ OptimizedEmbeddingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            
            // Test embedding
            let test_text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞";
            
            match service.embed(test_text) {
                Ok(result) => {
                    let actual_dim = result.embedding.len();
                    println!("üìè –†–µ–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {}", actual_dim);
                    println!("üéØ –û–∂–∏–¥–∞–µ–º–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å (config.json): 1024");
                    
                    if actual_dim == 1024 {
                        println!("‚úÖ –†–ê–ó–ú–ï–†–ù–û–°–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø: 1024");
                    } else if actual_dim == 768 {
                        println!("‚ö†Ô∏è  –†–ê–ó–ú–ï–†–ù–û–°–¢–¨ –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø: 768 (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—Ä–µ–∑–∫–∞ –ø–æ—Å–ª–µ pooling)");
                    } else {
                        println!("‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –†–ê–ó–ú–ï–†–ù–û–°–¢–¨: {}", actual_dim);
                    }
                    
                    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
                    println!("\nüìä –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π —ç–º–±–µ–¥–¥–∏–Ω–≥–∞:");
                    for (i, val) in result.embedding.iter().take(10).enumerate() {
                        println!("  [{}]: {:.6}", i, val);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
                    let norm: f32 = result.embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                    println!("\nüìè L2 –Ω–æ—Ä–º–∞: {:.6}", norm);
                    if (norm - 1.0).abs() < 0.01 {
                        println!("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω");
                    } else {
                        println!("‚ö†Ô∏è  –≠–º–±–µ–¥–¥–∏–Ω–≥ –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω");
                    }
                    
                    println!("\nüîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:");
                    println!("  –¢–æ–∫–µ–Ω–æ–≤: {}", result.token_count);
                    println!("  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {} –º—Å", result.processing_time_ms);
                    
                } Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {}", e);
                }
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª—É–∂–±—ã: {}", e);
        }
    }

    Ok(())
}