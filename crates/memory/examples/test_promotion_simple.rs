use anyhow::Result;
use memory::promotion_optimized::{OptimizedPromotionEngine, OptimizedPromotionStats};
use memory::{MemoryConfig, MemoryService, PromotionConfig};
use std::sync::Arc;
use tracing::info;

#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    info!("üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ promotion engine");
    info!("=================================================\n");
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    let temp_dir = tempfile::tempdir()?;
    let db_path = temp_dir.path().join("promotion_test");
    let cache_path = temp_dir.path().join("cache");
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let memory_config = MemoryConfig {
        db_path: db_path.clone(),
        cache_path,
        promotion: PromotionConfig {
            interact_ttl_hours: 1,
            insights_ttl_days: 1,
            promote_threshold: 0.5,
            decay_factor: 0.9,
        },
        ai_config: Default::default(),
    };
    
    // –°–æ–∑–¥–∞–µ–º memory service (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è vector_store)
    let memory_service = MemoryService::new(memory_config.clone()).await?;
    
    println!("‚úÖ MemoryService —Å–æ–∑–¥–∞–Ω");
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è promotion engine
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    let sled_db = sled::open(&db_path)?;
    
    println!("‚úÖ Sled database –æ—Ç–∫—Ä—ã—Ç–∞");
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π VectorStore –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // (–í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–ª–∏ –±—ã –∏–∑ MemoryService)
    use memory::VectorStore;
    let vector_store = Arc::new(VectorStore::new(Arc::new(sled_db.clone())).await?);
    
    println!("‚úÖ VectorStore —Å–æ–∑–¥–∞–Ω");
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π promotion engine
    let optimized_engine = OptimizedPromotionEngine::new(
        vector_store.clone(),
        memory_config.promotion,
        Arc::new(sled_db)
    ).await?;
    
    println!("‚úÖ OptimizedPromotionEngine —Å–æ–∑–¥–∞–Ω\n");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    println!("üîµ –≠—Ç–∞–ø 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");
    println!("========================================");
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let perf_stats = optimized_engine.get_performance_stats().await?;
    
    println!("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:");
    println!("    Interact - time: {}, score: {}", 
             perf_stats.interact_time_index_size,
             perf_stats.interact_score_index_size);
    println!("    Insights - time: {}, score: {}", 
             perf_stats.insights_time_index_size,
             perf_stats.insights_score_index_size);
    println!("    Assets - time: {}, score: {}", 
             perf_stats.assets_time_index_size,
             perf_stats.assets_score_index_size);
    
    println!("\nüü¢ –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ promotion —Ü–∏–∫–ª–∞");
    println!("=================================");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π promotion —Ü–∏–∫–ª
    let start_time = std::time::Instant::now();
    let promotion_stats = optimized_engine.run_optimized_promotion_cycle().await?;
    let duration = start_time.elapsed();
    
    println!("  üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã promotion —Ü–∏–∫–ª–∞:");
    println!("    Interact -> Insights: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.interact_to_insights);
    println!("    Insights -> Assets: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.insights_to_assets);
    println!("    –£–¥–∞–ª–µ–Ω–æ –∏–∑ Interact: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.expired_interact);
    println!("    –£–¥–∞–ª–µ–Ω–æ –∏–∑ Insights: {} –∑–∞–ø–∏—Å–µ–π", promotion_stats.expired_insights);
    
    println!("  ‚è±Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:");
    println!("    –û–±—â–µ–µ –≤—Ä–µ–º—è: {}ms", promotion_stats.total_time_ms);
    println!("    –ò–Ω–¥–µ–∫—Å—ã: {}ms", promotion_stats.index_update_time_ms);
    println!("    Promotion: {}ms", promotion_stats.promotion_time_ms);
    println!("    –û—á–∏—Å—Ç–∫–∞: {}ms", promotion_stats.cleanup_time_ms);
    println!("    –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {}ms", duration.as_millis());
    
    println!("\nüü° –≠—Ç–∞–ø 3: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏");
    println!("======================================================");
    
    let second_start = std::time::Instant::now();
    let second_stats = optimized_engine.run_optimized_promotion_cycle().await?;
    let second_duration = second_start.elapsed();
    
    println!("  üîÑ –í—Ç–æ—Ä–æ–π —Ü–∏–∫–ª:");
    println!("    –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}ms", second_duration.as_millis());
    println!("    –û–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {}", 
             second_stats.interact_to_insights + 
             second_stats.insights_to_assets +
             second_stats.expired_interact +
             second_stats.expired_insights);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let final_perf_stats = optimized_engine.get_performance_stats().await?;
    
    println!("\nüìä –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
    println!("===============================");
    
    println!("  üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö:");
    println!("    Interact: {} -> {}", 
             perf_stats.interact_time_index_size,
             final_perf_stats.interact_time_index_size);
    println!("    Insights: {} -> {}", 
             perf_stats.insights_time_index_size,
             final_perf_stats.insights_time_index_size);
    println!("    Assets: {} -> {}", 
             perf_stats.assets_time_index_size,
             final_perf_stats.assets_time_index_size);
    
    println!("\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:");
    println!("===================");
    println!("  ‚úÖ OptimizedPromotionEngine: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
    println!("  ‚úÖ Time-based –∏–Ω–¥–µ–∫—Å—ã: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    println!("  ‚úÖ Promotion —Ü–∏–∫–ª: –í—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫");
    println!("  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –î–æ—Å—Ç—É–ø–Ω–∞");
    println!("  ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ü–∏–∫–ª—ã: –°—Ç–∞–±–∏–ª—å–Ω—ã");
    
    let avg_time = (duration.as_millis() + second_duration.as_millis()) / 2;
    println!("  üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {}ms –Ω–∞ —Ü–∏–∫–ª", avg_time);
    
    if avg_time < 100 {
        println!("  üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –û—Ç–ª–∏—á–Ω–∞—è (<100ms)");
    } else if avg_time < 500 {
        println!("  ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –•–æ—Ä–æ—à–∞—è (<500ms)");
    } else {
        println!("  üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ü—Ä–∏–µ–º–ª–µ–º–∞—è ({}ms)", avg_time);
    }
    
    println!("\nüéâ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô PROMOTION ENGINE –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù!");
    println!("   Time-based –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É");
    
    Ok(())
}