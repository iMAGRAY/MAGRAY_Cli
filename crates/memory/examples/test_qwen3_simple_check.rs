use anyhow::Result;
use ort::{session::Session, value::Tensor, inputs};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== QWEN3-EMBEDDING: –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê ===\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    println!("ü§î –ü–†–û–°–¢–û–ô –í–û–ü–†–û–°: –ù—É–∂–Ω—ã –ª–∏ KV –∫–µ—à–∏ –¥–ª—è embedding –∑–∞–¥–∞—á?");
    println!("üí≠ –ì–∏–ø–æ—Ç–µ–∑–∞: Qwen3-Embedding - –æ–±—ã—á–Ω–∞—è embedding –º–æ–¥–µ–ª—å —Å ONNX overhead");
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    println!("üìÅ –ú–æ–¥–µ–ª—å: {}", model_path.display());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ORT
    println!("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime...");
    ort::init()
        .with_name("qwen3_check")
        .commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    println!("\n2. –°–æ–∑–¥–∞–Ω–∏–µ ONNX —Å–µ—Å—Å–∏–∏...");
    let mut session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    println!("   –í—Ö–æ–¥–æ–≤: {} (3 –±–∞–∑–æ–≤—ã—Ö + 56 KV –∫–µ—à–µ–π)", session.inputs.len());
    println!("   –í—ã—Ö–æ–¥–æ–≤: {} (1 hidden_state + 56 KV outputs)", session.outputs.len());
    
    // –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢ 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ –∫–µ—à–∏
    println!("\n3. üß™ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢: –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—É—Å—Ç—ã—Ö KV –∫–µ—à–µ–π...");
    
    let seq_len = 4;
    let input_ids = vec![151643i64, 3555, 374, 15592]; // "What is"
    let attention_mask = vec![1i64; seq_len];
    let position_ids: Vec<i64> = (0..seq_len as i64).collect();
    
    // –ë–∞–∑–æ–≤—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã
    let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([1, seq_len], attention_mask))?;
    let position_ids_tensor = Tensor::from_array(([1, seq_len], position_ids))?;
    
    println!("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");
    
    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω KV –∫–µ—à –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    println!("\n4. üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ KV –∫–µ—à–∞ –¥–ª—è layer 0...");
    
    // –ü—É—Å—Ç–æ–π —Ç–µ–Ω–∑–æ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ [1, 8, 0, 128]
    let empty_key_0 = Tensor::from_array(([1, 8, 0, 128], Vec::<f32>::new()))?;
    let empty_value_0 = Tensor::from_array(([1, 8, 0, 128], Vec::<f32>::new()))?;
    
    println!("‚úÖ –ü—É—Å—Ç—ã–µ KV –∫–µ—à–∏ –¥–ª—è layer 0 —Å–æ–∑–¥–∞–Ω—ã: [1, 8, 0, 128]");
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –ø–µ—Ä–≤—ã–º–∏ –¥–≤—É–º—è KV –∫–µ—à–∞–º–∏
    println!("\n5. üöÄ –ú–ò–ù–ò-–¢–ï–°–¢: –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã + 2 –ø—É—Å—Ç—ã—Ö KV –∫–µ—à–∞...");
    
    let result = session.run(inputs![
        "input_ids" => input_ids_tensor,
        "attention_mask" => attention_mask_tensor, 
        "position_ids" => position_ids_tensor,
        "past_key_values.0.key" => empty_key_0,
        "past_key_values.0.value" => empty_value_0
    ]);
    
    match result {
        Ok(outputs) => {
            println!("üéâ –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•! –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–∞—á–∞–ª—Å—è!");
            println!("   –ü–æ–ª—É—á–µ–Ω–æ {} –≤—ã—Ö–æ–¥–æ–≤", outputs.len());
        },
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞: {}", e);
            
            if format!("{}", e).contains("Missing Input: past_key_values.1.key") {
                println!("\nüí° –ü–û–ù–ò–ú–ê–ù–ò–ï: –ú–æ–¥–µ–ª–∏ –Ω—É–∂–Ω—ã –í–°–ï 56 KV –∫–µ—à–µ–π!");
                println!("üí° –î–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ, –≥—Ä–∞—Ñ ONNX —Ç—Ä–µ–±—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—ã");
                println!("üí° –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç: KV –∫–µ—à–∏ = ONNX artifact, –Ω–µ functionality");
                
                println!("\nüîç –í–´–í–û–î:");
                println!("‚úÖ Qwen3-Embedding –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ embedding –º–æ–¥–µ–ª—å");  
                println!("‚ùå –ù–û ONNX —ç–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–∏–ª –ø–æ–ª–Ω—ã–π CausalLM –≥—Ä–∞—Ñ");
                println!("‚ö†Ô∏è –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ 56 –ø—É—Å—Ç—ã—Ö –∫–µ—à–µ–π");
                println!("üí° –í production —ç—Ç–æ –±—É–¥–µ—Ç overhead, –Ω–æ embedding —Ä–µ–∞–ª—å–Ω—ã–π");
                
            } else {
                println!("üí° –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {}", e);
            }
        }
    }
    
    println!("\nüìä –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:");
    println!("- Qwen3-Embedding: –ù–∞—Å—Ç–æ—è—â–∞—è embedding –º–æ–¥–µ–ª—å");
    println!("- –öV –∫–µ—à–∏: ONNX —ç–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç (–Ω—É–∂–Ω—ã –ø—É—Å—Ç—ã–µ)"); 
    println!("- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ —Å overhead");
    println!("- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: E5-small, MXBai - –ø—Ä–æ—â–µ –∏ –±—ã—Å—Ç—Ä–µ–µ");
    
    println!("\nü§∑‚Äç‚ôÇÔ∏è –°—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Qwen3-Embedding?");
    println!("–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–∞—á–µ—Å—Ç–≤—É vs –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!");
    
    Ok(())
}