use anyhow::Result;
use memory::migration::{MigrationManager, DatabaseStats};
use std::path::PathBuf;
use clap::{Parser, Subcommand};

#[derive(Parser)]
#[clap(name = "memory-migration")]
#[clap(about = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏ MAGRAY", long_about = None)]
struct Cli {
    /// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    #[clap(short, long, default_value = "")]
    db_path: String,
    
    #[clap(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Stats,
    
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
    Migrate {
        /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        #[clap(short, long)]
        force: bool,
    },
    
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–û–ü–ê–°–ù–û!)
    Clear {
        /// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
        #[clap(long)]
        confirm: bool,
    },
}

#[tokio::main]
async fn main() -> Result<()> {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::INFO)
        .init();
    
    let cli = Cli::parse();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ë–î
    let db_path = if cli.db_path.is_empty() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        dirs::data_dir()
            .unwrap_or_else(|| PathBuf::from("."))
            .join("ourcli")
            .join("lancedb")
    } else {
        PathBuf::from(&cli.db_path)
    };
    
    println!("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {}", db_path.display());
    
    if !db_path.exists() {
        println!("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        return Ok(());
    }
    
    let manager = MigrationManager::new(&db_path)?;
    
    match cli.command {
        Commands::Stats => {
            show_stats(&manager).await?;
        }
        Commands::Migrate { force } => {
            run_migration(&manager, force).await?;
        }
        Commands::Clear { confirm } => {
            clear_database(&manager, confirm).await?;
        }
    }
    
    Ok(())
}

async fn show_stats(manager: &MigrationManager) -> Result<()> {
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n");
    
    let stats = manager.get_stats().await?;
    
    println!("–í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: {}", stats.schema_version);
    println!("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {:.2} –ú–ë", stats.total_size_bytes as f64 / 1_048_576.0);
    println!();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ª–æ—è–º
    for layer_stats in [stats.interact, stats.insights, stats.assets] {
        println!("–°–ª–æ–π {:?}:", layer_stats.layer);
        println!("  –ó–∞–ø–∏—Å–µ–π: {}", layer_stats.record_count);
        println!("  –†–∞–∑–º–µ—Ä: {:.2} –ú–ë", layer_stats.total_size_bytes as f64 / 1_048_576.0);
        
        if layer_stats.corrupted_count > 0 {
            println!("  ‚ö†Ô∏è  –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö: {}", layer_stats.corrupted_count);
        }
        
        if layer_stats.avg_embedding_dim > 0.0 {
            println!("  –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {:.0}", layer_stats.avg_embedding_dim);
        }
        println!();
    }
    
    Ok(())
}

async fn run_migration(manager: &MigrationManager, force: bool) -> Result<()> {
    if !force {
        println!("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!");
        println!("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.");
        println!("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ");
        
        let mut input = String::new();
        std::io::stdin().read_line(&mut input)?;
        
        if !input.trim().eq_ignore_ascii_case("y") {
            println!("–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
            return Ok(());
        }
    }
    
    println!("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...\n");
    
    manager.migrate().await?;
    
    println!("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    show_stats(manager).await?;
    
    Ok(())
}

async fn clear_database(manager: &MigrationManager, confirm: bool) -> Result<()> {
    if !confirm {
        println!("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!");
        println!("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --confirm");
        return Ok(());
    }
    
    println!("\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n");
    
    manager.clear_all_data().await?;
    
    println!("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!");
    
    Ok(())
}