use anyhow::Result;
use ort::{session::Session, value::Tensor, inputs};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== QWEN3-EMBEDDING –ë–ï–ó KV –ö–ï–®–ê ===\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    println!("üí° –ì–ò–ü–û–¢–ï–ó–ê: –ü–æ–ø—Ä–æ–±—É–µ–º Qwen3-Embedding –ë–ï–ó KV –∫–µ—à–µ–π");
    println!("üí° –í–æ–∑–º–æ–∂–Ω–æ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –±–∞–∑–æ–≤—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏!");
    
    // –°–Ω–∞—á–∞–ª–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å use_cache: false)
    let config_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("config.json");
    
    println!("üìã –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...");
    let config_content = std::fs::read_to_string(&config_path)?;
    println!("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–∞");
    
    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º use_cache
    let modified_config = config_content.replace("\"use_cache\": true", "\"use_cache\": false");
    
    let temp_config_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("config_no_cache.json");
    
    std::fs::write(&temp_config_path, &modified_config)?;
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: use_cache = false");
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ORT
    println!("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime...");
    ort::init()
        .with_name("qwen3_no_cache")
        .commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–ï–ó KV –∫–µ—à–∞
    println!("\n2. –°–æ–∑–¥–∞–Ω–∏–µ ONNX —Å–µ—Å—Å–∏–∏...");
    let mut session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    println!("   –í—Ö–æ–¥–æ–≤: {}", session.inputs.len());
    println!("   –í—ã—Ö–æ–¥–æ–≤: {}", session.outputs.len());
    
    // –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ use_cache –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ –≤—Ö–æ–¥–æ–≤!
    println!("\n3. –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏:");
    for (i, input) in session.inputs.iter().enumerate() {
        println!("   {}: {} - {:?}", i, input.name, input.input_type);
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ 1: –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã
    println!("\n4. üß™ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢: –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã!");
    
    let seq_len = 4;
    let input_ids = vec![151643i64, 3555, 374, 15592]; // "What is AI?"
    let attention_mask = vec![1i64; seq_len];
    let position_ids: Vec<i64> = (0..seq_len as i64).collect();
    
    let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([1, seq_len], attention_mask))?;
    let position_ids_tensor = Tensor::from_array(([1, seq_len], position_ids))?;
    
    println!("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã:");
    println!("   input_ids: [1, {}]", seq_len);
    println!("   attention_mask: [1, {}]", seq_len);
    println!("   position_ids: [1, {}]", seq_len);
    
    // –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢: –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ —Å –±–∞–∑–æ–≤—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏
    println!("\n5. üöÄ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢: –ó–∞–ø—É—Å–∫ –ë–ï–ó KV –∫–µ—à–µ–π...");
    
    let result = session.run(inputs![
        "input_ids" => input_ids_tensor,
        "attention_mask" => attention_mask_tensor,
        "position_ids" => position_ids_tensor
    ]);
    
    match result {
        Ok(outputs) => {
            println!("üéâüéâüéâ –ù–ï–í–ï–†–û–Ø–¢–ù–û! –†–ê–ë–û–¢–ê–ï–¢ –ë–ï–ó KV –ö–ï–®–ï–ô!");
            println!("   –ü–æ–ª—É—á–µ–Ω–æ {} –≤—ã—Ö–æ–¥–æ–≤", outputs.len());
            
            // –ò—â–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            for (name, output) in outputs.iter() {
                if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
                    let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
                    println!("   –í—ã—Ö–æ–¥ '{}': —Ñ–æ—Ä–º–∞ {:?}, –¥–∞–Ω–Ω—ã—Ö {}", name, shape_vec, data.len());
                    
                    // –ò—â–µ–º hidden states [batch, seq, hidden]
                    if shape_vec.len() == 3 && shape_vec[0] == 1 && shape_vec[1] == seq_len as i64 {
                        let hidden_size = shape_vec[2] as usize;
                        
                        println!("   üéØ –ù–ê–ô–î–ï–ù–´ QWEN3 –≠–ú–ë–ï–î–î–ò–ù–ì–ò!");
                        println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: [1, {}, {}]", seq_len, hidden_size);
                        
                        // Last token pooling (–∫–∞–∫ –≤ README)
                        let last_token_start = (seq_len - 1) * hidden_size;
                        let last_token_end = last_token_start + hidden_size;
                        
                        if last_token_end <= data.len() {
                            let embedding: Vec<f32> = data[last_token_start..last_token_end].to_vec();
                            let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                            
                            println!("   ‚úÖ –ü–û–°–õ–ï–î–ù–ò–ô –¢–û–ö–ï–ù –ò–ó–í–õ–ï–ß–ï–ù!");
                            println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", embedding.len());
                            println!("   –ù–æ—Ä–º–∞: {:.4}", norm);
                            println!("   –û–±—Ä–∞–∑–µ—Ü: {:?}", &embedding[..5.min(embedding.len())]);
                            
                            if norm > 0.0 {
                                let normalized: Vec<f32> = embedding.iter().map(|x| x / norm).collect();
                                println!("   ‚úÖ –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–û!");
                                println!("   üèÜ QWEN3 –≠–ú–ë–ï–î–î–ò–ù–ì –ì–û–¢–û–í: {} —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å", normalized.len());
                                
                                println!("\nüéäüéäüéä –¢–†–ò–£–ú–§!");
                                println!("‚úÖ Qwen3-Embedding —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó KV –∫–µ—à–µ–π!");
                                println!("‚úÖ –ù—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ 3 –±–∞–∑–æ–≤—ã—Ö –≤—Ö–æ–¥–∞!");
                                println!("‚úÖ use_cache: false —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É!");
                                println!("‚úÖ ORT 2.0 + Qwen3 = –ü–û–õ–ù–ê–Ø –ü–û–ë–ï–î–ê!");
                                
                                return Ok(());
                            }
                        }
                    }
                }
            }
            
            println!("‚ö†Ô∏è –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª, –Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ");
        },
        Err(e) => {
            println!("‚ùå –í—Å–µ –µ—â–µ –Ω—É–∂–Ω—ã KV –∫–µ—à–∏: {}", e);
            
            if format!("{}", e).contains("Missing Input:") {
                println!("üí° –ú–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã");
                println!("üí° –í–æ–∑–º–æ–∂–Ω–æ use_cache –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ runtime, –Ω–µ –Ω–∞ –≥—Ä–∞—Ñ –º–æ–¥–µ–ª–∏");
            }
        }
    }
    
    // –û—á–∏—Å—Ç–∫–∞
    let _ = std::fs::remove_file(&temp_config_path);
    
    println!("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê:");
    println!("- –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è use_cache: –ü–æ–ø—Ä–æ–±–æ–≤–∞–Ω–æ");
    println!("- –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ");
    println!("- –°—Ç–∞—Ç—É—Å: –°–º. –≤—ã—à–µ");
    
    Ok(())
}