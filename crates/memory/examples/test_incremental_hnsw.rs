use anyhow::Result;
use memory::{VectorIndexHnswRs, HnswRsConfig};
use std::time::Instant;

/// –¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π HNSW –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏
#[tokio::main] 
async fn main() -> Result<()> {
    println!("üîÑ –¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö HNSW –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π");
    println!("=====================================\n");

    let config = HnswRsConfig {
        dimension: 1024,
        max_elements: 10000, // –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        max_connections: 24,
        ef_construction: 200, // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        ef_search: 50,
        use_parallel: true,
        ..Default::default()
    };

    let index = VectorIndexHnswRs::new(config)?;
    println!("‚úÖ HNSW –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω —Å –ª–∏–º–∏—Ç–æ–º 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n");

    // –≠—Ç–∞–ø 1: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –±–∞—Ç—á
    println!("üîµ –≠—Ç–∞–ø 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ç—á–∞ (100 –≤–µ–∫—Ç–æ—Ä–æ–≤)");
    let mut batch1 = Vec::new();
    for i in 0..100 {
        let vector = vec![0.1 + i as f32 * 0.001; 1024];
        batch1.push((format!("doc_{}", i), vector));
    }

    let start = Instant::now();
    index.add_batch(batch1)?;
    let batch1_time = start.elapsed();
    
    println!("  ‚úÖ –ü–µ—Ä–≤—ã–π –±–∞—Ç—á –¥–æ–±–∞–≤–ª–µ–Ω –∑–∞ {:?}", batch1_time);
    println!("  üìä –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–∞: {}", index.len());

    // –≠—Ç–∞–ø 2: –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –±–∞—Ç—á –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ  
    println!("\nüü¢ –≠—Ç–∞–ø 2: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –±–∞—Ç—á–∞ (200 –≤–µ–∫—Ç–æ—Ä–æ–≤)");
    let mut batch2 = Vec::new();
    for i in 100..300 {
        let vector = vec![0.2 + i as f32 * 0.001; 1024];
        batch2.push((format!("doc_{}", i), vector));
    }

    let start = Instant::now();
    index.add_batch(batch2)?;
    let batch2_time = start.elapsed();
    
    println!("  ‚úÖ –í—Ç–æ—Ä–æ–π –±–∞—Ç—á –¥–æ–±–∞–≤–ª–µ–Ω –∑–∞ {:?}", batch2_time);
    println!("  üìä –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–∞: {}", index.len());

    // –≠—Ç–∞–ø 3: –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –±–∞—Ç—á
    println!("\nüü° –≠—Ç–∞–ø 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –±–∞—Ç—á–∞ (500 –≤–µ–∫—Ç–æ—Ä–æ–≤)");
    let mut batch3 = Vec::new();
    for i in 300..800 {
        let vector = vec![0.3 + i as f32 * 0.001; 1024];
        batch3.push((format!("doc_{}", i), vector));
    }

    let start = Instant::now();
    index.add_batch(batch3)?;
    let batch3_time = start.elapsed();
    
    println!("  ‚úÖ –¢—Ä–µ—Ç–∏–π –±–∞—Ç—á –¥–æ–±–∞–≤–ª–µ–Ω –∑–∞ {:?}", batch3_time);
    println!("  üìä –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–∞: {}", index.len());

    // –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    println!("\nüîç –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –≤–µ–∫—Ç–æ—Ä–∞–º");
    
    let test_queries = vec![
        vec![0.15; 1024], // –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ç—á–∞
        vec![0.25; 1024], // –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –±–∞—Ç—á–∞  
        vec![0.35; 1024], // –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –∏–∑ —Ç—Ä–µ—Ç—å–µ–≥–æ –±–∞—Ç—á–∞
    ];

    for (i, query) in test_queries.iter().enumerate() {
        let start = Instant::now();
        let results = index.search(query, 5)?;
        let search_time = start.elapsed();
        
        println!("  üîé –ó–∞–ø—Ä–æ—Å {}: –Ω–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {:?}", 
                 i + 1, results.len(), search_time);
        
        if !results.is_empty() {
            let (best_id, best_score) = &results[0];
            println!("    üéØ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {} (score: {:.4})", best_id, best_score);
        }
    }

    // –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    println!("\nüìä –≠—Ç–∞–ø 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    let stats = index.stats();
    
    println!("  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ HNSW:");
    println!("    –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {}", index.len());
    println!("    –û–ø–µ—Ä–∞—Ü–∏–π –≤—Å—Ç–∞–≤–∫–∏: {}", stats.total_insertions.load(std::sync::atomic::Ordering::Relaxed));
    println!("    –û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∏—Å–∫–∞: {}", stats.total_searches.load(std::sync::atomic::Ordering::Relaxed));
    println!("    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—Å—Ç–∞–≤–∫–∏: {:.2} –º—Å", stats.avg_insertion_time_ms());
    println!("    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:.2} –º—Å", stats.avg_search_time_ms());

    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç
    println!("\n‚è±Ô∏è  –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏:");
    println!("  –ë–∞—Ç—á 1 (100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤): {:?}", batch1_time);
    println!("  –ë–∞—Ç—á 2 (200 —ç–ª–µ–º–µ–Ω—Ç–æ–≤): {:?}", batch2_time);  
    println!("  –ë–∞—Ç—á 3 (500 —ç–ª–µ–º–µ–Ω—Ç–æ–≤): {:?}", batch3_time);
    
    let total_time = batch1_time + batch2_time + batch3_time;
    let avg_per_element = total_time.as_micros() / 800; // 800 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Å–µ–≥–æ
    
    println!("  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:?}", total_time);
    println!("  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç: {} –º–∫—Å", avg_per_element);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
    if batch2_time < batch1_time * 3 && batch3_time < batch1_time * 6 {
        println!("\n‚úÖ –£–°–ü–ï–•: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!");
        println!("   –í—Ä–µ–º—è —Ä–∞—Å—Ç–µ—Ç –Ω–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–∏–∑–±–µ–≥–∞–µ–º full rebuild)");
    } else {
        println!("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç full rebuild –ø—Ä–∏ –±–∞—Ç—á–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö");
    }

    println!("\nüèÜ –¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!");
    Ok(())
}