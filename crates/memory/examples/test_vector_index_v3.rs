use anyhow::Result;
use memory::{VectorIndexV3, VectorIndexConfigV3};
use std::time::Instant;

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞
fn mock_embedding(text: &str) -> Vec<f32> {
    let mut embedding = vec![0.0; 1024];
    let hash = text.bytes().fold(0u64, |acc, b| acc.wrapping_mul(31).wrapping_add(b as u64));
    
    for i in 0..1024 {
        let value = ((hash.wrapping_mul((i + 1) as u64) % 1000) as f32) / 1000.0;
        embedding[i] = value;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    let norm: f32 = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
    if norm > 0.0 {
        for v in &mut embedding {
            *v /= norm;
        }
    }
    
    embedding
}

fn main() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VectorIndexV3...\n");
    
    // –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    let config = VectorIndexConfigV3 {
        dimension: 1024,
        rebuild_threshold: 5, // –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        linear_search_threshold: 10,
        ..Default::default()
    };
    
    let index = VectorIndexV3::new(config);
    
    // –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤
    println!("üìù –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤");
    let texts = vec![
        ("doc1", "Rust programming language memory safety"),
        ("doc2", "JavaScript async await promises"),
        ("doc3", "Python machine learning numpy pandas"),
        ("doc4", "Rust ownership borrowing lifetimes"),
        ("doc5", "Database indexes optimization performance"),
    ];
    
    for (id, text) in &texts {
        let embedding = mock_embedding(text);
        index.add(id.to_string(), embedding)?;
        println!("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {} - {}", id, text);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = index.stats();
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:");
    println!("  –í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {}", stats.total_embeddings);
    println!("  –í –∏–Ω–¥–µ–∫—Å–µ: {}", stats.indexed_embeddings);
    println!("  –í –æ–∂–∏–¥–∞–Ω–∏–∏: {} –¥–æ–±–∞–≤–ª–µ–Ω–∏–π, {} —É–¥–∞–ª–µ–Ω–∏–π", stats.pending_additions, stats.pending_removals);
    println!("  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫: {}", stats.using_linear_search);
    
    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫
    println!("\nüîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö");
    let query = "Rust memory management";
    let query_embedding = mock_embedding(query);
    
    let start = Instant::now();
    let results = index.search(&query_embedding, 3)?;
    let search_time = start.elapsed();
    
    println!("  –ó–∞–ø—Ä–æ—Å: '{}' (–≤—Ä–µ–º—è: {:?})", query, search_time);
    println!("  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
    for (id, score) in &results {
        let text = texts.iter().find(|(tid, _)| tid == id).map(|(_, t)| t).unwrap_or(&"");
        println!("    {} (score: {:.3}) - {}", id, score, text);
    }
    
    // –¢–µ—Å—Ç 3: –ü–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    println!("\nüì¶ –¢–µ—Å—Ç 3: –ü–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ");
    let batch = vec![
        ("doc6", "TypeScript type inference generics"),
        ("doc7", "Go concurrency goroutines channels"),
        ("doc8", "Rust async runtime tokio futures"),
        ("doc9", "Docker containers kubernetes deployment"),
        ("doc10", "GraphQL API schema resolvers"),
    ];
    
    let batch_embeddings: Vec<(String, Vec<f32>)> = batch
        .iter()
        .map(|(id, text)| (id.to_string(), mock_embedding(text)))
        .collect();
    
    index.add_batch(batch_embeddings)?;
    println!("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–∞–∫–µ—Ç–æ–º", batch.len());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    let stats = index.stats();
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:");
    println!("  –í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {}", stats.total_embeddings);
    println!("  –í –∏–Ω–¥–µ–∫—Å–µ: {}", stats.indexed_embeddings);
    println!("  –í –æ–∂–∏–¥–∞–Ω–∏–∏: {} –¥–æ–±–∞–≤–ª–µ–Ω–∏–π, {} —É–¥–∞–ª–µ–Ω–∏–π", stats.pending_additions, stats.pending_removals);
    println!("  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫: {}", stats.using_linear_search);
    
    // –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ
    println!("\nüóëÔ∏è  –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤");
    let removed = index.remove("doc5");
    println!("  –£–¥–∞–ª–µ–Ω–∏–µ doc5: {}", if removed { "‚úÖ —É—Å–ø–µ—à–Ω–æ" } else { "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    
    // –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    println!("\nüîç –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è");
    let query = "Database optimization";
    let query_embedding = mock_embedding(query);
    let results = index.search(&query_embedding, 5)?;
    
    println!("  –ó–∞–ø—Ä–æ—Å: '{}'", query);
    println!("  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å doc5):");
    for (id, score) in &results {
        println!("    {} (score: {:.3})", id, score);
    }
    
    // –¢–µ—Å—Ç 6: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    println!("\n‚ö° –¢–µ—Å—Ç 6: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    let stats = index.stats();
    println!("  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤: {}", stats.metrics.total_searches);
    println!("  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:.2} –º–∫—Å", stats.metrics.avg_search_time_us);
    println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–∫: {}", stats.metrics.rebuild_count);
    println!("  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏: {:.2} –º—Å", stats.metrics.avg_rebuild_time_ms);
    println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π: {}", stats.metrics.add_count);
    println!("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–∏–π: {}", stats.metrics.remove_count);
    
    // –¢–µ—Å—Ç 7: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
    println!("\nüíæ –¢–µ—Å—Ç 7: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏");
    index.optimize_memory()?;
    println!("  ‚úÖ –ü–∞–º—è—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    
    // –¢–µ—Å—Ç 8: –ë–æ–ª—å—à–æ–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫
    println!("\nüìà –¢–µ—Å—Ç 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º");
    let large_batch: Vec<(String, Vec<f32>)> = (11..=20)
        .map(|i| {
            let id = format!("large_doc{}", i);
            let text = format!("Large document number {} with random content", i);
            (id, mock_embedding(&text))
        })
        .collect();
    
    index.add_batch(large_batch)?;
    
    let stats = index.stats();
    println!("  –í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {}", stats.total_embeddings);
    println!("  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫: {} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å false, —Ç.–∫. –ø–æ—Ä–æ–≥ = 10)", !stats.using_linear_search);
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
    println!("\nüéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫:");
    let query = "Rust async programming";
    let query_embedding = mock_embedding(query);
    let results = index.search(&query_embedding, 5)?;
    
    println!("  –ó–∞–ø—Ä–æ—Å: '{}'", query);
    println!("  –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:");
    for (i, (id, score)) in results.iter().enumerate() {
        println!("    {}. {} (score: {:.3})", i + 1, id, score);
    }
    
    println!("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    
    Ok(())
}