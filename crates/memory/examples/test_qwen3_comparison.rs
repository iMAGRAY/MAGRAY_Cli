use anyhow::Result;
use ort::{session::Session, value::Tensor, inputs};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== QWEN3 –ú–û–î–ï–õ–ò: EMBEDDING vs RERANKER ===\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    println!("üîç –ì–ò–ü–û–¢–ï–ó–ê: Qwen3-Reranker (use_cache=false) –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å 3 –≤—Ö–æ–¥–∞–º–∏!");
    println!("üîç –ê Qwen3-Embedding (use_cache=true) —Ç—Ä–µ–±—É–µ—Ç KV –∫–µ—à–∏");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ORT
    println!("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime...");
    ort::init()
        .with_name("qwen3_comparison")
        .commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    println!("\n{}", "=".repeat(60));
    println!("üß™ –¢–ï–°–¢ 1: QWEN3-RERANKER (use_cache=false)");
    println!("{}", "=".repeat(60));
    
    let reranker_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Reranker-0.6B-ONNX")
        .join("model.onnx");
    
    println!("üìÅ –ú–æ–¥–µ–ª—å: {}", reranker_path.display());
    println!("‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", reranker_path.exists());
    
    if reranker_path.exists() {
        match test_qwen3_model(&reranker_path, "Qwen3-Reranker") {
            Ok(success) => {
                if success {
                    println!("üéâ QWEN3-RERANKER –†–ê–ë–û–¢–ê–ï–¢!");
                } else {
                    println!("‚ö†Ô∏è Qwen3-Reranker: –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª, –Ω–æ –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤");
                }
            },
            Err(e) => {
                println!("‚ùå Qwen3-Reranker: {}", e);
            }
        }
    }
    
    println!("\n{}", "=".repeat(60));
    println!("üß™ –¢–ï–°–¢ 2: QWEN3-EMBEDDING (use_cache=true)");
    println!("{}", "=".repeat(60));
    
    let embedding_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    println!("üìÅ –ú–æ–¥–µ–ª—å: {}", embedding_path.display());
    println!("‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", embedding_path.exists());
    
    if embedding_path.exists() {
        match test_qwen3_model(&embedding_path, "Qwen3-Embedding") {
            Ok(success) => {
                if success {
                    println!("üéâ QWEN3-EMBEDDING –¢–û–ñ–ï –†–ê–ë–û–¢–ê–ï–¢!");
                } else {
                    println!("‚ö†Ô∏è Qwen3-Embedding: –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª, –Ω–æ –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤");
                }
            },
            Err(e) => {
                println!("‚ùå Qwen3-Embedding: {}", e);
            }
        }
    }
    
    println!("\n{}", "=".repeat(60));
    println!("üèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´");
    println!("{}", "=".repeat(60));
    println!("- Reranker (use_cache=false): –î–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ª–µ–≥–∫–æ");
    println!("- Embedding (use_cache=true): –ú–æ–∂–µ—Ç –≤—Å–µ –µ—â–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å KV –∫–µ—à–∏");
    println!("- –ù–æ –≤–æ–∑–º–æ–∂–Ω–æ –æ–±–µ –º–æ–¥–µ–ª–∏ —É–ø—Ä–æ—â–µ–Ω—ã –¥–ª—è ONNX —ç–∫—Å–ø–æ—Ä—Ç–∞!");
    
    Ok(())
}

fn test_qwen3_model(model_path: &PathBuf, model_name: &str) -> Result<bool> {
    println!("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è {}...", model_name);
    
    let mut session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?
        .commit_from_file(model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    println!("   –í—Ö–æ–¥–æ–≤: {}", session.inputs.len());
    println!("   –í—ã—Ö–æ–¥–æ–≤: {}", session.outputs.len());
    
    // –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    println!("\nüìã –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–æ–≤:");
    for (i, input) in session.inputs.iter().enumerate() {
        println!("   {}: {} - {:?}", i, input.name, input.input_type);
    }
    
    println!("\nüìã –ê–Ω–∞–ª–∏–∑ –≤—ã—Ö–æ–¥–æ–≤:");
    for (i, output) in session.outputs.iter().enumerate() {
        println!("   {}: {} - {:?}", i, output.name, output.output_type);
    }
    
    // –¢–ï–°–¢: –ü–æ–ø—ã—Ç–∫–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏
    println!("\nüöÄ –¢–ï–°–¢: –ë–∞–∑–æ–≤—ã–µ 3 –≤—Ö–æ–¥–∞...");
    
    let seq_len = 5;
    let input_ids = vec![151643i64, 3555, 374, 15592, 151645]; // "What is AI?"
    let attention_mask = vec![1i64; seq_len];
    let position_ids: Vec<i64> = (0..seq_len as i64).collect();
    
    let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([1, seq_len], attention_mask))?;
    let position_ids_tensor = Tensor::from_array(([1, seq_len], position_ids))?;
    
    let result = session.run(inputs![
        "input_ids" => input_ids_tensor,
        "attention_mask" => attention_mask_tensor,
        "position_ids" => position_ids_tensor
    ]);
    
    match result {
        Ok(outputs) => {
            println!("üéâ {} –†–ê–ë–û–¢–ê–ï–¢ –° 3 –í–•–û–î–ê–ú–ò!", model_name);
            println!("   –ü–æ–ª—É—á–µ–Ω–æ {} –≤—ã—Ö–æ–¥–æ–≤", outputs.len());
            
            // –ü–æ–∏—Å–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤
            let mut found_useful_output = false;
            for (name, output) in outputs.iter() {
                if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
                    let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
                    println!("   –í—ã—Ö–æ–¥ '{}': —Ñ–æ—Ä–º–∞ {:?}, –¥–∞–Ω–Ω—ã—Ö {}", name, shape_vec, data.len());
                    
                    // –ò—â–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è [batch, seq, hidden]
                    if shape_vec.len() == 3 && shape_vec[0] == 1 && shape_vec[1] == seq_len as i64 {
                        let hidden_size = shape_vec[2] as usize;
                        println!("   üéØ –ù–ê–ô–î–ï–ù–´ HIDDEN STATES: [1, {}, {}]", seq_len, hidden_size);
                        
                        // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
                        let last_token_start = (seq_len - 1) * hidden_size;
                        let last_token_end = last_token_start + hidden_size;
                        
                        if last_token_end <= data.len() {
                            let embedding: Vec<f32> = data[last_token_start..last_token_end].to_vec();
                            let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                            
                            println!("   ‚úÖ –≠–ú–ë–ï–î–î–ò–ù–ì –ò–ó–í–õ–ï–ß–ï–ù!");
                            println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", embedding.len());
                            println!("   –ù–æ—Ä–º–∞: {:.4}", norm);
                            println!("   –û–±—Ä–∞–∑–µ—Ü: {:?}", &embedding[..3.min(embedding.len())]);
                            
                            if norm > 0.0 {
                                found_useful_output = true;
                                println!("   üèÜ {} –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!", model_name);
                            }
                        }
                    }
                }
            }
            
            Ok(found_useful_output)
        },
        Err(e) => {
            println!("‚ùå {}: {}", model_name, e);
            
            if format!("{}", e).to_lowercase().contains("missing input") {
                println!("üí° –ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã (KV –∫–µ—à–∏?)");
            }
            
            Err(e.into())
        }
    }
}