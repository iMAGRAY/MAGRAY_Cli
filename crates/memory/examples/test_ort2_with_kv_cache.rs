use anyhow::Result;
use ort::{session::Session, inputs};
use std::path::PathBuf;

fn main() -> Result<()> {
    println!("=== ORT 2.0 Qwen3-Embedding Test –° KV –ö–ï–®–ï–ú ===\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    println!("–≠—Ç–æ QWEN3-EMBEDDING –º–æ–¥–µ–ª—å –¥–ª—è feature-extraction!");
    println!("–ú–æ–¥–µ–ª—å: {}", model_path.display());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    ort::init().with_name("qwen3_embedding_test").commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    let session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .commit_from_file(&model_path)?;
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤
    let seq_len = 4;
    
    println!("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤...");
    let input_ids = vec![151643i64, 14016, 374, 10127]; // –¢–µ—Å—Ç–æ–≤—ã–µ Qwen —Ç–æ–∫–µ–Ω—ã
    let attention_mask = vec![1i64, 1, 1, 1];
    let position_ids = vec![0i64, 1, 2, 3];
    
    let input_ids_tensor = ort::value::Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = ort::value::Tensor::from_array(([1, seq_len], attention_mask))?;
    let position_ids_tensor = ort::value::Tensor::from_array(([1, seq_len], position_ids))?;
    
    println!("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –≤—Ö–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã");
    
    println!("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö KV –∫–µ—à–µ–π –¥–ª—è 28 —Å–ª–æ–µ–≤...");
    
    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ KV –∫–µ—à–∏ (past_sequence_length = 0)
    let mut kv_inputs = Vec::new();
    
    for layer in 0..28 {
        // –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: [batch_size, num_key_value_heads, past_sequence_length, head_dim]
        // [1, 8, 0, 128] - –ø—É—Å—Ç–æ–π –∫–µ—à –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        let empty_key = ort::value::Tensor::from_array(([1, 8, 0, 128], Vec::<f32>::new()))?;
        let empty_value = ort::value::Tensor::from_array(([1, 8, 0, 128], Vec::<f32>::new()))?;
        
        kv_inputs.push((format!("past_key_values.{}.key", layer), empty_key));
        kv_inputs.push((format!("past_key_values.{}.value", layer), empty_value));
    }
    
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤", kv_inputs.len());
    
    println!("\nüöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏...");
    
    let session = std::sync::Mutex::new(session);
    let mut session_guard = session.lock().unwrap();
    
    println!("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ KV –≤—Ö–æ–¥–æ–≤: {}", kv_inputs.len());
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–¥–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ inputs! —Å –±–∞–∑–æ–≤—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏
    let mut inputs_map = std::collections::HashMap::new();
    inputs_map.insert("input_ids", input_ids_tensor);
    inputs_map.insert("attention_mask", attention_mask_tensor);
    inputs_map.insert("position_ids", position_ids_tensor);
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã 
    let outputs = match session_guard.run(inputs![
        "input_ids" => inputs_map["input_ids"],
        "attention_mask" => inputs_map["attention_mask"],
        "position_ids" => inputs_map["position_ids"]
    ]) {
        Ok(outputs) => {
            println!("üéâ –£–°–ü–ï–•! –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
            outputs
        },
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {}", e);
            return Err(e.into());
        }
    };
    
    println!("\nüéØ –ê–ù–ê–õ–ò–ó –í–´–•–û–î–û–í:");
    println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤: {}", outputs.len());
    
    let mut embedding_output = None;
    
    for (name, output) in outputs.iter() {
        println!("\n–í—ã—Ö–æ–¥ '{}': {:?}", name, output.dtype());
        
        if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
            let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
            println!("   –§–æ—Ä–º–∞: {:?}", shape_vec);
            println!("   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {}", data.len());
            
            // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã—Ö–æ–¥ (hidden states)
            if name.contains("hidden_states") || name == "logits" || shape_vec.len() == 3 {
                println!("   üéØ –ù–ê–ô–î–ï–ù –ö–ê–ù–î–ò–î–ê–¢ –ù–ê –≠–ú–ë–ï–î–î–ò–ù–ì–ò!");
                
                if data.len() > 0 {
                    println!("   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {:?}", &data[..5.min(data.len())]);
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º last_token pooling —Å–æ–≥–ª–∞—Å–Ω–æ README
                    if shape_vec.len() == 3 && shape_vec[1] as usize == seq_len { // [batch, seq, hidden]
                        let batch_size = shape_vec[0] as usize;
                        let seq_length = shape_vec[1] as usize;
                        let hidden_size = shape_vec[2] as usize;
                        
                        println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: batch={}, seq={}, hidden={}", batch_size, seq_length, hidden_size);
                        
                        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω (last_token pooling)
                        let last_token_start = (seq_length - 1) * hidden_size;
                        let last_token_end = seq_length * hidden_size;
                        
                        if last_token_end <= data.len() {
                            let embedding: Vec<f32> = data[last_token_start..last_token_end].to_vec();
                            
                            println!("   üöÄ –≠–ú–ë–ï–î–î–ò–ù–ì –ò–ó–í–õ–ï–ß–ï–ù!");
                            println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {}", embedding.len());
                            println!("   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {:?}", &embedding[..5.min(embedding.len())]);
                            
                            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
                            let min = embedding.iter().fold(f32::INFINITY, |a, &b| a.min(b));
                            let max = embedding.iter().fold(f32::NEG_INFINITY, |a, &b| a.max(b));
                            let mean = embedding.iter().sum::<f32>() / embedding.len() as f32;
                            let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                            
                            println!("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: min={:.4}, max={:.4}, mean={:.4}, norm={:.4}", min, max, mean, norm);
                            
                            embedding_output = Some(embedding);
                        }
                    }
                }
            }
        }
    }
    
    println!("\nüèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:");
    
    if let Some(embedding) = embedding_output {
        println!("‚úÖ ‚úÖ ‚úÖ QWEN3-EMBEDDING –†–ê–ë–û–¢–ê–ï–¢!");
        println!("‚úÖ ‚úÖ ‚úÖ –†–ï–ê–õ–¨–ù–´–ï –≠–ú–ë–ï–î–î–ò–ù–ì–ò –ü–û–õ–£–ß–ï–ù–´!");
        println!("‚úÖ ‚úÖ ‚úÖ ORT 2.0 –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ï–ù!");
        println!("‚úÖ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {}", embedding.len());
        
        // –ú–æ–∂–µ–º –¥–∞–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ README (normalize: true)
        let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
        if norm > 0.0 {
            let normalized: Vec<f32> = embedding.iter().map(|x| x / norm).collect();
            let new_norm = normalized.iter().map(|x| x * x).sum::<f32>().sqrt();
            println!("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —Å—Ç–∞—Ä–∞—è –Ω–æ—Ä–º–∞={:.4}, –Ω–æ–≤–∞—è –Ω–æ—Ä–º–∞={:.4}", norm, new_norm);
        }
        
    } else {
        println!("‚ö†Ô∏è  –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª, –Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    }
    
    Ok(())
}