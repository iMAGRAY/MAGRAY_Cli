use anyhow::Result;
use ort::{session::Session, value::Tensor, inputs};
use std::path::PathBuf;
use std::collections::HashMap;

/// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤ –¥–ª—è Qwen3-Embedding
/// –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: [batch_size, num_key_value_heads, past_sequence_length, head_dim]
/// [1, 8, 0, 128] - –ø—É—Å—Ç–æ–π –∫–µ—à –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
fn create_empty_kv_caches() -> Result<HashMap<String, Tensor<f32>>> {
    let mut kv_tensors = HashMap::new();
    
    // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø—É—Å—Ç–æ–π —Ç–µ–Ω–∑–æ—Ä –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    let empty_shape = [1, 8, 0, 128];
    let empty_data: Vec<f32> = Vec::new(); // –ü—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è past_sequence_length=0
    
    println!("üîß –°–æ–∑–¥–∞–Ω–∏–µ 56 KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤...");
    println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {:?}", empty_shape);
    println!("   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {} –±–∞–π—Ç", empty_data.len() * 4);
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ 56 —Ç–µ–Ω–∑–æ—Ä–æ–≤ (28 —Å–ª–æ–µ–≤ √ó 2 —Ç–µ–Ω–∑–æ—Ä–∞ –Ω–∞ —Å–ª–æ–π)
    for layer in 0..28 {
        // Key —Ç–µ–Ω–∑–æ—Ä
        let key_name = format!("past_key_values.{}.key", layer);
        let key_tensor = Tensor::from_array((empty_shape, empty_data.clone()))?;
        kv_tensors.insert(key_name, key_tensor);
        
        // Value —Ç–µ–Ω–∑–æ—Ä  
        let value_name = format!("past_key_values.{}.value", layer);
        let value_tensor = Tensor::from_array((empty_shape, empty_data.clone()))?;
        kv_tensors.insert(value_name, value_tensor);
    }
    
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} KV –∫–µ—à —Ç–µ–Ω–∑–æ—Ä–æ–≤", kv_tensors.len());
    
    Ok(kv_tensors)
}

/// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤
fn create_all_inputs(seq_len: usize) -> Result<(
    Tensor<i64>, // input_ids
    Tensor<i64>, // attention_mask  
    Tensor<i64>, // position_ids
    HashMap<String, Tensor<f32>> // KV caches
)> {
    println!("üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤...");
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –≤—Ö–æ–¥—ã
    let input_ids = vec![151643i64, 14016, 374, 10127]; // Qwen —Ç–æ–∫–µ–Ω—ã: <|endoftext|>, "What", "is", "AI"
    let attention_mask = vec![1i64; seq_len]; // –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã
    let position_ids: Vec<i64> = (0..seq_len as i64).collect(); // 0, 1, 2, 3
    
    let input_ids_tensor = Tensor::from_array(([1, seq_len], input_ids))?;
    let attention_mask_tensor = Tensor::from_array(([1, seq_len], attention_mask))?;
    let position_ids_tensor = Tensor::from_array(([1, seq_len], position_ids))?;
    
    println!("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");
    
    // KV –∫–µ—à–∏
    let kv_caches = create_empty_kv_caches()?;
    
    Ok((input_ids_tensor, attention_mask_tensor, position_ids_tensor, kv_caches))
}

/// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥–æ–≤ –¥–ª—è session.run()
fn prepare_all_inputs_for_session(
    input_ids: Tensor<i64>,
    attention_mask: Tensor<i64>, 
    position_ids: Tensor<i64>,
    kv_caches: HashMap<String, Tensor<f32>>
) -> Result<Vec<(String, ort::value::Value)>> {
    let mut all_inputs = Vec::new();
    
    // –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥—ã
    all_inputs.push(("input_ids".to_string(), input_ids.into()));
    all_inputs.push(("attention_mask".to_string(), attention_mask.into()));
    all_inputs.push(("position_ids".to_string(), position_ids.into()));
    
    // KV –∫–µ—à–∏ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    let mut kv_keys: Vec<_> = kv_caches.keys().collect();
    kv_keys.sort();
    
    for key in kv_keys {
        let tensor = kv_caches.get(key).unwrap().clone();
        all_inputs.push((key.clone(), tensor.into()));
    }
    
    Ok(all_inputs)
}

fn main() -> Result<()> {
    println!("=== QWEN3-EMBEDDING: –ü–û–õ–ù–´–ô –¢–ï–°–¢ –° KV –ö–ï–®–ê–ú–ò ===\n");
    
    let start_time = std::time::Instant::now();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ DLL
    let dll_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("scripts")
        .join("onnxruntime")
        .join("lib")
        .join("onnxruntime.dll");
    
    std::env::set_var("ORT_DYLIB_PATH", dll_path.to_str().unwrap());
    
    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    let model_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("models")
        .join("Qwen3-Embedding-0.6B-ONNX")
        .join("model.onnx");
    
    println!("üéØ –¶–ï–õ–¨: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑ Qwen3-Embedding-0.6B");
    println!("üìÅ –ú–æ–¥–µ–ª—å: {}", model_path.display());
    
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ORT
    println!("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX Runtime...");
    ort::init()
        .with_name("qwen3_full_test")
        .commit()?;
    println!("‚úÖ ORT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {:.2}ms", start_time.elapsed().as_secs_f64() * 1000.0);
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    println!("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ ONNX —Å–µ—Å—Å–∏–∏...");
    let session_start = std::time::Instant::now();
    let session = Session::builder()?
        .with_optimization_level(ort::session::builder::GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        .commit_from_file(&model_path)?;
    
    println!("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ {:.2}ms", session_start.elapsed().as_secs_f64() * 1000.0);
    println!("   –í—Ö–æ–¥–æ–≤: {}, –í—ã—Ö–æ–¥–æ–≤: {}", session.inputs.len(), session.outputs.len());
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤
    println!("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤...");
    let tensors_start = std::time::Instant::now();
    
    let seq_len = 4;
    let (input_ids_tensor, attention_mask_tensor, position_ids_tensor, kv_caches) = 
        create_all_inputs(seq_len)?;
    
    println!("‚úÖ –í—Å–µ —Ç–µ–Ω–∑–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã –∑–∞ {:.2}ms", tensors_start.elapsed().as_secs_f64() * 1000.0);
    println!("   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤: {}", 3 + kv_caches.len());
    
    // 4. –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    println!("\n4Ô∏è‚É£ üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...");
    let inference_start = std::time::Instant::now();
    
    let session_mutex = std::sync::Mutex::new(session);
    let mut session_guard = session_mutex.lock().unwrap();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—ã
    let all_inputs = prepare_all_inputs_for_session(
        input_ids_tensor,
        attention_mask_tensor, 
        position_ids_tensor,
        kv_caches
    )?;
    
    println!("   –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {} –≤—Ö–æ–¥–æ–≤", all_inputs.len());
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è session.run()
    let session_inputs: Vec<(std::borrow::Cow<str>, ort::value::SessionInputValue)> = 
        all_inputs.into_iter()
            .map(|(name, value)| (std::borrow::Cow::Owned(name), value.into()))
            .collect();
    
    // –ó–∞–ø—É—Å–∫!
    let outputs = match session_guard.run(session_inputs) {
        Ok(outputs) => {
            let inference_time = inference_start.elapsed().as_secs_f64() * 1000.0;
            println!("üéâüéâüéâ –£–°–ü–ï–•! –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {:.2}ms", inference_time);
            outputs
        },
        Err(e) => {
            println!("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {}", e);
            return Err(e.into());
        }
    };
    
    // 5. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    println!("\n5Ô∏è‚É£ üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (last_token pooling)...");
    let extraction_start = std::time::Instant::now();
    
    let mut final_embedding: Option<Vec<f32>> = None;
    
    for (name, output) in outputs.iter() {
        if let Ok((shape, data)) = output.try_extract_tensor::<f32>() {
            let shape_vec: Vec<i64> = (0..shape.len()).map(|i| shape[i]).collect();
            
            println!("   –í—ã—Ö–æ–¥ '{}': —Ñ–æ—Ä–º–∞ {:?}, –¥–∞–Ω–Ω—ã—Ö {}", name, shape_vec, data.len());
            
            // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã—Ö–æ–¥ —Å hidden states [batch, seq, hidden]
            if shape_vec.len() == 3 && shape_vec[0] == 1 && shape_vec[1] == seq_len as i64 {
                let batch_size = shape_vec[0] as usize;
                let sequence_length = shape_vec[1] as usize; 
                let hidden_size = shape_vec[2] as usize;
                
                println!("   üéØ –ù–ê–ô–î–ï–ù–´ HIDDEN STATES!");
                println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: batch={}, seq={}, hidden={}", batch_size, sequence_length, hidden_size);
                
                // Last token pooling (—Å–æ–≥–ª–∞—Å–Ω–æ README)
                let last_token_idx = sequence_length - 1;
                let start_idx = last_token_idx * hidden_size;
                let end_idx = start_idx + hidden_size;
                
                if end_idx <= data.len() {
                    let embedding: Vec<f32> = data[start_idx..end_idx].to_vec();
                    
                    println!("   ‚úÖ –≠–ú–ë–ï–î–î–ò–ù–ì –ò–ó–í–õ–ï–ß–ï–ù!");
                    println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {} (–æ–∂–∏–¥–∞–ª–æ—Å—å ~1024 –¥–ª—è Qwen3-0.6B)", embedding.len());
                    
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    let min = embedding.iter().fold(f32::INFINITY, |a, &b| a.min(b));
                    let max = embedding.iter().fold(f32::NEG_INFINITY, |a, &b| a.max(b)); 
                    let mean = embedding.iter().sum::<f32>() / embedding.len() as f32;
                    let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
                    
                    println!("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: min={:.4}, max={:.4}, mean={:.4}", min, max, mean);
                    println!("   –ù–æ—Ä–º–∞: {:.4}", norm);
                    println!("   –ü–µ—Ä–≤—ã–µ 5: {:?}", &embedding[..5.min(embedding.len())]);
                    println!("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5: {:?}", &embedding[embedding.len()-5.min(embedding.len())..]);
                    
                    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (—Å–æ–≥–ª–∞—Å–Ω–æ README: normalize: true)
                    if norm > 0.0 {
                        let normalized: Vec<f32> = embedding.iter().map(|x| x / norm).collect();
                        let new_norm = normalized.iter().map(|x| x * x).sum::<f32>().sqrt();
                        println!("   ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: –Ω–æ–≤–∞—è –Ω–æ—Ä–º–∞={:.6}", new_norm);
                        final_embedding = Some(normalized);
                    } else {
                        final_embedding = Some(embedding);
                    }
                    
                    break;
                }
            }
        }
    }
    
    let extraction_time = extraction_start.elapsed().as_secs_f64() * 1000.0;
    println!("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {:.2}ms", extraction_time);
    
    // 6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    println!("\n6Ô∏è‚É£ üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:");
    let total_time = start_time.elapsed().as_secs_f64() * 1000.0;
    
    match final_embedding {
        Some(embedding) => {
            println!("üéâüéâüéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•!");
            println!("‚úÖ Qwen3-Embedding –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            println!("‚úÖ ORT 2.0 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!");
            println!("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã!");
            println!("üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {}", embedding.len());
            println!("‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2}ms", total_time);
            
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
            let sample_size = 10.min(embedding.len());
            println!("üîç –û–±—Ä–∞–∑–µ—Ü —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ (–ø–µ—Ä–≤—ã–µ {}): {:?}", sample_size, &embedding[..sample_size]);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            let abs_values: Vec<f32> = embedding.iter().map(|x| x.abs()).collect();
            let max_abs = abs_values.iter().fold(0.0f32, |a, &b| a.max(b));
            
            if max_abs > 0.001 && max_abs < 10.0 {
                println!("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (max_abs={:.4})", max_abs);
            } else {
                println!("‚ö†Ô∏è  –ù–µ–æ–±—ã—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ (max_abs={:.4})", max_abs);
            }
        },
        None => {
            println!("‚ùå –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã—Ö–æ–¥–∞—Ö –º–æ–¥–µ–ª–∏");
            println!("‚ö†Ô∏è  –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–æ–≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è");
        }
    }
    
    println!("\nüéØ ORT 2.0 + Qwen3-Embedding –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ó–ê–í–ï–†–®–ï–ù–ê!");
    
    Ok(())
}