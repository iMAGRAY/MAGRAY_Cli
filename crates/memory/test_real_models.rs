// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö ONNX –º–æ–¥–µ–ª–µ–π
use std::path::PathBuf;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º tracing –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    tracing_subscriber::fmt::init();
    
    let base_path = PathBuf::from("crates/memory/src");
    
    println!("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Qwen3 Embedding –º–æ–¥–µ–ª–∏...");
    let embedding_path = base_path.join("Qwen3-Embedding-0.6B-ONNX");
    
    match memory::onnx_models::Qwen3EmbeddingModel::new(embedding_path).await {
        Ok(model) => {
            println!("‚úÖ Embedding –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
            println!("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}", model.embedding_dim());
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥
            println!("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞...");
            let test_texts = vec!["Hello world".to_string()];
            match model.embed(&test_texts).await {
                Ok(embeddings) => {
                    println!("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –†–∞–∑–º–µ—Ä: {}x{}", 
                           embeddings.len(), embeddings[0].len());
                    
                    // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –≤–µ–∫—Ç–æ—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω
                    let norm: f32 = embeddings[0].iter().map(|x| x * x).sum::<f32>().sqrt();
                    println!("   –ù–æ—Ä–º–∞ –≤–µ–∫—Ç–æ—Ä–∞: {:.4}", norm);
                    
                    if (norm - 1.0).abs() < 0.1 {
                        println!("‚úÖ –í–µ–∫—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω");
                    } else {
                        println!("‚ö†Ô∏è  –í–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω");
                    }
                },
                Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {}", e);
                }
            }
        },
        Err(e) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å embedding –º–æ–¥–µ–ª—å: {}", e);
        }
    }
    
    println!("\n–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Qwen3 Reranker –º–æ–¥–µ–ª–∏...");
    let reranker_path = base_path.join("Qwen3-Reranker-0.6B-ONNX");
    
    match memory::onnx_models::Qwen3RerankerModel::new(reranker_path).await {
        Ok(model) => {
            println!("‚úÖ Reranker –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π reranking
            println!("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reranking...");
            let query = "machine learning";
            let docs = vec![
                "Machine learning is a subset of AI".to_string(),
                "The weather is nice today".to_string(),
                "Deep learning uses neural networks".to_string(),
            ];
            
            match model.rerank(query, &docs, 2).await {
                Ok(results) => {
                    println!("‚úÖ Reranking –≤—ã–ø–æ–ª–Ω–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", results.len());
                    for (i, (idx, score)) in results.iter().enumerate() {
                        println!("   {}. –î–æ–∫—É–º–µ–Ω—Ç {}: score={:.4}", i+1, idx, score);
                    }
                },
                Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ reranking: {}", e);
                }
            }
        },
        Err(e) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å reranker –º–æ–¥–µ–ª—å: {}", e);
        }
    }
    
    println!("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω");
    Ok(())
}