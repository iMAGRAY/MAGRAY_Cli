#![cfg(feature = "extended-tests")]

use anyhow::Result;
use memory::{
    api::SearchOptions, create_di_memory_service, Layer, MemoryContext, UnifiedMemoryAPI,
};
use std::sync::Arc;
use uuid::Uuid;

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç UnifiedMemoryAPI trait –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
#[tokio::test]
async fn test_unified_api_basic_operations() -> Result<()> {
    println!("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º UnifiedMemoryAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é");

    // –°–æ–∑–¥–∞–µ–º API —á–µ—Ä–µ–∑ DI service
    let di_service = create_di_memory_service().await?;
    let api = UnifiedMemoryAPI::new_di(Arc::new(di_service));

    // –¢–µ—Å—Ç 1: Remember –æ–ø–µ—Ä–∞—Ü–∏—è
    let context = MemoryContext::new("test")
        .with_layer(Layer::Interact)
        .with_tags(vec!["api_test".to_string()]);

    let id = api
        .remember("Test memory for API".to_string(), context)
        .await?;
    println!("  ‚úÖ Remember –æ–ø–µ—Ä–∞—Ü–∏—è: ID = {}", id);

    // –¢–µ—Å—Ç 2: Recall –æ–ø–µ—Ä–∞—Ü–∏—è
    let search_options = SearchOptions::new()
        .in_layers(vec![Layer::Interact])
        .limit(10);

    let results = api.recall("Test memory", search_options).await?;
    assert!(!results.is_empty(), "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–Ω—É—é –ø–∞–º—è—Ç—å");

    let found_record = &results[0];
    assert_eq!(found_record.text, "Test memory for API");
    assert_eq!(found_record.layer, Layer::Interact);
    println!(
        "  ‚úÖ Recall –æ–ø–µ—Ä–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        results.len()
    );

    // –¢–µ—Å—Ç 3: Health check
    let health = api.health_check().await?;
    println!("  üìä Health status: {}", health.status);
    assert!(
        matches!(health.status, "healthy" | "degraded"),
        "–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–æ—Ä–æ–≤–∞"
    );
    println!("  ‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç");

    // –¢–µ—Å—Ç 4: Statistics
    let stats = api.get_stats().await?;
    println!("  üìä Total records: {}", stats.total_records);
    println!(
        "  üìä Cache hit rate: {:.2}%",
        stats.cache_stats.hit_rate * 100.0
    );
    println!("  ‚úÖ Statistics –¥–æ—Å—Ç—É–ø–Ω—ã");

    // –¢–µ—Å—Ç 5: Memory optimization
    let optimization_result = api.optimize_memory().await?;
    println!(
        "  üîÑ Optimization time: {}ms",
        optimization_result.total_time_ms
    );
    assert!(
        optimization_result.total_time_ms >= 0,
        "–í—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
    );
    println!("  ‚úÖ Memory optimization —Ä–∞–±–æ—Ç–∞–µ—Ç");

    println!("‚úÖ UnifiedMemoryAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API
#[tokio::test]
async fn test_unified_api_search_scenarios() -> Result<()> {
    println!("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ UnifiedMemoryAPI");

    let di_service = create_di_memory_service().await?;
    let api = UnifiedMemoryAPI::new_di(Arc::new(di_service));

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã–µ —Å–ª–æ–∏
    let test_data = vec![
        (
            "Machine learning algorithms overview",
            Layer::Interact,
            vec!["ai", "ml"],
        ),
        (
            "Deep neural networks implementation",
            Layer::Insights,
            vec!["ai", "implementation"],
        ),
        (
            "Python programming best practices",
            Layer::Assets,
            vec!["python", "programming"],
        ),
        (
            "Rust systems programming guide",
            Layer::Assets,
            vec!["rust", "systems"],
        ),
    ];

    for (text, layer, tags) in test_data {
        let context = MemoryContext::new("search_test")
            .with_layer(layer)
            .with_tags(tags.into_iter().map(String::from).collect());

        api.remember(text.to_string(), context).await?;
    }

    // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ—é
    let options = SearchOptions::new()
        .in_layers(vec![Layer::Interact])
        .limit(5);

    let interact_results = api.recall("machine learning", options).await?;
    assert!(!interact_results.is_empty(), "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ –≤ Interact —Å–ª–æ–µ");
    assert!(
        interact_results.iter().all(|r| r.layer == Layer::Interact),
        "–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ Interact"
    );
    println!(
        "  ‚úÖ –ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ—é: {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        interact_results.len()
    );

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å–ª–æ—è–º
    let options = SearchOptions::new()
        .in_layers(vec![Layer::Interact, Layer::Insights, Layer::Assets])
        .limit(10);

    let all_results = api.recall("programming", options).await?;
    let layers: std::collections::HashSet<_> = all_results.iter().map(|r| r.layer).collect();
    println!("  üìä –ù–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ—è—Ö: {:?}", layers);
    println!(
        "  ‚úÖ –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å–ª–æ—è–º: {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        all_results.len()
    );

    // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å –ª–∏–º–∏—Ç–æ–º
    let options = SearchOptions::new().limit(2);
    let limited_results = api.recall("guide", options).await?;
    assert!(
        limited_results.len() <= 2,
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã"
    );
    println!(
        "  ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        limited_results.len()
    );

    // –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    let options = SearchOptions::new().limit(5);
    let empty_results = api.recall("nonexistent query xyz", options).await?;
    println!(
        "  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {}",
        empty_results.len()
    );
    println!("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");

    println!("‚úÖ –ü–æ–∏—Å–∫–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç error handling –≤ UnifiedMemoryAPI
#[tokio::test]
async fn test_unified_api_error_handling() -> Result<()> {
    println!("üö® –¢–µ—Å—Ç–∏—Ä—É–µ–º error handling –≤ UnifiedMemoryAPI");

    let di_service = create_di_memory_service().await?;
    let api = UnifiedMemoryAPI::new_di(Arc::new(di_service));

    // –¢–µ—Å—Ç 1: Get –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID
    let fake_id = Uuid::new_v4();
    let result = api.get(fake_id).await?;
    assert!(result.is_none(), "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None");
    println!("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID");

    // –¢–µ—Å—Ç 2: Forget –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID
    let forget_result = api.forget(fake_id).await?;
    assert!(
        !forget_result,
        "Forget –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false"
    );
    println!("  ‚úÖ Forget –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω");

    // –¢–µ—Å—Ç 3: –ü—É—Å—Ç—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    let empty_options = SearchOptions::new();
    let empty_results = api.recall("", empty_options).await?;
    // –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ –Ω–µ—Ç - –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ –Ω–µ –ø–∞–¥–∞–µ—Ç
    println!(
        "  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {}",
        empty_results.len()
    );
    println!("  ‚úÖ –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–µ–∑ –æ—à–∏–±–æ–∫");

    // –¢–µ—Å—Ç 4: Remember —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    let context = MemoryContext::new("empty_test");
    let empty_id = api.remember("".to_string(), context).await?;
    println!("  üìù ID –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {}", empty_id);
    println!("  ‚úÖ –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω");

    // –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    let stats = api.get_stats().await?;
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤–æ–π, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π
    assert!(
        stats.total_records >= 0,
        "Total records –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
    );
    println!("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫");

    println!("‚úÖ Error handling —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å UnifiedMemoryAPI
#[tokio::test]
async fn test_unified_api_performance() -> Result<()> {
    println!("‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å UnifiedMemoryAPI");

    let di_service = create_di_memory_service().await?;
    let api = UnifiedMemoryAPI::new_di(Arc::new(di_service));

    let start_time = std::time::Instant::now();

    // –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ remember
    let batch_size = 20;
    println!("  üìù –î–æ–±–∞–≤–ª—è–µ–º {} –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ API...", batch_size);

    for i in 0..batch_size {
        let context = MemoryContext::new("performance")
            .with_layer(match i % 3 {
                0 => Layer::Interact,
                1 => Layer::Insights,
                _ => Layer::Assets,
            })
            .with_tags(vec![format!("batch_{}", i)]);

        let text = format!("Performance test record {} with detailed content", i);
        api.remember(text, context).await?;
    }

    let remember_time = start_time.elapsed();
    println!("  ‚è±Ô∏è –í—Ä–µ–º—è remember –æ–ø–µ—Ä–∞—Ü–∏–π: {:?}", remember_time);

    // –ú–∞—Å—Å–æ–≤—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    let search_start = std::time::Instant::now();
    let queries = vec!["performance", "test", "record", "content", "detailed"];

    for query in queries {
        let options = SearchOptions::new().limit(10);
        let _results = api.recall(query, options).await?;
    }

    let search_time = search_start.elapsed();
    println!("  ‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {:?}", search_time);

    // –û–ø–µ—Ä–∞—Ü–∏–∏ health –∏ stats
    let monitoring_start = std::time::Instant::now();

    let _health = api.health_check().await?;
    let _stats = api.get_stats().await?;
    let _optimization = api.optimize_memory().await?;

    let monitoring_time = monitoring_start.elapsed();
    println!("  ‚è±Ô∏è –í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {:?}", monitoring_time);

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    assert!(
        remember_time.as_secs() < 5,
        "Remember –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º–∏"
    );
    assert!(search_time.as_secs() < 3, "–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º");
    assert!(
        monitoring_time.as_secs() < 2,
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º"
    );

    println!("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã");
    Ok(())
}

/// Smoke test –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ API
#[tokio::test]
async fn test_unified_api_smoke() -> Result<()> {
    println!("üí® Smoke test –¥–ª—è UnifiedMemoryAPI");

    let di_service = create_di_memory_service().await?;
    let api = UnifiedMemoryAPI::new_di(Arc::new(di_service));

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π workflow
    let context = MemoryContext::new("smoke");
    let id = api.remember("Smoke test".to_string(), context).await?;

    let options = SearchOptions::new();
    let results = api.recall("smoke", options).await?;

    assert!(!results.is_empty(), "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ smoke test –∑–∞–ø–∏—Å—å");

    let _health = api.health_check().await?;
    let _stats = api.get_stats().await?;

    println!("‚úÖ Smoke test –ø—Ä–æ—à–µ–ª");
    Ok(())
}
