use memory::{MemoryService, MemoryConfig, Layer, Record, CacheConfigType, CacheConfig};
use ai::AiConfig;
use anyhow::Result;
use chrono::Utc;
use uuid::Uuid;
use tracing::info;
use tracing_subscriber;

/// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —Å –º–æ–¥–µ–ª—è–º–∏ Qwen3
#[tokio::test]
async fn test_qwen3_memory_basic() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let _ = tracing_subscriber::fmt()
        .with_env_filter("info,memory=debug,ai=debug")
        .try_init();

    info!("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —Å Qwen3");

    // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    let temp_dir = tempfile::TempDir::new()?;
    let base_path = temp_dir.path().to_path_buf();

    // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let config = MemoryConfig {
        db_path: base_path.join("test_hnswdb"),
        cache_path: base_path.join("test_cache"),
        promotion: Default::default(),
        ai_config: AiConfig::default(), // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç qwen3emb –∏ qwen3_reranker –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        health_config: Default::default(),
        cache_config: CacheConfigType::Lru(CacheConfig::default()),
        resource_config: memory::ResourceConfig::default(),
        #[allow(deprecated)]
        max_vectors: 1_000_000,
        #[allow(deprecated)]
        max_cache_size_bytes: 1024 * 1024 * 1024,
        #[allow(deprecated)]
        max_memory_usage_percent: Some(50),
    };

    // –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏
    info!("–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞–º—è—Ç–∏...");
    let memory_service = MemoryService::new(config).await?;
    info!("‚úÖ –°–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏ —Å–æ–∑–¥–∞–Ω");

    // –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    info!("\nüìù –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π");
    
    let test_texts = vec![
        ("Rust - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", Layer::Interact),
        ("Tokio - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π runtime –¥–ª—è Rust", Layer::Interact),
        ("ONNX Runtime –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏", Layer::Assets),
        ("Qwen3 - —Å–µ–º–µ–π—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π", Layer::Assets),
    ];

    for (text, layer) in test_texts {
        let record = Record {
            id: Uuid::new_v4(),
            layer,
            text: text.to_string(),
            embedding: Vec::new(),
            kind: "test".to_string(),
            tags: vec!["test".to_string()],
            project: "test_project".to_string(),
            session: "test_session".to_string(),
            ts: Utc::now(),
            score: 0.0,
            access_count: 0,
            last_access: Utc::now(),
        };
        
        info!("  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ: {}", text);
        let start = std::time::Instant::now();
        memory_service.insert(record).await?;
        let insert_time = start.elapsed();
        info!("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ {:?}", insert_time);
    }

    // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
    tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫
    info!("\nüîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Å Qwen3 embeddings");
    
    let query = "—è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è";
    info!("  –ó–∞–ø—Ä–æ—Å: '{}'", query);
    
    let start = std::time::Instant::now();
    let results = memory_service
        .search(query)
        .top_k(3)
        .min_score(0.5)
        .execute()
        .await?;
    let search_time = start.elapsed();
    
    info!("  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:?}", search_time);
    info!("  –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", results.len());
    
    for (i, result) in results.iter().enumerate() {
        info!("    {}. [{:?}] {}", i + 1, result.layer, result.text);
    }

    // –¢–µ—Å—Ç 3: –ë–∞—Ç—á-–∑–∞–≥—Ä—É–∑–∫–∞
    info!("\nüì¶ –¢–µ—Å—Ç 3: –ë–∞—Ç—á-–∑–∞–≥—Ä—É–∑–∫–∞");
    
    let mut batch = Vec::new();
    for i in 0..10 {
        let record = Record {
            id: Uuid::new_v4(),
            layer: Layer::Interact,
            text: format!("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å ‚Ññ{} –¥–ª—è –±–∞—Ç—á-–∑–∞–≥—Ä—É–∑–∫–∏", i),
            embedding: Vec::new(),
            kind: "batch".to_string(),
            tags: vec!["batch".to_string()],
            project: "test_project".to_string(),
            session: "batch_session".to_string(),
            ts: Utc::now(),
            score: 0.0,
            access_count: 0,
            last_access: Utc::now(),
        };
        batch.push(record);
    }

    let start = std::time::Instant::now();
    for record in batch {
        memory_service.insert(record).await?;
    }
    let batch_time = start.elapsed();
    
    info!("  –î–æ–±–∞–≤–ª–µ–Ω–æ 10 –∑–∞–ø–∏—Å–µ–π –∑–∞ {:?}", batch_time);

    // –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    info!("\nüìä –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
    
    let (hits, misses, items) = memory_service.cache_stats();
    let hit_rate = if hits + misses > 0 {
        (hits as f64 / (hits + misses) as f64) * 100.0
    } else {
        0.0
    };
    
    info!("  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:");
    info!("    - –ü–æ–ø–∞–¥–∞–Ω–∏—è: {}", hits);
    info!("    - –ü—Ä–æ–º–∞—Ö–∏: {}", misses);
    info!("    - –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {}", items);
    info!("    - Hit rate: {:.1}%", hit_rate);

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    info!("\nüè• –¢–µ—Å—Ç 5: –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã");
    
    let health = memory_service.run_health_check().await?;
    info!("  –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {:?}", health.overall_status);
    info!("  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:");
    for (component, status) in &health.component_statuses {
        info!("    - {:?}: {:?}", component, status);
    }

    // –¢–µ—Å—Ç 6: –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å
    info!("\nüåç –¢–µ—Å—Ç 6: –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Qwen3");
    
    let multilingual_texts = vec![
        ("Hello, world!", "en"),
        ("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!", "ru"),
        ("‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ", "zh"),
    ];
    
    for (text, lang) in multilingual_texts {
        let record = Record {
            id: Uuid::new_v4(),
            layer: Layer::Assets,
            text: text.to_string(),
            embedding: Vec::new(),
            kind: "multilingual".to_string(),
            tags: vec![lang.to_string()],
            project: "multilingual_test".to_string(),
            session: "test_session".to_string(),
            ts: Utc::now(),
            score: 0.0,
            access_count: 0,
            last_access: Utc::now(),
        };
        
        memory_service.insert(record).await?;
        info!("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ {}: {}", lang, text);
    }
    
    // –ü–æ–∏—Å–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    let query = "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä";
    info!("\n  –ü–æ–∏—Å–∫ '{}' —Å—Ä–µ–¥–∏ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤:", query);
    
    let results = memory_service
        .search(query)
        .with_layer(Layer::Assets)
        .with_tags(vec!["ru".to_string(), "en".to_string(), "zh".to_string()])
        .top_k(3)
        .execute()
        .await?;
    
    for result in results {
        let default_lang = "?".to_string();
        let lang = result.tags.first().unwrap_or(&default_lang);
        info!("    [{}] {}", lang, result.text);
    }

    info!("\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!");
    info!("üéâ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ MAGRAY —Å –º–æ–¥–µ–ª—è–º–∏ Qwen3 —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    
    Ok(())
}