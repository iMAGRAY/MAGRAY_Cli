use anyhow::Result;
use memory::{
    MLPromotionEngine, MLPromotionConfig, PromotionFeatures,
    VectorStore, Layer, Record,
};
use std::sync::Arc;
use tempfile::TempDir;
use uuid::Uuid;
use chrono::{Utc, Duration};

#[tokio::test]
async fn test_ml_model_training() -> Result<()> {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    let temp_dir = TempDir::new()?;
    let db_path = temp_dir.path().join("test_db");
    
    // –°–æ–∑–¥–∞–µ–º store
    let store = Arc::new(VectorStore::new(&db_path).await?);
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –±—ã—Å—Ç—Ä—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
    let config = MLPromotionConfig {
        min_access_threshold: 2,
        temporal_weight: 0.3,
        semantic_weight: 0.4,
        usage_weight: 0.3,
        promotion_threshold: 0.7,
        ml_batch_size: 16,
        training_interval_hours: 0, // –û–±—É—á–∞—Ç—å —Å—Ä–∞–∑—É
        use_gpu_for_ml: false,
    };
    
    // –°–æ–∑–¥–∞–µ–º ML promotion engine
    let mut engine = MLPromotionEngine::new(store.clone(), config).await?;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    let now = Utc::now();
    
    // –î–æ–±–∞–≤–ª—è–µ–º "—É—Å–ø–µ—à–Ω—ã–µ" –∑–∞–ø–∏—Å–∏ –≤ Assets (–≤–∞–∂–Ω—ã–µ)
    for i in 0..50 {
        let record = Record {
            id: Uuid::new_v4(),
            layer: Layer::Assets,
            text: format!("Critical error in production system {}", i),
            kind: "error".to_string(),
            tags: vec!["critical".to_string(), "production".to_string()],
            project: "test".to_string(),
            session: "test".to_string(),
            embedding: vec![0.1; 1024],
            ts: now - Duration::days(5 + i as i64),
            last_access: now - Duration::hours(2),
            access_count: 50 + i as u32,
            score: 0.9,
        };
        store.insert(&record).await?;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º "—Å—Ä–µ–¥–Ω–∏–µ" –∑–∞–ø–∏—Å–∏ –≤ Insights
    for i in 0..50 {
        let record = Record {
            id: Uuid::new_v4(),
            layer: Layer::Insights,
            text: format!("Important feature request {}", i),
            kind: "feature".to_string(),
            tags: vec!["feature".to_string(), "important".to_string()],
            project: "test".to_string(),
            session: "test".to_string(),
            embedding: vec![0.2; 1024],
            ts: now - Duration::days(3 + i as i64),
            last_access: now - Duration::hours(24),
            access_count: 10 + i as u32,
            score: 0.7,
        };
        store.insert(&record).await?;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º "–Ω–µ—É—Å–ø–µ—à–Ω—ã–µ" –∑–∞–ø–∏—Å–∏ –≤ Interact (–Ω–µ promoted)
    for i in 0..50 {
        let record = Record {
            id: Uuid::new_v4(),
            layer: Layer::Interact,
            text: format!("Debug log message {}", i),
            kind: "debug".to_string(),
            tags: vec!["debug".to_string()],
            project: "test".to_string(),
            session: "test".to_string(),
            embedding: vec![0.3; 1024],
            ts: now - Duration::days(2),
            last_access: now - Duration::days(1),
            access_count: 1,
            score: 0.3,
        };
        store.insert(&record).await?;
    }
    
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–æ 150 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º promotion —Ü–∏–∫–ª —Å –æ–±—É—á–µ–Ω–∏–µ–º
    let stats = engine.run_ml_promotion_cycle().await?;
    
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ML promotion:");
    println!("  - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {}", stats.total_analyzed);
    println!("  - Promoted: {}", stats.promoted_interact_to_insights);
    println!("  - ML inference –≤—Ä–µ–º—è: {} –º—Å", stats.ml_inference_time_ms);
    println!("  - –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {:.1}%", stats.model_accuracy * 100.0);
    println!("  - –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:.2}", stats.avg_confidence_score);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–∏–ª–∞—Å—å
    assert!(stats.model_accuracy > 0.7, "–ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –¥–æ—Å—Ç–∏—á—å —Ö–æ—Ä–æ—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    println!("\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏...");
    
    // –¢–µ—Å—Ç 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å promoted)
    let critical_features = PromotionFeatures {
        age_hours: 30.0,
        access_recency: 0.9,
        temporal_pattern_score: 0.8,
        access_count: 0.9,
        access_frequency: 0.8,
        session_importance: 0.9,
        semantic_importance: 0.95, // "critical" keyword
        keyword_density: 0.8,
        topic_relevance: 0.9,
        layer_affinity: 0.8,
        co_occurrence_score: 0.7,
        user_preference_score: 0.8,
    };
    
    let critical_score = engine.predict_promotion_score(&critical_features);
    println!("  - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: score = {:.2} (–ø–æ—Ä–æ–≥ = 0.7)", critical_score);
    assert!(critical_score > 0.7, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å promoted");
    
    // –¢–µ—Å—Ç 2: Debug —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å promoted)
    let debug_features = PromotionFeatures {
        age_hours: 48.0,
        access_recency: 0.1,
        temporal_pattern_score: 0.2,
        access_count: 0.1,
        access_frequency: 0.1,
        session_importance: 0.2,
        semantic_importance: 0.1, // –Ω–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
        keyword_density: 0.1,
        topic_relevance: 0.2,
        layer_affinity: 0.1,
        co_occurrence_score: 0.1,
        user_preference_score: 0.1,
    };
    
    let debug_score = engine.predict_promotion_score(&debug_features);
    println!("  - Debug —Å–æ–æ–±—â–µ–Ω–∏–µ: score = {:.2} (–ø–æ—Ä–æ–≥ = 0.7)", debug_score);
    assert!(debug_score < 0.5, "Debug —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å promoted");
    
    println!("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã ML –º–æ–¥–µ–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!");
    
    Ok(())
}

#[tokio::test]
async fn test_ml_features_extraction() -> Result<()> {
    let temp_dir = TempDir::new()?;
    let db_path = temp_dir.path().join("test_db");
    let store = Arc::new(VectorStore::new(&db_path).await?);
    
    let config = MLPromotionConfig::default();
    let engine = MLPromotionEngine::new(store.clone(), config).await?;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    let record = Record {
        id: Uuid::new_v4(),
        layer: Layer::Interact,
        text: "Critical security vulnerability detected in authentication module".to_string(),
        kind: "security".to_string(),
        tags: vec!["critical".to_string(), "security".to_string()],
        project: "test".to_string(),
        session: "test".to_string(),
        embedding: vec![0.5; 1024],
        ts: Utc::now() - Duration::hours(24),
        last_access: Utc::now() - Duration::hours(1),
        access_count: 15,
        score: 0.85,
    };
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º features
    let features = engine.extract_features(&record).await?;
    
    println!("üî¨ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ features:");
    println!("  - age_hours: {:.1}", features.age_hours);
    println!("  - access_recency: {:.2}", features.access_recency);
    println!("  - access_count: {:.2}", features.access_count);
    println!("  - semantic_importance: {:.2}", features.semantic_importance);
    println!("  - keyword_density: {:.2}", features.keyword_density);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    assert!(features.age_hours > 23.0 && features.age_hours < 25.0);
    assert!(features.semantic_importance > 0.8, "Security + critical –¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å –≤—ã—Å–æ–∫—É—é –≤–∞–∂–Ω–æ—Å—Ç—å");
    assert!(features.access_count > 0.0, "Access count –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω");
    
    println!("‚úÖ Feature extraction —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    
    Ok(())
}