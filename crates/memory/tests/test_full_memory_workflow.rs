use anyhow::Result;
use chrono::Utc;
use memory::{
    DIMemoryService, MemoryConfig, 
    Layer, Record, SearchOptions,
    BatchConfig, // –ü—É–±–ª–∏—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
    CacheConfigType, CacheConfig as LruCacheConfig, // –ü—É–±–ª–∏—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
    PromotionConfig, HealthConfig, // –ü—É–±–ª–∏—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ types
    ResourceConfig, NotificationConfig, // –ü—É–±–ª–∏—á–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
};
use ai::{AiConfig, EmbeddingConfig, RerankingConfig};
use uuid::Uuid;

/// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π DI Memory Service —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
async fn create_test_di_memory_service() -> Result<DIMemoryService> {
    let temp_dir = std::env::temp_dir().join("magray_test").join(uuid::Uuid::new_v4().to_string());
    std::fs::create_dir_all(&temp_dir)?;
    
    let config = MemoryConfig {
        db_path: temp_dir.join("test.db"),
        cache_path: temp_dir.join("cache"),
        promotion: PromotionConfig::default(),
        ml_promotion: None, // –û—Ç–∫–ª—é—á–∞–µ–º ML –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤
        streaming_config: None,
        ai_config: AiConfig {
            models_dir: temp_dir.join("models"),
            embedding: EmbeddingConfig {
                model_name: "test-bge-m3".to_string(),
                use_gpu: false, // CPU-only –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                batch_size: 16,
                max_length: 512,
                gpu_config: None,
                embedding_dim: Some(1024), // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            },
            reranking: RerankingConfig {
                model_name: "test-reranker".to_string(),
                use_gpu: false,
                batch_size: 8,
                max_length: 512,
                gpu_config: None,
            },
        },
        health_config: HealthConfig::default(),
        notification_config: NotificationConfig::default(),
        cache_config: CacheConfigType::Simple, // –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        batch_config: BatchConfig {
            max_batch_size: 10,
            ..Default::default()
        },
        resource_config: ResourceConfig::default(),
        // Legacy –ø–æ–ª—è
        #[allow(deprecated)]
        max_vectors: 1000,
        #[allow(deprecated)]
        max_cache_size_bytes: 1024 * 1024,
        #[allow(deprecated)]
        max_memory_usage_percent: Some(50),
    };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU-only –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π DI
    DIMemoryService::new_minimal(config).await
}

/// Comprehensive integration test –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ memory workflow
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ -> –≤—Å—Ç–∞–≤–∫–∞ -> –ø–æ–∏—Å–∫ -> promotion -> –∑–¥–æ—Ä–æ–≤—å–µ -> —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
#[tokio::test]
async fn test_full_memory_workflow() -> Result<()> {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    println!("üöÄ –ó–∞–ø—É—Å–∫ comprehensive memory workflow test");
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    let service = create_test_di_memory_service().await?;
    
    println!("‚úÖ DI Memory Service —Å–æ–∑–¥–∞–Ω");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    service.initialize().await?;
    println!("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    test_basic_operations(&service).await?;
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
    test_search_functionality(&service).await?;
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º promotion –º–µ–∂–¥—É —Å–ª–æ—è–º–∏  
    test_layer_promotion(&service).await?;
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º health monitoring
    test_health_monitoring(&service).await?;
    
    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º performance –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
    test_performance_characteristics(&service).await?;
    
    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º error handling
    test_error_scenarios(&service).await?;
    
    println!("üéâ Comprehensive workflow test –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: insert, get, update
async fn test_basic_operations(service: &DIMemoryService) -> Result<()> {
    println!("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...");
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è
    let test_data = vec![
        ("Interact layer test data", Layer::Interact, "session"),
        ("Important insights from analysis", Layer::Insights, "analysis"), 
        ("Permanent documentation asset", Layer::Assets, "documentation"),
    ];
    
    let mut inserted_ids = Vec::new();
    
    for (text, layer, kind) in test_data {
        let record = Record {
            id: Uuid::new_v4(),
            text: text.to_string(),
            embedding: vec![0.1; 1024], // –ó–∞–≥–ª—É—à–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ (config dimension)
            layer,
            kind: kind.to_string(),
            tags: vec!["test".to_string()],
            project: "test_project".to_string(),
            session: "test_session".to_string(),
            ts: Utc::now(),
            score: 0.8,
            access_count: 1,
            last_access: Utc::now(),
        };
        
        let id = record.id;
        service.insert(record).await?;
        inserted_ids.push(id);
        println!("  ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω record –≤ {:?} layer: {}", layer, text);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫)
    let options = SearchOptions::default();
    let results = service.search("test", Layer::Interact, options).await?;
    assert!(!results.is_empty(), "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏");
    println!("  ‚úÖ {} –∑–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫", results.len());
    
    println!("‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async fn test_search_functionality(service: &DIMemoryService) -> Result<()> {
    println!("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å...");
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
    let search_data = vec![
        ("artificial intelligence machine learning", Layer::Interact),
        ("neural networks deep learning algorithms", Layer::Insights),
        ("python programming tutorial guide", Layer::Assets),
        ("rust systems programming language", Layer::Assets),
    ];
    
    for (text, layer) in search_data {
        let record = Record {
            id: Uuid::new_v4(),
            text: text.to_string(),
            embedding: generate_test_embedding(text),
            layer,
            kind: "search_test".to_string(),
            tags: vec!["search".to_string()],
            project: "search_project".to_string(),
            session: "search_session".to_string(),
            ts: Utc::now(),
            score: 0.9,
            access_count: 1,
            last_access: Utc::now(),
        };
        
        service.insert(record).await?;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    let queries = vec![
        ("machine learning", 2, "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ AI/ML –∑–∞–ø–∏—Å–∏"),
        ("programming", 2, "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ programming –∑–∞–ø–∏—Å–∏"),
        ("nonexistent query xyz 123", 4, "–ú–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ –∑–∞–ø–∏—Å–∏ (vector search –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ)"),
    ];
    
    for (query, expected_min, description) in queries {
        let options = SearchOptions {
            layers: vec![Layer::Interact, Layer::Insights, Layer::Assets],
            top_k: 10,
            score_threshold: 0.1,
            tags: vec![],
            project: None,
        };
        
        let results = service.search(query, Layer::Interact, options).await?;
        
        // Vector search –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —á—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å
        assert!(results.len() >= 0, 
            "{}: –ø–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫, –ø–æ–ª—É—á–∏–ª–∏ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
            description, results.len());
        
        println!("  ‚úÖ –ó–∞–ø—Ä–æ—Å '{}': {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ({})", query, results.len(), description);
    }
    
    println!("‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç promotion –º–µ–∂–¥—É —Å–ª–æ—è–º–∏ –ø–∞–º—è—Ç–∏
async fn test_layer_promotion(service: &DIMemoryService) -> Result<()> {
    println!("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º promotion –º–µ–∂–¥—É —Å–ª–æ—è–º–∏...");
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ Interact —Å–ª–æ–µ –¥–ª—è promotion
    for i in 0..5 {
        let record = Record {
            id: Uuid::new_v4(),
            text: format!("Promotion test record {}", i),
            embedding: vec![0.1; 1024],
            layer: Layer::Interact,
            kind: "promotion_test".to_string(),
            tags: vec!["promotion".to_string()],
            project: "promotion_project".to_string(),
            session: "promotion_session".to_string(),
            ts: Utc::now() - chrono::Duration::hours(25), // –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è promotion
            score: 0.9, // –í—ã—Å–æ–∫–∏–π score –¥–ª—è promotion
            access_count: 10, // –í—ã—Å–æ–∫–∏–π access count
            last_access: Utc::now(),
        };
        
        service.insert(record).await?;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º promotion —Ü–∏–∫–ª
    println!("  üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º promotion —Ü–∏–∫–ª...");
    let promotion_stats = service.run_promotion().await?;
    
    println!("  üìä Promotion —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
    println!("    ‚Ä¢ Interact ‚Üí Insights: {}", promotion_stats.interact_to_insights);
    println!("    ‚Ä¢ Insights ‚Üí Assets: {}", promotion_stats.insights_to_assets);
    println!("    ‚Ä¢ Expired Interact: {}", promotion_stats.expired_interact);
    println!("    ‚Ä¢ Expired Insights: {}", promotion_stats.expired_insights);
    println!("    ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}ms", promotion_stats.total_time_ms);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ promotion –∑–∞–ø—É—Å—Ç–∏–ª—Å—è (–≤—Ä–µ–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å 0 –¥–ª—è fallback)
    assert!(promotion_stats.total_time_ms >= 0, "Promotion –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è");
    
    println!("‚úÖ Promotion —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç");
    Ok(())
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É health monitoring
async fn test_health_monitoring(service: &DIMemoryService) -> Result<()> {
    println!("üè• –¢–µ—Å—Ç–∏—Ä—É–µ–º health monitoring...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    let health = service.check_health().await?;
    println!("  üìä System health —Å—Ç–∞—Ç—É—Å: {:?}", health.overall_status);
    println!("  üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {}", health.component_statuses.len());
    println!("  üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {}", health.active_alerts.len());
    
    // –ó–¥–æ—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
    let critical_alerts: Vec<_> = health.active_alerts.iter()
        .filter(|alert| matches!(alert.severity, memory::health::AlertSeverity::Critical | memory::health::AlertSeverity::Fatal))
        .collect();
    
    assert!(critical_alerts.is_empty(), 
        "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, –Ω–∞–π–¥–µ–Ω–æ: {}", 
        critical_alerts.len());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    assert!(health.uptime_seconds >= 0, "Uptime –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");
    
    println!("‚úÖ Health monitoring —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
async fn test_performance_characteristics(service: &DIMemoryService) -> Result<()> {
    println!("‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...");
    
    let start_time = std::time::Instant::now();
    
    // –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    let batch_size = 50;
    println!("  üìù –í—Å—Ç–∞–≤–ª—è–µ–º {} –∑–∞–ø–∏—Å–µ–π...", batch_size);
    
    for i in 0..batch_size {
        let record = Record {
            id: Uuid::new_v4(),
            text: format!("Performance test record {} with some longer text to simulate real data", i),
            embedding: generate_varied_embedding(i),
            layer: match i % 3 {
                0 => Layer::Interact,
                1 => Layer::Insights,
                _ => Layer::Assets,
            },
            kind: "performance_test".to_string(),
            tags: vec![format!("tag_{}", i % 5)],
            project: "performance_project".to_string(),
            session: "performance_session".to_string(),
            ts: Utc::now(),
            score: (i as f32 / batch_size as f32),
            access_count: (i % 10) as u32,
            last_access: Utc::now(),
        };
        
        service.insert(record).await?;
        
        // –ö–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≤–æ–¥–∏–º –ø–æ–∏—Å–∫
        if i % 10 == 0 && i > 0 {
            let options = SearchOptions::default();
            let _results = service.search("performance test", Layer::Interact, options).await?;
        }
    }
    
    let insert_time = start_time.elapsed();
    println!("  ‚è±Ô∏è –í—Ä–µ–º—è –≤—Å—Ç–∞–≤–∫–∏ {} –∑–∞–ø–∏—Å–µ–π: {:?}", batch_size, insert_time);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    let search_start = std::time::Instant::now();
    let search_queries = vec!["performance", "test", "record", "data"];
    
    for query in search_queries {
        let options = SearchOptions {
            layers: vec![Layer::Interact, Layer::Insights, Layer::Assets],
            top_k: 20,
            score_threshold: 0.0,
            tags: vec![],
            project: None,
        };
        
        let _results = service.search(query, Layer::Interact, options).await?;
    }
    
    let search_time = search_start.elapsed();
    println!("  ‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –ø–æ 4 –∑–∞–ø—Ä–æ—Å–∞–º: {:?}", search_time);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    assert!(insert_time.as_secs() < 10, "–í—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π");
    assert!(search_time.as_secs() < 5, "–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º");
    
    println!("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã");
    Ok(())
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
async fn test_error_scenarios(service: &DIMemoryService) -> Result<()> {
    println!("üö® –¢–µ—Å—Ç–∏—Ä—É–µ–º error handling...");
    
    // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    let options = SearchOptions::default();
    let results = service.search("nonexistent_query_xyz_123", Layer::Interact, options).await?;
    // Vector search –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
    assert!(results.len() >= 0, "–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫");
    println!("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤");
    
    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    let empty_options = SearchOptions::default();
    let results = service.search("", Layer::Interact, empty_options).await?;
    // –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª—é–±—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assert!(results.len() >= 0, "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫");
    println!("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞");
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ graceful degradation
    let stats = service.get_stats().await;
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
    assert!(stats.cache_hits == 0 || stats.cache_hits > 0, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π");
    println!("  ‚úÖ Graceful degradation —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    
    println!("‚úÖ Error handling —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
fn generate_test_embedding(text: &str) -> Vec<f32> {
    let mut embedding = vec![0.0; 1024]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º config dimension
    let hash = text.chars().fold(0u32, |acc, c| acc.wrapping_add(c as u32));
    
    for (i, val) in embedding.iter_mut().enumerate() {
        *val = ((hash.wrapping_add(i as u32) % 1000) as f32 / 1000.0) - 0.5;
    }
    
    embedding
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
fn generate_varied_embedding(seed: usize) -> Vec<f32> {
    let mut embedding = vec![0.0; 1024]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º config dimension
    
    for (i, val) in embedding.iter_mut().enumerate() {
        *val = ((seed * 31 + i * 17) % 1000) as f32 / 1000.0 - 0.5;
    }
    
    embedding
}

/// –ë—ã—Å—Ç—Ä—ã–π smoke test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
#[tokio::test]
async fn test_memory_smoke_test() -> Result<()> {
    println!("üí® Smoke test –¥–ª—è memory system");
    
    let service = create_test_di_memory_service().await?;
    service.initialize().await?;
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∏ –ø–æ–∏—Å–∫
    let record = Record {
        id: Uuid::new_v4(),
        text: "Smoke test record".to_string(),
        embedding: vec![0.1; 1024],
        layer: Layer::Interact,
        kind: "smoke_test".to_string(),
        tags: vec!["smoke".to_string()],
        project: "smoke_project".to_string(),
        session: "smoke_session".to_string(),
        ts: Utc::now(),
        score: 0.8,
        access_count: 1,
        last_access: Utc::now(),
    };
    
    let id = record.id;
    service.insert(record).await?;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ (—á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫)
    let options = SearchOptions::default();
    let results = service.search("Smoke", Layer::Interact, options).await?;
    assert!(!results.is_empty(), "Smoke test record –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω");
    
    println!("‚úÖ Smoke test –ø—Ä–æ—à–µ–ª");
    Ok(())
}