use anyhow::Result;
use memory::{
    Layer, MemoryConfig, MemoryService, Record, VectorStore,
};
use tempfile::TempDir;
use tracing_subscriber;

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
fn mock_embedding(text: &str) -> Vec<f32> {
    let mut embedding = vec![0.0; 1024];
    let hash = text.bytes().fold(0u64, |acc, b| acc.wrapping_mul(31).wrapping_add(b as u64));
    
    for i in 0..1024 {
        let value = ((hash.wrapping_mul((i + 1) as u64) % 1000) as f32) / 1000.0;
        embedding[i] = value;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    let norm: f32 = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
    if norm > 0.0 {
        for v in &mut embedding {
            *v /= norm;
        }
    }
    
    embedding
}

#[tokio::test]
async fn test_vector_store_with_v3_index() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let _ = tracing_subscriber::fmt()
        .with_env_filter("memory=debug")
        .try_init();

    println!("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VectorStore —Å VectorIndexV3...\n");

    // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    let temp_dir = TempDir::new()?;
    let db_path = temp_dir.path().join("test_db");
    
    // –°–æ–∑–¥–∞—ë–º VectorStore
    let store = VectorStore::new(&db_path).await?;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∏
    store.init_layer(Layer::Interact).await?;
    store.init_layer(Layer::Insights).await?;
    store.init_layer(Layer::Assets).await?;
    
    println!("‚úÖ VectorStore –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n");
    
    // –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞–∑–Ω—ã–µ —Å–ª–æ–∏
    println!("üìù –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π");
    
    let records = vec![
        Record {
            text: "Authentication system using JWT tokens".to_string(),
            embedding: mock_embedding("Authentication system using JWT tokens"),
            layer: Layer::Interact,
            kind: "implementation".to_string(),
            tags: vec!["auth".to_string(), "jwt".to_string()],
            project: "web-api".to_string(),
            session: "session-001".to_string(),
            score: 0.95,
            ..Default::default()
        },
        Record {
            text: "Database migration script for user tables".to_string(),
            embedding: mock_embedding("Database migration script for user tables"),
            layer: Layer::Insights,
            kind: "migration".to_string(),
            tags: vec!["database".to_string(), "sql".to_string()],
            project: "backend".to_string(),
            session: "session-002".to_string(),
            score: 0.85,
            ..Default::default()
        },
        Record {
            text: "React component for user profile page".to_string(),
            embedding: mock_embedding("React component for user profile page"),
            layer: Layer::Assets,
            kind: "component".to_string(),
            tags: vec!["react".to_string(), "frontend".to_string()],
            project: "web-ui".to_string(),
            session: "session-003".to_string(),
            score: 0.90,
            ..Default::default()
        },
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
    for record in &records {
        store.insert(record).await?;
        println!("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ {}: {}", 
            match record.layer {
                Layer::Interact => "Interact",
                Layer::Insights => "Insights",
                Layer::Assets => "Assets",
            },
            &record.text[..40.min(record.text.len())]
        );
    }
    
    // –¢–µ—Å—Ç 2: –ü–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    println!("\nüì¶ –¢–µ—Å—Ç 2: –ü–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ");
    
    let batch_records = vec![
        Record {
            text: "GraphQL schema definition for API".to_string(),
            embedding: mock_embedding("GraphQL schema definition for API"),
            layer: Layer::Interact,
            kind: "schema".to_string(),
            tags: vec!["graphql".to_string(), "api".to_string()],
            project: "web-api".to_string(),
            session: "session-004".to_string(),
            score: 0.88,
            ..Default::default()
        },
        Record {
            text: "Performance optimization for database queries".to_string(),
            embedding: mock_embedding("Performance optimization for database queries"),
            layer: Layer::Insights,
            kind: "optimization".to_string(),
            tags: vec!["performance".to_string(), "database".to_string()],
            project: "backend".to_string(),
            session: "session-005".to_string(),
            score: 0.92,
            ..Default::default()
        },
    ];
    
    let batch_refs: Vec<&Record> = batch_records.iter().collect();
    store.insert_batch(&batch_refs).await?;
    println!("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –ø–∞–∫–µ—Ç–æ–º", batch_records.len());
    
    // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–µ
    println!("\nüîç –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ—è–º");
    
    // –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–µ Interact
    let query = "authentication API";
    let query_embedding = mock_embedding(query);
    let results = store.search(&query_embedding, Layer::Interact, 3).await?;
    
    println!("\n  –ü–æ–∏—Å–∫ –≤ Interact –ø–æ –∑–∞–ø—Ä–æ—Å—É '{}':", query);
    for (i, record) in results.iter().enumerate() {
        println!("    {}. {} (score: {:.3})", 
            i + 1, 
            &record.text[..40.min(record.text.len())],
            record.score
        );
    }
    assert!(!results.is_empty(), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ª–æ–µ Interact");
    
    // –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–µ Insights
    let query = "database optimization";
    let query_embedding = mock_embedding(query);
    let results = store.search(&query_embedding, Layer::Insights, 3).await?;
    
    println!("\n  –ü–æ–∏—Å–∫ –≤ Insights –ø–æ –∑–∞–ø—Ä–æ—Å—É '{}':", query);
    for (i, record) in results.iter().enumerate() {
        println!("    {}. {} (score: {:.3})", 
            i + 1, 
            &record.text[..40.min(record.text.len())],
            record.score
        );
    }
    assert!(!results.is_empty(), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ª–æ–µ Insights");
    
    // –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    println!("\nüóëÔ∏è  –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏");
    
    let id_to_delete = records[0].id;
    let deleted = store.delete_by_id(&id_to_delete, Layer::Interact).await?;
    println!("  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {}: {}", id_to_delete, 
        if deleted { "‚úÖ —É—Å–ø–µ—à–Ω–æ" } else { "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }
    );
    assert!(deleted, "–ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞
    let record = store.get_by_id(&id_to_delete, Layer::Interact).await?;
    assert!(record.is_none(), "–ó–∞–ø–∏—Å—å –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è");
    
    // –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–∞
    println!("\n‚è∞ –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–∞");
    
    let id_to_update = &records[1].id.to_string();
    store.update_access(Layer::Insights, id_to_update).await?;
    println!("  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Insights");
    
    // –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
    println!("\nüìà –¢–µ—Å—Ç 6: –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è");
    
    use chrono::Utc;
    let candidates = store.get_promotion_candidates(
        Layer::Insights,
        Utc::now() + chrono::Duration::hours(1), // –ó–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        0.8, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score
        0,   // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–æ–≤
    ).await?;
    
    println!("  –ù–∞–π–¥–µ–Ω–æ {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∏–∑ Insights", candidates.len());
    
    // –¢–µ—Å—Ç 7: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    println!("\nüßπ –¢–µ—Å—Ç 7: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π");
    
    let deleted_count = store.delete_expired(
        Layer::Interact,
        Utc::now() + chrono::Duration::hours(1), // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    ).await?;
    
    println!("  –£–¥–∞–ª–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ Interact", deleted_count);
    
    println!("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VectorStore –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    
    Ok(())
}

#[tokio::test] 
async fn test_memory_service_with_v3_index() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let _ = tracing_subscriber::fmt()
        .with_env_filter("memory=info")
        .try_init();

    println!("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MemoryService —Å VectorIndexV3...\n");

    // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    let temp_dir = TempDir::new()?;
    let config = MemoryConfig {
        db_path: temp_dir.path().join("memory_db"),
        cache_path: temp_dir.path().join("cache_db"),
        ..Default::default()
    };
    
    // –°–æ–∑–¥–∞—ë–º MemoryService (–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–∫-—ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑ AI —Å–µ—Ä–≤–∏—Å–∞)
    let mut service = MemoryService::new(config).await?;
    
    // –í–∫–ª—é—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    service.enable_metrics();
    
    println!("‚úÖ MemoryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n");
    
    // –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    println!("üíæ –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π");
    
    let memories = vec![
        ("Implemented OAuth2 authentication flow", Layer::Interact, vec!["auth", "oauth2"]),
        ("Optimized database queries reduced latency by 50%", Layer::Insights, vec!["performance", "database"]),
        ("Architecture decision: use microservices pattern", Layer::Assets, vec!["architecture", "design"]),
    ];
    
    for (text, layer, tags) in &memories {
        let record = Record {
            text: text.to_string(),
            layer: *layer,
            kind: "test".to_string(),
            tags: tags.iter().map(|s| s.to_string()).collect(),
            project: "test-project".to_string(),
            session: "test-session".to_string(),
            ..Default::default()
        };
        
        service.insert(record).await?;
        
        println!("  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {:?}: {}", layer, &text[..30.min(text.len())]);
    }
    
    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é SearchBuilder
    println!("\nüîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Å SearchBuilder");
    
    let results = service
        .search("authentication security")
        .with_layer(Layer::Interact)
        .with_tags(vec!["auth".to_string()])
        .top_k(5)
        .execute()
        .await?;
    
    println!("  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ 'authentication security' –≤ Interact:");
    for (i, record) in results.iter().enumerate() {
        println!("    {}. {} (score: {:.3})", 
            i + 1, 
            &record.text[..30.min(record.text.len())],
            record.score
        );
    }
    
    // –¢–µ—Å—Ç 3: –ú–µ–∂—Å–ª–æ–π–Ω—ã–π –ø–æ–∏—Å–∫
    println!("\nüîç –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å–ª–æ—è–º");
    
    let results = service
        .search("database optimization performance")
        .top_k(5)
        .execute()
        .await?;
    
    println!("  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ 'database optimization performance' –ø–æ –≤—Å–µ–º —Å–ª–æ—è–º:");
    for (i, record) in results.iter().enumerate() {
        println!("    {}. [{:?}] {} (score: {:.3})", 
            i + 1,
            record.layer,
            &record.text[..30.min(record.text.len())],
            record.score
        );
    }
    
    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    println!("\nüìä –¢–µ—Å—Ç 4: –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã");
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ—ë–≤
    service.update_layer_metrics().await?;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    let (cache_entries, _, _) = service.cache_stats();
    let cache_hit_rate = service.cache_hit_rate();
    
    println!("  –ú–µ—Ç—Ä–∏–∫–∏ MemoryService:");
    println!("    –ó–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: {}", cache_entries);
    println!("    –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {:.1}%", cache_hit_rate * 100.0);
    
    if let Some(metrics) = service.metrics() {
        // –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics.log_summary();
    } else {
        println!("  –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã");
    }
    
    println!("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã MemoryService –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    
    Ok(())
}