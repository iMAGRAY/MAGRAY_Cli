#!/usr/bin/env -S cargo +nightly -Zscript
//! ```cargo
//! [dependencies]
//! tokio = { version = "1.0", features = ["full"] }
//! anyhow = "1.0"
//! tracing = "0.1"
//! tracing-subscriber = "0.3"
//! uuid = "1.0"
//! chrono = { version = "0.4", features = ["serde"] }
//! memory = { path = "./crates/memory" }
//! ```

//! –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π DI —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
//! –ó–∞–ø—É—Å–∫: cargo run --bin test_di_integration

use anyhow::Result;
use chrono::Utc;
use memory::{DIMemoryService, default_config, Record, Layer};
use std::time::Instant;
use uuid::Uuid;

#[tokio::main]
async fn main() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::INFO)
        .init();

    println!("üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π DI —Å–∏—Å—Ç–µ–º—ã MAGRAY CLI");
    
    let start_time = Instant::now();

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ DIMemoryService
    println!("\n1Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ DIMemoryService...");
    let config = default_config()?;
    let service = DIMemoryService::new(config).await?;
    println!("‚úÖ DIMemoryService —Å–æ–∑–¥–∞–Ω –∑–∞ {:?}", start_time.elapsed());

    // –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤
    println!("\n2Ô∏è‚É£  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤ –ø–∞–º—è—Ç–∏...");
    let init_start = Instant::now();
    service.initialize().await?;
    println!("‚úÖ –°–ª–æ–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {:?}", init_start.elapsed());

    // –¢–µ—Å—Ç 3: –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏
    println!("\n3Ô∏è‚É£  –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏...");
    let record = Record {
        id: Uuid::new_v4(),
        text: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DI —Å–∏—Å—Ç–µ–º—ã".to_string(),
        embedding: vec![], // –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        layer: Layer::Interact,
        kind: "test_message".to_string(),
        tags: vec!["test".to_string(), "di".to_string()],
        project: "magray".to_string(),
        session: "test_session".to_string(),
        ts: Utc::now(),
        score: 0.0,
        access_count: 1,
        last_access: Utc::now(),
    };

    let insert_start = Instant::now();
    service.insert(record).await?;
    println!("‚úÖ –ó–∞–ø–∏—Å—å –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞ {:?}", insert_start.elapsed());

    // –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π (—Å fallback embedding)
    println!("\n4Ô∏è‚É£  –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞...");
    let search_start = Instant::now();
    let search_options = memory::SearchOptions {
        layers: vec![Layer::Interact],
        top_k: 5,
        score_threshold: 0.0,
        tags: vec![],
        project: Some("magray".to_string()),
    };
    
    let results = service.search("—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", Layer::Interact, search_options).await?;
    println!("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {:?}, –Ω–∞–π–¥–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π", 
             search_start.elapsed(), results.len());

    // –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    println!("\n5Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...");
    if let Ok(_stats) = service.get_stats().await {
        println!("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∞");
    } else {
        println!("‚ö†Ô∏è  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã)");
    }

    // –¢–µ—Å—Ç 6: Health check
    println!("\n6Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...");
    if let Ok(health) = service.check_health().await {
        println!("‚úÖ Health check: {:?}", health);
    } else {
        println!("‚ö†Ô∏è  Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }

    let total_time = start_time.elapsed();
    println!("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã DI —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    println!("üìä –û–±—â–µ–µ –≤—Ä–µ–º—è: {:?}", total_time);
    println!("üìù DI —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");

    Ok(())
}