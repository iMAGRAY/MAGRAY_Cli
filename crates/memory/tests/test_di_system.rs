#!/usr/bin/env -S cargo +nightly -Zscript
//! Test script –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã DI —Å–∏—Å—Ç–µ–º—ã
//! 
//! –ó–∞–ø—É—Å–∫: cargo run --bin test_di_system

use anyhow::Result;
use std::path::PathBuf;

// –ò–º–ø–æ—Ä—Ç—ã –∏–∑ memory crate (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Cargo.toml)
// use memory::{DIMemoryService, MemoryConfig, CacheConfigType, default_config};

#[tokio::main]
async fn main() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::DEBUG)
        .init();

    println!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DI —Å–∏—Å—Ç–µ–º—ã MAGRAY CLI");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let temp_dir = std::env::temp_dir();
    let db_path = temp_dir.join("test_magray_di");
    let cache_path = temp_dir.join("test_cache_di");
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    std::fs::create_dir_all(&db_path)?;
    std::fs::create_dir_all(&cache_path)?;
    
    println!("‚úì –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:");
    println!("  DB: {:?}", db_path);
    println!("  Cache: {:?}", cache_path);
    
    /* –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CLI
    
    // –°–æ–∑–¥–∞–Ω–∏–µ DI Memory Service 
    let service = memory::create_di_memory_service().await?;
    
    println!("‚úì DIMemoryService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤
    service.initialize().await?;
    println!("‚úì –°–ª–æ–∏ –ø–∞–º—è—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    
    // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    let di_stats = service.di_stats();
    println!("‚úì DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("  - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ factories: {}", di_stats.registered_factories);
    println!("  - Cached singletons: {}", di_stats.cached_singletons);
    println!("  - –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤: {}", di_stats.total_types);
    
    // –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let system_stats = service.get_stats().await;
    println!("‚úì –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("  - Cache hits: {}", system_stats.cache_hits);
    println!("  - Cache misses: {}", system_stats.cache_misses);
    println!("  - Cache size: {}", system_stats.cache_size);
    
    // –¢–µ—Å—Ç health check
    let health = service.check_health().await?;
    println!("‚úì Health check: {:?}", health);
    
    */
    
    println!("üéâ DI —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CLI!");
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    std::fs::remove_dir_all(&db_path).ok();
    std::fs::remove_dir_all(&cache_path).ok();
    println!("‚úì –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã");
    
    Ok(())
}