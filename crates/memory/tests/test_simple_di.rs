//! –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç DI —Å–∏—Å—Ç–µ–º—ã
//! –ë–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

use anyhow::Result;
use memory::{default_config, MemoryDIConfigurator};

#[tokio::test]
async fn test_simple_di_system() -> Result<()> {
    println!("üß™ –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç DI —Å–∏—Å—Ç–µ–º—ã");
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config = default_config()?;
    println!("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    let container = MemoryDIConfigurator::configure_minimal(config).await?;
    println!("‚úÖ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω —Å {} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏", container.stats().total_types);
    
    println!("üéâ DI —Å–∏—Å—Ç–µ–º–∞ –±–∞–∑–æ–≤–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    
    Ok(())
}

// –£–±–∏—Ä–∞–µ–º main —Ñ—É–Ω–∫—Ü–∏—é, —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ—Å—Ç, –∞ –Ω–µ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª