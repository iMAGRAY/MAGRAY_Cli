use memory::{
    MemoryService, MemoryConfig, MemoryQuery, MemoryLayer,
    MemoryEntry, MemoryUpdate, LayerHealth, VectorStoreConfig,
    PromotionRule, PromotionConfig,
};
use ai::{EmbeddingService, RerankingService, Config as AiConfig};
use anyhow::Result;
use tokio;
use tracing::{info, warn, error};
use tracing_subscriber;
use std::sync::Arc;
use std::time::{Duration, Instant};
use uuid::Uuid;

/// –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —Å –º–æ–¥–µ–ª—è–º–∏ Qwen3
#[tokio::test]
async fn test_full_memory_system_with_qwen3() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let _ = tracing_subscriber::fmt()
        .with_env_filter("debug")
        .try_init();

    info!("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —Å Qwen3");

    // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
    let ai_config = AiConfig::default(); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç qwen3emb –∏ qwen3_reranker –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –°–æ–∑–¥–∞—ë–º embedding —Å–µ—Ä–≤–∏—Å
    let embedding_service = Arc::new(EmbeddingService::new(ai_config.clone()).await?);
    
    // –°–æ–∑–¥–∞—ë–º reranking —Å–µ—Ä–≤–∏—Å  
    let reranking_service = Arc::new(RerankingService::new(ai_config.clone()).await?);

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
    let memory_config = MemoryConfig {
        interact_ttl: Duration::from_secs(3600), // 1 —á–∞—Å –¥–ª—è —Ç–µ—Å—Ç–∞
        insights_ttl: Duration::from_secs(7200), // 2 —á–∞—Å–∞
        max_entries_per_layer: 1000,
        embedding_batch_size: 16,
        vector_store_config: VectorStoreConfig {
            m: 16,
            ef_construction: 200,
            ef_search: 100,
            num_threads: 4,
        },
        promotion_config: PromotionConfig {
            check_interval: Duration::from_secs(5), // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
            batch_size: 10,
            rules: vec![
                PromotionRule {
                    min_access_count: 2,
                    min_age: Duration::from_secs(3),
                    similarity_threshold: 0.75,
                    target_layer: MemoryLayer::Insights,
                },
                PromotionRule {
                    min_access_count: 5,
                    min_age: Duration::from_secs(10),
                    similarity_threshold: 0.85,
                    target_layer: MemoryLayer::Assets,
                },
            ],
        },
    };

    // –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏
    let memory_service = MemoryService::new(
        memory_config,
        embedding_service.clone(),
        reranking_service.clone(),
    ).await?;

    info!("‚úÖ –°–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏ —Å–æ–∑–¥–∞–Ω");

    // –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞–∑–Ω—ã–µ —Å–ª–æ–∏
    info!("\nüìù –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞–∑–Ω—ã–µ —Å–ª–æ–∏");
    
    let test_entries = vec![
        ("Rust - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", MemoryLayer::Interact),
        ("Tokio - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π runtime –¥–ª—è Rust", MemoryLayer::Interact),
        ("async/await —É–ø—Ä–æ—â–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", MemoryLayer::Insights),
        ("ONNX Runtime –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ò–ò", MemoryLayer::Assets),
        ("Qwen3 - —ç—Ç–æ —Å–µ–º–µ–π—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π", MemoryLayer::Assets),
    ];

    let mut entry_ids = Vec::new();
    
    for (content, layer) in test_entries {
        let entry = MemoryEntry {
            id: Uuid::new_v4().to_string(),
            content: content.to_string(),
            metadata: serde_json::json!({
                "test": true,
                "timestamp": chrono::Utc::now().to_rfc3339(),
            }),
            embedding: None, // –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            access_count: 0,
            last_accessed: chrono::Utc::now(),
            created_at: chrono::Utc::now(),
        };
        
        memory_service.add_entry(layer, entry.clone()).await?;
        entry_ids.push(entry.id);
        info!("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ {:?}: {}", layer, content);
    }

    // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
    tokio::time::sleep(Duration::from_millis(500)).await;

    // –¢–µ—Å—Ç 2: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    info!("\nüîç –¢–µ—Å—Ç 2: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å Qwen3 embeddings");
    
    let search_queries = vec![
        "—è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Rust",
        "–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–º–æ–¥–µ–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
        "Qwen –º–æ–¥–µ–ª–∏",
    ];

    for query_text in search_queries {
        info!("\n  –ó–∞–ø—Ä–æ—Å: '{}'", query_text);
        
        let query = MemoryQuery {
            query: Some(query_text.to_string()),
            layer: None, // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å–ª–æ—è–º
            limit: 3,
            similarity_threshold: Some(0.5),
            metadata_filter: None,
        };

        let start = Instant::now();
        let results = memory_service.search(query).await?;
        let search_time = start.elapsed();
        
        info!("  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:?}", search_time);
        info!("  –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", results.len());
        
        for (i, entry) in results.iter().enumerate() {
            if let Some(score) = entry.similarity_score {
                info!("    {}. [score: {:.3}] {}", i + 1, score, entry.content);
            }
        }
    }

    // –¢–µ—Å—Ç 3: Reranking
    info!("\nüéØ –¢–µ—Å—Ç 3: Reranking —Å Qwen3 –º–æ–¥–µ–ª—å—é");
    
    let rerank_query = "—Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ";
    info!("  –ó–∞–ø—Ä–æ—Å –¥–ª—è reranking: '{}'", rerank_query);

    // –°–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    let query = MemoryQuery {
        query: Some(rerank_query.to_string()),
        layer: None,
        limit: 5,
        similarity_threshold: Some(0.3),
        metadata_filter: None,
    };

    let initial_results = memory_service.search(query.clone()).await?;
    info!("  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ reranking:");
    for (i, entry) in initial_results.iter().enumerate() {
        if let Some(score) = entry.similarity_score {
            info!("    {}. [score: {:.3}] {}", i + 1, score, entry.content);
        }
    }

    // Reranking
    let start = Instant::now();
    let reranked_results = memory_service.search_with_reranking(
        query,
        rerank_query,
        3
    ).await?;
    let rerank_time = start.elapsed();

    info!("\n  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ reranking (–≤—Ä–µ–º—è: {:?}):", rerank_time);
    for (i, entry) in reranked_results.iter().enumerate() {
        if let Some(score) = entry.rerank_score {
            info!("    {}. [rerank: {:.3}] {}", i + 1, score, entry.content);
        }
    }

    // –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    info!("\n‚úèÔ∏è –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏ —Å—á—ë—Ç—á–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–∞");
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    let first_id = &entry_ids[0];
    for i in 1..=3 {
        let update = MemoryUpdate {
            content: Some(format!("Rust - —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {})", i)),
            metadata: Some(serde_json::json!({
                "updated": true,
                "version": i,
            })),
        };
        
        memory_service.update_entry(MemoryLayer::Interact, first_id, update).await?;
        info!("  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", i);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        memory_service.get_entry(MemoryLayer::Interact, first_id).await?;
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
    info!("\nüìà –¢–µ—Å—Ç 5: –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –º–µ–∂–¥—É —Å–ª–æ—è–º–∏");
    
    // –ñ–¥—ë–º, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã
    info!("  –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è (10 —Å–µ–∫)...");
    tokio::time::sleep(Duration::from_secs(10)).await;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ—ë–≤
    let interact_health = memory_service.layer_health(MemoryLayer::Interact).await?;
    let insights_health = memory_service.layer_health(MemoryLayer::Insights).await?;
    let assets_health = memory_service.layer_health(MemoryLayer::Assets).await?;

    info!("\n  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ—ë–≤ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:");
    info!("    Interact: {} –∑–∞–ø–∏—Å–µ–π", interact_health.entry_count);
    info!("    Insights: {} –∑–∞–ø–∏—Å–µ–π", insights_health.entry_count);
    info!("    Assets: {} –∑–∞–ø–∏—Å–µ–π", assets_health.entry_count);

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∏
    info!("\n‚ö° –¢–µ—Å—Ç 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∏");
    
    let batch_size = 50;
    let mut batch_entries = Vec::new();
    
    for i in 0..batch_size {
        let entry = MemoryEntry {
            id: Uuid::new_v4().to_string(),
            content: format!("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å ‚Ññ{} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∏", i),
            metadata: serde_json::json!({"batch": true, "index": i}),
            embedding: None,
            access_count: 0,
            last_accessed: chrono::Utc::now(),
            created_at: chrono::Utc::now(),
        };
        batch_entries.push(entry);
    }

    let start = Instant::now();
    for entry in batch_entries {
        memory_service.add_entry(MemoryLayer::Interact, entry).await?;
    }
    let batch_time = start.elapsed();
    
    info!("  –î–æ–±–∞–≤–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∑–∞ {:?}", batch_size, batch_time);
    info!("  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø–∏—Å—å: {:?}", batch_time / batch_size as u32);

    // –¢–µ—Å—Ç 7: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
    info!("\nüîé –¢–µ—Å—Ç 7: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º");
    
    let filtered_query = MemoryQuery {
        query: Some("—Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å".to_string()),
        layer: Some(MemoryLayer::Interact),
        limit: 5,
        similarity_threshold: Some(0.7),
        metadata_filter: Some(serde_json::json!({"batch": true})),
    };

    let filtered_results = memory_service.search(filtered_query).await?;
    info!("  –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: {}", filtered_results.len());

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    info!("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:");
    
    let layers = vec![
        (MemoryLayer::Interact, "Interact"),
        (MemoryLayer::Insights, "Insights"),
        (MemoryLayer::Assets, "Assets"),
    ];

    for (layer, name) in layers {
        let health = memory_service.layer_health(layer).await?;
        info!("\n  –°–ª–æ–π {}:", name);
        info!("    - –ó–∞–ø–∏—Å–µ–π: {}", health.entry_count);
        info!("    - –ó–¥–æ—Ä–æ–≤—å–µ: {:?}", health.status);
        info!("    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {} –±–∞–π—Ç", health.memory_usage);
        info!("    - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø–∏—Å–∏: {} –±–∞–π—Ç", 
            if health.entry_count > 0 { health.memory_usage / health.entry_count } else { 0 }
        );
    }

    // –û—á–∏—Å—Ç–∫–∞
    info!("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    memory_service.clear_layer(MemoryLayer::Interact).await?;
    
    info!("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    
    Ok(())
}

/// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
#[tokio::test]
async fn test_vector_search_performance() -> Result<()> {
    let _ = tracing_subscriber::fmt()
        .with_env_filter("info")
        .try_init();

    info!("üèÉ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞");

    let ai_config = AiConfig::default();
    let embedding_service = Arc::new(EmbeddingService::new(ai_config.clone()).await?);
    let reranking_service = Arc::new(RerankingService::new(ai_config.clone()).await?);

    let memory_config = MemoryConfig::default();
    let memory_service = MemoryService::new(
        memory_config,
        embedding_service.clone(),
        reranking_service.clone(),
    ).await?;

    // –î–æ–±–∞–≤–ª—è–µ–º 1000 –∑–∞–ø–∏—Å–µ–π
    info!("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π...");
    let start = Instant::now();
    
    for i in 0..1000 {
        let entry = MemoryEntry {
            id: Uuid::new_v4().to_string(),
            content: format!("–î–æ–∫—É–º–µ–Ω—Ç {}. –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ–º–∞—Ö: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏.", i),
            metadata: serde_json::json!({"doc_id": i}),
            embedding: None,
            access_count: 0,
            last_accessed: chrono::Utc::now(),
            created_at: chrono::Utc::now(),
        };
        
        memory_service.add_entry(MemoryLayer::Assets, entry).await?;
        
        if (i + 1) % 100 == 0 {
            info!("  –î–æ–±–∞–≤–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π", i + 1);
        }
    }
    
    let index_time = start.elapsed();
    info!("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {:?}", index_time);

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    let search_queries = vec![
        "–∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
        "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏",
        "—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
        "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Rust",
    ];

    info!("\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:");
    let mut total_search_time = Duration::ZERO;

    for query_text in &search_queries {
        let query = MemoryQuery {
            query: Some(query_text.to_string()),
            layer: Some(MemoryLayer::Assets),
            limit: 10,
            similarity_threshold: Some(0.5),
            metadata_filter: None,
        };

        let start = Instant::now();
        let results = memory_service.search(query).await?;
        let search_time = start.elapsed();
        
        total_search_time += search_time;
        info!("  '{}': {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {:?}", query_text, results.len(), search_time);
    }

    let avg_search_time = total_search_time / search_queries.len() as u32;
    info!("\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:?}", avg_search_time);

    Ok(())
}

/// –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ Qwen3
#[tokio::test]
async fn test_qwen3_tokenization() -> Result<()> {
    let _ = tracing_subscriber::fmt()
        .with_env_filter("debug")
        .try_init();

    info!("üî§ –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ Qwen3");

    let ai_config = AiConfig::default();
    let embedding_service = EmbeddingService::new(ai_config).await?;

    let test_texts = vec![
        "Hello, world!",
        "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!",
        "‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ",
        "üöÄ Emoji test üéâ",
        "Mixed —Ç–µ–∫—Å—Ç with ‰∏≠Êñá and English",
    ];

    for text in test_texts {
        info!("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: '{}'", text);
        
        let start = Instant::now();
        let embedding = embedding_service.embed_text(text).await?;
        let embed_time = start.elapsed();
        
        info!("  –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding: {}", embedding.len());
        info!("  –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {:?}", embed_time);
        info!("  –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {:?}", &embedding[..5.min(embedding.len())]);
    }

    Ok(())
}