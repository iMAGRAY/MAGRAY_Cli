use anyhow::Result;
use memory::{
    VectorIndexHnswReal, VectorIndexHnswSimple, VectorIndexHnswLib,
    HnswRealConfig, HnswSimpleConfig, HnswLibConfig
};
use std::time::Instant;

fn generate_test_vector(dim: usize, seed: f32) -> Vec<f32> {
    (0..dim).map(|i| ((i as f32 + seed) * 0.1).sin()).collect()
}

fn generate_dataset(count: usize, dim: usize) -> Vec<(String, Vec<f32>)> {
    (0..count)
        .map(|i| (format!("vec_{}", i), generate_test_vector(dim, i as f32)))
        .collect()
}

#[tokio::test]
async fn test_hnsw_comparison_small_dataset() -> Result<()> {
    println!("=== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ HNSW —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –Ω–∞ –º–∞–ª–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ (100 –≤–µ–∫—Ç–æ—Ä–æ–≤) ===\n");
    
    let dimension = 128;
    let dataset = generate_dataset(100, dimension);
    let query = generate_test_vector(dimension, 50.5);
    
    // –¢–µ—Å—Ç HnswReal (–ø—Ä–æ—Å—Ç–µ–π—à–∏–π)
    println!("üîµ –¢–µ—Å—Ç–∏—Ä—É–µ–º VectorIndexHnswReal (–ø—Ä–æ—Å—Ç–µ–π—à–∏–π):");
    let config_real = HnswRealConfig {
        dimension,
        ..Default::default()
    };
    let index_real = VectorIndexHnswReal::new(config_real);
    
    let start = Instant::now();
    index_real.add_batch(dataset.clone())?;
    let build_time_real = start.elapsed();
    
    let start = Instant::now();
    let results_real = index_real.search(&query, 10)?;
    let search_time_real = start.elapsed();
    
    let stats_real = index_real.stats();
    println!("  ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: {:?}", build_time_real);
    println!("  ‚úÖ –ü–æ–∏—Å–∫ top-10: {:?}", search_time_real);
    println!("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} –≤–µ–∫—Ç–æ—Ä–æ–≤, {:.2} Œºs —Å—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫", 
             stats_real.total_vectors, stats_real.avg_search_time_us);
    println!("  üìù –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", results_real.len());
    println!();
    
    // –¢–µ—Å—Ç HnswSimple (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏)
    println!("üü° –¢–µ—Å—Ç–∏—Ä—É–µ–º VectorIndexHnswSimple (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏):");
    let config_simple = HnswSimpleConfig {
        dimension,
        enable_caching: true,
        linear_search_threshold: 50,
        ..Default::default()
    };
    let index_simple = VectorIndexHnswSimple::new(config_simple);
    
    let start = Instant::now();
    index_simple.add_batch(dataset.clone())?;
    let build_time_simple = start.elapsed();
    
    let start = Instant::now();
    let results_simple = index_simple.search(&query, 10)?;
    let search_time_simple = start.elapsed();
    
    let stats_simple = index_simple.stats();
    println!("  ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: {:?}", build_time_simple);
    println!("  ‚úÖ –ü–æ–∏—Å–∫ top-10: {:?}", search_time_simple);
    println!("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} –≤–µ–∫—Ç–æ—Ä–æ–≤, {:.2} Œºs —Å—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫", 
             stats_simple.total_vectors, stats_simple.avg_search_time_us);
    println!("  üìù –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", results_simple.len());
    println!();
    
    // –¢–µ—Å—Ç HnswLib (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
    println!("üü¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º VectorIndexHnswLib (hnswlib-rs –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞):");
    let config_lib = HnswLibConfig {
        dimension,
        max_connections: 8,
        ef_construction: 100,
        ef_search: 50,
        max_elements: 1000,
        use_parallel: false, // –î–ª—è –º–∞–ª–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        ..Default::default()
    };
    let index_lib = VectorIndexHnswLib::new(config_lib)?;
    
    let start = Instant::now();
    index_lib.add_batch(dataset.clone())?;
    let build_time_lib = start.elapsed();
    
    let start = Instant::now();
    let results_lib = index_lib.search(&query, 10)?;
    let search_time_lib = start.elapsed();
    
    let stats_lib = index_lib.stats();
    println!("  ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: {:?}", build_time_lib);
    println!("  ‚úÖ –ü–æ–∏—Å–∫ top-10: {:?}", search_time_lib);
    println!("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("    - –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {}, —É–¥–∞–ª—ë–Ω–Ω—ã—Ö: {})", 
             stats_lib.total_elements, stats_lib.active_elements, stats_lib.deleted_elements);
    println!("    - –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {} (—Å—Ä–µ–¥–Ω–µ–µ: {:.1})", 
             stats_lib.total_connections, stats_lib.avg_connections);
    println!("    - –°—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫: {:.2} Œºs", stats_lib.avg_search_time_us);
    println!("    - –°—Ä–µ–¥–Ω—è—è –≤—Å—Ç–∞–≤–∫–∞: {:.2} Œºs", stats_lib.avg_add_time_us);
    println!("    - –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {}", stats_lib.total_searches);
    println!("    - –í—Å–µ–≥–æ –≤—Å—Ç–∞–≤–æ–∫: {}", stats_lib.total_additions);
    println!("  üìù –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", results_lib.len());
    println!();
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    println!("üìà –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:");
    println!("  –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞:");
    println!("    Real (–ª–∏–Ω–µ–π–Ω—ã–π): {:?}", build_time_real);
    println!("    Simple (–∫—ç—à+SIMD): {:?}", build_time_simple);
    println!("    HnswLib (–ø—Ä–æ—Ñ. –±–∏–±–ª–∏–æ—Ç–µ–∫–∞): {:?}", build_time_lib);
    println!();
    println!("  –ü–æ–∏—Å–∫:");
    println!("    Real (O(n)): {:?}", search_time_real);
    println!("    Simple (O(n)+–∫—ç—à): {:?}", search_time_simple);
    println!("    HnswLib (O(log n)): {:?}", search_time_lib);
    println!();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    println!("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´:");
    let lib_search_us = search_time_lib.as_micros();
    let real_search_us = search_time_real.as_micros();
    let simple_search_us = search_time_simple.as_micros();
    
    if lib_search_us < real_search_us && lib_search_us < simple_search_us {
        println!("  ‚úÖ HnswLib - –°–ê–ú–´–ô –ë–´–°–¢–†–´–ô –¥–ª—è –ø–æ–∏—Å–∫–∞!");
        println!("    –ë—ã—Å—Ç—Ä–µ–µ Real –≤ {:.1}x —Ä–∞–∑", real_search_us as f64 / lib_search_us as f64);
        println!("    –ë—ã—Å—Ç—Ä–µ–µ Simple –≤ {:.1}x —Ä–∞–∑", simple_search_us as f64 / lib_search_us as f64);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤—Å–µ –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    assert_eq!(results_real.len(), 10);
    assert_eq!(results_simple.len(), 10);
    assert_eq!(results_lib.len(), 10);
    
    Ok(())
}

#[tokio::test]
async fn test_hnsw_comparison_large_dataset() -> Result<()> {
    println!("=== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ HNSW —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –Ω–∞ –±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ (1000 –≤–µ–∫—Ç–æ—Ä–æ–≤) ===\n");
    
    let dimension = 512;
    let dataset = generate_dataset(1000, dimension);
    let query = generate_test_vector(dimension, 500.5);
    
    // –¢–µ—Å—Ç HnswReal
    println!("üîµ –¢–µ—Å—Ç–∏—Ä—É–µ–º VectorIndexHnswReal:");
    let config_real = HnswRealConfig {
        dimension,
        ..Default::default()
    };
    let index_real = VectorIndexHnswReal::new(config_real);
    
    let start = Instant::now();
    index_real.add_batch(dataset.clone())?;
    let build_time_real = start.elapsed();
    
    // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let mut total_search_time = std::time::Duration::ZERO;
    for i in 0..10 {
        let query_i = generate_test_vector(dimension, 500.0 + i as f32 * 0.1);
        let start = Instant::now();
        let _results = index_real.search(&query_i, 5)?;
        total_search_time += start.elapsed();
    }
    let avg_search_time_real = total_search_time / 10;
    
    println!("  ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: {:?}", build_time_real);
    println!("  ‚úÖ –°—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫ top-5: {:?}", avg_search_time_real);
    println!();
    
    // –¢–µ—Å—Ç HnswSimple
    println!("üü° –¢–µ—Å—Ç–∏—Ä—É–µ–º VectorIndexHnswSimple:");
    let config_simple = HnswSimpleConfig {
        dimension,
        enable_caching: true,
        linear_search_threshold: 500,
        ..Default::default()
    };
    let index_simple = VectorIndexHnswSimple::new(config_simple);
    
    let start = Instant::now();
    index_simple.add_batch(dataset.clone())?;
    let build_time_simple = start.elapsed();
    
    let mut total_search_time = std::time::Duration::ZERO;
    for i in 0..10 {
        let query_i = generate_test_vector(dimension, 500.0 + i as f32 * 0.1);
        let start = Instant::now();
        let _results = index_simple.search(&query_i, 5)?;
        total_search_time += start.elapsed();
    }
    let avg_search_time_simple = total_search_time / 10;
    
    println!("  ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: {:?}", build_time_simple);
    println!("  ‚úÖ –°—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫ top-5: {:?}", avg_search_time_simple);
    println!();
    
    // –¢–µ—Å—Ç HnswLib
    println!("üü¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º VectorIndexHnswLib:");
    let config_lib = HnswLibConfig {
        dimension,
        max_connections: 16,
        ef_construction: 200,
        ef_search: 100,
        max_elements: 2000,
        use_parallel: true,
        ..Default::default()
    };
    let index_lib = VectorIndexHnswLib::new(config_lib)?;
    
    let start = Instant::now();
    index_lib.add_batch(dataset.clone())?;
    let build_time_lib = start.elapsed();
    
    let mut total_search_time = std::time::Duration::ZERO;
    for i in 0..10 {
        let query_i = generate_test_vector(dimension, 500.0 + i as f32 * 0.1);
        let start = Instant::now();
        let _results = index_lib.search(&query_i, 5)?;
        total_search_time += start.elapsed();
    }
    let avg_search_time_lib = total_search_time / 10;
    
    let stats_lib = index_lib.stats();
    println!("  ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: {:?}", build_time_lib);
    println!("  ‚úÖ –°—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫ top-5: {:?}", avg_search_time_lib);
    println!("  üìä HnswLib —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:");
    println!("    - –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {})", stats_lib.total_elements, stats_lib.active_elements);
    println!("    - –°—Ä–µ–¥–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {:.1}", stats_lib.avg_connections);
    println!("    - –°—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫: {:.2} Œºs", stats_lib.avg_search_time_us);
    println!("    - –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {}", stats_lib.total_searches);
    println!();
    
    // –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    println!("üèÜ –ò–¢–û–ì–û–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï (1000 –≤–µ–∫—Ç–æ—Ä–æ–≤):");
    println!("  –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ:");
    println!("    Real (–ª–∏–Ω–µ–π–Ω—ã–π): {:?}", build_time_real);
    println!("    Simple (–∫—ç—à+SIMD): {:?}", build_time_simple);
    println!("    HnswLib (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π): {:?}", build_time_lib);
    println!();
    println!("  –ü–æ–∏—Å–∫:");
    println!("    Real (O(n)): {:?}", avg_search_time_real);
    println!("    Simple (O(n)+–∫—ç—à): {:?}", avg_search_time_simple);
    println!("    HnswLib (O(log n)): {:?}", avg_search_time_lib);
    println!();
    
    // –ù–∞ –±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ HnswLib –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
    println!("üí° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:");
    let real_search_ms = avg_search_time_real.as_micros() as f64 / 1000.0;
    let simple_search_ms = avg_search_time_simple.as_micros() as f64 / 1000.0;
    let lib_search_ms = avg_search_time_lib.as_micros() as f64 / 1000.0;
    
    println!("  Real: {:.2} ms –ø–æ–∏—Å–∫", real_search_ms);
    println!("  Simple: {:.2} ms –ø–æ–∏—Å–∫", simple_search_ms);
    println!("  HnswLib: {:.2} ms –ø–æ–∏—Å–∫", lib_search_ms);
    
    if lib_search_ms < real_search_ms {
        println!("  ‚úÖ HnswLib –±—ã—Å—Ç—Ä–µ–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ {:.1}x —Ä–∞–∑", 
                 real_search_ms / lib_search_ms);
    }
    
    if lib_search_ms < simple_search_ms {
        println!("  ‚úÖ HnswLib –±—ã—Å—Ç—Ä–µ–µ Simple –≤ {:.1}x —Ä–∞–∑", 
                 simple_search_ms / lib_search_ms);
    }
    
    Ok(())
}

#[tokio::test]
async fn test_hnsw_deletion_comparison() -> Result<()> {
    println!("=== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤ HNSW —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö ===\n");
    
    let dimension = 64;
    let dataset = generate_dataset(50, dimension);
    
    // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤ Real
    let index_real = VectorIndexHnswReal::new(HnswRealConfig {
        dimension,
        ..Default::default()
    });
    index_real.add_batch(dataset.clone())?;
    
    println!("üîµ VectorIndexHnswReal:");
    let before_stats = index_real.stats();
    println!("  –î–æ —É–¥–∞–ª–µ–Ω–∏—è: {} –≤–µ–∫—Ç–æ—Ä–æ–≤", before_stats.total_vectors);
    
    assert!(index_real.remove("vec_10"));
    assert!(index_real.remove("vec_20"));
    assert!(!index_real.remove("vec_999")); // –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    let after_stats = index_real.stats();
    println!("  –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {} –≤–µ–∫—Ç–æ—Ä–æ–≤", after_stats.total_vectors);
    println!("  ‚úÖ –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n");
    
    // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤ HnswLib
    let index_lib = VectorIndexHnswLib::new(HnswLibConfig {
        dimension,
        max_elements: 100,
        ..Default::default()
    })?;
    index_lib.add_batch(dataset.clone())?;
    
    println!("üü¢ VectorIndexHnswLib:");
    let before_stats = index_lib.stats();
    println!("  –î–æ —É–¥–∞–ª–µ–Ω–∏—è: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ({} –∞–∫—Ç–∏–≤–Ω—ã—Ö)", 
             before_stats.total_elements, before_stats.active_elements);
    
    assert!(index_lib.remove("vec_10"));
    assert!(index_lib.remove("vec_20"));
    assert!(!index_lib.remove("vec_999")); // –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    let after_stats = index_lib.stats();
    println!("  –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ({} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {} —É–¥–∞–ª—ë–Ω–Ω—ã—Ö)", 
             after_stats.total_elements, after_stats.active_elements, after_stats.deleted_elements);
    println!("  ‚úÖ –õ–æ–≥–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ
    let query = generate_test_vector(dimension, 10.0);
    let results = index_lib.search(&query, 50)?;
    
    for (id, _) in results {
        assert_ne!(id, "vec_10", "–£–¥–∞–ª—ë–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö");
        assert_ne!(id, "vec_20", "–£–¥–∞–ª—ë–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö");
    }
    println!("  ‚úÖ –£–¥–∞–ª—ë–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ\n");
    
    Ok(())
}