use anyhow::Result;
use memory::{
    VectorIndexHnswRs, HnswRsConfig
};
use std::time::Instant;

fn generate_test_vector(dim: usize, seed: f32) -> Vec<f32> {
    (0..dim).map(|i| ((i as f32 + seed) * 0.1).sin()).collect()
}

fn generate_dataset(count: usize, dim: usize) -> Vec<(String, Vec<f32>)> {
    (0..count)
        .map(|i| (format!("vec_{}", i), generate_test_vector(dim, i as f32)))
        .collect()
}

#[tokio::test]
async fn test_hnsw_performance() -> Result<()> {
    println!("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ HNSW –∏–Ω–¥–µ–∫—Å–∞ ===\n");
    
    let dimension = 1024;
    let dataset = generate_dataset(100, dimension);
    let query = generate_test_vector(dimension, 50.5);
    
    // –¢–µ—Å—Ç VectorIndexHnswRs —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    println!("üîµ –¢–µ—Å—Ç–∏—Ä—É–µ–º VectorIndexHnswRs (default config):");
    let config_default = HnswRsConfig::default();
    let index_default = VectorIndexHnswRs::new(config_default)?;
    
    let start = Instant::now();
    index_default.add_batch(dataset.clone())?;
    let build_time_default = start.elapsed();
    
    let start = Instant::now();
    let results_default = index_default.search(&query, 10)?;
    let search_time_default = start.elapsed();
    
    let stats_default = index_default.stats();
    println!("  ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: {:?}", build_time_default);
    println!("  ‚úÖ –ü–æ–∏—Å–∫ top-10: {:?}", search_time_default);
    println!("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} –≤–µ–∫—Ç–æ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {} KB", 
             stats_default.vector_count(), stats_default.memory_usage_kb());
    println!("  üìù –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", results_default.len());
    println!();
    
    // –¢–µ—Å—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    println!("üü° –¢–µ—Å—Ç–∏—Ä—É–µ–º VectorIndexHnswRs (optimized config):");
    let config_optimized = HnswRsConfig {
        max_elements: 10000,
        max_connections: 32,  // –ë–æ–ª—å—à–µ —Å–≤—è–∑–µ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        ef_construction: 400,  // –õ—É—á—à–µ —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ
        use_parallel: true,
        ..Default::default()
    };
    let index_optimized = VectorIndexHnswRs::new(config_optimized)?;
    
    let start = Instant::now();
    index_optimized.add_batch(dataset.clone())?;
    let build_time_optimized = start.elapsed();
    
    let start = Instant::now();
    let results_optimized = index_optimized.search(&query, 10)?;
    let search_time_optimized = start.elapsed();
    
    let stats_optimized = index_optimized.stats();
    println!("  ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: {:?}", build_time_optimized);
    println!("  ‚úÖ –ü–æ–∏—Å–∫ top-10: {:?}", search_time_optimized);
    println!("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} –≤–µ–∫—Ç–æ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {} KB", 
             stats_optimized.vector_count(), stats_optimized.memory_usage_kb());
    println!("  üìù –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", results_optimized.len());
    println!();
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    println!("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:");
    println!("  –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ: default {:?} vs optimized {:?} ({:.1}x)", 
             build_time_default, build_time_optimized,
             build_time_default.as_secs_f64() / build_time_optimized.as_secs_f64());
    println!("  –ü–æ–∏—Å–∫: default {:?} vs optimized {:?} ({:.1}x)", 
             search_time_default, search_time_optimized,
             search_time_default.as_secs_f64() / search_time_optimized.as_secs_f64());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let mut same_results = 0;
    for (i, (id_def, _)) in results_default.iter().enumerate() {
        if i < results_optimized.len() {
            let (id_opt, _) = &results_optimized[i];
            if id_def == id_opt {
                same_results += 1;
            }
        }
    }
    println!("  –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ top-10: {}/10 ({:.0}%)", same_results, same_results as f32 * 10.0);
    
    Ok(())
}

#[tokio::test]
async fn test_hnsw_large_dataset() -> Result<()> {
    println!("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HNSW –Ω–∞ –±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ (10K –≤–µ–∫—Ç–æ—Ä–æ–≤) ===\n");
    
    let dimension = 1024;  // –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    let dataset = generate_dataset(10_000, dimension);
    let queries: Vec<_> = (0..100).map(|i| generate_test_vector(dimension, i as f32 * 100.0)).collect();
    
    let config = HnswRsConfig {
        max_elements: 15000,
        max_connections: 16,
        ef_construction: 200,
        use_parallel: true,
        ..Default::default()
    };
    let index = VectorIndexHnswRs::new(config)?;
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
    let start = Instant::now();
    index.add_batch(dataset)?;
    let build_time = start.elapsed();
    println!("‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ 10K –≤–µ–∫—Ç–æ—Ä–æ–≤: {:?}", build_time);
    
    // Batch –ø–æ–∏—Å–∫
    let start = Instant::now();
    let mut total_results = 0;
    for query in &queries {
        let results = index.search(query, 10)?;
        total_results += results.len();
    }
    let search_time = start.elapsed();
    
    println!("‚úÖ –ü–æ–∏—Å–∫ 100 –∑–∞–ø—Ä–æ—Å–æ–≤: {:?} (—Å—Ä–µ–¥–Ω–∏–π: {:.2} ms)", 
             search_time, search_time.as_millis() as f64 / 100.0);
    println!("üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {}", total_results);
    
    let stats = index.stats();
    println!("üìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("  - –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {}", stats.vector_count());
    println!("  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {:.1} MB", stats.memory_usage_kb() as f64 / 1024.0);
    println!("  - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:.1} Œºs", 
             search_time.as_micros() as f64 / queries.len() as f64);
    
    Ok(())
}