use memory::{RetryManager, RetryConfig};
use anyhow::{anyhow, Result};
use std::time::{Duration, Instant};
use std::sync::Arc;
use std::sync::atomic::{AtomicUsize, Ordering};
use tokio::time::timeout;

/// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è retry —Å–∏—Å—Ç–µ–º—ã
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç: exponential backoff, jitter, retriable errors, configurations, performance

/// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è RetryConfig —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
#[test]
fn test_retry_config_creation() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ RetryConfig");
    
    // Default –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    let default_config = RetryConfig::default();
    assert_eq!(default_config.max_attempts, 3);
    assert_eq!(default_config.base_delay, Duration::from_millis(100));
    assert_eq!(default_config.max_delay, Duration::from_secs(5));
    assert_eq!(default_config.backoff_multiplier, 2.0);
    assert!(default_config.jitter);
    
    println!("  ‚úÖ Default: {} attempts, base={}ms, max={}s, multiplier={}, jitter={}", 
             default_config.max_attempts, 
             default_config.base_delay.as_millis(),
             default_config.max_delay.as_secs(),
             default_config.backoff_multiplier,
             default_config.jitter);
    
    // Custom –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    let custom_config = RetryConfig {
        max_attempts: 5,
        base_delay: Duration::from_millis(50),
        max_delay: Duration::from_secs(10),
        backoff_multiplier: 1.5,
        jitter: false,
    };
    
    assert_eq!(custom_config.max_attempts, 5);
    assert_eq!(custom_config.base_delay, Duration::from_millis(50));
    assert_eq!(custom_config.max_delay, Duration::from_secs(10));
    assert_eq!(custom_config.backoff_multiplier, 1.5);
    assert!(!custom_config.jitter);
    
    println!("  ‚úÖ Custom: {} attempts, no jitter, 1.5x multiplier", custom_config.max_attempts);
    
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ RetryConfig —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è RetryManager —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
#[test]
fn test_retry_manager_creation() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ RetryManager");
    
    // Default manager
    let _default_manager = RetryManager::with_defaults();
    println!("  ‚úÖ Default manager —Å–æ–∑–¥–∞–Ω");
    
    // Custom manager
    let custom_config = RetryConfig {
        max_attempts: 10,
        base_delay: Duration::from_millis(25),
        max_delay: Duration::from_secs(1),
        backoff_multiplier: 3.0,
        jitter: true,
    };
    
    let _custom_manager = RetryManager::new(custom_config);
    println!("  ‚úÖ Custom manager —Å–æ–∑–¥–∞–Ω");
    
    // Database manager
    let _db_manager = RetryManager::for_database();
    println!("  ‚úÖ Database manager —Å–æ–∑–¥–∞–Ω");
    
    // HNSW manager
    let _hnsw_manager = RetryManager::for_hnsw();
    println!("  ‚úÖ HNSW manager —Å–æ–∑–¥–∞–Ω");
    
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ RetryManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ retry
#[tokio::test]
async fn test_successful_operation_no_retry() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –±–µ–∑ retry");
    
    let manager = RetryManager::with_defaults();
    let attempt_count = Arc::new(AtomicUsize::new(0));
    let attempt_count_clone = Arc::clone(&attempt_count);
    
    let start_time = Instant::now();
    
    let result = manager.retry("successful_operation", || {
        let count_clone = Arc::clone(&attempt_count_clone);
        async move {
            count_clone.fetch_add(1, Ordering::SeqCst);
            Ok::<i32, anyhow::Error>(42)
        }
    }).await?;
    
    let elapsed = start_time.elapsed();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert_eq!(result, 42);
    assert_eq!(attempt_count.load(Ordering::SeqCst), 1);
    
    // –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫)
    assert!(elapsed < Duration::from_millis(10));
    
    println!("  ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ 1 –ø–æ–ø—ã—Ç–∫—É –∑–∞ {:?}", elapsed);
    
    println!("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å failure –∏ retry
#[tokio::test]
async fn test_operation_with_retries() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry –ø–æ—Å–ª–µ failures");
    
    let manager = RetryManager::new(RetryConfig {
        max_attempts: 3,
        base_delay: Duration::from_millis(10), // –ö–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        max_delay: Duration::from_millis(100),
        backoff_multiplier: 2.0,
        jitter: false, // –û—Ç–∫–ª—é—á–∞–µ–º jitter –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
    });
    
    let attempt_count = Arc::new(AtomicUsize::new(0));
    let attempt_count_clone = Arc::clone(&attempt_count);
    
    let start_time = Instant::now();
    
    let result = manager.retry("retry_operation", || {
        let count_clone = Arc::clone(&attempt_count_clone);
        async move {
            let current_attempt = count_clone.fetch_add(1, Ordering::SeqCst) + 1;
            
            if current_attempt < 3 {
                // –ü–µ—Ä–≤—ã–µ 2 –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
                Err(anyhow!("Attempt {} failed", current_attempt))
            } else {
                // 3-—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
                Ok::<String, anyhow::Error>(format!("Success on attempt {}", current_attempt))
            }
        }
    }).await?;
    
    let elapsed = start_time.elapsed();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert_eq!(result, "Success on attempt 3");
    assert_eq!(attempt_count.load(Ordering::SeqCst), 3);
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –∑–∞–¥–µ—Ä–∂–∫–∏ (10ms + 20ms)
    assert!(elapsed >= Duration::from_millis(25));
    
    println!("  ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –Ω–∞ 3-–π –ø–æ–ø—ã—Ç–∫–µ –∑–∞ {:?}", elapsed);
    
    println!("‚úÖ Retry –ø–æ—Å–ª–µ failures —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ failure –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
#[tokio::test]
async fn test_operation_complete_failure() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π failure –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫");
    
    let manager = RetryManager::new(RetryConfig {
        max_attempts: 2,
        base_delay: Duration::from_millis(5),
        max_delay: Duration::from_millis(50),
        backoff_multiplier: 2.0,
        jitter: false,
    });
    
    let attempt_count = Arc::new(AtomicUsize::new(0));
    let attempt_count_clone = Arc::clone(&attempt_count);
    
    let start_time = Instant::now();
    
    let result = manager.retry("failing_operation", || {
        let count_clone = Arc::clone(&attempt_count_clone);
        async move {
            let current_attempt = count_clone.fetch_add(1, Ordering::SeqCst) + 1;
            Err::<i32, anyhow::Error>(anyhow!("Always fails on attempt {}", current_attempt))
        }
    }).await;
    
    let elapsed = start_time.elapsed();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞
    assert!(result.is_err());
    assert_eq!(attempt_count.load(Ordering::SeqCst), 2);
    
    let error_msg = result.unwrap_err().to_string();
    assert!(error_msg.contains("failed after 2 attempts"));
    assert!(error_msg.contains("Always fails on attempt 2"));
    
    // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –∑–∞–¥–µ—Ä–∂–∫–∞ (5ms)
    assert!(elapsed >= Duration::from_millis(4));
    
    println!("  ‚úÖ –ü–æ–ª–Ω—ã–π failure –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ {:?}", 2, elapsed);
    println!("  ‚úÖ Error message: {}", error_msg);
    
    println!("‚úÖ –ü–æ–ª–Ω—ã–π failure –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç exponential backoff —Ä–∞—Å—á–µ—Ç–æ–≤
#[test]
fn test_exponential_backoff_calculation() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç—ã exponential backoff");
    
    let config = RetryConfig {
        max_attempts: 5,
        base_delay: Duration::from_millis(100),
        max_delay: Duration::from_secs(2),
        backoff_multiplier: 2.0,
        jitter: false, // –û—Ç–∫–ª—é—á–∞–µ–º jitter –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    };
    
    let manager = RetryManager::new(config);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    let delay1 = manager.calculate_delay(1);
    let delay2 = manager.calculate_delay(2);
    let delay3 = manager.calculate_delay(3);
    let delay4 = manager.calculate_delay(4);
    let delay5 = manager.calculate_delay(5);
    
    // Exponential backoff: 100ms * 2^(attempt-1)
    assert_eq!(delay1, Duration::from_millis(100));  // 100ms * 2^0 = 100ms
    assert_eq!(delay2, Duration::from_millis(200));  // 100ms * 2^1 = 200ms
    assert_eq!(delay3, Duration::from_millis(400));  // 100ms * 2^2 = 400ms
    assert_eq!(delay4, Duration::from_millis(800));  // 100ms * 2^3 = 800ms
    assert_eq!(delay5, Duration::from_millis(1600)); // 100ms * 2^4 = 1600ms
    
    println!("  ‚úÖ Exponential backoff: {}ms -> {}ms -> {}ms -> {}ms -> {}ms", 
             delay1.as_millis(), delay2.as_millis(), delay3.as_millis(), 
             delay4.as_millis(), delay5.as_millis());
    
    // –¢–µ—Å—Ç capping —Å max_delay
    let config_capped = RetryConfig {
        max_attempts: 5,
        base_delay: Duration::from_millis(100),
        max_delay: Duration::from_millis(300), // –ù–∏–∑–∫–∏–π –ª–∏–º–∏—Ç
        backoff_multiplier: 2.0,
        jitter: false,
    };
    
    let manager_capped = RetryManager::new(config_capped);
    let delay_capped3 = manager_capped.calculate_delay(3);
    let delay_capped4 = manager_capped.calculate_delay(4);
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã max_delay
    assert_eq!(delay_capped3, Duration::from_millis(300)); // Capped at 300ms instead of 400ms
    assert_eq!(delay_capped4, Duration::from_millis(300)); // Capped at 300ms instead of 800ms
    
    println!("  ‚úÖ Max delay capping: {}ms –∏ {}ms capped at 300ms", 
             delay_capped3.as_millis(), delay_capped4.as_millis());
    
    println!("‚úÖ Exponential backoff —Ä–∞—Å—á–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç jitter functionality
#[test]
fn test_jitter_functionality() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º jitter functionality");
    
    let config_with_jitter = RetryConfig {
        max_attempts: 3,
        base_delay: Duration::from_millis(100),
        max_delay: Duration::from_secs(1),
        backoff_multiplier: 2.0,
        jitter: true,
    };
    
    let config_without_jitter = RetryConfig {
        max_attempts: 3,
        base_delay: Duration::from_millis(100),
        max_delay: Duration::from_secs(1),
        backoff_multiplier: 2.0,
        jitter: false,
    };
    
    let manager_with_jitter = RetryManager::new(config_with_jitter);
    let manager_without_jitter = RetryManager::new(config_without_jitter);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–µ—Ä–∂–µ–∫ —Å jitter
    let mut jitter_delays = Vec::new();
    for _ in 0..10 {
        jitter_delays.push(manager_with_jitter.calculate_delay(2));
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –±–µ–∑ jitter
    let mut no_jitter_delays = Vec::new();
    for _ in 0..10 {
        no_jitter_delays.push(manager_without_jitter.calculate_delay(2));
    }
    
    // –ë–µ–∑ jitter –≤—Å–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
    assert!(no_jitter_delays.iter().all(|&d| d == Duration::from_millis(200)));
    
    // –° jitter –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ–ª–∂–Ω—ã –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è
    let unique_jitter_delays: std::collections::HashSet<_> = jitter_delays.iter().collect();
    assert!(unique_jitter_delays.len() > 1, "Jitter –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏");
    
    // –í—Å–µ jitter –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (200ms ¬± 25%)
    for delay in &jitter_delays {
        let delay_ms = delay.as_millis();
        assert!(delay_ms >= 150 && delay_ms <= 250, 
                "Jitter delay {}ms –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 150-250ms", delay_ms);
    }
    
    println!("  ‚úÖ –ë–µ–∑ jitter: –≤—Å–µ –∑–∞–¥–µ—Ä–∂–∫–∏ {}ms", no_jitter_delays[0].as_millis());
    println!("  ‚úÖ –° jitter: {} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 150-250ms", unique_jitter_delays.len());
    
    println!("‚úÖ Jitter functionality —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è retriable errors
#[test]
fn test_retriable_error_detection() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ retriable errors");
    
    // Retriable errors
    let retriable_errors = vec![
        anyhow!("Database lock error occurred"),
        anyhow!("Resource is busy, try again"),
        anyhow!("I/O error: connection timeout"),
        anyhow!("Connection failed temporarily"),
        anyhow!("HNSW –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"),
        anyhow!("HNSW not initialized yet"),
        anyhow!("Resource temporarily unavailable"),
        anyhow!("Lock acquisition failed"),
    ];
    
    for (i, error) in retriable_errors.iter().enumerate() {
        assert!(RetryManager::is_retriable_error(error), 
                "Error {} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å retriable: {}", i, error);
    }
    
    println!("  ‚úÖ Retriable errors: {} —Ç–∏–ø–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", retriable_errors.len());
    
    // Non-retriable errors
    let non_retriable_errors = vec![
        anyhow!("Invalid argument provided"),
        anyhow!("File not found"),
        anyhow!("Permission denied"),
        anyhow!("Syntax error in query"),
        anyhow!("Out of memory"),
        anyhow!("Invalid configuration"),
    ];
    
    for (i, error) in non_retriable_errors.iter().enumerate() {
        assert!(!RetryManager::is_retriable_error(error), 
                "Error {} –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å retriable: {}", i, error);
    }
    
    println!("  ‚úÖ Non-retriable errors: {} —Ç–∏–ø–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", non_retriable_errors.len());
    
    println!("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ retriable errors —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
#[tokio::test]
async fn test_preset_configurations() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    
    // Database retry manager
    let db_manager = RetryManager::for_database();
    let db_attempt_count = Arc::new(AtomicUsize::new(0));
    let db_count_clone = Arc::clone(&db_attempt_count);
    
    let db_result = db_manager.retry("db_operation", || {
        let count_clone = Arc::clone(&db_count_clone);
        async move {
            let current_attempt = count_clone.fetch_add(1, Ordering::SeqCst) + 1;
            if current_attempt < 3 {
                Err(anyhow!("Database lock error occurred"))
            } else {
                Ok::<String, anyhow::Error>("DB success".to_string())
            }
        }
    }).await?;
    
    assert_eq!(db_result, "DB success");
    assert_eq!(db_attempt_count.load(Ordering::SeqCst), 3);
    println!("  ‚úÖ Database manager: —É—Å–ø–µ—Ö –Ω–∞ 3-–π –ø–æ–ø—ã—Ç–∫–µ");
    
    // HNSW retry manager
    let hnsw_manager = RetryManager::for_hnsw();
    let hnsw_attempt_count = Arc::new(AtomicUsize::new(0));
    let hnsw_count_clone = Arc::clone(&hnsw_attempt_count);
    
    let hnsw_result = hnsw_manager.retry("hnsw_operation", || {
        let count_clone = Arc::clone(&hnsw_count_clone);
        async move {
            let current_attempt = count_clone.fetch_add(1, Ordering::SeqCst) + 1;
            if current_attempt < 2 {
                Err(anyhow!("HNSW not initialized yet"))
            } else {
                Ok::<i32, anyhow::Error>(123)
            }
        }
    }).await?;
    
    assert_eq!(hnsw_result, 123);
    assert_eq!(hnsw_attempt_count.load(Ordering::SeqCst), 2);
    println!("  ‚úÖ HNSW manager: —É—Å–ø–µ—Ö –Ω–∞ 2-–π –ø–æ–ø—ã—Ç–∫–µ");
    
    println!("‚úÖ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç timeout –ø–æ–≤–µ–¥–µ–Ω–∏—è
#[tokio::test]
async fn test_retry_timeout_behavior() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ retry —Å timeout");
    
    let manager = RetryManager::new(RetryConfig {
        max_attempts: 10, // –ú–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫
        base_delay: Duration::from_millis(100),
        max_delay: Duration::from_secs(1),
        backoff_multiplier: 2.0,
        jitter: false,
    });
    
    let attempt_count = Arc::new(AtomicUsize::new(0));
    let attempt_count_clone = Arc::clone(&attempt_count);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π timeout –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é
    let result = timeout(Duration::from_millis(250), 
        manager.retry("timeout_operation", || {
            let count_clone = Arc::clone(&attempt_count_clone);
            async move {
                count_clone.fetch_add(1, Ordering::SeqCst);
                Err::<i32, anyhow::Error>(anyhow!("Always fails"))
            }
        })
    ).await;
    
    // Timeout –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
    assert!(result.is_err());
    
    // –î–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑-–∑–∞ timeout
    let attempts = attempt_count.load(Ordering::SeqCst);
    assert!(attempts >= 1 && attempts < 10, "–û–∂–∏–¥–∞–µ—Ç—Å—è 1-9 –ø–æ–ø—ã—Ç–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ {}", attempts);
    
    println!("  ‚úÖ Timeout —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫", attempts);
    
    println!("‚úÖ Retry timeout –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç edge cases
#[tokio::test]
async fn test_retry_edge_cases() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases –¥–ª—è retry");
    
    // –¢–µ—Å—Ç —Å max_attempts = 1 (no retry)
    let single_attempt_manager = RetryManager::new(RetryConfig {
        max_attempts: 1,
        base_delay: Duration::from_millis(100),
        max_delay: Duration::from_secs(1),
        backoff_multiplier: 2.0,
        jitter: false,
    });
    
    let result = single_attempt_manager.retry("single_attempt", || async {
        Err::<i32, anyhow::Error>(anyhow!("Single failure"))
    }).await;
    
    assert!(result.is_err());
    assert!(result.unwrap_err().to_string().contains("failed after 1 attempts"));
    println!("  ‚úÖ Single attempt (no retry) —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    
    // –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –º–∞–ª–æ–π base_delay
    let fast_manager = RetryManager::new(RetryConfig {
        max_attempts: 3,
        base_delay: Duration::from_nanos(1),
        max_delay: Duration::from_millis(1),
        backoff_multiplier: 2.0,
        jitter: false,
    });
    
    let fast_attempt_count = Arc::new(AtomicUsize::new(0));
    let fast_count_clone = Arc::clone(&fast_attempt_count);
    
    let start_time = Instant::now();
    let result = fast_manager.retry("fast_operation", || {
        let count_clone = Arc::clone(&fast_count_clone);
        async move {
            let current_attempt = count_clone.fetch_add(1, Ordering::SeqCst) + 1;
            if current_attempt < 3 {
                Err(anyhow!("Fast failure"))
            } else {
                Ok::<String, anyhow::Error>("Fast success".to_string())
            }
        }
    }).await?;
    let elapsed = start_time.elapsed();
    
    assert_eq!(result, "Fast success");
    assert!(elapsed < Duration::from_millis(50)); // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ª–∏–º–∏—Ç
    println!("  ‚úÖ Fast retry (nanosecond delays) –∑–∞ {:?}", elapsed);
    
    // –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º backoff_multiplier
    let big_multiplier_manager = RetryManager::new(RetryConfig {
        max_attempts: 3,
        base_delay: Duration::from_millis(1),
        max_delay: Duration::from_millis(5), // –ù–∏–∑–∫–∏–π –ª–∏–º–∏—Ç –¥–ª—è capping
        backoff_multiplier: 100.0,
        jitter: false,
    });
    
    let delay1 = big_multiplier_manager.calculate_delay(1);
    let delay2 = big_multiplier_manager.calculate_delay(2);
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å capped
    assert_eq!(delay1, Duration::from_millis(1));
    assert_eq!(delay2, Duration::from_millis(5)); // Capped at max_delay
    
    println!("  ‚úÖ Large multiplier capping: {}ms -> {}ms", delay1.as_millis(), delay2.as_millis());
    
    println!("‚úÖ Edge cases –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// Performance test –¥–ª—è retry –æ–ø–µ—Ä–∞—Ü–∏–π
#[tokio::test]
async fn test_retry_performance() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å retry –æ–ø–µ—Ä–∞—Ü–∏–π");
    
    let manager = RetryManager::new(RetryConfig {
        max_attempts: 2,
        base_delay: Duration::from_nanos(1), // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        max_delay: Duration::from_millis(1),
        backoff_multiplier: 1.1,
        jitter: false,
    });
    
    let start_time = Instant::now();
    
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    for i in 0..1000 {
        let _result = manager.retry("perf_operation", || async move {
            if i % 100 == 0 {
                // –ö–∞–∂–¥–∞—è 100-—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç retry)
                Err::<i32, anyhow::Error>(anyhow!("Occasional failure"))
            } else {
                Ok::<i32, anyhow::Error>(i)
            }
        }).await;
        
        // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
        if i % 100 != 0 {
            assert!(_result.is_ok());
        }
    }
    
    let elapsed = start_time.elapsed();
    println!("  üìä 1000 –æ–ø–µ—Ä–∞—Ü–∏–π (—Å 10 retries) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {:?}", elapsed);
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è CI
    assert!(elapsed < Duration::from_millis(500));
    
    println!("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å retry –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç–ª–∏—á–Ω–∞—è");
    Ok(())
}

/// Integration test –≤—Å–µ–π retry —Å–∏—Å—Ç–µ–º—ã
#[tokio::test]
async fn test_retry_system_integration() -> Result<()> {
    println!("üß™ Integration test retry —Å–∏—Å—Ç–µ–º—ã");
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: Database –æ–ø–µ—Ä–∞—Ü–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ retries
    let db_manager = RetryManager::for_database();
    let db_attempts = Arc::new(AtomicUsize::new(0));
    let db_attempts_clone = Arc::clone(&db_attempts);
    
    let db_result = db_manager.retry("database_integration", || {
        let attempts_clone = Arc::clone(&db_attempts_clone);
        async move {
            let attempt = attempts_clone.fetch_add(1, Ordering::SeqCst) + 1;
            
            match attempt {
                1 => Err(anyhow!("Database lock error occurred")),
                2 => Err(anyhow!("Connection failed temporarily")), 
                3 => Ok::<String, anyhow::Error>("Database operation success".to_string()),
                _ => panic!("Too many attempts")
            }
        }
    }).await?;
    
    assert_eq!(db_result, "Database operation success");
    assert_eq!(db_attempts.load(Ordering::SeqCst), 3);
    println!("  ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 1: Database –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –Ω–∞ 3-–π –ø–æ–ø—ã—Ç–∫–µ");
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: HNSW –æ–ø–µ—Ä–∞—Ü–∏—è —Å –±—ã—Å—Ç—Ä—ã–º recovery
    let hnsw_manager = RetryManager::for_hnsw();
    let hnsw_attempts = Arc::new(AtomicUsize::new(0));
    let hnsw_attempts_clone = Arc::clone(&hnsw_attempts);
    
    let hnsw_result = hnsw_manager.retry("hnsw_integration", || {
        let attempts_clone = Arc::clone(&hnsw_attempts_clone);
        async move {
            let attempt = attempts_clone.fetch_add(1, Ordering::SeqCst) + 1;
            
            if attempt == 1 {
                Err(anyhow!("HNSW –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"))
            } else {
                Ok::<Vec<f32>, anyhow::Error>(vec![0.1, 0.2, 0.3])
            }
        }
    }).await?;
    
    assert_eq!(hnsw_result, vec![0.1, 0.2, 0.3]);
    assert_eq!(hnsw_attempts.load(Ordering::SeqCst), 2);
    println!("  ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 2: HNSW –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –Ω–∞ 2-–π –ø–æ–ø—ã—Ç–∫–µ");
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 3: Non-retriable error (immediate failure)
    let manager = RetryManager::with_defaults();
    let non_retriable_attempts = Arc::new(AtomicUsize::new(0));
    let non_retriable_attempts_clone = Arc::clone(&non_retriable_attempts);
    
    let non_retriable_result = manager.retry("non_retriable_integration", || {
        let attempts_clone = Arc::clone(&non_retriable_attempts_clone);
        async move {
            attempts_clone.fetch_add(1, Ordering::SeqCst);
            Err::<i32, anyhow::Error>(anyhow!("Permission denied"))
        }
    }).await;
    
    assert!(non_retriable_result.is_err());
    assert_eq!(non_retriable_attempts.load(Ordering::SeqCst), 3); // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
    println!("  ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 3: Non-retriable error after –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏");
    
    println!("‚úÖ Integration test retry —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–µ–Ω");
    Ok(())
}

/// Quick smoke test –¥–ª—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
#[tokio::test]
async fn test_retry_smoke() -> Result<()> {
    // Test config creation
    let _config = RetryConfig::default();
    
    // Test manager creation
    let manager = RetryManager::with_defaults();
    let _db_manager = RetryManager::for_database();
    let _hnsw_manager = RetryManager::for_hnsw();
    
    // Test successful operation
    let result = manager.retry("smoke_test", || async {
        Ok::<i32, anyhow::Error>(42)
    }).await?;
    assert_eq!(result, 42);
    
    // Test error detection
    let error = anyhow!("Database lock error occurred");
    assert!(RetryManager::is_retriable_error(&error));
    
    println!("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ retry —Ä–∞–±–æ—Ç–∞—é—Ç");
    Ok(())
}