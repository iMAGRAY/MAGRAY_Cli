use anyhow::Result;
use memory::{
    NotificationConfig, NotificationChannel, NotificationManager,
    health::{HealthAlert, AlertSeverity, ComponentType},
};
use std::collections::HashMap;
use chrono::Utc;
use std::time::Duration;
use tokio::time::sleep;
use serde_json;

/// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è notification —Å–∏—Å—Ç–µ–º—ã
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç: channels, routing, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞, cooldown, —Ñ–∏–ª—å—Ç—Ä—ã, –æ—Ç–ø—Ä–∞–≤–∫–∞

/// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#[test]
fn test_notification_config_creation() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    
    // Default –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    let default_config = NotificationConfig::default();
    assert_eq!(default_config.channels.len(), 2); // Log + Console
    assert!(default_config.enable_grouping);
    assert_eq!(default_config.cooldown_seconds, 300);
    assert_eq!(default_config.max_group_size, 10);
    assert_eq!(default_config.group_interval_seconds, 60);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º routing
    assert!(default_config.routing.contains_key(&AlertSeverity::Info));
    assert!(default_config.routing.contains_key(&AlertSeverity::Warning));
    assert!(default_config.routing.contains_key(&AlertSeverity::Critical));
    assert!(default_config.routing.contains_key(&AlertSeverity::Fatal));
    
    let fatal_channels = default_config.routing.get(&AlertSeverity::Fatal).unwrap();
    assert_eq!(fatal_channels, &vec!["*".to_string()]); // All channels
    
    println!("  ‚úÖ Default: {} channels, grouping={}, cooldown={}s", 
             default_config.channels.len(), 
             default_config.enable_grouping,
             default_config.cooldown_seconds);
    
    // Custom –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    let mut custom_routing = HashMap::new();
    custom_routing.insert(AlertSeverity::Critical, vec!["slack".to_string(), "webhook".to_string()]);
    
    let custom_config = NotificationConfig {
        channels: vec![
            NotificationChannel::Console { colored: false },
            NotificationChannel::Slack {
                webhook_url: "https://hooks.slack.com/test".to_string(),
                channel: Some("#alerts".to_string()),
                mention_users: vec!["@user1".to_string()],
            },
            NotificationChannel::Webhook {
                url: "https://api.example.com/alerts".to_string(),
                method: "POST".to_string(),
                headers: {
                    let mut h = HashMap::new();
                    h.insert("Content-Type".to_string(), "application/json".to_string());
                    h
                },
                auth_token: Some("secret".to_string()),
            },
        ],
        routing: custom_routing,
        cooldown_seconds: 60,
        enable_grouping: false,
        max_group_size: 5,
        group_interval_seconds: 30,
        component_filters: Some(vec!["VectorStore".to_string()]),
        ignore_patterns: vec!["test".to_string(), "debug".to_string()],
    };
    
    assert_eq!(custom_config.channels.len(), 3);
    assert!(!custom_config.enable_grouping);
    assert_eq!(custom_config.cooldown_seconds, 60);
    assert_eq!(custom_config.component_filters.as_ref().unwrap().len(), 1);
    assert_eq!(custom_config.ignore_patterns.len(), 2);
    
    println!("  ‚úÖ Custom: {} channels, no grouping, {} filters", 
             custom_config.channels.len(),
             custom_config.ignore_patterns.len());
    
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#[test]
fn test_config_serialization() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    
    let config = NotificationConfig::default();
    
    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
    let json = serde_json::to_string_pretty(&config).expect("Failed to serialize");
    println!("  üìÑ JSON representation length: {} bytes", json.len());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ JSON —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è
    assert!(json.contains("channels"));
    assert!(json.contains("routing"));
    assert!(json.contains("cooldown_seconds"));
    assert!(json.contains("enable_grouping"));
    
    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    let deserialized: NotificationConfig = serde_json::from_str(&json).expect("Failed to deserialize");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç
    assert_eq!(deserialized.channels.len(), config.channels.len());
    assert_eq!(deserialized.enable_grouping, config.enable_grouping);
    assert_eq!(deserialized.cooldown_seconds, config.cooldown_seconds);
    assert_eq!(deserialized.max_group_size, config.max_group_size);
    
    println!("  ‚úÖ Round-trip: {} channels, grouping={}", 
             deserialized.channels.len(), deserialized.enable_grouping);
    
    println!("‚úÖ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
fn create_test_alert(severity: AlertSeverity, title: &str, description: &str) -> HealthAlert {
    let severity_id = severity.clone() as u8;
    HealthAlert {
        id: format!("test-{}-{}", severity_id, rand::random::<u32>()),
        component: ComponentType::VectorStore,
        severity,
        title: title.to_string(),
        description: description.to_string(),
        metric_value: Some(85.0),
        threshold: Some(80.0),
        timestamp: Utc::now(),
        resolved: false,
        resolved_at: None,
    }
}

/// –¢–µ—Å—Ç notification manager —Å–æ–∑–¥–∞–Ω–∏—è –∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
#[tokio::test]
async fn test_notification_manager_creation() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ notification manager");
    
    // –°–æ–∑–¥–∞–µ–º —Å default –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    let default_config = NotificationConfig::default();
    let manager = NotificationManager::new(default_config)?;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–ª–µ—Ä—Ç–∞
    let alert = create_test_alert(AlertSeverity::Info, "Test Alert", "This is a test");
    let result = manager.handle_alert(alert).await;
    assert!(result.is_ok());
    
    println!("  ‚úÖ Default manager —Å–æ–∑–¥–∞–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç");
    
    // –°–æ–∑–¥–∞–µ–º —Å custom –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ console)
    let mut custom_config = NotificationConfig::default();
    custom_config.channels = vec![NotificationChannel::Console { colored: false }];
    custom_config.enable_grouping = false;
    
    let custom_manager = NotificationManager::new(custom_config)?;
    let alert2 = create_test_alert(AlertSeverity::Warning, "Warning Test", "Custom manager test");
    let result2 = custom_manager.handle_alert(alert2).await;
    assert!(result2.is_ok());
    
    println!("  ‚úÖ Custom manager —Å–æ–∑–¥–∞–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç");
    
    println!("‚úÖ Notification manager —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
#[tokio::test]
async fn test_alert_filtering() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∞–ª–µ—Ä—Ç–æ–≤");
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    let mut config = NotificationConfig::default();
    config.component_filters = Some(vec!["Cache".to_string()]);
    config.ignore_patterns = vec!["ignore_me".to_string(), "test_pattern".to_string()];
    config.channels = vec![NotificationChannel::Console { colored: false }];
    
    let manager = NotificationManager::new(config)?;
    
    // –¢–µ—Å—Ç 1: –ê–ª–µ—Ä—Ç –æ—Ç VectorStore (–Ω–µ –≤ —Ñ–∏–ª—å—Ç—Ä–µ) - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω
    let alert1 = HealthAlert {
        id: "filter-test-1".to_string(),
        component: ComponentType::VectorStore,
        severity: AlertSeverity::Warning,
        title: "VectorStore Alert".to_string(),
        description: "This should be filtered out".to_string(),
        metric_value: None,
        threshold: None,
        timestamp: Utc::now(),
        resolved: false,
        resolved_at: None,
    };
    
    let result1 = manager.handle_alert(alert1).await;
    assert!(result1.is_ok());
    println!("  ‚úÖ VectorStore –∞–ª–µ—Ä—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω (component filter)");
    
    // –¢–µ—Å—Ç 2: –ê–ª–µ—Ä—Ç —Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
    let alert2 = HealthAlert {
        id: "filter-test-2".to_string(),
        component: ComponentType::Cache,
        severity: AlertSeverity::Critical,
        title: "Cache Alert".to_string(),
        description: "This contains ignore_me pattern".to_string(),
        metric_value: None,
        threshold: None,
        timestamp: Utc::now(),
        resolved: false,
        resolved_at: None,
    };
    
    let result2 = manager.handle_alert(alert2).await;
    assert!(result2.is_ok());
    println!("  ‚úÖ –ê–ª–µ—Ä—Ç —Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω");
    
    // –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–Ω—ã–π –∞–ª–µ—Ä—Ç (Cache –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –±–µ–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
    let alert3 = HealthAlert {
        id: "filter-test-3".to_string(),
        component: ComponentType::Cache,
        severity: AlertSeverity::Info,
        title: "Valid Cache Alert".to_string(),
        description: "This should go through".to_string(),
        metric_value: None,
        threshold: None,
        timestamp: Utc::now(),
        resolved: false,
        resolved_at: None,
    };
    
    let result3 = manager.handle_alert(alert3).await;
    assert!(result3.is_ok());
    println!("  ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –∞–ª–µ—Ä—Ç –ø—Ä–æ—à–µ–ª —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã");
    
    println!("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ cooldown
#[tokio::test]
async fn test_cooldown_mechanism() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º cooldown");
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º cooldown –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let mut config = NotificationConfig::default();
    config.cooldown_seconds = 1; // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    config.channels = vec![NotificationChannel::Console { colored: false }];
    config.enable_grouping = false; // –û—Ç–∫–ª—é—á–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞ cooldown
    
    let manager = NotificationManager::new(config)?;
    
    // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
    let alert1 = create_test_alert(AlertSeverity::Warning, "Cooldown Test", "First alert");
    let alert2 = create_test_alert(AlertSeverity::Warning, "Cooldown Test", "Second alert (should be cooled down)");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞–ª–µ—Ä—Ç
    let result1 = manager.handle_alert(alert1).await;
    assert!(result1.is_ok());
    println!("  ‚úÖ –ü–µ—Ä–≤—ã–π –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
    
    // –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ cooldown)
    let result2 = manager.handle_alert(alert2).await;
    assert!(result2.is_ok()); // –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
    println!("  ‚úÖ –í—Ç–æ—Ä–æ–π –∞–ª–µ—Ä—Ç –≤ cooldown (–ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω)");
    
    // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è cooldown
    sleep(Duration::from_millis(1100)).await;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –∞–ª–µ—Ä—Ç (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏)
    let alert3 = create_test_alert(AlertSeverity::Warning, "Cooldown Test", "Third alert (after cooldown)");
    let result3 = manager.handle_alert(alert3).await;
    assert!(result3.is_ok());
    println!("  ‚úÖ –¢—Ä–µ—Ç–∏–π –∞–ª–µ—Ä—Ç –ø–æ—Å–ª–µ cooldown –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
    
    println!("‚úÖ –ú–µ—Ö–∞–Ω–∏–∑–º cooldown —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
#[tokio::test]
async fn test_alert_grouping() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –∞–ª–µ—Ä—Ç–æ–≤");
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    let mut config = NotificationConfig::default();
    config.enable_grouping = true;
    config.max_group_size = 3; // –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    config.group_interval_seconds = 1; // –ö–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    config.channels = vec![NotificationChannel::Console { colored: false }];
    config.cooldown_seconds = 0; // –û—Ç–∫–ª—é—á–∞–µ–º cooldown –¥–ª—è —Ç–µ—Å—Ç–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    
    let manager = NotificationManager::new(config)?;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã (–Ω–µ Fatal - –æ–Ω–∏ –Ω–µ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è)
    for i in 0..5 {
        let alert = create_test_alert(
            AlertSeverity::Warning, 
            &format!("Group Test {}", i), 
            &format!("Alert {} for grouping", i)
        );
        let result = manager.handle_alert(alert).await;
        assert!(result.is_ok());
    }
    
    println!("  ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 5 –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏");
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã
    sleep(Duration::from_millis(1200)).await;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Fatal –∞–ª–µ—Ä—Ç (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ —Å—Ä–∞–∑—É)
    let fatal_alert = create_test_alert(AlertSeverity::Fatal, "Fatal Alert", "This should not be grouped");
    let result = manager.handle_alert(fatal_alert).await;
    assert!(result.is_ok());
    
    println!("  ‚úÖ Fatal –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–Ω–µ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç—Å—è)");
    
    println!("‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö severity routing
#[tokio::test]
async fn test_severity_routing() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –ø–æ severity");
    
    // –°–æ–∑–¥–∞–µ–º custom routing
    let mut routing = HashMap::new();
    routing.insert(AlertSeverity::Info, vec!["log".to_string()]);
    routing.insert(AlertSeverity::Warning, vec!["log".to_string(), "console".to_string()]);
    routing.insert(AlertSeverity::Critical, vec!["*".to_string()]); // All channels
    routing.insert(AlertSeverity::Fatal, vec!["*".to_string()]);
    
    let config = NotificationConfig {
        channels: vec![
            NotificationChannel::Log,
            NotificationChannel::Console { colored: false },
        ],
        routing,
        cooldown_seconds: 0,
        enable_grouping: false,
        max_group_size: 10,
        group_interval_seconds: 60,
        component_filters: None,
        ignore_patterns: vec![],
    };
    
    let manager = NotificationManager::new(config)?;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å severity
    let severities = [
        (AlertSeverity::Info, "Info Alert"),
        (AlertSeverity::Warning, "Warning Alert"),
        (AlertSeverity::Critical, "Critical Alert"),
        (AlertSeverity::Fatal, "Fatal Alert"),
    ];
    
    for (severity, title) in severities {
        let alert = create_test_alert(severity, title, &format!("Testing {} routing", title));
        let result = manager.handle_alert(alert).await;
        assert!(result.is_ok());
        println!("  ‚úÖ {} –∞–ª–µ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ routing", title);
    }
    
    println!("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ severity —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#[tokio::test]
async fn test_notification_channels() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
    let config = NotificationConfig {
        channels: vec![
            NotificationChannel::Console { colored: true },
            NotificationChannel::Console { colored: false }, // –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω
            NotificationChannel::Log,
        ],
        routing: {
            let mut r = HashMap::new();
            r.insert(AlertSeverity::Info, vec!["console".to_string(), "log".to_string()]);
            r
        },
        cooldown_seconds: 0,
        enable_grouping: false,
        max_group_size: 10,
        group_interval_seconds: 60,
        component_filters: None,
        ignore_patterns: vec![],
    };
    
    let manager = NotificationManager::new(config)?;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    let alert = create_test_alert(AlertSeverity::Info, "Multi-Channel Test", "Testing multiple channels");
    let result = manager.handle_alert(alert).await;
    assert!(result.is_ok());
    
    println!("  ‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ console –∏ log –∫–∞–Ω–∞–ª—ã");
    
    println!("‚úÖ –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è manager
#[tokio::test]
async fn test_manager_cloning() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ notification manager");
    
    let config = NotificationConfig::default();
    let original_manager = NotificationManager::new(config)?;
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º manager
    let cloned_manager = original_manager.clone();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –∫–ª–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
    let alert = create_test_alert(AlertSeverity::Info, "Clone Test", "Testing cloned manager");
    let result = cloned_manager.handle_alert(alert).await;
    assert!(result.is_ok());
    
    println!("  ‚úÖ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π manager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ original —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    let alert2 = create_test_alert(AlertSeverity::Warning, "Original Test", "Testing original manager");
    let result2 = original_manager.handle_alert(alert2).await;
    assert!(result2.is_ok());
    
    println!("  ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π manager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    
    println!("‚úÖ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ manager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç edge cases –∏ error handling
#[tokio::test] 
async fn test_edge_cases() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases");
    
    // –ü—É—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    let empty_config = NotificationConfig {
        channels: vec![],
        routing: HashMap::new(),
        cooldown_seconds: 0,
        enable_grouping: false,
        max_group_size: 0,
        group_interval_seconds: 1,
        component_filters: None,
        ignore_patterns: vec![],
    };
    
    let empty_manager = NotificationManager::new(empty_config)?;
    
    // –ê–ª–µ—Ä—Ç –≤ –ø—É—Å—Ç–æ–π manager –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
    let alert = create_test_alert(AlertSeverity::Critical, "Empty Manager Test", "No channels configured");
    let result = empty_manager.handle_alert(alert).await;
    assert!(result.is_ok());
    
    println!("  ‚úÖ –ü—É—Å—Ç–æ–π manager –æ–±—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç –±–µ–∑ –æ—à–∏–±–æ–∫");
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
    let weird_config = NotificationConfig {
        channels: vec![NotificationChannel::Log],
        routing: {
            let mut r = HashMap::new();
            r.insert(AlertSeverity::Fatal, vec!["nonexistent_channel".to_string()]);
            r
        },
        cooldown_seconds: u64::MAX, // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π cooldown
        enable_grouping: true,
        max_group_size: 0, // –ù—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã
        group_interval_seconds: 0, // –ù—É–ª–µ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        component_filters: Some(vec![]), // –ü—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        ignore_patterns: vec!["".to_string()], // –ü—É—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
    };
    
    let weird_manager = NotificationManager::new(weird_config)?;
    let weird_alert = create_test_alert(AlertSeverity::Fatal, "Weird Config Test", "Testing edge case config");
    let result = weird_manager.handle_alert(weird_alert).await;
    assert!(result.is_ok());
    
    println!("  ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å edge case –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç");
    
    println!("‚úÖ Edge cases –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// Stress test –¥–ª—è –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
#[tokio::test]
async fn test_high_volume_alerts() -> Result<()> {
    println!("üß™ Stress test –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤");
    
    let mut config = NotificationConfig::default();
    config.enable_grouping = true;
    config.max_group_size = 100;
    config.cooldown_seconds = 0; // –û—Ç–∫–ª—é—á–∞–µ–º cooldown –¥–ª—è stress —Ç–µ—Å—Ç–∞
    config.channels = vec![NotificationChannel::Console { colored: false }];
    
    let manager = NotificationManager::new(config)?;
    
    let start_time = std::time::Instant::now();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤
    for i in 0..1000 {
        let alert = create_test_alert(
            match i % 4 {
                0 => AlertSeverity::Info,
                1 => AlertSeverity::Warning,
                2 => AlertSeverity::Critical,
                _ => AlertSeverity::Info,
            },
            &format!("Stress Test {}", i),
            &format!("High volume alert number {}", i),
        );
        
        let result = manager.handle_alert(alert).await;
        assert!(result.is_ok());
    }
    
    let elapsed = start_time.elapsed();
    println!("  üìä 1000 –∞–ª–µ—Ä—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {:?}", elapsed);
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ (< 1 —Å–µ–∫—É–Ω–¥—ã)
    assert!(elapsed.as_secs() < 1);
    
    println!("‚úÖ Stress test –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
    Ok(())
}

/// Quick smoke test –¥–ª—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
#[tokio::test]
async fn test_notifications_smoke() -> Result<()> {
    // Test config creation
    let _config = NotificationConfig::default();
    
    // Test manager creation
    let manager = NotificationManager::new(_config)?;
    
    // Test alert handling
    let alert = create_test_alert(AlertSeverity::Info, "Smoke Test", "Basic functionality test");
    manager.handle_alert(alert).await?;
    
    // Test cloning
    let _cloned = manager.clone();
    
    println!("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ notifications —Ä–∞–±–æ—Ç–∞—é—Ç");
    Ok(())
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
mod rand {
    pub fn random<T>() -> T 
    where 
        T: From<u32>
    {
        use std::collections::hash_map::DefaultHasher;
        use std::hash::{Hash, Hasher};
        use std::time::{SystemTime, UNIX_EPOCH};
        
        let mut hasher = DefaultHasher::new();
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos().hash(&mut hasher);
        T::from(hasher.finish() as u32)
    }
}