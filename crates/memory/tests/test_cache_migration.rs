use anyhow::Result;
#![cfg(all(not(feature = "minimal")))]
use memory::{
    migrate_cache_to_lru, recommend_cache_config, CacheConfig, EmbeddingCache, EmbeddingCacheLRU,
};
use tempfile::TempDir;

/// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è cache migration —Å–∏—Å—Ç–µ–º—ã
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç: –º–∏–≥—Ä–∞—Ü–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, error handling

/// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫—ç—à–∞
#[test]
fn test_cache_config_recommendations() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫—ç—à–∞");

    // –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    let config_ultra_high = recommend_cache_config(32768); // 32GB RAM
    assert_eq!(config_ultra_high.max_size_bytes, 4_294_967_296); // 4GB cache
    assert_eq!(config_ultra_high.max_entries, 419430); // ~10KB per entry
    assert_eq!(config_ultra_high.ttl_seconds, Some(86400 * 30)); // 30 days
    assert_eq!(config_ultra_high.eviction_batch_size, 100);

    // –¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ–π –ø–∞–º—è—Ç–∏ (16GB+)
    let config_high = recommend_cache_config(20000);
    assert_eq!(config_high.max_size_bytes, 4_294_967_296);

    // –¢–µ—Å—Ç —Å—Ä–µ–¥–Ω–µ–π –ø–∞–º—è—Ç–∏ (8-16GB)
    let config_medium_high = recommend_cache_config(12000);
    assert_eq!(config_medium_high.max_size_bytes, 2_147_483_648); // 2GB
    assert_eq!(config_medium_high.max_entries, 209715); // 2GB / 10KB

    // –¢–µ—Å—Ç —Å—Ä–µ–¥–Ω–µ–π –ø–∞–º—è—Ç–∏ (4-8GB)
    let config_medium = recommend_cache_config(6000);
    assert_eq!(config_medium.max_size_bytes, 1_073_741_824); // 1GB
    assert_eq!(config_medium.max_entries, 104857); // 1GB / 10KB

    // –¢–µ—Å—Ç –Ω–∏–∑–∫–æ–π –ø–∞–º—è—Ç–∏ (<4GB)
    let config_low = recommend_cache_config(2048);
    assert_eq!(config_low.max_size_bytes, 536_870_912); // 512MB
    assert_eq!(config_low.max_entries, 52428); // 512MB / 10KB

    // –¢–µ—Å—Ç –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π –ø–∞–º—è—Ç–∏
    let config_very_low = recommend_cache_config(1024);
    assert_eq!(config_very_low.max_size_bytes, 536_870_912); // Still 512MB minimum

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ TTL –∏ batch size –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã
    for memory_mb in [1024, 2048, 6000, 12000, 20000, 32768] {
        let config = recommend_cache_config(memory_mb);
        assert_eq!(config.ttl_seconds, Some(86400 * 30));
        assert_eq!(config.eviction_batch_size, 100);
        assert!(config.max_entries > 0);
        assert!(config.max_size_bytes >= 536_870_912); // –ú–∏–Ω–∏–º—É–º 512MB
    }

    println!("‚úÖ –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã");
    Ok(())
}

/// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è cache —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π  
#[tokio::test]
async fn test_recommended_config_cache_creation() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π");

    let temp_dir = TempDir::new()?;

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
    for memory_mb in [2048, 6000, 12000, 20000] {
        let config = recommend_cache_config(memory_mb);
        let cache_path = temp_dir.path().join(format!("test_cache_{}", memory_mb));

        // –°–æ–∑–¥–∞–µ–º LRU cache —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        let cache = EmbeddingCacheLRU::new(&cache_path, config.clone())?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cache —Å–æ–∑–¥–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        let (hits, misses, size) = cache.stats();
        assert_eq!(hits, 0);
        assert_eq!(misses, 0);
        assert_eq!(size, 0);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        let test_embedding = vec![0.1; 768];
        cache.insert("test_key", "test_model", test_embedding.clone())?;

        let retrieved = cache.get("test_key", "test_model");
        assert!(retrieved.is_some());
        assert_eq!(retrieved.unwrap(), test_embedding);

        println!("  ‚úÖ Cache –¥–ª—è {}MB –ø–∞–º—è—Ç–∏ —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç", memory_mb);
    }

    println!("‚úÖ –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç");
    Ok(())
}

/// –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫—ç—à–∞ (smoke test –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
#[tokio::test]
async fn test_cache_migration_smoke() -> Result<()> {
    println!("üß™ Smoke test –º–∏–≥—Ä–∞—Ü–∏–∏ –∫—ç—à–∞");

    let temp_dir = TempDir::new()?;
    let old_cache_path = temp_dir.path().join("old_cache");
    let new_cache_path = temp_dir.path().join("new_cache");

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫—ç—à —Å –¥–∞–Ω–Ω—ã–º–∏
    let old_cache = EmbeddingCache::new(&old_cache_path)?;
    let test_embedding = vec![0.1; 768];
    old_cache.insert("migration_test", "test_model", test_embedding.clone())?;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º –∫—ç—à–µ
    let (hits_before, _misses_before, _) = old_cache.stats();
    assert_eq!(hits_before, 0); // –ï—â–µ –Ω–µ –±—ã–ª–æ get –æ–ø–µ—Ä–∞—Ü–∏–π

    let retrieved = old_cache.get("migration_test", "test_model");
    assert!(retrieved.is_some());
    assert_eq!(retrieved.unwrap(), test_embedding);

    let (hits_after, _, _) = old_cache.stats();
    assert_eq!(hits_after, 1); // –û–¥–∏–Ω hit –æ—Ç get

    // –ü—ã—Ç–∞–µ–º—Å—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å
    let config = recommend_cache_config(4096); // 4GB memory
    let result = migrate_cache_to_lru(&old_cache_path, &new_cache_path, config).await;

    // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è (—Ö–æ—Ç—è –∏ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º)
    assert!(result.is_ok());

    // –ù–æ–≤—ã–π LRU –∫—ç—à –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    assert!(new_cache_path.exists());

    println!("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫");
    Ok(())
}

/// –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –º–∏–≥—Ä–∞—Ü–∏–∏
#[tokio::test]
async fn test_migration_error_handling() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º error handling –≤ –º–∏–≥—Ä–∞—Ü–∏–∏");

    let temp_dir = TempDir::new()?;
    let nonexistent_old = temp_dir.path().join("nonexistent");
    let new_cache_path = temp_dir.path().join("new_cache");

    let config = recommend_cache_config(4096);

    // –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞—Ä—ã–º –∫—ç—à–µ–º
    let result = migrate_cache_to_lru(&nonexistent_old, &new_cache_path, config.clone()).await;

    // –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –∏–ª–∏ —É—Å–ø–µ—Ö (EmbeddingCache –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    match result {
        Ok(_) => println!("  ‚ö†Ô∏è Cache —Å–æ–∑–¥–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—É—Ç–∏"),
        Err(error) => {
            println!("  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {}", error);
            assert!(
                error.to_string().contains("No such file")
                    || error.to_string().contains("cannot find")
                    || error.to_string().contains("not found")
                    || error.to_string().contains("directory")
                    || error.to_string().contains("path")
            );
        }
    }

    // –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    let old_cache_path = temp_dir.path().join("old_cache");
    let _old_cache = EmbeddingCache::new(&old_cache_path)?; // –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π old cache

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—ç—à –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç)
    let same_path_result = migrate_cache_to_lru(&old_cache_path, &old_cache_path, config).await;

    // –õ–∏–±–æ –æ—à–∏–±–∫–∞, –ª–∏–±–æ —É—Å–ø–µ—Ö (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç implementation)
    match same_path_result {
        Ok(_) => println!("  ‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –≤ —Ç—É –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"),
        Err(e) => println!("  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {}", e),
    }

    println!("‚úÖ Error handling —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è edge cases
#[test]
fn test_cache_config_edge_cases() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");

    // –¢–µ—Å—Ç –Ω—É–ª–µ–≤–æ–π –ø–∞–º—è—Ç–∏
    let config_zero = recommend_cache_config(0);
    assert_eq!(config_zero.max_size_bytes, 536_870_912); // –ú–∏–Ω–∏–º—É–º 512MB
    assert!(config_zero.max_entries > 0);

    // –¢–µ—Å—Ç –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–π –ø–∞–º—è—Ç–∏
    let config_tiny = recommend_cache_config(1);
    assert_eq!(config_tiny.max_size_bytes, 536_870_912);

    // –¢–µ—Å—Ç –æ–≥—Ä–æ–º–Ω–æ–π –ø–∞–º—è—Ç–∏
    let config_huge = recommend_cache_config(1_000_000); // 1TB RAM
    assert_eq!(config_huge.max_size_bytes, 4_294_967_296); // –ú–∞–∫—Å–∏–º—É–º 4GB cache

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ max_entries –∫ max_size_bytes
    for memory_mb in [0, 1, 100, 1000, 10000, 100000] {
        let config = recommend_cache_config(memory_mb);
        let expected_entries = config.max_size_bytes / 10240; // 10KB per entry
        assert_eq!(config.max_entries, expected_entries);
    }

    println!("‚úÖ Edge cases –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#[test]
fn test_cache_config_performance() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π");

    let start_time = std::time::Instant::now();

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    for _ in 0..10000 {
        let _config = recommend_cache_config(8192);
    }

    let elapsed = start_time.elapsed();
    println!("  üìä 10000 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞ {:?}", elapsed);

    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ (< 10ms –¥–ª—è 10k –≤—ã–∑–æ–≤–æ–≤)
    assert!(elapsed.as_millis() < 10);

    println!("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç–ª–∏—á–Ω–∞—è");
    Ok(())
}

/// Integration test —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–µ–π –ø–æ—Å–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
#[tokio::test]
async fn test_full_migration_workflow() -> Result<()> {
    println!("üß™ Integration test –ø–æ–ª–Ω–æ–≥–æ workflow –º–∏–≥—Ä–∞—Ü–∏–∏");

    let temp_dir = TempDir::new()?;

    // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π simple cache —Å –¥–∞–Ω–Ω—ã–º–∏
    let old_cache_path = temp_dir.path().join("production_cache");
    let old_cache = EmbeddingCache::new(&old_cache_path)?;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    let test_data = vec![
        ("doc1", "bge-m3", vec![0.1; 768]),
        ("doc2", "bge-m3", vec![0.2; 768]),
        ("query1", "bge-m3", vec![0.3; 768]),
    ];

    for (key, model, embedding) in &test_data {
        old_cache.insert(key, model, embedding.clone())?;
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let available_memory = 8192; // 8GB
    let recommended_config = recommend_cache_config(available_memory);

    // 3. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    let new_cache_path = temp_dir.path().join("lru_cache");
    let migration_result =
        migrate_cache_to_lru(&old_cache_path, &new_cache_path, recommended_config.clone()).await;

    assert!(migration_result.is_ok());

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–π LRU cache —Å–æ–∑–¥–∞–ª—Å—è
    let new_cache = EmbeddingCacheLRU::new(&new_cache_path, recommended_config)?;
    let (hits, misses, size) = new_cache.stats();
    assert_eq!(hits, 0); // –ù–æ–≤—ã–π cache
    assert_eq!(misses, 0);
    assert_eq!(size, 0); // –ü–æ–∫–∞ –ø—É—Å—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ cache
    new_cache.insert("new_doc", "bge-m3", vec![0.5; 768])?;
    let retrieved = new_cache.get("new_doc", "bge-m3");
    assert!(retrieved.is_some());

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–π cache –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    let old_retrieved = old_cache.get("doc1", "bge-m3");
    assert!(old_retrieved.is_some());
    assert_eq!(old_retrieved.unwrap(), test_data[0].2);

    println!("‚úÖ –ü–æ–ª–Ω—ã–π workflow –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ embeddings
#[test]
fn test_config_for_different_embedding_sizes() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ embeddings");

    // –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç ~10KB per embedding
    // –≠—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è Qwen3 (1024 dims * 4 bytes = ~4KB + metadata)

    let config = recommend_cache_config(8192); // 8GB

    // –î–ª—è Qwen3 (1024 dimensions)
    let qwen3_size = 1024 * 4 + 1024; // 4 bytes per float + metadata
    let qwen3_entries = config.max_size_bytes / qwen3_size;

    println!(
        "  üìä Qwen3 embeddings: {} entries –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –≤ cache",
        qwen3_entries
    );
    assert!(qwen3_entries > 100000); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ entries

    // –î–ª—è –±–æ–ª—å—à–∏—Ö embeddings (1536 dimensions –∫–∞–∫ OpenAI)
    let large_embedding_size = 1536 * 4 + 1024;
    let large_entries = config.max_size_bytes / large_embedding_size;

    println!(
        "  üìä Large embeddings (1536d): {} entries –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è",
        large_entries
    );
    assert!(large_entries > 50000); // –í—Å–µ –µ—â–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

    // –¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ 10KB per entry –¥–æ–≤–æ–ª—å–Ω–æ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö embeddings
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –¥–ª—è Qwen3 embeddings –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    assert!(
        config.max_entries >= qwen3_entries / 4,
        "Config entries {} –¥–æ–ª–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å —Ö–æ—Ç—è –±—ã 1/4 –æ—Ç Qwen3 {}",
        config.max_entries,
        qwen3_entries / 4
    );

    println!(
        "  üìä Config max_entries: {}, —Ä–µ–∞–ª—å–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è Qwen3: {}, large: {}",
        config.max_entries, qwen3_entries, large_entries
    );

    println!("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ embeddings");
    Ok(())
}

/// Stress test –¥–ª—è –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
#[tokio::test]
async fn test_multiple_migrations() -> Result<()> {
    println!("üß™ Stress test –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π");

    let temp_dir = TempDir::new()?;
    let config = recommend_cache_config(4096);

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ cache –∏ –º–∏–≥—Ä–∏—Ä—É–µ–º –∏—Ö
    for i in 0..5 {
        let old_path = temp_dir.path().join(format!("old_cache_{}", i));
        let new_path = temp_dir.path().join(format!("new_cache_{}", i));

        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π cache
        let old_cache = EmbeddingCache::new(&old_path)?;
        old_cache.insert(&format!("key_{}", i), "test_model", vec![0.1; 768])?;

        // –ú–∏–≥—Ä–∏—Ä—É–µ–º
        let result = migrate_cache_to_lru(&old_path, &new_path, config.clone()).await;
        assert!(result.is_ok(), "Migration {} failed: {:?}", i, result);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–π cache —Å–æ–∑–¥–∞–ª—Å—è
        assert!(new_path.exists());
    }

    println!("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    Ok(())
}

/// Quick smoke test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
#[tokio::test]
async fn test_cache_migration_smoke_all() -> Result<()> {
    let temp_dir = TempDir::new()?;

    // Test recommendation
    let config = recommend_cache_config(4096);
    assert!(config.max_size_bytes > 0);

    // Test cache creation with recommended config
    let cache_path = temp_dir.path().join("smoke_test");
    let _cache = EmbeddingCacheLRU::new(&cache_path, config.clone())?;

    // Test migration (will warn but not fail)
    let old_path = temp_dir.path().join("old_smoke");
    let new_path = temp_dir.path().join("new_smoke");

    let _old_cache = EmbeddingCache::new(&old_path)?;
    let result = migrate_cache_to_lru(&old_path, &new_path, config).await;
    assert!(result.is_ok());

    println!("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ cache migration —Ä–∞–±–æ—Ç–∞—é—Ç");
    Ok(())
}
