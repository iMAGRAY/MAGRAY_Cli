use anyhow::Result;
use memory::{
    service_di::{DIMemoryService, default_config},
    orchestration::{MemoryOrchestrator, EmbeddingCoordinator, SearchCoordinator, HealthManager, PromotionCoordinator, ResourceController, BackupCoordinator}
};

#[tokio::test]
async fn test_orchestration_coordinators_integration() -> Result<()> {
    println!("üîß –°–æ–∑–¥–∞–Ω–∏–µ DIMemoryService —Å orchestration –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏");
    let config = default_config()?;
    let service = DIMemoryService::new_minimal(config).await?;
    
    println!("‚úÖ DIMemoryService —Å–æ–∑–¥–∞–Ω");
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    let di_stats = service.di_stats();
    println!("üìä DI Container Stats: registered={}, cached={}, total={}",
             di_stats.registered_factories, di_stats.cached_singletons, di_stats.total_types);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
    println!("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");
    
    // EmbeddingCoordinator
    match service.resolve::<EmbeddingCoordinator>() {
        Ok(_) => println!("EmbeddingCoordinator: ‚úÖ OK"),
        Err(e) => println!("EmbeddingCoordinator: ‚ùå Error: {}", e),
    }
    
    // SearchCoordinator  
    let search_coordinator = service.try_resolve::<SearchCoordinator>();
    println!("SearchCoordinator: {:?}", search_coordinator.is_some());
    
    // HealthManager
    let health_manager = service.try_resolve::<HealthManager>();
    println!("HealthManager: {:?}", health_manager.is_some());
    
    // PromotionCoordinator
    let promotion_coordinator = service.try_resolve::<PromotionCoordinator>();
    println!("PromotionCoordinator: {:?}", promotion_coordinator.is_some());
    
    // ResourceController
    let resource_controller = service.try_resolve::<ResourceController>();
    println!("ResourceController: {:?}", resource_controller.is_some());
    
    // BackupCoordinator
    let backup_coordinator = service.try_resolve::<BackupCoordinator>();
    println!("BackupCoordinator: {:?}", backup_coordinator.is_some());
    
    // MemoryOrchestrator (–≥–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä)
    let memory_orchestrator = service.try_resolve::<MemoryOrchestrator>();
    println!("MemoryOrchestrator: {:?}", memory_orchestrator.is_some());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let embedding_coordinator = service.try_resolve::<EmbeddingCoordinator>();
    assert!(embedding_coordinator.is_some(), "EmbeddingCoordinator –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω");
    assert!(search_coordinator.is_some(), "SearchCoordinator –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω");
    assert!(health_manager.is_some(), "HealthManager –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω");
    
    // –î–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç—Ç–∏ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    if let Some(orchestrator) = memory_orchestrator {
        println!("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MemoryOrchestrator...");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã
        let all_ready = orchestrator.all_ready().await;
        println!("All coordinators ready: {}", all_ready);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        let metrics = orchestrator.all_metrics().await;
        println!("Orchestrator metrics: {}", metrics);
        
        println!("‚úÖ MemoryOrchestrator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }
    
    println!("üéâ Orchestration integration test –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}