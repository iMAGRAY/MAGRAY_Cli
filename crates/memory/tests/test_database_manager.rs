use memory::{DatabaseManager, default_config};
use anyhow::Result;
use tempfile::TempDir;
use tokio::task::JoinSet;

#[tokio::test]
async fn test_concurrent_database_access() -> Result<()> {
    let temp_dir = TempDir::new()?;
    let db_path = temp_dir.path().join("concurrent_test.db");
    
    let manager = DatabaseManager::global();
    
    // –°–æ–∑–¥–∞–µ–º 20 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –∫–æ—Ç–æ—Ä—ã–µ –ø—ã—Ç–∞—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ –±–∞–∑—É
    let mut set = JoinSet::new();
    
    for i in 0..20 {
        let db_path_clone = db_path.clone();
        set.spawn(async move {
            let db = manager.get_database(&db_path_clone).unwrap();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            let tree = db.open_tree(format!("test_tree_{}", i)).unwrap();
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for j in 0..10 {
                let key = format!("key_{}_{}", i, j);
                let value = format!("value_{}_{}", i, j);
                tree.insert(key.as_bytes(), value.as_bytes()).unwrap();
            }
            
            tree.flush().unwrap();
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            tree.len()
        });
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    let mut total_records = 0;
    while let Some(result) = set.join_next().await {
        let record_count = result??;
        total_records += record_count;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã
    assert_eq!(total_records, 20 * 10, "–í—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    let stats = manager.get_connection_stats();
    assert_eq!(stats.len(), 1, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ");
    
    println!("‚úÖ Concurrent database access test passed");
    Ok(())
}

#[tokio::test]
async fn test_memory_service_concurrent_creation() -> Result<()> {
    let temp_dir = TempDir::new()?;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ MemoryService –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –ø—É—Ç–µ–º –∫ –±–∞–∑–µ
    let mut set = JoinSet::new();
    
    for i in 0..5 {
        let db_path = temp_dir.path().join("shared_memory.db");
        
        set.spawn(async move {
            let mut config = default_config();
            config.db_path = db_path;
            config.batch_config.async_flush = false; // –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤
            
            let service = memory::MemoryService::new(config).await?;
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            let record = memory::Record {
                id: uuid::Uuid::new_v4(),
                text: format!("Test record from service {}", i),
                embedding: vec![0.1, 0.2, 0.3],
                layer: memory::Layer::Interact,
                project: "test".to_string(),
                tags: vec!["concurrent".to_string()],
                ts: chrono::Utc::now(),
                last_access: chrono::Utc::now(),
                score: 0.0,
            };
            
            service.insert(record).await?;
            
            Ok::<_, anyhow::Error>(i)
        });
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    let mut completed_services = Vec::new();
    while let Some(result) = set.join_next().await {
        let service_id = result??;
        completed_services.push(service_id);
    }
    
    assert_eq!(completed_services.len(), 5, "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ DatabaseManager –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
    let manager = DatabaseManager::global();
    let stats = manager.get_connection_stats();
    
    println!("‚úÖ Concurrent MemoryService creation test passed");
    println!("üìä Database connections: {}", stats.len());
    
    Ok(())
}

#[tokio::test]
async fn test_database_manager_shutdown() -> Result<()> {
    let temp_dir = TempDir::new()?;
    let db_path = temp_dir.path().join("shutdown_test.db");
    
    let manager = DatabaseManager::new(); // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    let db1 = manager.get_database(&db_path)?;
    let db2 = manager.get_cache_database(temp_dir.path().join("cache.db"))?;
    let db3 = manager.get_system_database(temp_dir.path().join("system.db"))?;
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    db1.open_tree("test")?.insert("key", "value")?;
    db2.open_tree("cache")?.insert("cache_key", "cache_value")?;
    db3.open_tree("system")?.insert("system_key", "system_value")?;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats_before = manager.get_connection_stats();
    assert_eq!(stats_before.len(), 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
    
    // Graceful shutdown
    manager.shutdown()?;
    
    let stats_after = manager.get_connection_stats();
    assert_eq!(stats_after.len(), 0, "–ü–æ—Å–ª–µ shutdown –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π");
    
    println!("‚úÖ Database manager shutdown test passed");
    Ok(())
}

#[tokio::test]
async fn test_database_manager_flush_all() -> Result<()> {
    let temp_dir = TempDir::new()?;
    let manager = DatabaseManager::new();
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    let main_db = manager.get_database(temp_dir.path().join("main.db"))?;
    let cache_db = manager.get_cache_database(temp_dir.path().join("cache.db"))?;
    let system_db = manager.get_system_database(temp_dir.path().join("system.db"))?;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∂–¥—É—é –±–∞–∑—É
    main_db.open_tree("data")?.insert("main_key", "main_value")?;
    cache_db.open_tree("embeddings")?.insert("embedding_key", "embedding_value")?;
    system_db.open_tree("metrics")?.insert("metric_key", "metric_value")?;
    
    // Flush –≤—Å–µ—Ö –±–∞–∑ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    manager.flush_all()?;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    assert_eq!(
        main_db.open_tree("data")?.get("main_key")?.unwrap(),
        b"main_value"
    );
    assert_eq!(
        cache_db.open_tree("embeddings")?.get("embedding_key")?.unwrap(),
        b"embedding_value"
    );
    assert_eq!(
        system_db.open_tree("metrics")?.get("metric_key")?.unwrap(),
        b"metric_value"
    );
    
    println!("‚úÖ Database manager flush_all test passed");
    Ok(())
}