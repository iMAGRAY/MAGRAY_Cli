use anyhow::Result;
use memory::Qwen3MemoryBridge;

#[cfg(all(not(feature = "minimal"), feature = "embeddings"))]
#[tokio::test]
async fn test_qwen3_memory_bridge_basic() -> Result<()> {
    use ai::EmbeddingConfig;

    println!("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Qwen3MemoryBridge");

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Qwen3
    let config = EmbeddingConfig {
        model_name: "qwen3emb".to_string(),
        batch_size: 8,
        max_length: 256,
        use_gpu: false,
        gpu_config: None,
        embedding_dim: Some(1024),
    };

    match Qwen3MemoryBridge::new(config).await {
        Ok(bridge) => {
            println!("‚úÖ Qwen3MemoryBridge —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            assert_eq!(bridge.embedding_dim(), 1024);
            println!(
                "‚úÖ Embedding dimension –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {}",
                bridge.embedding_dim()
            );

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏)
            let init_result = bridge.initialize().await;
            match init_result {
                Ok(()) => {
                    println!("‚úÖ Bridge –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Qwen3
                    let available = bridge.is_qwen3_available().await;
                    println!("Qwen3 provider –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {available}");

                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å embedding
                    let test_result = bridge.embed_text("test embedding").await;
                    match test_result {
                        Ok(embedding) => {
                            println!(
                                "‚úÖ Single embedding –ø–æ–ª—É—á–µ–Ω (—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {})",
                                embedding.len()
                            );
                            assert_eq!(embedding.len(), 1024, "–û–∂–∏–¥–∞–µ–º Qwen3 dimension");
                        }
                        Err(e) => {
                            println!("‚ö†Ô∏è Single embedding —á–µ—Ä–µ–∑ fallback: {e}");
                        }
                    }

                    // –ü—ã—Ç–∞–µ–º—Å—è batch embedding
                    let texts = vec!["first test".to_string(), "second test".to_string()];

                    let batch_result = bridge.embed_batch(&texts).await;
                    match batch_result {
                        Ok(embeddings) => {
                            println!(
                                "‚úÖ Batch embedding –ø–æ–ª—É—á–µ–Ω ({} embeddings)",
                                embeddings.len()
                            );
                            assert_eq!(embeddings.len(), texts.len());
                            for embedding in &embeddings {
                                assert_eq!(embedding.len(), 1024);
                            }
                        }
                        Err(e) => {
                            println!("‚ö†Ô∏è Batch embedding —á–µ—Ä–µ–∑ fallback: {e}");
                        }
                    }
                }
                Err(e) => {
                    println!("‚ö†Ô∏è Bridge –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}");
                    println!("üí° –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ Qwen3");

                    // –ù–æ bridge –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ fallback
                    let fallback_result = bridge.embed_text("fallback test").await;
                    match fallback_result {
                        Ok(embedding) => {
                            println!(
                                "‚úÖ Fallback embedding —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {})",
                                embedding.len()
                            );
                            assert_eq!(embedding.len(), 1024);
                        }
                        Err(e) => {
                            println!("‚ùå –î–∞–∂–µ fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}");
                            // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                            return Err(e);
                        }
                    }
                }
            }

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            bridge.force_fallback().await;
            println!("‚úÖ Force fallback —Ä–∞–±–æ—Ç–∞–µ—Ç");

            let _recovery_result = bridge.try_recover().await;
            println!("‚úÖ Try recover —Ä–∞–±–æ—Ç–∞–µ—Ç");

            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            let metrics = bridge.get_metrics().await;
            println!("üìä –ú–µ—Ç—Ä–∏–∫–∏ bridge:");
            println!("  Total requests: {}", metrics.total_requests);
            println!("  Successful requests: {}", metrics.successful_requests);
            println!("  Qwen3 requests: {}", metrics.qwen3_requests);
            println!("  Fallback requests: {}", metrics.fallback_requests);

            println!("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã Qwen3MemoryBridge –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ");
        }
        Err(e) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Qwen3MemoryBridge: {e}");
            println!("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –º–æ–¥–µ–ª—å qwen3emb –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ models/");
            return Err(e);
        }
    }

    Ok(())
}

#[cfg(all(
    not(feature = "minimal"),
    feature = "embeddings",
    feature = "gpu-acceleration"
))]
#[tokio::test]
async fn test_qwen3_gpu_batch_processor_integration() -> Result<()> {
    use memory::{
        gpu_accelerated::{BatchProcessorConfig, GpuBatchProcessor},
        CacheConfig, EmbeddingCache,
    };
    use std::sync::Arc;
    use tempfile::TempDir;

    println!("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Qwen3MemoryBridge —Å GpuBatchProcessor");

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à
    let temp_dir = TempDir::new()?;
    let cache_path = temp_dir.path().join("test_cache");
    let cache = Arc::new(EmbeddingCache::new(cache_path, CacheConfig::default())?);

    // –°–æ–∑–¥–∞–µ–º GpuBatchProcessor —Å Qwen3MemoryBridge
    let config = BatchProcessorConfig {
        max_batch_size: 8,
        batch_timeout_ms: 100,
        use_gpu_if_available: false, // CPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤
        cache_embeddings: true,
    };

    match GpuBatchProcessor::with_qwen3_bridge(config, cache).await {
        Ok(processor) => {
            println!("‚úÖ GpuBatchProcessor —Å Qwen3MemoryBridge —Å–æ–∑–¥–∞–Ω");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Qwen3
            let qwen3_available = processor.is_qwen3_available().await;
            println!("Qwen3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: {}", qwen3_available);

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º embed –º–µ—Ç–æ–¥—ã —á–µ—Ä–µ–∑ processor
            let test_result = processor.embed("integration test").await;
            match test_result {
                Ok(embedding) => {
                    println!(
                        "‚úÖ Processor embedding –ø–æ–ª—É—á–µ–Ω (—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {})",
                        embedding.len()
                    );
                    assert!(!embedding.is_empty());
                }
                Err(e) => {
                    println!("‚ö†Ô∏è Processor embedding –æ—à–∏–±–∫–∞: {}", e);
                }
            }

            println!("‚úÖ GpuBatchProcessor –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
        }
        Err(e) => {
            println!("‚ö†Ô∏è GpuBatchProcessor –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {}", e);
            println!("üí° –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏");
        }
    }

    Ok(())
}

#[cfg(not(all(not(feature = "minimal"), feature = "embeddings")))]
#[tokio::test]
async fn test_qwen3_feature_disabled() -> Result<()> {
    println!("‚ÑπÔ∏è Qwen3 integration test –ø—Ä–æ–ø—É—â–µ–Ω - feature 'embeddings' –æ—Ç–∫–ª—é—á–µ–Ω");
    Ok(())
}
