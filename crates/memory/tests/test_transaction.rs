use memory::{
    Transaction, TransactionManager, TransactionGuard, TransactionOp, TransactionStatus, RollbackAction,
    Record, Layer
};
use uuid::Uuid;
use std::sync::Arc;
use std::thread;
use std::sync::atomic::{AtomicBool, Ordering};
use std::time::Duration;

/// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è transaction —Å–∏—Å—Ç–µ–º—ã
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç: transactions, operations, rollback, manager, concurrency, RAII guard

/// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#[test]
fn test_transaction_creation_and_basic_ops() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    
    let mut tx = Transaction::new();
    
    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π
    assert_eq!(tx.status(), TransactionStatus::Active);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    let record1 = Record {
        id: Uuid::new_v4(),
        text: "test record 1".to_string(),
        embedding: vec![0.1; 768],
        layer: Layer::Interact,
        ..Default::default()
    };
    
    let record2 = Record {
        id: Uuid::new_v4(),
        text: "test record 2".to_string(),
        embedding: vec![0.2; 768],
        layer: Layer::Insights,
        ..Default::default()
    };
    
    // –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏
    assert!(tx.insert(record1.clone()).is_ok());
    assert_eq!(tx.operations_count(), 1);
    assert_eq!(tx.rollback_actions_count(), 1);
    
    // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    let new_record = Record {
        id: record1.id,
        text: "updated record".to_string(),
        embedding: vec![0.3; 768],
        layer: Layer::Interact,
        ..Default::default()
    };
    
    assert!(tx.update(Layer::Interact, record1.id, new_record).is_ok());
    assert_eq!(tx.operations_count(), 2);
    assert_eq!(tx.rollback_actions_count(), 1); // Update –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç rollback action
    
    // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
    assert!(tx.delete(Layer::Interact, record1.id).is_ok());
    assert_eq!(tx.operations_count(), 3);
    
    // –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
    let batch_records = vec![record1.clone(), record2.clone()];
    assert!(tx.batch_insert(batch_records.clone()).is_ok());
    assert_eq!(tx.operations_count(), 4);
    assert_eq!(tx.rollback_actions_count(), 3); // 1 + 2 from batch
    
    println!("  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {} –æ–ø–µ—Ä–∞—Ü–∏–π, {} rollback –¥–µ–π—Å—Ç–≤–∏–π", 
             tx.operations_count(), tx.rollback_actions_count());
    
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#[test]
fn test_transaction_lifecycle() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    
    let mut tx = Transaction::new();
    let record = Record {
        id: Uuid::new_v4(),
        text: "lifecycle test".to_string(),
        embedding: vec![0.1; 768],
        layer: Layer::Assets,
        ..Default::default()
    };
    
    // Active state - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    assert_eq!(tx.status(), TransactionStatus::Active);
    assert!(tx.insert(record.clone()).is_ok());
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∫–æ–º–º–∏—Ç–∏–º
    let ops = tx.take_operations().unwrap();
    assert_eq!(ops.len(), 1);
    assert_eq!(tx.status(), TransactionStatus::Committed);
    assert_eq!(tx.operations_count(), 0); // –û–ø–µ—Ä–∞—Ü–∏–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã
    
    // –ü–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã
    let result = tx.insert(record.clone());
    assert!(result.is_err());
    assert!(result.unwrap_err().to_string().contains("not active"));
    
    println!("  ‚úÖ Committed state: –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã");
    
    // –¢–µ—Å—Ç abort
    let mut tx2 = Transaction::new();
    tx2.insert(record.clone()).unwrap();
    assert_eq!(tx2.operations_count(), 1);
    assert_eq!(tx2.rollback_actions_count(), 1);
    
    tx2.abort();
    assert_eq!(tx2.status(), TransactionStatus::Aborted);
    assert_eq!(tx2.operations_count(), 0);
    assert_eq!(tx2.rollback_actions_count(), 0);
    
    // –ü–æ—Å–ª–µ abort –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã
    let result = tx2.insert(record);
    assert!(result.is_err());
    
    println!("  ‚úÖ Aborted state: –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã –∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã");
    
    println!("‚úÖ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#[test]
fn test_transaction_operation_types() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π");
    
    let mut tx = Transaction::new();
    
    let record1 = Record {
        id: Uuid::new_v4(),
        text: "insert test".to_string(),
        embedding: vec![0.1; 768],
        layer: Layer::Interact,
        ..Default::default()
    };
    
    let record2 = Record {
        id: Uuid::new_v4(),
        text: "update test".to_string(),
        embedding: vec![0.2; 768],
        layer: Layer::Insights,
        ..Default::default()
    };
    
    // Insert operation
    tx.insert(record1.clone()).unwrap();
    
    // Update operation
    tx.update(Layer::Interact, record1.id, record2.clone()).unwrap();
    
    // Delete operation
    tx.delete(Layer::Insights, record2.id).unwrap();
    
    // Batch insert operation
    let batch = vec![
        Record {
            id: Uuid::new_v4(),
            text: "batch 1".to_string(),
            embedding: vec![0.3; 768],
            layer: Layer::Assets,
            ..Default::default()
        },
        Record {
            id: Uuid::new_v4(),
            text: "batch 2".to_string(),
            embedding: vec![0.4; 768],
            layer: Layer::Assets,
            ..Default::default()
        },
    ];
    
    tx.batch_insert(batch.clone()).unwrap();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    let ops = tx.take_operations().unwrap();
    assert_eq!(ops.len(), 4);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    match &ops[0] {
        TransactionOp::Insert { record } => {
            assert_eq!(record.text, "insert test");
            assert_eq!(record.layer, Layer::Interact);
        }
        _ => panic!("Expected Insert operation"),
    }
    
    match &ops[1] {
        TransactionOp::Update { layer, id, record } => {
            assert_eq!(*layer, Layer::Interact);
            assert_eq!(*id, record1.id);
            assert_eq!(record.text, "update test");
        }
        _ => panic!("Expected Update operation"),
    }
    
    match &ops[2] {
        TransactionOp::Delete { layer, id } => {
            assert_eq!(*layer, Layer::Insights);
            assert_eq!(*id, record2.id);
        }
        _ => panic!("Expected Delete operation"),
    }
    
    match &ops[3] {
        TransactionOp::BatchInsert { records } => {
            assert_eq!(records.len(), 2);
            assert_eq!(records[0].text, "batch 1");
            assert_eq!(records[1].text, "batch 2");
        }
        _ => panic!("Expected BatchInsert operation"),
    }
    
    println!("  ‚úÖ –í—Å–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π: Insert, Update, Delete, BatchInsert");
    println!("‚úÖ –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç rollback actions –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
#[test]
fn test_rollback_actions() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º rollback actions");
    
    let mut tx = Transaction::new();
    
    let record1 = Record {
        id: Uuid::new_v4(),
        text: "rollback test 1".to_string(),
        embedding: vec![0.1; 768],
        layer: Layer::Interact,
        ..Default::default()
    };
    
    let record2 = Record {
        id: Uuid::new_v4(),
        text: "rollback test 2".to_string(),
        embedding: vec![0.2; 768],
        layer: Layer::Insights,
        ..Default::default()
    };
    
    // Insert —Å–æ–∑–¥–∞–µ—Ç DeleteInserted rollback action
    tx.insert(record1.clone()).unwrap();
    let rollback_actions = tx.rollback_actions();
    assert_eq!(rollback_actions.len(), 1);
    
    match &rollback_actions[0] {
        RollbackAction::DeleteInserted { layer, id } => {
            assert_eq!(*layer, Layer::Interact);
            assert_eq!(*id, record1.id);
        }
        _ => panic!("Expected DeleteInserted rollback action"),
    }
    
    // Batch insert —Å–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ rollback actions
    let batch = vec![record1.clone(), record2.clone()];
    tx.batch_insert(batch).unwrap();
    
    let rollback_actions = tx.rollback_actions();
    assert_eq!(rollback_actions.len(), 3); // 1 + 2 from batch
    
    // –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ rollback action
    let custom_rollback = RollbackAction::RestoreDeleted { record: record2.clone() };
    tx.add_rollback_action(custom_rollback);
    
    let rollback_actions = tx.rollback_actions();
    assert_eq!(rollback_actions.len(), 4);
    
    match &rollback_actions[3] {
        RollbackAction::RestoreDeleted { record } => {
            assert_eq!(record.text, "rollback test 2");
            assert_eq!(record.layer, Layer::Insights);
        }
        _ => panic!("Expected RestoreDeleted rollback action"),
    }
    
    println!("  ‚úÖ Rollback actions: {} –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", rollback_actions.len());
    println!("‚úÖ Rollback actions —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç transaction manager - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
#[test]
fn test_transaction_manager_basic() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º basic —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å transaction manager");
    
    let manager = TransactionManager::new();
    assert_eq!(manager.active_count(), 0);
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    let tx_id = manager.begin().unwrap();
    assert_eq!(manager.active_count(), 1);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let record = Record {
        id: Uuid::new_v4(),
        text: "manager test".to_string(),
        embedding: vec![0.1; 768],
        layer: Layer::Interact,
        ..Default::default()
    };
    
    manager.execute(tx_id, |tx| {
        tx.insert(record.clone())?;
        tx.update(Layer::Interact, record.id, record.clone())?;
        tx.delete(Layer::Interact, record.id)?;
        Ok(())
    }).unwrap();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–º–∏—Ç
    let ops = manager.prepare_commit(tx_id).unwrap();
    assert_eq!(ops.len(), 3);
    assert_eq!(manager.active_count(), 0); // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ prepare_commit
    
    println!("  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {} –æ–ø–µ—Ä–∞—Ü–∏–π", ops.len());
    
    // –¢–µ—Å—Ç rollback
    let tx_id2 = manager.begin().unwrap();
    assert_eq!(manager.active_count(), 1);
    
    manager.execute(tx_id2, |tx| {
        tx.insert(record)
    }).unwrap();
    
    manager.rollback(tx_id2).unwrap();
    assert_eq!(manager.active_count(), 0);
    
    println!("  ‚úÖ Rollback –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    
    println!("‚úÖ Transaction manager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç transaction manager - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#[test]
fn test_transaction_manager_multiple() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    
    let manager = TransactionManager::new();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let tx_ids: Vec<Uuid> = (0..5).map(|_| manager.begin().unwrap()).collect();
    assert_eq!(manager.active_count(), 5);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    for (i, &tx_id) in tx_ids.iter().enumerate() {
        manager.execute(tx_id, |tx| {
            let record = Record {
                id: Uuid::new_v4(),
                text: format!("multi test {}", i),
                embedding: vec![0.1 * i as f32; 768],
                layer: match i % 3 {
                    0 => Layer::Interact,
                    1 => Layer::Insights,
                    _ => Layer::Assets,
                },
                ..Default::default()
            };
            
            tx.insert(record)?;
            if i % 2 == 0 {
                tx.delete(Layer::Interact, Uuid::new_v4())?;
            }
            Ok(())
        }).unwrap();
    }
    
    // –ö–æ–º–º–∏—Ç–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for i in 0..3 {
        let ops = manager.prepare_commit(tx_ids[i]).unwrap();
        assert!(ops.len() >= 1);
        println!("  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {}: {} –æ–ø–µ—Ä–∞—Ü–∏–π", i, ops.len());
    }
    
    assert_eq!(manager.active_count(), 2); // –û—Å—Ç–∞–ª–∏—Å—å 2 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
    for i in 3..5 {
        manager.rollback(tx_ids[i]).unwrap();
    }
    
    assert_eq!(manager.active_count(), 0);
    
    println!("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç transaction manager - error handling
#[test]
fn test_transaction_manager_errors() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º error handling –≤ transaction manager");
    
    let manager = TransactionManager::new();
    
    // –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
    let fake_id = Uuid::new_v4();
    let result = manager.execute(fake_id, |_tx| Ok(()));
    assert!(result.is_err());
    assert!(result.unwrap_err().to_string().contains("not found"));
    
    // –¢–µ—Å—Ç –∫–æ–º–º–∏—Ç–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let result = manager.prepare_commit(fake_id);
    assert!(result.is_err());
    assert!(result.unwrap_err().to_string().contains("not found"));
    
    // –¢–µ—Å—Ç rollback –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—à–∏–±–∫–æ–π)
    let result = manager.rollback(fake_id);
    assert!(result.is_ok());
    
    // –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let tx_id = manager.begin().unwrap();
    manager.execute(tx_id, |tx| {
        let record = Record {
            id: Uuid::new_v4(),
            text: "error test".to_string(),
            embedding: vec![0.1; 768],
            layer: Layer::Interact,
            ..Default::default()
        };
        tx.insert(record)
    }).unwrap();
    
    let _ops = manager.prepare_commit(tx_id).unwrap();
    
    // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–º–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—à–∏–±–∫–æ–π
    let result = manager.prepare_commit(tx_id);
    assert!(result.is_err());
    
    println!("  ‚úÖ –í—Å–µ error cases –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    println!("‚úÖ Error handling —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç TransactionGuard - RAII –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π rollback
#[test]
fn test_transaction_guard_raii() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º TransactionGuard RAII");
    
    let manager = TransactionManager::new();
    
    // –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ rollback –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ scope
    {
        let guard = TransactionGuard::new(&manager).unwrap();
        let tx_id = guard.tx_id();
        
        assert_eq!(manager.active_count(), 1);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ manager
        manager.execute(tx_id, |tx| {
            let record = Record {
                id: Uuid::new_v4(),
                text: "guard test".to_string(),
                embedding: vec![0.1; 768],
                layer: Layer::Interact,
                ..Default::default()
            };
            tx.insert(record)
        }).unwrap();
        
        // Guard –≤—ã–π–¥–µ—Ç –∏–∑ scope –±–µ–∑ explicit commit
    }
    
    // –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ scope —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–∞—á–µ–Ω–∞
    assert_eq!(manager.active_count(), 0);
    println!("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π rollback –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ scope");
    
    // –¢–µ—Å—Ç —è–≤–Ω–æ–≥–æ commit
    {
        let guard = TransactionGuard::new(&manager).unwrap();
        let tx_id = guard.tx_id();
        
        manager.execute(tx_id, |tx| {
            let record = Record {
                id: Uuid::new_v4(),
                text: "guard commit test".to_string(),
                embedding: vec![0.1; 768],
                layer: Layer::Insights,
                ..Default::default()
            };
            tx.insert(record)
        }).unwrap();
        
        let ops = guard.commit().unwrap();
        assert_eq!(ops.len(), 1);
    }
    
    // –ü–æ—Å–ª–µ —è–≤–Ω–æ–≥–æ commit rollback –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏
    assert_eq!(manager.active_count(), 0);
    println!("  ‚úÖ –Ø–≤–Ω—ã–π commit –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π rollback");
    
    println!("‚úÖ TransactionGuard RAII —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç concurrency - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
#[test]
fn test_transaction_manager_concurrency() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º concurrency transaction manager");
    
    let manager = Arc::new(TransactionManager::new());
    let success_count = Arc::new(std::sync::atomic::AtomicUsize::new(0));
    let error_occurred = Arc::new(AtomicBool::new(false));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let mut handles = vec![];
    
    for i in 0..10 {
        let manager_clone = Arc::clone(&manager);
        let success_count_clone = Arc::clone(&success_count);
        let error_occurred_clone = Arc::clone(&error_occurred);
        
        let handle = thread::spawn(move || {
            match manager_clone.begin() {
                Ok(tx_id) => {
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
                    let execute_result = manager_clone.execute(tx_id, |tx| {
                        let record = Record {
                            id: Uuid::new_v4(),
                            text: format!("concurrent test {}", i),
                            embedding: vec![0.1 * i as f32; 768],
                            layer: Layer::Interact,
                            ..Default::default()
                        };
                        tx.insert(record)?;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ race conditions
                        thread::sleep(Duration::from_millis(1));
                        Ok(())
                    });
                    
                    if execute_result.is_ok() {
                        // –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–º–º–∏—Ç–∞
                        match manager_clone.prepare_commit(tx_id) {
                            Ok(_ops) => {
                                success_count_clone.fetch_add(1, Ordering::SeqCst);
                            }
                            Err(_) => {
                                error_occurred_clone.store(true, Ordering::SeqCst);
                            }
                        }
                    } else {
                        error_occurred_clone.store(true, Ordering::SeqCst);
                    }
                }
                Err(_) => {
                    error_occurred_clone.store(true, Ordering::SeqCst);
                }
            }
        });
        
        handles.push(handle);
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for handle in handles {
        handle.join().unwrap();
    }
    
    let final_success_count = success_count.load(Ordering::SeqCst);
    let had_errors = error_occurred.load(Ordering::SeqCst);
    
    println!("  üìä –£—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}/10", final_success_count);
    println!("  üìä –ë—ã–ª–∏ –æ—à–∏–±–∫–∏: {}", had_errors);
    
    // –í concurrent –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    assert!(final_success_count > 0);
    
    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    assert_eq!(manager.active_count(), 0);
    
    println!("‚úÖ Concurrency transaction manager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// –¢–µ—Å—Ç cleanup stale transactions
#[test]
fn test_cleanup_stale_transactions() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º cleanup stale transactions");
    
    let manager = TransactionManager::new();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let _tx_id1 = manager.begin().unwrap();
    let _tx_id2 = manager.begin().unwrap();
    let _tx_id3 = manager.begin().unwrap();
    
    assert_eq!(manager.active_count(), 3);
    
    // –í—ã–∑—ã–≤–∞–µ–º cleanup (–≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ logging)
    manager.cleanup_stale_transactions(60);
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫–∞ –æ—Å—Ç–∞—é—Ç—Å—è (—Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ cleanup –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
    assert_eq!(manager.active_count(), 3);
    
    println!("  ‚ö†Ô∏è Cleanup –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ—Ç (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)");
    
    println!("‚úÖ Cleanup stale transactions –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω");
}

/// –¢–µ—Å—Ç edge cases –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
#[test]
fn test_transaction_edge_cases() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
    
    // –¢–µ—Å—Ç –ø—É—Å—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let mut empty_tx = Transaction::new();
    let ops = empty_tx.take_operations().unwrap();
    assert_eq!(ops.len(), 0);
    assert_eq!(empty_tx.status(), TransactionStatus::Committed);
    
    // –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω—É–ª–µ–≤—ã–º embedding
    let mut tx = Transaction::new();
    let record_zero_embedding = Record {
        id: Uuid::new_v4(),
        text: "zero embedding".to_string(),
        embedding: vec![],
        layer: Layer::Assets,
        ..Default::default()
    };
    
    assert!(tx.insert(record_zero_embedding).is_ok());
    let ops = tx.take_operations().unwrap();
    assert_eq!(ops.len(), 1);
    
    // –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º embedding
    let mut tx2 = Transaction::new();
    let record_large_embedding = Record {
        id: Uuid::new_v4(),
        text: "large embedding".to_string(),
        embedding: vec![0.1; 10000], // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π embedding
        layer: Layer::Insights,
        ..Default::default()
    };
    
    assert!(tx2.insert(record_large_embedding).is_ok());
    let ops = tx2.take_operations().unwrap();
    assert_eq!(ops.len(), 1);
    
    // –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ batch insert
    let mut tx3 = Transaction::new();
    assert!(tx3.batch_insert(vec![]).is_ok());
    let ops = tx3.take_operations().unwrap();
    assert_eq!(ops.len(), 1);
    
    // –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö abort
    let mut tx4 = Transaction::new();
    let record = Record {
        id: Uuid::new_v4(),
        text: "abort test".to_string(),
        embedding: vec![0.1; 768],
        layer: Layer::Interact,
        ..Default::default()
    };
    
    tx4.insert(record).unwrap();
    assert_eq!(tx4.operations_count(), 1);
    
    tx4.abort();
    assert_eq!(tx4.operations_count(), 0);
    
    // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π abort –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º
    tx4.abort();
    assert_eq!(tx4.status(), TransactionStatus::Aborted);
    
    println!("  ‚úÖ Edge cases: –ø—É—Å—Ç–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –Ω—É–ª–µ–≤–æ–π/–±–æ–ª—å—à–æ–π embedding, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π abort");
    
    println!("‚úÖ Edge cases –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}

/// Performance test –¥–ª—è transaction –æ–ø–µ—Ä–∞—Ü–∏–π
#[test]
fn test_transaction_performance() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
    
    let manager = TransactionManager::new();
    let start_time = std::time::Instant::now();
    
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    for i in 0..1000 {
        let tx_id = manager.begin().unwrap();
        
        manager.execute(tx_id, |tx| {
            let record = Record {
                id: Uuid::new_v4(),
                text: format!("perf test {}", i),
                embedding: vec![0.1; 768],
                layer: Layer::Interact,
                ..Default::default()
            };
            
            tx.insert(record)?;
            if i % 10 == 0 {
                tx.delete(Layer::Interact, Uuid::new_v4())?;
            }
            Ok(())
        }).unwrap();
        
        let _ops = manager.prepare_commit(tx_id).unwrap();
    }
    
    let elapsed = start_time.elapsed();
    println!("  üìä 1000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {:?}", elapsed);
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ (< 100ms –¥–ª—è 1000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
    assert!(elapsed.as_millis() < 100);
    
    assert_eq!(manager.active_count(), 0);
    
    println!("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ª–∏—á–Ω–∞—è");
}

/// Integration test –≤—Å–µ–π transaction —Å–∏—Å—Ç–µ–º—ã
#[test]
fn test_transaction_system_integration() {
    println!("üß™ Integration test transaction —Å–∏—Å—Ç–µ–º—ã");
    
    let manager = TransactionManager::new();
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    {
        let guard = TransactionGuard::new(&manager).unwrap();
        let tx_id = guard.tx_id();
        
        manager.execute(tx_id, |tx| {
            let record1 = Record {
                id: Uuid::new_v4(),
                text: "integration test 1".to_string(),
                embedding: vec![0.1; 768],
                layer: Layer::Interact,
                ..Default::default()
            };
            
            let record2 = Record {
                id: Uuid::new_v4(),
                text: "integration test 2".to_string(),
                embedding: vec![0.2; 768],
                layer: Layer::Insights,
                ..Default::default()
            };
            
            tx.insert(record1.clone())?;
            tx.update(Layer::Interact, record1.id, record2.clone())?;
            tx.delete(Layer::Insights, record2.id)?;
            tx.batch_insert(vec![record1, record2])?;
            
            Ok(())
        }).unwrap();
        
        let ops = guard.commit().unwrap();
        assert_eq!(ops.len(), 4);
        
        println!("  ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 1: —É—Å–ø–µ—à–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è");
    }
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º rollback
    {
        let guard = TransactionGuard::new(&manager).unwrap();
        let tx_id = guard.tx_id();
        
        manager.execute(tx_id, |tx| {
            let record = Record {
                id: Uuid::new_v4(),
                text: "rollback test".to_string(),
                embedding: vec![0.3; 768],
                layer: Layer::Assets,
                ..Default::default()
            };
            
            tx.insert(record)?;
            Ok(())
        }).unwrap();
        
        // Guard –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ scope –±–µ–∑ commit - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π rollback
    }
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ concurrent —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let manager_arc = Arc::new(manager);
    let handles: Vec<_> = (0..5).map(|i| {
        let manager_clone = Arc::clone(&manager_arc);
        thread::spawn(move || {
            let guard = TransactionGuard::new(&*manager_clone).unwrap();
            let tx_id = guard.tx_id();
            
            manager_clone.execute(tx_id, |tx| {
                let record = Record {
                    id: Uuid::new_v4(),
                    text: format!("concurrent integration {}", i),
                    embedding: vec![0.1 * i as f32; 768],
                    layer: Layer::Interact,
                    ..Default::default()
                };
                
                tx.insert(record)
            }).unwrap();
            
            guard.commit().unwrap()
        })
    }).collect();
    
    for handle in handles {
        let ops = handle.join().unwrap();
        assert_eq!(ops.len(), 1);
    }
    
    println!("  ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 2: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π rollback");
    println!("  ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 3: concurrent —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    
    assert_eq!(manager_arc.active_count(), 0);
    
    println!("‚úÖ Integration test transaction —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–µ–Ω");
}

/// Quick smoke test –¥–ª—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
#[test]
fn test_transaction_smoke() {
    // Test transaction creation
    let mut tx = Transaction::new();
    assert_eq!(tx.status(), TransactionStatus::Active);
    
    // Test basic operations
    let record = Record {
        id: Uuid::new_v4(),
        text: "smoke test".to_string(),
        embedding: vec![0.1; 768],
        layer: Layer::Interact,
        ..Default::default()
    };
    
    tx.insert(record.clone()).unwrap();
    tx.update(Layer::Interact, record.id, record.clone()).unwrap();
    tx.delete(Layer::Interact, record.id).unwrap();
    tx.batch_insert(vec![record]).unwrap();
    
    // Test commit
    let ops = tx.take_operations().unwrap();
    assert_eq!(ops.len(), 4);
    
    // Test manager
    let manager = TransactionManager::new();
    let tx_id = manager.begin().unwrap();
    let _ops = manager.prepare_commit(tx_id).unwrap();
    
    // Test guard
    let guard = TransactionGuard::new(&manager).unwrap();
    let _ops = guard.commit().unwrap();
    
    println!("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ transaction —Ä–∞–±–æ—Ç–∞—é—Ç");
}