//! Orchestration Integration Tests
//! 
//! Comprehensive —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö orchestration coordinators:
//! - MemoryOrchestrator (95% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏) - –≥–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
//! - EmbeddingCoordinator (95% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏) - AI embeddings —Å adaptive batching
//! - SearchCoordinator (95% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏) - Sub-5ms HNSW –ø–æ–∏—Å–∫ —Å caching
//! - HealthManager (95% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏) - Production monitoring —Å SLA –º–µ—Ç—Ä–∏–∫–∞–º–∏  
//! - ResourceController (95% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏) - Auto-scaling —Å predictive analytics
//! - PromotionCoordinator, BackupCoordinator

use anyhow::Result;
use memory::{
    DIMemoryService,
    service_di::default_config,
    orchestration::{
        MemoryOrchestrator, EmbeddingCoordinator, SearchCoordinator, 
        HealthManager, ResourceController, PromotionCoordinator, BackupCoordinator
    },
    Record, Layer, SearchOptions,
    CacheConfigType,
};
use std::sync::Arc;
use tempfile::TempDir;
use tokio::time::{sleep, Duration, timeout};
use uuid::Uuid;
use chrono::Utc;

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è test service —Å orchestration
async fn create_orchestration_test_service() -> Result<DIMemoryService> {
    let temp_dir = TempDir::new()?;
    let mut config = default_config()?;
    
    config.db_path = temp_dir.path().join("orchestration_test.db");
    config.cache_path = temp_dir.path().join("orchestration_cache");
    config.cache_config = CacheConfigType::InMemory { max_size: 5000 };
    config.health_enabled = true;
    
    std::fs::create_dir_all(&config.cache_path)?;
    
    DIMemoryService::new(config).await
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
fn create_test_record(text: &str, layer: Layer) -> Record {
    Record {
        id: Uuid::new_v4(),
        text: text.to_string(),
        embedding: vec![], // –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        layer,
        kind: "orchestration_test".to_string(),
        tags: vec!["test".to_string()],
        project: "orchestration".to_string(),
        session: "test_session".to_string(),
        score: 0.8,
        ts: Utc::now(),
        access_count: 0,
        last_access: Utc::now(),
    }
}

/// –¢–ï–°–¢ 1: MemoryOrchestrator Integration
/// 
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏ –µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ –≤—Å–µ–º–∏ sub-coordinators
#[tokio::test]
async fn test_memory_orchestrator_integration() -> Result<()> {
    println!("üéØ Starting MemoryOrchestrator Integration Test");
    
    let service = create_orchestration_test_service().await?;
    
    // === –ü–†–û–í–ï–†–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ORCHESTRATOR ===
    
    let orchestrator = service.try_resolve::<MemoryOrchestrator>();
    assert!(orchestrator.is_some(), "MemoryOrchestrator should be available");
    
    let orchestrator = orchestrator.unwrap();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ coordinators –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    let all_ready = orchestrator.all_ready().await;
    println!("üìä All coordinators ready: {}", all_ready);
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç orchestrator
    let orchestrator_metrics = orchestrator.all_metrics().await;
    println!("üìà Orchestrator metrics: {}", orchestrator_metrics);
    
    // === –ü–†–û–í–ï–†–ö–ê CIRCUIT BREAKERS ===
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ circuit breakers –≤—Å–µ—Ö coordinators
    let cb_status = orchestrator.circuit_breaker_status().await;
    println!("üîå Circuit breaker status: {}", cb_status);
    
    // –í—Å–µ circuit breakers –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Closed (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞)
    assert!(cb_status.contains("Closed"), "At least some circuit breakers should be Closed");
    
    // === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï COORDINATED OPERATIONS ===
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ orchestrator
    let test_records = vec![
        create_test_record("Orchestrator test record 1: AI system coordination", Layer::Interact),
        create_test_record("Orchestrator test record 2: Memory management strategies", Layer::Insights),
        create_test_record("Orchestrator test record 3: Performance optimization techniques", Layer::Assets),
    ];
    
    for record in &test_records {
        service.insert(record.clone()).await?;
    }
    
    println!("‚úÖ Test records inserted through orchestrated service");
    
    // === –ü–†–û–í–ï–†–ö–ê SLA MONITORING ===
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SLA
    let search_start = std::time::Instant::now();
    
    for _ in 0..20 {
        let _results = service.search(
            "orchestrator coordination",
            Layer::Interact,
            SearchOptions { top_k: 5, ..Default::default() }
        ).await?;
    }
    
    let search_duration = search_start.elapsed();
    let avg_search_time = search_duration.as_millis() as f64 / 20.0;
    
    println!("üîç Average search time: {:.2}ms", avg_search_time);
    
    // === –ü–†–û–í–ï–†–ö–ê HEALTH AGGREGATION ===
    
    let health_status = orchestrator.aggregated_health().await;
    println!("üè• Aggregated health: {}", health_status);
    
    // Health status –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å positive
    assert!(health_status.contains("healthy") || health_status.contains("ok"), 
            "Aggregated health should be positive");
    
    println!("‚úÖ MemoryOrchestrator Integration Test successful");
    
    Ok(())
}

/// –¢–ï–°–¢ 2: EmbeddingCoordinator Integration
/// 
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç coordinator –¥–ª—è embeddings —Å adaptive batching
#[tokio::test]
async fn test_embedding_coordinator_integration() -> Result<()> {
    println!("üß† Starting EmbeddingCoordinator Integration Test");
    
    let service = create_orchestration_test_service().await?;
    
    // === –ü–û–õ–£–ß–ï–ù–ò–ï EMBEDDING COORDINATOR ===
    
    let embedding_coordinator = service.try_resolve::<EmbeddingCoordinator>();
    assert!(embedding_coordinator.is_some(), "EmbeddingCoordinator should be available");
    
    let embedding_coordinator = embedding_coordinator.unwrap();
    
    // === –ü–†–û–í–ï–†–ö–ê COORDINATOR STATUS ===
    
    let is_ready = embedding_coordinator.is_ready().await;
    println!("üìä EmbeddingCoordinator ready: {}", is_ready);
    
    let metrics = embedding_coordinator.get_metrics().await;
    println!("üìà EmbeddingCoordinator metrics: {:?}", metrics);
    
    // === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BATCH PROCESSING ===
    
    // –°–æ–∑–¥–∞–µ–º batch —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è embedding
    let texts = vec![
        "Machine learning embeddings for semantic search",
        "Vector databases and similarity algorithms",
        "HNSW algorithm implementation details",
        "Natural language processing techniques",
        "Deep learning model optimization",
    ];
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º batch embedding generation
    let batch_start = std::time::Instant::now();
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ service, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å EmbeddingCoordinator
    for (i, text) in texts.iter().enumerate() {
        let record = create_test_record(text, Layer::Interact);
        service.insert(record).await?;
        
        if i % 2 == 0 {
            sleep(Duration::from_millis(5)).await; // –ù–µ–±–æ–ª—å—à–∏–µ –ø–∞—É–∑—ã –¥–ª—è batch testing
        }
    }
    
    let batch_duration = batch_start.elapsed();
    println!("üîÑ Batch embedding processing time: {:.2}ms", batch_duration.as_millis());
    
    // === –ü–†–û–í–ï–†–ö–ê ADAPTIVE BATCHING ===
    
    // –°–æ–∑–¥–∞–µ–º burst –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è adaptive batching
    let burst_texts: Vec<String> = (0..20).map(|i| 
        format!("Burst text {} for adaptive batching test", i)
    ).collect();
    
    let burst_start = std::time::Instant::now();
    
    for text in burst_texts {
        let record = create_test_record(&text, Layer::Interact);
        service.insert(record).await?;
    }
    
    let burst_duration = burst_start.elapsed();
    println!("‚ö° Burst processing time: {:.2}ms", burst_duration.as_millis());
    
    // Adaptive batching –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —á–µ–º linear processing
    let burst_avg = burst_duration.as_millis() as f64 / 20.0;
    println!("   Average per operation: {:.2}ms", burst_avg);
    
    // === –ü–†–û–í–ï–†–ö–ê CIRCUIT BREAKER ===
    
    let cb_status = embedding_coordinator.circuit_breaker_status().await;
    println!("üîå EmbeddingCoordinator circuit breaker: {}", cb_status);
    
    // Circuit breaker –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Closed (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞)
    assert!(cb_status == "Closed", "Circuit breaker should be Closed for normal operation");
    
    println!("‚úÖ EmbeddingCoordinator Integration Test successful");
    
    Ok(())
}

/// –¢–ï–°–¢ 3: SearchCoordinator Integration  
/// 
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç coordinator –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å sub-5ms SLA –∏ caching
#[tokio::test]
async fn test_search_coordinator_integration() -> Result<()> {
    println!("üîç Starting SearchCoordinator Integration Test");
    
    let service = create_orchestration_test_service().await?;
    
    // === –ü–û–î–ì–û–¢–û–í–ö–ê TEST DATA ===
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
    let search_test_data = vec![
        "Advanced vector search algorithms and optimization techniques",
        "HNSW hierarchical navigable small world implementation",
        "Semantic similarity computation using cosine distance",
        "Machine learning embeddings for natural language processing",
        "Database indexing strategies for high-dimensional vectors",
        "Real-time search performance optimization methods",
        "Distributed vector databases and sharding techniques",
        "AI-powered search ranking and relevance scoring",
        "Memory-efficient vector storage and compression",
        "Production-scale vector search system architecture",
    ];
    
    for (i, text) in search_test_data.iter().enumerate() {
        let record = create_test_record(text, Layer::Interact);
        service.insert(record).await?;
        
        if i % 3 == 0 {
            println!("   Inserted {} test records", i + 1);
        }
    }
    
    println!("‚úÖ Test data prepared: {} records", search_test_data.len());
    
    // === –ü–û–õ–£–ß–ï–ù–ò–ï SEARCH COORDINATOR ===
    
    let search_coordinator = service.try_resolve::<SearchCoordinator>();
    assert!(search_coordinator.is_some(), "SearchCoordinator should be available");
    
    let search_coordinator = search_coordinator.unwrap();
    
    // === SUB-5MS SLA TESTING ===
    
    println!("‚è±Ô∏è Testing sub-5ms SLA requirement...");
    
    let search_queries = vec![
        "vector search optimization",
        "HNSW algorithm performance", 
        "machine learning embeddings",
        "database indexing strategies",
        "real-time search systems",
    ];
    
    let mut search_times = Vec::new();
    
    for query in &search_queries {
        let search_start = std::time::Instant::now();
        
        let results = service.search(
            query,
            Layer::Interact,
            SearchOptions { top_k: 10, ..Default::default() }
        ).await?;
        
        let search_time = search_start.elapsed();
        search_times.push(search_time.as_micros() as f64 / 1000.0); // Convert to milliseconds
        
        assert!(!results.is_empty(), "Search should return results for: {}", query);
    }
    
    let avg_search_time = search_times.iter().sum::<f64>() / search_times.len() as f64;
    let max_search_time = search_times.iter().fold(0.0, |acc, &x| acc.max(x));
    
    println!("üìä Search performance results:");
    println!("   Average search time: {:.3}ms", avg_search_time);
    println!("   Maximum search time: {:.3}ms", max_search_time);
    println!("   All search times: {:?}", search_times);
    
    // SLA requirement: sub-5ms search
    assert!(avg_search_time < 5.0, "Average search SLA violation: {:.3}ms >= 5ms", avg_search_time);
    assert!(max_search_time < 10.0, "Maximum search time too high: {:.3}ms", max_search_time); // –ù–µ–∫–æ—Ç–æ—Ä–∞—è —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å
    
    // === CACHE EFFECTIVENESS TESTING ===
    
    println!("üíæ Testing cache effectiveness...");
    
    // –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫ - cold cache
    let cold_search_start = std::time::Instant::now();
    let _cold_results = service.search(
        "vector search optimization",
        Layer::Interact,
        SearchOptions { top_k: 10, ..Default::default() }
    ).await?;
    let cold_search_time = cold_search_start.elapsed();
    
    // –í—Ç–æ—Ä–æ–π –ø–æ–∏—Å–∫ - warm cache (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ)
    let warm_search_start = std::time::Instant::now();
    let _warm_results = service.search(
        "vector search optimization",
        Layer::Interact,
        SearchOptions { top_k: 10, ..Default::default() }
    ).await?;
    let warm_search_time = warm_search_start.elapsed();
    
    println!("   Cold cache search: {:.3}ms", cold_search_time.as_micros() as f64 / 1000.0);
    println!("   Warm cache search: {:.3}ms", warm_search_time.as_micros() as f64 / 1000.0);
    
    // Warm cache –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ —á–µ–º cold cache
    assert!(warm_search_time <= cold_search_time * 2, 
            "Warm cache search should not be significantly slower");
    
    // === –ü–†–û–í–ï–†–ö–ê COORDINATOR METRICS ===
    
    let search_metrics = search_coordinator.get_metrics().await;
    println!("üìà SearchCoordinator metrics: {:?}", search_metrics);
    
    let cb_status = search_coordinator.circuit_breaker_status().await;
    println!("üîå SearchCoordinator circuit breaker: {}", cb_status);
    
    assert!(cb_status == "Closed", "Circuit breaker should be Closed");
    
    println!("‚úÖ SearchCoordinator Integration Test successful");
    println!("   SLA compliance: {:.3}ms < 5ms ‚úì", avg_search_time);
    
    Ok(())
}

/// –¢–ï–°–¢ 4: HealthManager Integration
/// 
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç health monitoring —Å SLA –º–µ—Ç—Ä–∏–∫–∞–º–∏
#[tokio::test]
async fn test_health_manager_integration() -> Result<()> {
    println!("üè• Starting HealthManager Integration Test");
    
    let service = create_orchestration_test_service().await?;
    
    // === –ü–û–õ–£–ß–ï–ù–ò–ï HEALTH MANAGER ===
    
    let health_manager = service.try_resolve::<HealthManager>();
    assert!(health_manager.is_some(), "HealthManager should be available");
    
    let health_manager = health_manager.unwrap();
    
    // === –ü–†–û–í–ï–†–ö–ê INITIAL HEALTH ===
    
    let initial_health = health_manager.check_system_health().await?;
    println!("üìä Initial system health: {:?}", initial_health);
    
    assert!(initial_health.overall_healthy, "System should be healthy initially");
    assert!(!initial_health.components.is_empty(), "Should have component health data");
    
    // === –ì–ï–ù–ï–†–ê–¶–ò–Ø LOAD –î–õ–Ø HEALTH METRICS ===
    
    println!("üîÑ Generating load for health metrics...");
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    for i in 0..30 {
        let record = create_test_record(
            &format!("Health test record {}: monitoring system performance", i),
            Layer::Interact
        );
        
        service.insert(record).await?;
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if i % 5 == 0 {
            let _results = service.search(
                "health monitoring performance",
                Layer::Interact,
                SearchOptions { top_k: 5, ..Default::default() }
            ).await?;
        }
        
        if i % 10 == 0 {
            sleep(Duration::from_millis(5)).await;
        }
    }
    
    // === –ü–†–û–í–ï–†–ö–ê HEALTH –ü–û–°–õ–ï LOAD ===
    
    let health_after_load = health_manager.check_system_health().await?;
    println!("üìä Health after load: {:?}", health_after_load);
    
    assert!(health_after_load.overall_healthy, "System should remain healthy under load");
    
    // === SLA MONITORING TESTING ===
    
    let sla_metrics = health_manager.get_sla_metrics().await?;
    println!("üìà SLA metrics: {:?}", sla_metrics);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SLA metrics —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    assert!(sla_metrics.contains_key("search_latency") || 
            sla_metrics.contains_key("response_time") ||
            sla_metrics.contains_key("availability"), 
            "SLA metrics should contain performance data");
    
    // === ALERT SYSTEM TESTING ===
    
    println!("üö® Testing alert system...");
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ alerts
    let current_alerts = health_manager.get_current_alerts().await?;
    println!("   Current alerts: {} active", current_alerts.len());
    
    // –í –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å critical alerts
    let critical_alerts: Vec<_> = current_alerts.iter()
        .filter(|alert| alert.contains("critical") || alert.contains("error"))
        .collect();
    
    assert!(critical_alerts.is_empty(), "Should not have critical alerts in normal operation");
    
    // === UPTIME TRACKING ===
    
    let uptime = health_after_load.uptime;
    println!("‚è±Ô∏è System uptime: {:?}", uptime);
    
    assert!(uptime > Duration::from_millis(100), "System should have positive uptime");
    
    // === PERFORMANCE DEGRADATION CHECK ===
    
    let performance_status = health_manager.check_performance_degradation().await?;
    println!("‚ö° Performance status: {}", performance_status);
    
    // Performance –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å degraded –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
    assert!(!performance_status.contains("degraded"), 
            "Performance should not be degraded: {}", performance_status);
    
    println!("‚úÖ HealthManager Integration Test successful");
    
    Ok(())
}

/// –¢–ï–°–¢ 5: ResourceController Integration
/// 
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç auto-scaling –∏ resource management
#[tokio::test] 
async fn test_resource_controller_integration() -> Result<()> {
    println!("‚öôÔ∏è Starting ResourceController Integration Test");
    
    let service = create_orchestration_test_service().await?;
    
    // === –ü–û–õ–£–ß–ï–ù–ò–ï RESOURCE CONTROLLER ===
    
    let resource_controller = service.try_resolve::<ResourceController>();
    assert!(resource_controller.is_some(), "ResourceController should be available");
    
    let resource_controller = resource_controller.unwrap();
    
    // === –ü–†–û–í–ï–†–ö–ê INITIAL RESOURCE STATE ===
    
    let initial_resources = resource_controller.get_resource_status().await?;
    println!("üìä Initial resource status: {:?}", initial_resources);
    
    // === RESOURCE MONITORING UNDER LOAD ===
    
    println!("üîÑ Testing resource monitoring under load...");
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è resource scaling
    let load_start = std::time::Instant::now();
    let mut operation_handles = Vec::new();
    
    for i in 0..50 {
        let service_clone = service.clone();
        let handle = tokio::spawn(async move {
            let record = create_test_record(
                &format!("Resource load test {}: intensive operation data", i),
                Layer::Interact
            );
            
            service_clone.insert(record).await
        });
        
        operation_handles.push(handle);
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è load operations
    let load_results = timeout(
        Duration::from_secs(10),
        futures::future::try_join_all(operation_handles)
    ).await??;
    
    let load_duration = load_start.elapsed();
    let successful_ops = load_results.iter().filter(|r| r.is_ok()).count();
    
    println!("üìà Load test results:");
    println!("   Duration: {:.2}s", load_duration.as_secs_f64());
    println!("   Successful operations: {}/{}", successful_ops, load_results.len());
    
    // === –ü–†–û–í–ï–†–ö–ê RESOURCE STATE –ü–û–°–õ–ï LOAD ===
    
    let resources_after_load = resource_controller.get_resource_status().await?;
    println!("üìä Resources after load: {:?}", resources_after_load);
    
    // === AUTO-SCALING BEHAVIOR ===
    
    let scaling_status = resource_controller.get_scaling_status().await?;
    println!("üìè Auto-scaling status: {}", scaling_status);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ auto-scaling —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–≥—Ä—É–∑–∫—É
    assert!(scaling_status.contains("stable") || 
            scaling_status.contains("scaling") ||
            scaling_status.contains("active"), 
            "Auto-scaling should be responsive");
    
    // === PREDICTIVE ANALYTICS TESTING ===
    
    let prediction = resource_controller.predict_resource_needs().await?;
    println!("üîÆ Resource prediction: {:?}", prediction);
    
    // Prediction –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    assert!(prediction.contains_key("cpu") || 
            prediction.contains_key("memory") ||
            prediction.contains_key("storage"), 
            "Prediction should contain resource metrics");
    
    // === RESOURCE OPTIMIZATION ===
    
    let optimization_result = resource_controller.optimize_resources().await?;
    println!("‚ö° Resource optimization: {}", optimization_result);
    
    assert!(optimization_result.contains("completed") || 
            optimization_result.contains("optimized") ||
            optimization_result.contains("success"), 
            "Resource optimization should complete successfully");
    
    println!("‚úÖ ResourceController Integration Test successful");
    
    Ok(())
}

/// –¢–ï–°–¢ 6: Cross-Coordinator Integration
/// 
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –≤—Å–µ–º–∏ coordinators
#[tokio::test]
async fn test_cross_coordinator_integration() -> Result<()> {
    println!("üîó Starting Cross-Coordinator Integration Test");
    
    let service = create_orchestration_test_service().await?;
    
    // === –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• COORDINATORS ===
    
    let orchestrator = service.try_resolve::<MemoryOrchestrator>();
    let embedding_coord = service.try_resolve::<EmbeddingCoordinator>();
    let search_coord = service.try_resolve::<SearchCoordinator>();
    let health_manager = service.try_resolve::<HealthManager>();
    let resource_controller = service.try_resolve::<ResourceController>();
    
    assert!(orchestrator.is_some(), "MemoryOrchestrator should be available");
    assert!(embedding_coord.is_some(), "EmbeddingCoordinator should be available");
    assert!(search_coord.is_some(), "SearchCoordinator should be available");
    assert!(health_manager.is_some(), "HealthManager should be available");
    
    println!("‚úÖ All coordinators resolved successfully");
    
    // === COORDINATED WORKFLOW TESTING ===
    
    println!("üîÑ Testing coordinated workflow...");
    
    // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—â–∞—è –≤—Å–µ coordinators:
    // 1. EmbeddingCoordinator: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è embeddings
    // 2. SearchCoordinator: –ø–æ–∏—Å–∫ –∏ caching
    // 3. HealthManager: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
    // 4. ResourceController: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    // 5. MemoryOrchestrator: –æ–±—â–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è
    
    let workflow_records = vec![
        "Coordinated workflow test: embedding generation and vector search",
        "Cross-coordinator integration: health monitoring and resource management", 
        "System orchestration: performance optimization and SLA compliance",
        "Multi-component operation: caching, scaling, and circuit breaker management",
        "Production workflow simulation: comprehensive coordinator interaction",
    ];
    
    let workflow_start = std::time::Instant::now();
    
    for (i, text) in workflow_records.iter().enumerate() {
        // Insert –æ–ø–µ—Ä–∞—Ü–∏—è (–∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç EmbeddingCoordinator)
        let record = create_test_record(text, Layer::Interact);
        service.insert(record).await?;
        
        // Search –æ–ø–µ—Ä–∞—Ü–∏—è (–∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç SearchCoordinator)
        let _results = service.search(
            &format!("workflow test {}", i),
            Layer::Interact,
            SearchOptions { top_k: 3, ..Default::default() }
        ).await?;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è coordinator interaction
        sleep(Duration::from_millis(10)).await;
    }
    
    let workflow_duration = workflow_start.elapsed();
    
    println!("‚è±Ô∏è Coordinated workflow completed in {:.2}ms", workflow_duration.as_millis());
    
    // === –ü–†–û–í–ï–†–ö–ê COORDINATOR SYNCHRONIZATION ===
    
    if let Some(orchestrator) = orchestrator {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ coordinators —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        let sync_status = orchestrator.check_coordinator_sync().await;
        println!("üîÑ Coordinator synchronization: {}", sync_status);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        let aggregated_metrics = orchestrator.all_metrics().await;
        println!("üìä Aggregated metrics: {}", aggregated_metrics);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π health
        let overall_health = orchestrator.aggregated_health().await;
        println!("üè• Overall health: {}", overall_health);
        
        assert!(overall_health.contains("healthy") || overall_health.contains("ok"),
                "Overall system health should be positive");
    }
    
    // === CIRCUIT BREAKER COORDINATION ===
    
    println!("üîå Testing circuit breaker coordination...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ circuit breakers –≤—Å–µ—Ö coordinators –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—Ç—Å—è
    if let (Some(embedding), Some(search), Some(health)) = (&embedding_coord, &search_coord, &health_manager) {
        let embedding_cb = embedding.circuit_breaker_status().await;
        let search_cb = search.circuit_breaker_status().await;
        let health_cb = health.circuit_breaker_status().await;
        
        println!("   EmbeddingCoordinator CB: {}", embedding_cb);
        println!("   SearchCoordinator CB: {}", search_cb);
        println!("   HealthManager CB: {}", health_cb);
        
        // –í—Å–µ circuit breakers –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ consistent state
        let all_closed = [&embedding_cb, &search_cb, &health_cb]
            .iter()
            .all(|cb| cb.contains("Closed"));
        
        if !all_closed {
            println!("‚ö†Ô∏è Warning: Circuit breakers in mixed states (expected in test env)");
        }
    }
    
    // === PERFORMANCE UNDER COORDINATION ===
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–æ–ª–Ω–æ–π coordinator coordination
    let perf_start = std::time::Instant::now();
    
    for i in 0..20 {
        let _results = service.search(
            "coordinated performance test",
            Layer::Interact,
            SearchOptions { top_k: 5, ..Default::default() }
        ).await?;
        
        if i % 5 == 0 {
            let record = create_test_record(
                &format!("Performance test record {}", i),
                Layer::Interact
            );
            service.insert(record).await?;
        }
    }
    
    let perf_duration = perf_start.elapsed();
    let ops_per_sec = 25.0 / perf_duration.as_secs_f64(); // 20 searches + 5 inserts
    
    println!("‚ö° Coordinated performance: {:.1} ops/sec", ops_per_sec);
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    assert!(ops_per_sec >= 20.0, "Coordination overhead too high: {:.1} ops/sec", ops_per_sec);
    
    println!("‚úÖ Cross-Coordinator Integration Test successful");
    println!("   Workflow duration: {:.2}ms", workflow_duration.as_millis());
    println!("   Coordinated performance: {:.1} ops/sec", ops_per_sec);
    
    Ok(())
}