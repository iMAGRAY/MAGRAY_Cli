//! Comprehensive Full System Integration Tests
//! 
//! –≠—Ç–∏ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∏—Ä—É—é—Ç –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å MAGRAY CLI —Å–∏—Å—Ç–µ–º—ã
//! –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π:
//! - DIMemoryService (95% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏)
//! - MemoryOrchestrator (95% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏)  
//! - UnifiedAgent (90% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏)
//! - –í—Å–µ orchestration coordinators (95% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏)

use anyhow::Result;
use memory::{
    DIMemoryService, 
    MemoryServiceConfig,
    Record, Layer, SearchOptions,
    orchestration::{MemoryOrchestrator, EmbeddingCoordinator, SearchCoordinator, HealthManager, ResourceController},
    service_di::default_config,
    CacheConfigType,
};
use ai::AiConfig;
use std::sync::Arc;
use tempfile::TempDir;
use tokio::time::{sleep, Duration, timeout};
use uuid::Uuid;
use chrono::Utc;
use std::collections::HashMap;


/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
fn create_test_record(text: &str, layer: Layer, session: &str) -> Record {
    Record {
        id: Uuid::new_v4(),
        text: text.to_string(),
        embedding: vec![], // –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        layer,
        kind: "integration_test".to_string(),
        tags: vec!["test".to_string(), session.to_string()],
        project: "magray_cli".to_string(),
        session: session.to_string(),
        score: 0.85,
        ts: Utc::now(),
        access_count: 0,
        last_access: Utc::now(),
    }
}

/// –°–æ–∑–¥–∞–Ω–∏–µ test service —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
async fn create_production_test_service() -> Result<DIMemoryService> {
    let temp_dir = TempDir::new()?;
    let mut config = default_config()?;
    
    // Production-like –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config.db_path = temp_dir.path().join("production_test.db");
    config.cache_path = temp_dir.path().join("production_cache");
    config.cache_config = CacheConfigType::InMemory { max_size: 10000 };
    config.health_enabled = true;
    
    // AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è embeddings
    config.ai_config = AiConfig {
        enable_ai: true,
        ..Default::default()
    };
    
    std::fs::create_dir_all(&config.cache_path)?;
    
    DIMemoryService::new(config).await
}

/// –¢–ï–°–¢ 1: –ü–æ–ª–Ω—ã–π End-to-End Workflow
/// 
/// –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π workflow:
/// 1. User input ‚Üí Intent analysis ‚Üí Routing ‚Üí Execution ‚Üí Memory storage
/// 2. Chat flow: message ‚Üí LLM ‚Üí response ‚Üí memory storage  
/// 3. Tools flow: command ‚Üí router ‚Üí tool execution ‚Üí result formatting
/// 4. Cross-layer memory operations: insert ‚Üí search ‚Üí promotion ‚Üí assets
#[tokio::test]
async fn test_complete_end_to_end_workflow() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    println!("üöÄ Starting Complete End-to-End Workflow Test");
    
    // === –§–ê–ó–ê 1: SYSTEM INITIALIZATION ===
    let service = create_production_test_service().await?;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ orchestration coordinators –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    let di_stats = service.di_stats();
    println!("üìä DI Container initialized: {} types, {} cached", 
             di_stats.total_types, di_stats.cached_singletons);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º health status
    let health = service.check_health().await?;
    assert!(health.overall_status == "healthy", "System should be healthy on startup");
    
    println!("‚úÖ Phase 1: System initialization complete");
    
    // === –§–ê–ó–ê 2: CHAT WORKFLOW SIMULATION ===
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º chat messages –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let chat_messages = vec![
        "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Rust?",
        "–û–±—ä—è—Å–Ω–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É HNSW –∞–ª–≥–æ—Ä–∏—Ç–º–∞",
        "–ö–∞–∫–∏–µ –µ—Å—Ç—å best practices –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞?",
        "–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è embeddings –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏",
    ];
    
    let mut chat_records = Vec::new();
    for (i, message) in chat_messages.iter().enumerate() {
        let record = create_test_record(
            &format!("Chat message {}: {}", i + 1, message),
            Layer::Interact,
            "chat_session_001"
        );
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º insert —á–µ—Ä–µ–∑ DIMemoryService
        service.insert(record.clone()).await?;
        chat_records.push(record);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        sleep(Duration::from_millis(10)).await;
    }
    
    println!("‚úÖ Phase 2: Chat workflow - {} messages processed", chat_records.len());
    
    // === –§–ê–ó–ê 3: TOOLS WORKFLOW SIMULATION ===
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º tools/commands –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let tool_commands = vec![
        "file_read: –ü—Ä–æ—á–∏—Ç–∞—Ç—å README.md",
        "web_search: Rust vector databases comparison",
        "git_status: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", 
        "shell_exec: cargo test --package memory",
    ];
    
    let mut tool_records = Vec::new();
    for (i, command) in tool_commands.iter().enumerate() {
        let record = create_test_record(
            &format!("Tool execution {}: {}", i + 1, command),
            Layer::Insights, // Tools results –≤ Insights layer
            "tools_session_001"
        );
        
        service.insert(record.clone()).await?;
        tool_records.push(record);
        
        sleep(Duration::from_millis(5)).await;
    }
    
    println!("‚úÖ Phase 3: Tools workflow - {} commands processed", tool_records.len());
    
    // === –§–ê–ó–ê 4: CROSS-LAYER MEMORY OPERATIONS ===
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å–ª–æ—è–º
    for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
        let search_results = service.search(
            "Rust vector database",
            layer,
            SearchOptions {
                top_k: 5,
                ..Default::default()
            }
        ).await?;
        
        println!("   Layer {:?}: {} search results", layer, search_results.len());
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ Assets layer –¥–ª—è permanent knowledge
    let asset_knowledge = vec![
        "HNSW (Hierarchical Navigable Small World) - —ç—Ç–æ –≥—Ä–∞—Ñ-based –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è approximate nearest neighbor search",
        "Vector embeddings –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Ç–µ–∫—Å—Ç –≤ –≤—ã—Å–æ–∫–æ–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –¥–ª—è semantic similarity",
        "Rust provides memory safety –±–µ–∑ garbage collection —á–µ—Ä–µ–∑ ownership system",
    ];
    
    for knowledge in asset_knowledge {
        let record = create_test_record(knowledge, Layer::Assets, "knowledge_base");
        service.insert(record).await?;
    }
    
    println!("‚úÖ Phase 4: Cross-layer operations complete");
    
    // === –§–ê–ó–ê 5: PERFORMANCE VALIDATION ===
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º sub-5ms search SLA
    let search_start = std::time::Instant::now();
    
    for _ in 0..100 {
        let _results = service.search(
            "vector database search performance",
            Layer::Interact,
            SearchOptions { top_k: 10, ..Default::default() }
        ).await?;
    }
    
    let search_duration = search_start.elapsed();
    let avg_search_time = search_duration.as_millis() as f64 / 100.0;
    
    println!("üîç Average search time: {:.2}ms", avg_search_time);
    
    // SLA requirement: sub-5ms search
    assert!(avg_search_time < 5.0, "Search performance SLA violation: {:.2}ms > 5ms", avg_search_time);
    
    println!("‚úÖ Phase 5: Performance validation - SLA met ({:.2}ms < 5ms)", avg_search_time);
    
    // === –§–ê–ó–ê 6: MEMORY PROMOTION CYCLE ===
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º promotion cycle
    let promotion_stats = service.run_promotion().await?;
    
    println!("üìà Promotion cycle completed:");
    println!("   Interact ‚Üí Insights: {}", promotion_stats.interact_to_insights);
    println!("   Insights ‚Üí Assets: {}", promotion_stats.insights_to_assets);
    println!("   Expired Interact: {}", promotion_stats.expired_interact);
    println!("   Expired Insights: {}", promotion_stats.expired_insights);
    
    println!("‚úÖ Phase 6: Memory promotion cycle complete");
    
    // === –§–ê–ó–ê 7: HEALTH & METRICS VALIDATION ===
    
    let final_health = service.check_health().await?;
    println!("üè• Final health status: {}", final_health.overall_status);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º metrics
    let stats = service.get_stats().await;
    println!("üìä Final system stats:");
    println!("   Cache hits: {}", stats.cache_hits);
    println!("   Cache misses: {}", stats.cache_misses);
    println!("   Total operations: {}", stats.cache_hits + stats.cache_misses);
    
    if stats.cache_hits + stats.cache_misses > 0 {
        let hit_rate = stats.cache_hits as f64 / (stats.cache_hits + stats.cache_misses) as f64 * 100.0;
        println!("   Cache hit rate: {:.1}%", hit_rate);
        
        // –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 50% cache hit rate –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        assert!(hit_rate >= 50.0, "Cache hit rate too low: {:.1}%", hit_rate);
    }
    
    println!("‚úÖ Phase 7: Health & metrics validation complete");
    
    println!("üéâ COMPLETE END-TO-END WORKFLOW TEST SUCCESSFUL");
    println!("   Total chat messages: {}", chat_records.len());
    println!("   Total tool commands: {}", tool_records.len());
    println!("   Average search performance: {:.2}ms", avg_search_time);
    println!("   Final health status: {}", final_health.overall_status);
    
    Ok(())
}

/// –¢–ï–°–¢ 2: Concurrent User Sessions Simulation
/// 
/// –°–∏–º—É–ª–∏—Ä—É–µ—Ç multiple concurrent –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å —Å–∏—Å—Ç–µ–º–æ–π
#[tokio::test]
async fn test_concurrent_user_sessions() -> Result<()> {
    println!("üë• Starting Concurrent User Sessions Test");
    
    let service = Arc::new(create_production_test_service().await?);
    
    let mut session_handles = Vec::new();
    
    // –°–æ–∑–¥–∞–µ–º 10 concurrent user sessions
    for session_id in 0..10 {
        let service_clone = service.clone();
        let handle = tokio::spawn(async move {
            let session_name = format!("user_session_{:02}", session_id);
            let mut operations_count = 0;
            
            // –ö–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç 20 –æ–ø–µ—Ä–∞—Ü–∏–π
            for i in 0..20 {
                let operation_type = i % 3;
                
                match operation_type {
                    0 => {
                        // Chat message
                        let record = create_test_record(
                            &format!("User {} message {}: How to implement AI systems?", session_id, i),
                            Layer::Interact,
                            &session_name
                        );
                        
                        if service_clone.insert(record).await.is_ok() {
                            operations_count += 1;
                        }
                    }
                    1 => {
                        // Search operation
                        let query = format!("AI implementation session {}", session_id);
                        if service_clone.search(&query, Layer::Interact, SearchOptions::default()).await.is_ok() {
                            operations_count += 1;
                        }
                    }
                    2 => {
                        // Tool command
                        let record = create_test_record(
                            &format!("User {} tool {}: Execute search operation", session_id, i),
                            Layer::Insights,
                            &session_name
                        );
                        
                        if service_clone.insert(record).await.is_ok() {
                            operations_count += 1;
                        }
                    }
                    _ => unreachable!(),
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
                sleep(Duration::from_millis(5)).await;
            }
            
            operations_count
        });
        
        session_handles.push(handle);
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    let session_results = futures::future::try_join_all(session_handles).await?;
    
    let total_operations: usize = session_results.iter().sum();
    let expected_operations = 10 * 20; // 10 sessions √ó 20 operations each
    
    println!("üìä Concurrent sessions completed:");
    println!("   Total operations: {}/{}", total_operations, expected_operations);
    println!("   Success rate: {:.1}%", (total_operations as f64 / expected_operations as f64) * 100.0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∏–Ω–∏–º—É–º 90% –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
    assert!(total_operations >= (expected_operations * 9 / 10), 
            "Too many failed operations: {}/{}", total_operations, expected_operations);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º health –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏
    let health_after_load = service.check_health().await?;
    assert!(health_after_load.overall_status == "healthy", 
            "System should remain healthy after concurrent load");
    
    println!("‚úÖ Concurrent User Sessions Test successful");
    
    Ok(())
}

/// –¢–ï–°–¢ 3: Production Workload Simulation
/// 
/// –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é production –Ω–∞–≥—Ä—É–∑–∫—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
#[tokio::test]
async fn test_production_workload_simulation() -> Result<()> {
    println!("üè≠ Starting Production Workload Simulation");
    
    let service = Arc::new(create_production_test_service().await?);
    
    // === –ü–û–î–ì–û–¢–û–í–ö–ê BASELINE DATA ===
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º baseline knowledge base
    let knowledge_base = vec![
        "Vector databases enable semantic search through high-dimensional embeddings",
        "HNSW algorithm provides efficient approximate nearest neighbor search",
        "Rust ownership system ensures memory safety without garbage collection",
        "Machine learning embeddings capture semantic relationships in text",
        "Distributed systems require careful consideration of consistency and availability",
        "API design principles emphasize clarity, consistency, and backwards compatibility",
        "Database indexing strategies significantly impact query performance",
        "Microservices architecture enables independent scaling and deployment",
        "Caching strategies reduce latency and improve system throughput",
        "Load balancing distributes traffic across multiple service instances",
    ];
    
    for (i, knowledge) in knowledge_base.iter().enumerate() {
        let record = create_test_record(knowledge, Layer::Assets, "baseline_knowledge");
        service.insert(record).await?;
        
        if i % 5 == 0 {
            println!("   Loaded {} baseline records", i + 1);
        }
    }
    
    println!("‚úÖ Baseline knowledge loaded: {} records", knowledge_base.len());
    
    // === PRODUCTION WORKLOAD SIMULATION ===
    
    let workload_start = std::time::Instant::now();
    let mut operation_handles = Vec::new();
    
    // 80% —á–∏—Ç–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, 20% –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∏—Ö (—Ç–∏–ø–∏—á–Ω–æ–µ production —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
    for op_id in 0..200 {
        let service_clone = service.clone();
        
        let handle = if op_id % 5 == 0 {
            // 20% writing operations
            tokio::spawn(async move {
                let record = create_test_record(
                    &format!("Production operation {}: Real user data processing", op_id),
                    Layer::Interact,
                    "production_workload"
                );
                
                service_clone.insert(record).await.map(|_| "write".to_string())
            })
        } else {
            // 80% reading operations
            tokio::spawn(async move {
                let queries = vec![
                    "vector database performance",
                    "HNSW algorithm optimization", 
                    "Rust memory management",
                    "machine learning embeddings",
                    "distributed systems architecture",
                ];
                
                let query = &queries[op_id % queries.len()];
                service_clone.search(query, Layer::Interact, SearchOptions {
                    top_k: 5,
                    ..Default::default()
                }).await.map(|_| "read".to_string())
            })
        };
        
        operation_handles.push(handle);
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å timeout
    let workload_results = timeout(
        Duration::from_secs(30),
        futures::future::try_join_all(operation_handles)
    ).await??;
    
    let workload_duration = workload_start.elapsed();
    
    // === –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
    
    let successful_ops = workload_results.len();
    let ops_per_second = successful_ops as f64 / workload_duration.as_secs_f64();
    
    println!("üìà Production workload results:");
    println!("   Total operations: {}", successful_ops);
    println!("   Duration: {:.2}s", workload_duration.as_secs_f64());
    println!("   Throughput: {:.1} ops/sec", ops_per_second);
    
    // Production requirements
    assert!(ops_per_second >= 50.0, "Production throughput too low: {:.1} ops/sec", ops_per_second);
    assert!(successful_ops >= 190, "Too many failed operations: {}/200", successful_ops);
    
    // === –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–ô ===
    
    let final_health = service.check_health().await?;
    assert!(final_health.overall_status == "healthy", 
            "System should remain healthy after production workload");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º metrics
    let final_stats = service.get_stats().await;
    println!("üìä Final production metrics:");
    println!("   Cache hit rate: {:.1}%", 
             if final_stats.cache_hits + final_stats.cache_misses > 0 {
                 final_stats.cache_hits as f64 / (final_stats.cache_hits + final_stats.cache_misses) as f64 * 100.0
             } else { 0.0 });
    
    println!("‚úÖ Production Workload Simulation successful");
    println!("   Throughput: {:.1} ops/sec", ops_per_second);
    println!("   Success rate: {:.1}%", (successful_ops as f64 / 200.0) * 100.0);
    
    Ok(())
}

/// –¢–ï–°–¢ 4: Memory Lifecycle Integration
/// 
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π lifecycle –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ –≤—Å–µ —Å–ª–æ–∏ –ø–∞–º—è—Ç–∏
#[tokio::test] 
async fn test_memory_lifecycle_integration() -> Result<()> {
    println!("üîÑ Starting Memory Lifecycle Integration Test");
    
    let service = create_production_test_service().await?;
    
    // === –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ï–ô –í INTERACT LAYER ===
    
    let mut lifecycle_records = Vec::new();
    
    for i in 0..50 {
        let record = create_test_record(
            &format!("Lifecycle record {}: Important information about system design", i),
            Layer::Interact,
            "lifecycle_test"
        );
        
        service.insert(record.clone()).await?;
        lifecycle_records.push(record);
    }
    
    println!("‚úÖ Created {} records in Interact layer", lifecycle_records.len());
    
    // === –ü–†–û–í–ï–†–ö–ê –ü–û–ò–°–ö–ê –í INTERACT ===
    
    let interact_search = service.search(
        "system design",
        Layer::Interact,
        SearchOptions { top_k: 10, ..Default::default() }
    ).await?;
    
    assert!(!interact_search.is_empty(), "Should find records in Interact layer");
    println!("   Found {} records in Interact search", interact_search.len());
    
    // === –°–ò–ú–£–õ–Ø–¶–ò–Ø –í–†–ï–ú–ï–ù–ò –î–õ–Ø PROMOTION ===
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ Insights –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ promotion logic
    for i in 0..20 {
        let record = Record {
            id: Uuid::new_v4(),
            text: format!("Insights record {}: Analysis and patterns from data", i),
            embedding: vec![],
            layer: Layer::Insights,
            kind: "analysis".to_string(),
            tags: vec!["insights".to_string(), "analysis".to_string()],
            project: "magray_cli".to_string(),
            session: "lifecycle_test".to_string(),
            score: 0.9,
            ts: Utc::now() - chrono::Duration::days(1), // Older timestamp
            access_count: i + 5, // Simulated access
            last_access: Utc::now(),
        };
        
        service.insert(record).await?;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ Assets
    for i in 0..10 {
        let record = Record {
            id: Uuid::new_v4(),
            text: format!("Asset record {}: Core knowledge and principles", i),
            embedding: vec![],
            layer: Layer::Assets,
            kind: "knowledge".to_string(),
            tags: vec!["assets".to_string(), "core".to_string()],
            project: "magray_cli".to_string(),
            session: "lifecycle_test".to_string(),
            score: 0.95,
            ts: Utc::now() - chrono::Duration::days(30), // Much older
            access_count: i + 10, // High access count
            last_access: Utc::now(),
        };
        
        service.insert(record).await?;
    }
    
    println!("‚úÖ Added records to all memory layers");
    
    // === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PROMOTION CYCLE ===
    
    let promotion_start = std::time::Instant::now();
    let promotion_results = service.run_promotion().await?;
    let promotion_duration = promotion_start.elapsed();
    
    println!("üìà Promotion cycle completed in {:.2}s:", promotion_duration.as_secs_f64());
    println!("   Interact ‚Üí Insights: {}", promotion_results.interact_to_insights);
    println!("   Insights ‚Üí Assets: {}", promotion_results.insights_to_assets);
    println!("   Expired from Interact: {}", promotion_results.expired_interact);
    println!("   Expired from Insights: {}", promotion_results.expired_insights);
    
    // === –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–°–õ–ï PROMOTION ===
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤–æ –≤—Å–µ—Ö —Å–ª–æ—è—Ö
    for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
        let layer_search = service.search(
            "information knowledge",
            layer,
            SearchOptions { top_k: 5, ..Default::default() }
        ).await?;
        
        println!("   Layer {:?}: {} records found", layer, layer_search.len());
    }
    
    println!("‚úÖ Memory Lifecycle Integration Test successful");
    
    Ok(())
}

/// –¢–ï–°–¢ 5: Error Recovery and Resilience
/// 
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç recovery –ø–æ—Å–ª–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö failure scenarios
#[tokio::test]
async fn test_error_recovery_resilience() -> Result<()> {
    println!("üõ°Ô∏è Starting Error Recovery and Resilience Test");
    
    let temp_dir = TempDir::new()?;
    let mut config = default_config()?;
    config.db_path = temp_dir.path().join("resilience_test.db");
    config.cache_path = temp_dir.path().join("resilience_cache");
    config.health_enabled = true;
    
    std::fs::create_dir_all(&config.cache_path)?;
    
    // === –°–û–ó–î–ê–ù–ò–ï INITIAL SERVICE ===
    
    let service = DIMemoryService::new(config.clone()).await?;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let critical_data = vec![
        "Critical system configuration data",
        "Important user preferences and settings", 
        "Essential application state information",
        "Key performance metrics and monitoring data",
    ];
    
    for (i, data) in critical_data.iter().enumerate() {
        let record = create_test_record(data, Layer::Assets, "critical_data");
        service.insert(record).await?;
        
        if i == 0 {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å —Ç–æ—á–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
            let search_result = service.search(data, Layer::Assets, SearchOptions::default()).await?;
            assert!(!search_result.is_empty(), "Critical data should be immediately searchable");
        }
    }
    
    println!("‚úÖ Initial data stored: {} critical records", critical_data.len());
    
    // === –°–ò–ú–£–õ–Ø–¶–ò–Ø SERVICE RESTART ===
    
    println!("üí• Simulating service restart...");
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
    drop(service);
    sleep(Duration::from_millis(100)).await;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
    let recovered_service = DIMemoryService::new(config.clone()).await?;
    
    // === –ü–†–û–í–ï–†–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ critical data –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
    for data in &critical_data {
        let search_result = recovered_service.search(data, Layer::Assets, SearchOptions::default()).await?;
        assert!(!search_result.is_empty(), "Critical data should survive restart: {}", data);
    }
    
    println!("‚úÖ Data recovery successful: all critical records restored");
    
    // === –ü–†–û–í–ï–†–ö–ê HEALTH –ü–û–°–õ–ï RECOVERY ===
    
    let health_after_recovery = recovered_service.check_health().await?;
    assert!(health_after_recovery.overall_status == "healthy", 
            "System should be healthy after recovery");
    
    // === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –ü–û–°–õ–ï RECOVERY ===
    
    // –ù–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    let post_recovery_record = create_test_record(
        "Post-recovery test data",
        Layer::Interact,
        "recovery_test"
    );
    
    recovered_service.insert(post_recovery_record).await?;
    
    let post_recovery_search = recovered_service.search(
        "Post-recovery test",
        Layer::Interact,
        SearchOptions::default()
    ).await?;
    
    assert!(!post_recovery_search.is_empty(), "Operations should work normally after recovery");
    
    println!("‚úÖ Post-recovery operations functional");
    
    // === STRESS TEST AFTER RECOVERY ===
    
    // –ù–µ–±–æ–ª—å—à–æ–π stress test —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞
    let stress_handles: Vec<_> = (0..20).map(|i| {
        let service = recovered_service.clone();
        tokio::spawn(async move {
            let record = create_test_record(
                &format!("Stress test record {}", i),
                Layer::Interact,
                "stress_after_recovery"
            );
            
            service.insert(record).await
        })
    }).collect();
    
    let stress_results = futures::future::try_join_all(stress_handles).await?;
    let stress_success_count = stress_results.iter().filter(|r| r.is_ok()).count();
    
    assert!(stress_success_count >= 18, "Most stress operations should succeed after recovery: {}/20", stress_success_count);
    
    println!("‚úÖ Stress test after recovery: {}/20 operations successful", stress_success_count);
    
    println!("üõ°Ô∏è Error Recovery and Resilience Test successful");
    
    Ok(())
}