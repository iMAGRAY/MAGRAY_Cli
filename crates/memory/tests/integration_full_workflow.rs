use anyhow::Result;
use magray_memory::{
    MemoryService, MemoryConfig, VectorStore, BackupManager, IncrementalBackupManager,
    DynamicDimensionManager, DimensionConfig, OptimizedRebuildManager, RebuildConfig,
    Record, Layer, ResourceManager, ResourceConfig, HealthMonitor, HealthConfig,
};
use std::sync::Arc;
use tempfile::TempDir;
use tokio::time::{sleep, Duration};
use uuid::Uuid;

// @component: {"k":"T","id":"integration_tests","t":"Full workflow integration tests","m":{"cur":0,"tgt":90,"u":"%"},"f":["integration","workflow","testing"]}

/// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
#[tokio::test]
async fn test_complete_memory_system_workflow() -> Result<()> {
    tracing_subscriber::fmt::init();
    
    // === –§–ê–ó–ê 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
    let temp_dir = TempDir::new()?;
    let base_path = temp_dir.path();
    
    // –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    let memory_config = MemoryConfig::default();
    let mut memory_service = MemoryService::new(memory_config, base_path).await?;
    
    let resource_manager = ResourceManager::new(ResourceConfig::default())?;
    let dimension_manager = DynamicDimensionManager::new(DimensionConfig::default())?;
    let rebuild_manager = OptimizedRebuildManager::new(RebuildConfig::default());
    let backup_manager = BackupManager::new(base_path.join("backups"))?;
    let incremental_backup = IncrementalBackupManager::new(base_path.join("inc_backups"))?;
    
    println!("‚úÖ Phase 1: All components initialized");

    // === –§–ê–ó–ê 2: –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –î–ê–ù–ù–´–ú–ò ===
    
    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
    let test_records = create_diverse_test_records(100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
    for record in &test_records {
        memory_service.store_record(record).await?;
    }
    
    println!("‚úÖ Phase 2: {} records stored", test_records.len());

    // === –§–ê–ó–ê 3: –ü–û–ò–°–ö –ò –í–ê–õ–ò–î–ê–¶–ò–Ø ===
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å–ª–æ—è–º
    for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
        let query = vec![0.1; 1024];
        let results = memory_service.search(&query, layer, 10, None).await?;
        
        assert!(!results.is_empty(), "Search returned no results for layer {:?}", layer);
        println!("‚úÖ Phase 3: Search in layer {:?} returned {} results", layer, results.len());
    }

    // === –§–ê–ó–ê 4: RESOURCE SCALING ===
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–æ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
    let large_batch = create_diverse_test_records(500);
    for chunk in large_batch.chunks(50) {
        for record in chunk {
            memory_service.store_record(record).await?;
        }
        sleep(Duration::from_millis(10)).await; // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    }
    
    println!("‚úÖ Phase 4: Resource scaling tested with {} additional records", large_batch.len());

    // === –§–ê–ó–ê 5: BACKUP & RESTORE ===
    
    // –ü–æ–ª–Ω—ã–π backup
    let store = memory_service.get_vector_store();
    let full_backup_path = backup_manager.create_backup(store.clone(), Some("integration_test_full".to_string())).await?;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –µ—â—ë –¥–∞–Ω–Ω—ã—Ö –¥–ª—è incremental backup
    let delta_records = create_diverse_test_records(50);
    for record in &delta_records {
        memory_service.store_record(record).await?;
    }
    
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π backup
    let inc_backup_path = incremental_backup.create_incremental_backup(
        store.clone(),
        "integration_test_full",
        Some("integration_test_incremental".to_string())
    ).await?;
    
    println!("‚úÖ Phase 5: Backups created - Full: {:?}, Incremental: {:?}", 
             full_backup_path, inc_backup_path);

    // === –§–ê–ó–ê 6: DIMENSION MANAGEMENT ===
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    let dimensions_to_test = vec![384, 768, 1536];
    
    for &dim in &dimensions_to_test {
        let test_vector = vec![0.5; dim];
        let detected_dim = dimension_manager.detect_dimension(&test_vector);
        
        println!("‚úÖ Phase 6: Dimension {} detected as {}", dim, detected_dim);
    }

    // === –§–ê–ó–ê 7: INDEX REBUILD OPTIMIZATION ===
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º rebuild
    let layer = Layer::Interact;
    let index = memory_service.get_vector_store()
        .indices.get(&layer)
        .expect("Index should exist for layer");
    
    let rebuild_result = rebuild_manager.smart_rebuild_index(
        &memory_service.get_vector_store(),
        layer,
        index
    ).await?;
    
    println!("‚úÖ Phase 7: Index rebuild completed - {} records processed in {:.2}s", 
             rebuild_result.records_processed, 
             rebuild_result.duration.as_secs_f64());

    // === –§–ê–ó–ê 8: HEALTH MONITORING ===
    
    let health_config = HealthConfig::default();
    let health_monitor = HealthMonitor::new(health_config)?;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    let system_stats = memory_service.get_system_stats().await?;
    println!("‚úÖ Phase 8: System stats - Total records: {}", system_stats.total_records);

    // === –§–ê–ó–ê 9: –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï ===
    
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π instance –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è restore
    let restore_temp_dir = TempDir::new()?;
    let restore_memory_service = MemoryService::new(
        MemoryConfig::default(), 
        restore_temp_dir.path()
    ).await?;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –ø–æ–ª–Ω–æ–≥–æ backup
    backup_manager.restore_backup(
        restore_memory_service.get_vector_store(),
        &full_backup_path
    ).await?;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π backup
    incremental_backup.restore_incremental_backup(
        restore_memory_service.get_vector_store(),
        &inc_backup_path
    ).await?;
    
    println!("‚úÖ Phase 9: Restore completed");

    // === –§–ê–ó–ê 10: –í–ê–õ–ò–î–ê–¶–ò–Ø –¶–ï–õ–û–°–¢–ù–û–°–¢–ò ===
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    let original_stats = memory_service.get_system_stats().await?;
    let restored_stats = restore_memory_service.get_system_stats().await?;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= —á–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ (–ø–æ—Ç–æ–º—É —á—Ç–æ –¥–æ–±–∞–≤–ª—è–ª–∏ delta)
    assert!(restored_stats.total_records >= original_stats.total_records, 
            "Restored records count should be >= original");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    let query = vec![0.1; 1024];
    let search_results = restore_memory_service.search(&query, Layer::Interact, 5, None).await?;
    assert!(!search_results.is_empty(), "Search in restored system should return results");
    
    println!("‚úÖ Phase 10: Integrity validation passed");
    println!("üéâ COMPLETE WORKFLOW TEST SUCCESSFUL");
    println!("   Original records: {}", original_stats.total_records);
    println!("   Restored records: {}", restored_stats.total_records);
    println!("   Search results: {}", search_results.len());

    Ok(())
}

/// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
#[tokio::test] 
async fn test_performance_under_load() -> Result<()> {
    let temp_dir = TempDir::new()?;
    let memory_service = MemoryService::new(MemoryConfig::default(), temp_dir.path()).await?;
    
    let start = std::time::Instant::now();
    
    // === –ù–ê–ì–†–£–ó–û–ß–ù–´–ô –¢–ï–°–¢: 1000 –∑–∞–ø–∏—Å–µ–π ===
    let records = create_diverse_test_records(1000);
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞
    let insert_start = std::time::Instant::now();
    
    for chunk in records.chunks(100) {
        let futures: Vec<_> = chunk.iter()
            .map(|record| memory_service.store_record(record))
            .collect();
        
        futures::future::try_join_all(futures).await?;
    }
    
    let insert_duration = insert_start.elapsed();
    
    // === –ù–ê–ì–†–£–ó–û–ß–ù–´–ô –¢–ï–°–¢: 100 –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ===
    let search_start = std::time::Instant::now();
    
    let mut search_results = Vec::new();
    for i in 0..100 {
        let query = vec![0.1 + (i as f32) * 0.01; 1024];
        let results = memory_service.search(&query, Layer::Interact, 10, None).await?;
        search_results.push(results.len());
    }
    
    let search_duration = search_start.elapsed();
    let total_duration = start.elapsed();
    
    // === –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
    let records_per_sec = records.len() as f64 / insert_duration.as_secs_f64();
    let searches_per_sec = 100.0 / search_duration.as_secs_f64();
    let avg_search_results = search_results.iter().sum::<usize>() as f64 / search_results.len() as f64;
    
    println!("üöÄ PERFORMANCE TEST RESULTS:");
    println!("   Total duration: {:.2}s", total_duration.as_secs_f64());
    println!("   Insert performance: {:.1} records/sec", records_per_sec);
    println!("   Search performance: {:.1} searches/sec", searches_per_sec);
    println!("   Average search results: {:.1}", avg_search_results);
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    assert!(records_per_sec > 50.0, "Insert performance too low: {:.1} records/sec", records_per_sec);
    assert!(searches_per_sec > 10.0, "Search performance too low: {:.1} searches/sec", searches_per_sec);
    
    Ok(())
}

/// –¢–µ—Å—Ç –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
#[tokio::test]
async fn test_resilience_and_recovery() -> Result<()> {
    let temp_dir = TempDir::new()?;
    let mut memory_service = MemoryService::new(MemoryConfig::default(), temp_dir.path()).await?;
    
    // === –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• ===
    let records = create_diverse_test_records(100);
    for record in &records {
        memory_service.store_record(record).await?;
    }
    
    // === –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–¢–ö–ê–ó–ê: –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –°–ï–†–í–ò–°–ê ===
    println!("üí• Simulating service restart...");
    drop(memory_service);
    
    // –ü–∞—É–∑–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ downtime
    sleep(Duration::from_millis(100)).await;
    
    // === –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï ===
    let recovered_service = MemoryService::new(MemoryConfig::default(), temp_dir.path()).await?;
    
    // === –ü–†–û–í–ï–†–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø ===
    let query = vec![0.1; 1024];
    let results = recovered_service.search(&query, Layer::Interact, 10, None).await?;
    
    assert!(!results.is_empty(), "Service should recover and have searchable data");
    
    let stats = recovered_service.get_system_stats().await?;
    assert!(stats.total_records > 0, "Recovered service should have records");
    
    println!("‚úÖ RESILIENCE TEST PASSED:");
    println!("   Recovered records: {}", stats.total_records);
    println!("   Search results after recovery: {}", results.len());
    
    Ok(())
}

/// –¢–µ—Å—Ç –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
#[tokio::test]
async fn test_multi_layer_promotion_workflow() -> Result<()> {
    let temp_dir = TempDir::new()?;
    let memory_service = MemoryService::new(MemoryConfig::default(), temp_dir.path()).await?;
    
    // === –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ï–ô –í –†–ê–ó–ù–´–• –°–õ–û–Ø–• ===
    
    // Interact —Å–ª–æ–π - —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    for i in 0..20 {
        let record = Record {
            id: Uuid::new_v4(),
            text: format!("interact_record_{}", i),
            embedding: vec![0.1 + i as f32 * 0.01; 1024],
            layer: Layer::Interact,
            score: 0.8 + i as f32 * 0.01,
            ts: chrono::Utc::now(),
            access_count: i as u32,
            last_access: chrono::Utc::now(),
        };
        memory_service.store_record(&record).await?;
    }
    
    // Insights —Å–ª–æ–π - –∞–Ω–∞–ª–∏–∑
    for i in 0..10 {
        let record = Record {
            id: Uuid::new_v4(),
            text: format!("insight_record_{}", i),
            embedding: vec![0.5 + i as f32 * 0.01; 1024],
            layer: Layer::Insights,
            score: 0.9 + i as f32 * 0.005,
            ts: chrono::Utc::now() - chrono::Duration::days(1),
            access_count: (i as u32) * 2,
            last_access: chrono::Utc::now(),
        };
        memory_service.store_record(&record).await?;
    }
    
    // Assets —Å–ª–æ–π - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for i in 0..5 {
        let record = Record {
            id: Uuid::new_v4(),
            text: format!("asset_record_{}", i),
            embedding: vec![0.9 + i as f32 * 0.002; 1024],
            layer: Layer::Assets,
            score: 0.95 + i as f32 * 0.001,
            ts: chrono::Utc::now() - chrono::Duration::days(30),
            access_count: (i as u32) * 5,
            last_access: chrono::Utc::now(),
        };
        memory_service.store_record(&record).await?;
    }
    
    // === –ü–†–û–í–ï–†–ö–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û –°–õ–û–Ø–ú ===
    let stats = memory_service.get_system_stats().await?;
    
    println!("üìä MULTI-LAYER TEST RESULTS:");
    println!("   Total records: {}", stats.total_records);
    println!("   Interact records: {}", stats.interact_count);
    println!("   Insights records: {}", stats.insights_count);
    println!("   Assets records: {}", stats.assets_count);
    
    assert_eq!(stats.interact_count, 20);
    assert_eq!(stats.insights_count, 10);
    assert_eq!(stats.assets_count, 5);
    assert_eq!(stats.total_records, 35);
    
    // === –¢–ï–°–¢–ò–†–£–ï–ú –ü–û–ò–°–ö –ü–û –°–õ–û–Ø–ú ===
    for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
        let query = vec![0.5; 1024];
        let results = memory_service.search(&query, layer, 5, None).await?;
        
        assert!(!results.is_empty(), "Layer {:?} should have search results", layer);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–ª–æ—è
        for result in &results {
            assert_eq!(result.layer, layer, "Result should be from correct layer");
        }
        
        println!("   Layer {:?}: {} search results", layer, results.len());
    }
    
    Ok(())
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
fn create_diverse_test_records(count: usize) -> Vec<Record> {
    let mut records = Vec::new();
    
    for i in 0..count {
        let layer = match i % 3 {
            0 => Layer::Interact,
            1 => Layer::Insights,
            _ => Layer::Assets,
        };
        
        // –°–æ–∑–¥–∞—ë–º –≤–µ–∫—Ç–æ—Ä—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        let embedding = (0..1024)
            .map(|j| 0.1 + (i as f32 * 0.001) + (j as f32 * 0.0001))
            .collect();
        
        let record = Record {
            id: Uuid::new_v4(),
            text: format!("test_record_{}_{:?}", i, layer),
            embedding,
            layer,
            score: 0.5 + (i as f32 % 100) as f32 / 200.0, // 0.5 - 1.0
            ts: chrono::Utc::now() - chrono::Duration::seconds(i as i64 * 60),
            access_count: (i % 10) as u32,
            last_access: chrono::Utc::now() - chrono::Duration::seconds(i as i64 * 30),
        };
        
        records.push(record);
    }
    
    records
}

/// Benchmark —Ç–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
#[tokio::test]
async fn test_memory_system_benchmarks() -> Result<()> {
    let temp_dir = TempDir::new()?;
    let memory_service = MemoryService::new(MemoryConfig::default(), temp_dir.path()).await?;
    
    // === –ë–ï–ù–ß–ú–ê–†–ö: –í–°–¢–ê–í–ö–ê ===
    let batch_sizes = vec![10, 50, 100, 500];
    
    for &batch_size in &batch_sizes {
        let records = create_diverse_test_records(batch_size);
        
        let start = std::time::Instant::now();
        for record in &records {
            memory_service.store_record(record).await?;
        }
        let duration = start.elapsed();
        
        let throughput = batch_size as f64 / duration.as_secs_f64();
        println!("üìà Insert benchmark - Batch size: {}, Throughput: {:.1} records/sec", 
                 batch_size, throughput);
    }
    
    // === –ë–ï–ù–ß–ú–ê–†–ö: –ü–û–ò–°–ö ===
    let search_batch_sizes = vec![1, 5, 10, 50];
    
    for &search_k in &search_batch_sizes {
        let start = std::time::Instant::now();
        
        for _ in 0..10 {
            let query = vec![0.5; 1024];
            let _results = memory_service.search(&query, Layer::Interact, search_k, None).await?;
        }
        
        let duration = start.elapsed();
        let search_throughput = 10.0 / duration.as_secs_f64();
        
        println!("üîç Search benchmark - k={}, Throughput: {:.1} searches/sec", 
                 search_k, search_throughput);
    }
    
    Ok(())
}

#[tokio::test]
async fn test_concurrent_operations() -> Result<()> {
    let temp_dir = TempDir::new()?;
    let memory_service = Arc::new(MemoryService::new(MemoryConfig::default(), temp_dir.path()).await?);
    
    // === –ö–û–ù–ö–£–†–ï–ù–¢–ù–´–ï –í–°–¢–ê–í–ö–ò ===
    let mut insert_handles = Vec::new();
    
    for thread_id in 0..5 {
        let service = memory_service.clone();
        let handle = tokio::spawn(async move {
            let mut results = Vec::new();
            
            for i in 0..20 {
                let record = Record {
                    id: Uuid::new_v4(),
                    text: format!("concurrent_record_{}_{}", thread_id, i),
                    embedding: vec![0.1 + thread_id as f32 * 0.1; 1024],
                    layer: Layer::Interact,
                    score: 0.7,
                    ts: chrono::Utc::now(),
                    access_count: 0,
                    last_access: chrono::Utc::now(),
                };
                
                match service.store_record(&record).await {
                    Ok(_) => results.push(true),
                    Err(_) => results.push(false),
                }
            }
            
            results
        });
        
        insert_handles.push(handle);
    }
    
    // === –ö–û–ù–ö–£–†–ï–ù–¢–ù–´–ï –ü–û–ò–°–ö–ò ===
    let mut search_handles = Vec::new();
    
    for thread_id in 0..3 {
        let service = memory_service.clone();
        let handle = tokio::spawn(async move {
            let mut results = Vec::new();
            
            for i in 0..10 {
                let query = vec![0.1 + thread_id as f32 * 0.1 + i as f32 * 0.01; 1024];
                match service.search(&query, Layer::Interact, 5, None).await {
                    Ok(res) => results.push(res.len()),
                    Err(_) => results.push(0),
                }
            }
            
            results
        });
        
        search_handles.push(handle);
    }
    
    // === –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø ===
    let insert_results = futures::future::try_join_all(insert_handles).await?;
    let search_results = futures::future::try_join_all(search_handles).await?;
    
    // === –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
    let total_inserts: usize = insert_results.iter()
        .map(|results| results.iter().filter(|&&success| success).count())
        .sum();
    
    let total_search_results: usize = search_results.iter()
        .map(|results| results.iter().sum::<usize>())
        .sum();
    
    println!("üöÄ CONCURRENT OPERATIONS TEST:");
    println!("   Successful inserts: {}/100", total_inserts);
    println!("   Total search results: {}", total_search_results);
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏ –º–∏–Ω–∏–º—É–º 90% –æ–ø–µ—Ä–∞—Ü–∏–π
    assert!(total_inserts >= 90, "Too many failed concurrent inserts: {}/100", total_inserts);
    assert!(total_search_results > 0, "No search results in concurrent test");
    
    Ok(())
}