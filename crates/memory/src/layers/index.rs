//! Index Layer Implementation - HNSW –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
//!
//! HNSWIndexLayer –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å HNSW –∏–Ω–¥–µ–∫—Å–∞–º–∏
//! –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å O(log n) —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é.
//!
//! RESPONSIBILITIES:
//! - HNSW index management per layer
//! - Vector similarity search 
//! - Index building and optimization
//! - SIMD optimized distance calculations
//! - Memory-efficient index storage

use anyhow::{Result, Context};
use async_trait::async_trait;
use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::RwLock;
use uuid::Uuid;
use tracing::{debug, info, warn, error};
use chrono::{DateTime, Utc};

use crate::{
    types::Layer,
    layers::{IndexLayer, VectorSearchResult, IndexStats, LayerHealth, LayerHealthStatus, StorageLayer, IndexConfig},
    hnsw_index::{VectorIndex, HnswConfig},
    simd_optimized::optimized_cosine_distance_batch,
};

/// HNSW implementation –¥–ª—è Index Layer
/// 
/// –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏:
/// - Efficient HNSW index per layer
/// - SIMD optimized similarity search
/// - Memory management for large indexes
/// - Index rebuilding and optimization
pub struct HNSWIndexLayer {
    config: IndexConfig,
    indexes: Arc<RwLock<HashMap<Layer, VectorIndex>>>,
    storage_layer: Arc<dyn StorageLayer>,
    stats: Arc<RwLock<InternalIndexStats>>,
    simd_enabled: bool,
}

/// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–æ–≤
#[derive(Debug, Default)]
struct InternalIndexStats {
    total_searches: u64,
    total_insertions: u64,
    total_deletions: u64,
    index_rebuilds: u64,
    last_build_times: HashMap<Layer, u64>, // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    search_times: Vec<f32>, // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è rolling average
    simd_operations: u64,
}

impl HNSWIndexLayer {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π HNSW index layer —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–æ storage
    pub async fn new(
        config: IndexConfig,
        storage_layer: Arc<dyn StorageLayer>,
    ) -> Result<Arc<Self>> {
        info!("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HNSW Index Layer —Å dimension={}", config.dimension);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º SIMD capabilities
        let simd_enabled = config.use_simd && Self::check_simd_support();
        if simd_enabled {
            info!("‚ö° SIMD –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");
        } else {
            warn!("‚ö†Ô∏è SIMD –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback");
        }

        let layer = Arc::new(Self {
            config: config.clone(),
            indexes: Arc::new(RwLock::new(HashMap::new())),
            storage_layer,
            stats: Arc::new(RwLock::new(InternalIndexStats::default())),
            simd_enabled,
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–µ–≤
        for memory_layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
            layer.create_index_for_layer(memory_layer).await?;
        }

        info!("‚úÖ HNSW Index Layer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        Ok(layer)
    }

    /// –°–æ–∑–¥–∞—Ç—å HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—è
    async fn create_index_for_layer(&self, layer: Layer) -> Result<()> {
        debug!("üîß –°–æ–∑–¥–∞–Ω–∏–µ HNSW –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–ª–æ—è {:?}", layer);

        let hnsw_config = HnswConfig {
            dimension: self.config.dimension,
            max_connections: self.config.max_connections,
            ef_construction: self.config.ef_construction,
            ef_search: self.config.ef_search,
            use_simd: self.simd_enabled,
        };

        let index = VectorIndex::new(hnsw_config)
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å HNSW –∏–Ω–¥–µ–∫—Å")?;

        {
            let mut indexes = self.indexes.write().await;
            indexes.insert(layer, index);
        }

        debug!("‚úÖ HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–æ—è {:?} —Å–æ–∑–¥–∞–Ω", layer);
        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É SIMD –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    fn check_simd_support() -> bool {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ CPU features
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –µ—Å–ª–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å target-feature
        cfg!(target_feature = "avx2") || cfg!(target_feature = "sse2")
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–æ—è
    async fn get_index(&self, layer: Layer) -> Result<VectorIndex> {
        let indexes = self.indexes.read().await;
        indexes.get(&layer)
            .cloned()
            .ok_or_else(|| anyhow::anyhow!("–ò–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–æ—è {:?} –Ω–µ –Ω–∞–π–¥–µ–Ω", layer))
    }

    /// Increment internal stats (non-blocking)
    fn increment_stat(&self, stat_type: IndexStatType, value: u64) {
        let stats = Arc::clone(&self.stats);
        tokio::spawn(async move {
            if let Ok(mut stats) = stats.try_write() {
                match stat_type {
                    IndexStatType::Search => {
                        stats.total_searches += value;
                        stats.simd_operations += if value > 0 { 1 } else { 0 };
                    },
                    IndexStatType::Insert => stats.total_insertions += value,
                    IndexStatType::Delete => stats.total_deletions += value,
                    IndexStatType::Rebuild => stats.index_rebuilds += value,
                }
            }
        });
    }

    /// Record search time –¥–ª—è rolling average
    fn record_search_time(&self, time_ms: f32) {
        let stats = Arc::clone(&self.stats);
        tokio::spawn(async move {
            if let Ok(mut stats) = stats.try_write() {
                stats.search_times.push(time_ms);
                if stats.search_times.len() > 1000 {
                    stats.search_times.remove(0); // Keep only last 1000
                }
            }
        });
    }

    /// –í—ã—á–∏—Å–ª–∏—Ç—å average search time
    async fn calculate_average_search_time(&self) -> f32 {
        let stats = self.stats.read().await;
        if stats.search_times.is_empty() {
            return 0.0;
        }
        stats.search_times.iter().sum::<f32>() / stats.search_times.len() as f32
    }
}

enum IndexStatType {
    Search,
    Insert, 
    Delete,
    Rebuild,
}

#[async_trait]
impl IndexLayer for HNSWIndexLayer {
    async fn build_index(&self, layer: Layer) -> Result<()> {
        let start_time = std::time::Instant::now();
        info!("üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ HNSW –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–ª–æ—è {:?}", layer);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ storage
        let records = self.storage_layer.list(layer, None).await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ storage –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞")?;

        if records.is_empty() {
            debug!("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–µ {:?}", layer);
            return Ok(());
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        self.create_index_for_layer(layer).await?;
        let mut index = self.get_index(layer).await?;

        debug!("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {} –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å —Å–ª–æ—è {:?}", records.len(), layer);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–µ–∫—Ç–æ—Ä—ã –≤ –∏–Ω–¥–µ–∫—Å
        for record in &records {
            if let Err(e) = index.add_vector(record.id, &record.embedding) {
                warn!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä {} –≤ –∏–Ω–¥–µ–∫—Å: {}", record.id, e);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –≤–µ–∫—Ç–æ—Ä–∞–º–∏
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        {
            let mut indexes = self.indexes.write().await;
            indexes.insert(layer, index);
        }

        let build_time_ms = start_time.elapsed().as_millis() as u64;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        {
            let mut stats = self.stats.write().await;
            stats.last_build_times.insert(layer, build_time_ms);
        }

        self.increment_stat(IndexStatType::Rebuild, 1);

        info!("‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–æ—è {:?} –ø–æ—Å—Ç—Ä–æ–µ–Ω –∑–∞ {}–º—Å ({} –≤–µ–∫—Ç–æ—Ä–æ–≤)", 
              layer, build_time_ms, records.len());
        Ok(())
    }

    async fn search_vectors(
        &self,
        embedding: &[f32],
        layer: Layer,
        top_k: usize,
    ) -> Result<Vec<VectorSearchResult>> {
        let start_time = std::time::Instant::now();
        
        debug!("üîç HNSW –ø–æ–∏—Å–∫ –≤ —Å–ª–æ–µ {:?}, top_k={}", layer, top_k);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding
        if embedding.len() != self.config.dimension {
            return Err(anyhow::anyhow!(
                "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding: {} (–æ–∂–∏–¥–∞–ª–æ—Å—å {})",
                embedding.len(),
                self.config.dimension
            ));
        }

        let index = self.get_index(layer).await?;

        // –í—ã–ø–æ–ª–Ω—è–µ–º HNSW –ø–æ–∏—Å–∫
        let search_results = if self.simd_enabled {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º SIMD –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            debug!("‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º SIMD –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫");
            index.search_with_simd(embedding, top_k)
                .context("SIMD –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è")?
        } else {
            // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            debug!("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ (–±–µ–∑ SIMD)");
            index.search(embedding, top_k)
                .context("–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è")?
        };

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
        let mut results = Vec::new();
        for (id, distance) in search_results {
            results.push(VectorSearchResult {
                id,
                distance,
                layer,
            });
        }

        let search_time_ms = start_time.elapsed().as_millis() as f32;
        self.record_search_time(search_time_ms);
        self.increment_stat(IndexStatType::Search, 1);

        debug!("‚ö° HNSW –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {:.2}–º—Å, –Ω–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
               search_time_ms, results.len());

        Ok(results)
    }

    async fn add_to_index(&self, id: &Uuid, embedding: &[f32], layer: Layer) -> Result<()> {
        debug!("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ {} –≤ –∏–Ω–¥–µ–∫—Å —Å–ª–æ—è {:?}", id, layer);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
        if embedding.len() != self.config.dimension {
            return Err(anyhow::anyhow!(
                "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding: {} (–æ–∂–∏–¥–∞–ª–æ—Å—å {})",
                embedding.len(),
                self.config.dimension
            ));
        }

        let mut index = self.get_index(layer).await?;
        
        index.add_vector(*id, embedding)
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä –≤ HNSW –∏–Ω–¥–µ–∫—Å")?;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        {
            let mut indexes = self.indexes.write().await;
            indexes.insert(layer, index);
        }

        self.increment_stat(IndexStatType::Insert, 1);
        debug!("‚úÖ –í–µ–∫—Ç–æ—Ä {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å", id);
        Ok(())
    }

    async fn update_in_index(&self, id: &Uuid, embedding: &[f32], layer: Layer) -> Result<()> {
        debug!("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ {} –≤ –∏–Ω–¥–µ–∫—Å–µ —Å–ª–æ—è {:?}", id, layer);

        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–∫—Ç–æ—Ä
        if let Err(e) = self.remove_from_index(id, layer).await {
            warn!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –≤–µ–∫—Ç–æ—Ä {}: {}", id, e);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
        self.add_to_index(id, embedding, layer).await?;
        
        debug!("‚úÖ –í–µ–∫—Ç–æ—Ä {} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å–µ", id);
        Ok(())
    }

    async fn remove_from_index(&self, id: &Uuid, layer: Layer) -> Result<()> {
        debug!("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ {} –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ —Å–ª–æ—è {:?}", id, layer);

        let mut index = self.get_index(layer).await?;
        
        index.remove_vector(*id)
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–∫—Ç–æ—Ä –∏–∑ HNSW –∏–Ω–¥–µ–∫—Å–∞")?;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        {
            let mut indexes = self.indexes.write().await;
            indexes.insert(layer, index);
        }

        self.increment_stat(IndexStatType::Delete, 1);
        debug!("‚úÖ –í–µ–∫—Ç–æ—Ä {} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–¥–µ–∫—Å–∞", id);
        Ok(())
    }

    async fn rebuild_index(&self, layer: Layer) -> Result<()> {
        info!("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–ª–æ—è {:?}", layer);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å
        {
            let mut indexes = self.indexes.write().await;
            indexes.remove(&layer);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ storage
        self.build_index(layer).await?;
        
        info!("‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–æ—è {:?} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω", layer);
        Ok(())
    }

    async fn index_stats(&self, layer: Layer) -> Result<IndexStats> {
        let index = self.get_index(layer).await?;
        let stats = self.stats.read().await;
        
        let build_time_ms = stats.last_build_times.get(&layer).copied().unwrap_or(0);
        let average_search_time = self.calculate_average_search_time().await;
        
        Ok(IndexStats {
            total_vectors: index.total_vectors() as u64,
            index_size_mb: index.memory_usage_mb(),
            build_time_ms,
            average_search_time_ms: average_search_time,
            connectivity: index.average_connectivity(),
            ef_construction: self.config.ef_construction,
            ef_search: self.config.ef_search,
        })
    }

    async fn is_index_ready(&self, layer: Layer) -> Result<bool> {
        let indexes = self.indexes.read().await;
        match indexes.get(&layer) {
            Some(index) => Ok(index.total_vectors() > 0),
            None => Ok(false),
        }
    }
}

#[async_trait]
impl LayerHealth for HNSWIndexLayer {
    async fn health_check(&self) -> Result<LayerHealthStatus> {
        let start = std::time::Instant::now();
        
        let mut healthy = true;
        let mut details = HashMap::new();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã
        let indexes = self.indexes.read().await;
        for (layer, index) in indexes.iter() {
            let vector_count = index.total_vectors();
            details.insert(
                format!("index_{:?}_vectors", layer),
                vector_count.to_string(),
            );
            
            if vector_count == 0 {
                details.insert(
                    format!("index_{:?}_status", layer),
                    "empty".to_string(),
                );
            } else {
                details.insert(
                    format!("index_{:?}_status", layer),
                    "ready".to_string(),
                );
            }
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        let test_embedding = vec![0.0; self.config.dimension];
        if let Err(e) = self.search_vectors(&test_embedding, Layer::Interact, 1).await {
            healthy = false;
            details.insert("test_search_error".to_string(), e.to_string());
        }

        let response_time_ms = start.elapsed().as_millis() as f32;
        let stats = self.stats.read().await;

        Ok(LayerHealthStatus {
            layer_name: "HNSWIndexLayer".to_string(),
            healthy,
            response_time_ms,
            error_rate: if healthy { 0.0 } else { 1.0 },
            last_check: Utc::now(),
            details,
        })
    }

    async fn ready_check(&self) -> Result<bool> {
        let indexes = self.indexes.read().await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã
        for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
            if !indexes.contains_key(&layer) {
                return Ok(false);
            }
        }
        
        Ok(true)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::layers::storage::SqliteStorageLayer;
    use crate::layers::StorageConfig;
    use crate::types::{Record, RecordMetadata};
    use tempfile::tempdir;

    async fn create_test_components() -> Result<(Arc<HNSWIndexLayer>, Arc<SqliteStorageLayer>)> {
        let temp_dir = tempdir()?;
        let storage_config = StorageConfig {
            db_path: temp_dir.path().join("test.db"),
            backup_path: temp_dir.path().join("backups"),
            use_rocksdb: false,
            write_batch_size: 100,
        };

        let storage_layer = SqliteStorageLayer::new(storage_config).await?;
        
        let index_config = IndexConfig {
            dimension: 3,
            max_connections: 8,
            ef_construction: 40,
            ef_search: 20,
            use_simd: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        };

        let index_layer = HNSWIndexLayer::new(index_config, Arc::clone(&storage_layer)).await?;
        
        Ok((index_layer, storage_layer))
    }

    fn create_test_record(id: Uuid, embedding: Vec<f32>) -> Record {
        Record {
            id,
            layer: Layer::Interact,
            content: format!("Test content for {}", id),
            embedding,
            metadata: RecordMetadata::default(),
        }
    }

    #[tokio::test]
    async fn test_index_creation() -> Result<()> {
        let (index_layer, _) = create_test_components().await?;
        assert!(index_layer.ready_check().await?);
        Ok(())
    }

    #[tokio::test]
    async fn test_index_operations() -> Result<()> {
        let (index_layer, storage_layer) = create_test_components().await?;
        
        let record1 = create_test_record(Uuid::new_v4(), vec![0.1, 0.2, 0.3]);
        let record2 = create_test_record(Uuid::new_v4(), vec![0.4, 0.5, 0.6]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        storage_layer.store(&record1).await?;
        storage_layer.store(&record2).await?;

        // –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å
        index_layer.build_index(Layer::Interact).await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≥–æ—Ç–æ–≤
        assert!(index_layer.is_index_ready(Layer::Interact).await?);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        let search_results = index_layer.search_vectors(
            &[0.15, 0.25, 0.35],
            Layer::Interact,
            2,
        ).await?;

        assert!(!search_results.is_empty());
        assert!(search_results.len() <= 2);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID
        let result_ids: Vec<Uuid> = search_results.iter().map(|r| r.id).collect();
        assert!(result_ids.contains(&record1.id) || result_ids.contains(&record2.id));

        Ok(())
    }

    #[tokio::test]
    async fn test_index_crud() -> Result<()> {
        let (index_layer, _) = create_test_components().await?;
        
        let id = Uuid::new_v4();
        let embedding = vec![0.1, 0.2, 0.3];

        // Test add
        index_layer.add_to_index(&id, &embedding, Layer::Interact).await?;

        // Test search
        let results = index_layer.search_vectors(&embedding, Layer::Interact, 1).await?;
        assert!(!results.is_empty());
        assert_eq!(results[0].id, id);

        // Test update
        let new_embedding = vec![0.2, 0.3, 0.4];
        index_layer.update_in_index(&id, &new_embedding, Layer::Interact).await?;

        // Test remove
        index_layer.remove_from_index(&id, Layer::Interact).await?;

        // Verify removal
        let results_after_remove = index_layer.search_vectors(&embedding, Layer::Interact, 1).await?;
        // Index –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–µ–∫—Ç–æ—Ä—ã, –Ω–æ –Ω–µ –Ω–∞—à —É–¥–∞–ª–µ–Ω–Ω—ã–π
        for result in results_after_remove {
            assert_ne!(result.id, id);
        }

        Ok(())
    }

    #[tokio::test]
    async fn test_health_check() -> Result<()> {
        let (index_layer, _) = create_test_components().await?;
        
        let health = index_layer.health_check().await?;
        assert!(health.healthy);
        assert!(health.response_time_ms >= 0.0);
        
        Ok(())
    }

    #[tokio::test]
    async fn test_index_stats() -> Result<()> {
        let (index_layer, storage_layer) = create_test_components().await?;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
        for i in 0..5 {
            let record = create_test_record(
                Uuid::new_v4(), 
                vec![i as f32 * 0.1, (i + 1) as f32 * 0.1, (i + 2) as f32 * 0.1]
            );
            storage_layer.store(&record).await?;
        }

        // –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å
        index_layer.build_index(Layer::Interact).await?;

        let stats = index_layer.index_stats(Layer::Interact).await?;
        assert_eq!(stats.total_vectors, 5);
        assert!(stats.build_time_ms > 0);
        
        Ok(())
    }

    #[tokio::test]
    async fn test_embedding_dimension_validation() -> Result<()> {
        let (index_layer, _) = create_test_components().await?;
        
        let id = Uuid::new_v4();
        let wrong_dimension_embedding = vec![0.1, 0.2]; // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3

        let result = index_layer.add_to_index(&id, &wrong_dimension_embedding, Layer::Interact).await;
        assert!(result.is_err());
        assert!(result.unwrap_err().to_string().contains("—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å"));

        Ok(())
    }
}