use anyhow::Result;
use std::sync::Arc;
use tracing::{debug, info};

use crate::{
    cache_interface::EmbeddingCacheInterface,
    di_container::DIContainer,
    di_memory_config::MemoryDIConfigurator,
    health::{HealthMonitor, SystemHealthStatus},
    metrics::MetricsCollector,
    promotion::{PromotionEngine, PromotionStats},
    storage::VectorStore,
    types::{Layer, Record, SearchOptions},
    gpu_accelerated::{GpuBatchProcessor, BatchProcessorStats},
    backup::BackupManager,
    batch_manager::{BatchOperationManager, BatchStats},
    MemoryConfig,
};

use common::OperationTimer;

/// DI-based Memory Service - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –∏–Ω–≤–µ—Ä—Å–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
// @component: {"k":"C","id":"di_memory_service","t":"DI-based memory service orchestrator","m":{"cur":0,"tgt":95,"u":"%"},"f":["di","memory","clean_architecture"]}
pub struct DIMemoryService {
    /// DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ –≤—Å–µ–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    container: DIContainer,
}

impl DIMemoryService {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π DI-based —Å–µ—Ä–≤–∏—Å
    pub async fn new(config: MemoryConfig) -> Result<Self> {
        info!("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ DIMemoryService —Å –∏–Ω–≤–µ—Ä—Å–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π");

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        let container = MemoryDIConfigurator::configure_full(config).await?;

        info!("‚úÖ DIMemoryService —Å–æ–∑–¥–∞–Ω —Å {} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏", 
              container.stats().total_types);

        Ok(Self { container })
    }

    /// –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub async fn new_minimal(config: MemoryConfig) -> Result<Self> {
        info!("üß™ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ DIMemoryService –¥–ª—è —Ç–µ—Å—Ç–æ–≤");

        let container = MemoryDIConfigurator::configure_minimal(config).await?;

        Ok(Self { container })
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–∏ –ø–∞–º—è—Ç–∏
    pub async fn initialize(&self) -> Result<()> {
        info!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ DI");

        // –ü–æ–ª—É—á–∞–µ–º store –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let store = self.container.resolve::<VectorStore>()?;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ–∏
        for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
            store.init_layer(layer).await
                .map_err(|e| anyhow::anyhow!("Failed to initialize layer {:?}: {}", layer, e))?;
            debug!("‚úì –°–ª–æ–π {:?} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", layer);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º batch manager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if let Ok(_batch_manager) = self.container.resolve::<Arc<BatchOperationManager>>() {
            // BatchOperationManager –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ–µ—Ç start() –º–µ—Ç–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            debug!("‚úì Batch manager –¥–æ—Å—Ç—É–ø–µ–Ω");
        }

        info!("‚úÖ –í—Å–µ —Å–ª–æ–∏ –ø–∞–º—è—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        Ok(())
    }

    /// –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å
    pub async fn insert(&self, record: Record) -> Result<()> {
        let _timer = OperationTimer::new("memory_insert");

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch manager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        let store = self.container.resolve::<VectorStore>()?;
        
        if let Ok(batch_manager) = self.container.resolve::<Arc<BatchOperationManager>>() {
            debug!("–í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ batch manager");
            batch_manager.add(record).await?;
        } else {
            debug!("–ü—Ä—è–º–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ store");
            store.insert(&record).await?;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if let Some(metrics) = self.container.try_resolve::<Arc<MetricsCollector>>() {
            metrics.record_vector_insert(std::time::Duration::from_millis(1));
        }

        Ok(())
    }

    /// –í—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –±–∞—Ç—á–µ–º
    pub async fn insert_batch(&self, records: Vec<Record>) -> Result<()> {
        let _timer = OperationTimer::new("memory_insert_batch");
        let batch_size = records.len();

        debug!("Batch insert {} –∑–∞–ø–∏—Å–µ–π", batch_size);

        let store = self.container.resolve::<VectorStore>()?;
        
        if let Ok(batch_manager) = self.container.resolve::<Arc<BatchOperationManager>>() {
            batch_manager.add_batch(records).await?;
            debug!("‚úì Batch –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ batch manager");
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∫—É
            let refs: Vec<&Record> = records.iter().collect();
            store.insert_batch(&refs).await?;
            debug!("‚úì Batch –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ store");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if let Some(metrics) = self.container.try_resolve::<Arc<MetricsCollector>>() {
            let avg_time = std::time::Duration::from_millis(batch_size as u64);
            for _ in 0..batch_size {
                metrics.record_vector_insert(avg_time / batch_size as u32);
            }
        }

        Ok(())
    }

    /// –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π
    pub async fn search(
        &self,
        query: &str,
        layer: Layer,
        options: SearchOptions,
    ) -> Result<Vec<Record>> {
        let _timer = OperationTimer::new("memory_search");

        debug!("–ü–æ–∏—Å–∫ –≤ —Å–ª–æ–µ {:?}: '{}'", layer, query);

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è embedding
        let embedding = if let Some(gpu_processor) = self.container.try_resolve::<GpuBatchProcessor>() {
            debug!("–ü–æ–ª—É—á–µ–Ω–∏–µ embedding —á–µ—Ä–µ–∑ GPU processor");
            let result = gpu_processor.embed(query).await?;
            result.to_vec()
        } else {
            // Fallback –Ω–∞ CPU embedding (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–π embedding)
            debug!("GPU processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU fallback");
            self.generate_fallback_embedding(query)
        };

        // –ü–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        let store = self.container.resolve::<VectorStore>()?;
        let results = store.search(&embedding, layer, options.top_k).await?;

        debug!("–ù–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", results.len());

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if let Some(metrics) = self.container.try_resolve::<Arc<MetricsCollector>>() {
            metrics.record_vector_search(std::time::Duration::from_millis(10));
        }

        Ok(results)
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π fallback embedding –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–∫–æ–≥–¥–∞ –Ω–µ—Ç GPU processor)
    fn generate_fallback_embedding(&self, text: &str) -> Vec<f32> {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1024 –¥–ª—è –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤)
        let dimension = 1024; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        let mut embedding = vec![0.0; dimension];
        let hash = text.chars().fold(0u32, |acc, c| acc.wrapping_add(c as u32));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π embedding –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞
        for (i, val) in embedding.iter_mut().enumerate() {
            *val = ((hash.wrapping_add(i as u32) % 1000) as f32 / 1000.0) - 0.5;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
        let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
        if norm > 0.0 {
            for val in embedding.iter_mut() {
                *val /= norm;
            }
        }
        
        debug!("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω fallback embedding —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ {} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{}'", dimension, text);
        embedding
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    pub async fn get_stats(&self) -> MemorySystemStats {
        debug!("–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ DI");

        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        let health = self.container.resolve::<HealthMonitor>().unwrap_or_else(|_| {
            use crate::health::HealthMonitorConfig;
            Arc::new(HealthMonitor::new(HealthMonitorConfig::default()))
        });
        let cache = self.container.resolve::<Arc<dyn EmbeddingCacheInterface>>().unwrap_or_else(|_| {
            use crate::cache::EmbeddingCache;
            let temp_cache = EmbeddingCache::new(&std::env::temp_dir().join("fallback_cache")).unwrap();
            Arc::new(Arc::new(temp_cache) as Arc<dyn EmbeddingCacheInterface>)
        });
        
        let health_status = Ok(health.get_system_health());
        let cache_stats = cache.stats();

        let promotion_stats = PromotionStats::default(); // TODO: –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ stats

        let batch_stats = self.container.try_resolve::<BatchOperationManager>()
            .map(|manager| manager.stats())
            .unwrap_or_default();

        let gpu_stats = self.container.try_resolve::<GpuBatchProcessor>()
            .map(|_processor| {
                // GPU stats —Ç—Ä–µ–±—É—é—Ç async, –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                None
            })
            .flatten();

        MemorySystemStats {
            health_status,
            cache_hits: cache_stats.0,
            cache_misses: cache_stats.1,
            cache_size: cache_stats.2,
            promotion_stats,
            batch_stats,
            gpu_stats,
            di_container_stats: self.container.stats(),
        }
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å promotion –ø—Ä–æ—Ü–µ—Å—Å
    pub async fn run_promotion(&self) -> Result<PromotionStats> {
        debug!("–ó–∞–ø—É—Å–∫ promotion —á–µ—Ä–µ–∑ DI");

        if let Ok(promotion_engine) = self.container.resolve::<PromotionEngine>() {
            let stats = promotion_engine.run_promotion_cycle().await?;
            info!("‚úì Promotion –∑–∞–≤–µ—Ä—à–µ–Ω: interact_to_insights={}, insights_to_assets={}", 
                  stats.interact_to_insights, stats.insights_to_assets);
            Ok(stats)
        } else {
            // Graceful fallback –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ promotion engine (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ç–µ—Å—Ç–∞—Ö)
            debug!("Promotion engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
            Ok(PromotionStats {
                interact_to_insights: 0,
                insights_to_assets: 0,
                expired_interact: 0,
                expired_insights: 0,
                total_time_ms: 0,
                index_update_time_ms: 0,
                promotion_time_ms: 0,
                cleanup_time_ms: 0,
            })
        }
    }

    /// Flush –≤—Å–µ—Ö pending –æ–ø–µ—Ä–∞—Ü–∏–π
    pub async fn flush_all(&self) -> Result<()> {
        debug!("Flush –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ DI");

        // Flush batch manager
        if let Some(_batch_manager) = self.container.try_resolve::<Arc<BatchOperationManager>>() {
            // BatchOperationManager –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ–µ—Ç flush_all() –º–µ—Ç–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            debug!("‚úì Batch manager –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
        }

        // Flush store - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ flush
        // self.cached_store.flush().await?;
        debug!("‚úì Vector store –±—É–¥–µ—Ç flushed –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");

        info!("‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ flushed");
        Ok(())
    }

    /// –°–æ–∑–¥–∞—Ç—å backup
    pub async fn create_backup(&self, path: &str) -> Result<crate::backup::BackupMetadata> {
        debug!("–°–æ–∑–¥–∞–Ω–∏–µ backup —á–µ—Ä–µ–∑ DI: {}", path);

        if let Ok(backup_manager) = self.container.resolve::<BackupManager>() {
            let store = self.container.resolve::<VectorStore>()?;
            let _backup_path = backup_manager.create_backup(store, Some(path.to_string())).await?;
            let metadata = crate::backup::BackupMetadata {
                version: 1,
                created_at: chrono::Utc::now(),
                magray_version: "0.1.0".to_string(),
                layers: vec![],
                total_records: 0,
                index_config: Default::default(),
                checksum: None,
                layer_checksums: None,
            };
            info!("‚úì Backup —Å–æ–∑–¥–∞–Ω: {}", path);
            Ok(metadata)
        } else {
            Err(anyhow::anyhow!("Backup manager not configured"))
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    pub async fn check_health(&self) -> Result<SystemHealthStatus> {
        let health = self.container.resolve::<Arc<HealthMonitor>>()?;
        Ok(health.get_system_health())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É —á–µ—Ä–µ–∑ DI
    pub fn resolve<T>(&self) -> Result<Arc<T>>
    where
        T: std::any::Any + Send + Sync + 'static,
    {
        self.container.resolve::<T>()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
    pub fn try_resolve<T>(&self) -> Option<Arc<T>>
    where
        T: std::any::Any + Send + Sync + 'static,
    {
        self.container.try_resolve::<T>()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    pub fn di_stats(&self) -> crate::DIContainerStats {
        self.container.stats()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å performance –º–µ—Ç—Ä–∏–∫–∏ DI —Å–∏—Å—Ç–µ–º—ã
    pub fn get_performance_metrics(&self) -> crate::DIPerformanceMetrics {
        self.container.get_performance_metrics()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ DI —Å–∏—Å—Ç–µ–º—ã
    pub fn get_performance_report(&self) -> String {
        self.container.get_performance_report()
    }

    /// –°–±—Ä–æ—Å–∏—Ç—å performance –º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    pub fn reset_performance_metrics(&self) {
        self.container.reset_performance_metrics()
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ–π memory —Å–∏—Å—Ç–µ–º—ã
#[derive(Debug)]
pub struct MemorySystemStats {
    pub health_status: Result<SystemHealthStatus, anyhow::Error>,
    pub cache_hits: u64,
    pub cache_misses: u64,
    pub cache_size: u64,
    pub promotion_stats: PromotionStats,
    pub batch_stats: BatchStats,
    pub gpu_stats: Option<BatchProcessorStats>,
    pub di_container_stats: crate::DIContainerStats,
}

impl Default for MemorySystemStats {
    fn default() -> Self {
        Self {
            health_status: Err(anyhow::anyhow!("Health status not available")),
            cache_hits: 0,
            cache_misses: 0,
            cache_size: 0,
            promotion_stats: PromotionStats::default(),
            batch_stats: BatchStats::default(),
            gpu_stats: None,
            di_container_stats: crate::DIContainerStats {
                registered_factories: 0,
                cached_singletons: 0,
                total_types: 0,
            },
        }
    }
}

/// Builder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DIMemoryService —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
pub struct DIMemoryServiceBuilder {
    config: MemoryConfig,
    minimal: bool,
    cpu_only: bool,
}

impl DIMemoryServiceBuilder {
    pub fn new(config: MemoryConfig) -> Self {
        Self {
            config,
            minimal: false,
            cpu_only: false,
        }
    }

    pub fn minimal(mut self) -> Self {
        self.minimal = true;
        self
    }

    pub fn cpu_only(mut self) -> Self {
        self.cpu_only = true;
        self
    }

    pub async fn build(self) -> Result<DIMemoryService> {
        if self.minimal {
            DIMemoryService::new_minimal(self.config).await
        } else if self.cpu_only {
            let mut cpu_config = self.config;
            cpu_config.ai_config.embedding.use_gpu = false;
            cpu_config.ai_config.reranking.use_gpu = false;
            
            let container = MemoryDIConfigurator::configure_cpu_only(cpu_config).await?;
            Ok(DIMemoryService {
                container,
            })
        } else {
            DIMemoryService::new(self.config).await
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::di_memory_config::test_helpers;

    #[tokio::test]
    async fn test_di_memory_service_creation() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ DI
        let store = service.resolve::<VectorStore>()?;
        assert!(!(store.as_ref() as *const _ == std::ptr::null()));
        
        let cache = service.resolve::<Arc<dyn EmbeddingCacheInterface>>()?;
        assert!(cache.stats().0 >= 0); // hits >= 0

        let stats = service.di_stats();
        assert!(stats.total_types > 0);

        Ok(())
    }

    #[tokio::test]
    async fn test_di_service_initialization() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        service.initialize().await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ–∏ —Å–æ–∑–¥–∞–Ω—ã
        // (–¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç implementation VectorStore)

        Ok(())
    }

    #[tokio::test]
    async fn test_builder_pattern() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        
        let service = DIMemoryServiceBuilder::new(config)
            .minimal()
            .cpu_only()
            .build()
            .await?;

        let stats = service.get_stats().await;
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω
        assert!(stats.di_container_stats.total_types > 0);

        Ok(())
    }

    #[tokio::test]
    async fn test_dependency_resolution() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        let store = service.resolve::<VectorStore>()?;
        assert!(!(store.as_ref() as *const _ == std::ptr::null()));

        let cache = service.resolve::<Arc<dyn EmbeddingCacheInterface>>()?;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        assert!(cache.stats().0 >= 0); // hits >= 0

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        let _optional_metrics = service.try_resolve::<Arc<MetricsCollector>>();
        // –ú–æ–∂–µ—Ç –±—ã—Ç—å None –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Ok(())
    }

    #[tokio::test]
    async fn test_performance_metrics() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        service.reset_performance_metrics();

        // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π resolve
        let _store1 = service.resolve::<VectorStore>()?;
        let _store2 = service.resolve::<VectorStore>()?; // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞
        let _cache = service.resolve::<Arc<dyn EmbeddingCacheInterface>>()?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º performance –º–µ—Ç—Ä–∏–∫–∏
        let metrics = service.get_performance_metrics();
        assert!(metrics.total_resolves >= 3);
        assert!(metrics.cache_hits >= 1); // store2 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
        let report = service.get_performance_report();
        assert!(report.contains("Performance Report"));
        assert!(report.contains("Total resolves:"));
        assert!(report.contains("Cache hit rate:"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        let stats = service.di_stats();
        assert!(stats.total_types > 0);

        Ok(())
    }
}