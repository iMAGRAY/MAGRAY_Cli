use anyhow::Result;
use std::{
    sync::Arc,
    time::{Duration, Instant},
    collections::HashMap,
};
use tracing::{debug, info, warn, error};
use tokio::{
    sync::{RwLock, Semaphore},
    time::timeout,
};

use crate::{
    cache_interface::EmbeddingCacheInterface,
    di_container::DIContainer,
    health::{HealthMonitor, SystemHealthStatus},
    metrics::MetricsCollector,
    promotion::{PromotionEngine, PromotionStats},
    storage::VectorStore,
    types::{Layer, Record, SearchOptions},
    gpu_accelerated::{GpuBatchProcessor, BatchProcessorStats},
    backup::BackupManager,
    batch_manager::{BatchOperationManager, BatchStats},
    CacheConfigType,
    orchestration::{
        EmbeddingCoordinator as EmbeddingCoordinatorImpl,
        SearchCoordinator as SearchCoordinatorImpl,
        HealthManager,
        ResourceController,
        Coordinator, EmbeddingCoordinatorTrait, SearchCoordinatorTrait, 
        HealthCoordinatorTrait, ResourceCoordinatorTrait,
        RetryHandler, RetryPolicy, RetryResult,
    },
};

use common::OperationTimer;

// Re-export legacy types –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
use crate::di_memory_config::MemoryDIConfigurator;

// –ê–ª–∏–∞—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
pub type MemoryConfig = MemoryServiceConfig;

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Memory Service
#[derive(Debug, Clone)]
pub struct MemoryServiceConfig {
    pub db_path: std::path::PathBuf,
    pub cache_path: std::path::PathBuf,
    pub promotion: crate::types::PromotionConfig,
    pub ml_promotion: Option<crate::ml_promotion::MLPromotionConfig>,
    pub streaming_config: Option<crate::streaming::StreamingConfig>,
    pub ai_config: ai::AiConfig,
    pub cache_config: CacheConfigType,
    pub health_enabled: bool,
    pub health_config: crate::health::HealthMonitorConfig,
    pub resource_config: crate::resource_manager::ResourceConfig,
    pub notification_config: crate::notifications::NotificationConfig,
    pub batch_config: crate::batch_manager::BatchConfig,
}

// –£–¥–∞–ª–µ–Ω –∞–ª–∏–∞—Å MemoryConfig - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é MemoryServiceConfig

/// –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è memory service
pub fn default_config() -> Result<MemoryServiceConfig> {
    let cache_dir = dirs::cache_dir()
        .ok_or_else(|| anyhow::anyhow!("Could not determine cache directory"))?
        .join("magray");
    
    Ok(MemoryServiceConfig {
        db_path: cache_dir.join("memory.db"),
        cache_path: cache_dir.join("embeddings_cache"),
        promotion: crate::types::PromotionConfig::default(),
        ml_promotion: Some(crate::ml_promotion::MLPromotionConfig::default()),
        streaming_config: Some(crate::streaming::StreamingConfig::default()),
        ai_config: ai::AiConfig::default(),
        cache_config: CacheConfigType::default(),
        health_enabled: true,
        health_config: crate::health::HealthMonitorConfig::default(),
        resource_config: crate::resource_manager::ResourceConfig::default(),
        notification_config: crate::notifications::NotificationConfig::default(),
        batch_config: crate::batch_manager::BatchConfig::default(),
    })
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á–µ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏
#[derive(Debug)]
pub struct BatchInsertResult {
    pub inserted: usize,
    pub failed: usize,
    pub errors: Vec<String>,
    pub total_time_ms: u64,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
#[derive(Debug)]
pub struct BatchSearchResult {
    pub queries: Vec<String>,
    pub results: Vec<Vec<Record>>,
    pub total_time_ms: u64,
}

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
struct OrchestrationCoordinators {
    embedding_coordinator: Option<Arc<EmbeddingCoordinatorImpl>>,
    search_coordinator: Option<Arc<SearchCoordinatorImpl>>,
    health_manager: Option<Arc<HealthManager>>,
    resource_controller: Option<Arc<ResourceController>>,
}

/// Circuit breaker —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#[derive(Debug, Clone)]
struct CircuitBreakerState {
    is_open: bool,
    failure_count: u32,
    last_failure: Option<Instant>,
    failure_threshold: u32,
    recovery_timeout: Duration,
}

impl Default for CircuitBreakerState {
    fn default() -> Self {
        Self {
            is_open: false,
            failure_count: 0,
            last_failure: None,
            failure_threshold: 5,
            recovery_timeout: Duration::from_secs(60),
        }
    }
}

/// Production –º–µ—Ç—Ä–∏–∫–∏
#[derive(Debug, Default)]
struct ProductionMetrics {
    total_operations: u64,
    successful_operations: u64,
    failed_operations: u64,
    circuit_breaker_trips: u64,
    avg_response_time_ms: f64,
    peak_memory_usage: f64,
    coordinator_health_scores: HashMap<String, f64>,
    last_health_check: Option<Instant>,
}

/// Lifecycle manager –¥–ª—è graceful shutdown
#[derive(Debug)]
struct LifecycleManager {
    shutdown_requested: bool,
    shutdown_timeout: Duration,
    active_operations: u32,
    coordinators_shutdown: bool,
}

impl Default for LifecycleManager {
    fn default() -> Self {
        Self {
            shutdown_requested: false,
            shutdown_timeout: Duration::from_secs(30),
            active_operations: 0,
            coordinators_shutdown: false,
        }
    }
}

/// Production-ready DI Memory Service —Å –ø–æ–ª–Ω–æ–π orchestration –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
// @component: {"k":"C","id":"di_memory_service","t":"Production DI memory service with orchestration coordinators","m":{"cur":95,"tgt":95,"u":"%"},"f":["di","memory","clean_architecture","production","orchestration","coordinators","circuit_breaker","metrics"]}
pub struct DIMemoryService {
    /// DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ –≤—Å–µ–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    container: DIContainer,
    
    // === Orchestration Coordinators ===
    /// Embedding coordinator –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è embeddings
    embedding_coordinator: Option<Arc<EmbeddingCoordinatorImpl>>,
    /// Search coordinator –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    search_coordinator: Option<Arc<SearchCoordinatorImpl>>,
    /// Health manager –¥–ª—è monitoring
    health_manager: Option<Arc<HealthManager>>,
    /// Resource controller –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏
    resource_controller: Option<Arc<ResourceController>>,
    
    // === Production Infrastructure ===
    /// –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ
    ready: Arc<std::sync::atomic::AtomicBool>,
    /// Circuit breaker –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    circuit_breaker: Arc<RwLock<CircuitBreakerState>>,
    /// Production –º–µ—Ç—Ä–∏–∫–∏
    production_metrics: Arc<RwLock<ProductionMetrics>>,
    /// Lifecycle manager –¥–ª—è graceful shutdown
    lifecycle_manager: Arc<RwLock<LifecycleManager>>,
    /// Performance timer
    performance_timer: Arc<std::sync::Mutex<Instant>>,
    /// Retry handler –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
    retry_handler: RetryHandler,
    /// Concurrency limiter
    operation_limiter: Arc<Semaphore>,
}

impl DIMemoryService {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π production-ready DI-based —Å–µ—Ä–≤–∏—Å
    pub async fn new(config: MemoryConfig) -> Result<Self> {
        info!("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ production DIMemoryService —Å orchestration –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏");

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        let container = MemoryDIConfigurator::configure_full(config).await?;

        // –°–æ–∑–¥–∞—ë–º orchestration –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
        let orchestration_coordinators = Self::create_orchestration_coordinators(&container).await?;

        let service = Self {
            container,
            embedding_coordinator: orchestration_coordinators.embedding_coordinator,
            search_coordinator: orchestration_coordinators.search_coordinator,
            health_manager: orchestration_coordinators.health_manager,
            resource_controller: orchestration_coordinators.resource_controller,
            ready: Arc::new(std::sync::atomic::AtomicBool::new(false)),
            circuit_breaker: Arc::new(RwLock::new(CircuitBreakerState::default())),
            production_metrics: Arc::new(RwLock::new(ProductionMetrics::default())),
            lifecycle_manager: Arc::new(RwLock::new(LifecycleManager::default())),
            performance_timer: Arc::new(std::sync::Mutex::new(Instant::now())),
            retry_handler: RetryHandler::new(RetryPolicy::default()),
            operation_limiter: Arc::new(Semaphore::new(100)), // Max 100 concurrent operations
        };

        info!("‚úÖ Production DIMemoryService —Å–æ–∑–¥–∞–Ω —Å {} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∏ {} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏", 
              service.container.stats().total_types,
              service.count_active_coordinators());
        
        Ok(service)
    }

    /// –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub async fn new_minimal(config: MemoryConfig) -> Result<Self> {
        info!("üß™ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ DIMemoryService –¥–ª—è —Ç–µ—Å—Ç–æ–≤");

        let container = MemoryDIConfigurator::configure_minimal(config).await?;

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        Ok(Self {
            container,
            embedding_coordinator: None,
            search_coordinator: None,
            health_manager: None,
            resource_controller: None,
            ready: Arc::new(std::sync::atomic::AtomicBool::new(false)),
            circuit_breaker: Arc::new(RwLock::new(CircuitBreakerState::default())),
            production_metrics: Arc::new(RwLock::new(ProductionMetrics::default())),
            lifecycle_manager: Arc::new(RwLock::new(LifecycleManager::default())),
            performance_timer: Arc::new(std::sync::Mutex::new(Instant::now())),
            retry_handler: RetryHandler::new(RetryPolicy::fast()),
            operation_limiter: Arc::new(Semaphore::new(10)), // –ú–µ–Ω—å—à–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        })
    }

    /// –°–æ–∑–¥–∞—Ç—å orchestration –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
    async fn create_orchestration_coordinators(container: &DIContainer) -> Result<OrchestrationCoordinators> {
        info!("üéØ –°–æ–∑–¥–∞–Ω–∏–µ orchestration –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");

        // –°–æ–∑–¥–∞—ë–º embedding coordinator
        let embedding_coordinator = Self::create_embedding_coordinator(container).await?;
        
        // –°–æ–∑–¥–∞—ë–º search coordinator (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç embedding coordinator)
        let search_coordinator = Self::create_search_coordinator(container, &embedding_coordinator).await?;
        
        // –°–æ–∑–¥–∞—ë–º health manager
        let health_manager = Self::create_health_manager(container).await?;
        
        // –°–æ–∑–¥–∞—ë–º resource controller
        let resource_controller = Self::create_resource_controller(container).await?;

        info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");
        
        Ok(OrchestrationCoordinators {
            embedding_coordinator: Some(embedding_coordinator),
            search_coordinator: Some(search_coordinator),
            health_manager: Some(health_manager),
            resource_controller: Some(resource_controller),
        })
    }

    /// –°–æ–∑–¥–∞—Ç—å embedding coordinator
    async fn create_embedding_coordinator(container: &DIContainer) -> Result<Arc<EmbeddingCoordinatorImpl>> {
        let gpu_processor = container.resolve::<GpuBatchProcessor>()?;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π cache –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        let cache_path = std::env::temp_dir().join("embedding_cache");
        let cache = Arc::new(crate::cache_lru::EmbeddingCacheLRU::new(
            cache_path,
            crate::cache_lru::CacheConfig::default()
        )?) as Arc<dyn EmbeddingCacheInterface>;
        
        let coordinator = Arc::new(EmbeddingCoordinatorImpl::new(gpu_processor, cache));
        debug!("‚úÖ EmbeddingCoordinator —Å–æ–∑–¥–∞–Ω");
        
        Ok(coordinator)
    }

    /// –°–æ–∑–¥–∞—Ç—å search coordinator  
    async fn create_search_coordinator(
        container: &DIContainer, 
        embedding_coordinator: &Arc<EmbeddingCoordinatorImpl>
    ) -> Result<Arc<SearchCoordinatorImpl>> {
        let store = container.resolve::<VectorStore>()?;
        
        let coordinator = Arc::new(SearchCoordinatorImpl::new_production(
            store,
            embedding_coordinator.clone(),
            64,  // max concurrent searches
            2000 // cache size
        ));
        debug!("‚úÖ SearchCoordinator —Å–æ–∑–¥–∞–Ω");
        
        Ok(coordinator)
    }

    /// –°–æ–∑–¥–∞—Ç—å health manager
    async fn create_health_manager(container: &DIContainer) -> Result<Arc<HealthManager>> {
        let health_monitor = container.resolve::<HealthMonitor>()?;
        
        let manager = Arc::new(HealthManager::new(health_monitor));
        debug!("‚úÖ HealthManager —Å–æ–∑–¥–∞–Ω");
        
        Ok(manager)
    }

    /// –°–æ–∑–¥–∞—Ç—å resource controller
    async fn create_resource_controller(container: &DIContainer) -> Result<Arc<ResourceController>> {
        let resource_manager = container.resolve::<parking_lot::RwLock<crate::resource_manager::ResourceManager>>()?;
        
        let controller = Arc::new(ResourceController::new_production(resource_manager));
        debug!("‚úÖ ResourceController —Å–æ–∑–¥–∞–Ω");
        
        Ok(controller)
    }

    /// –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
    fn count_active_coordinators(&self) -> usize {
        let mut count = 0;
        if self.embedding_coordinator.is_some() { count += 1; }
        if self.search_coordinator.is_some() { count += 1; }
        if self.health_manager.is_some() { count += 1; }
        if self.resource_controller.is_some() { count += 1; }
        count
    }

    /// Production –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
    pub async fn initialize(&self) -> Result<()> {
        info!("üöÄ Production –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DIMemoryService —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏...");

        let start_time = Instant::now();

        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏ –ø–∞–º—è—Ç–∏
        self.initialize_memory_layers().await?;

        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        self.initialize_coordinators().await?;

        // 3. –ó–∞–ø—É—Å–∫–∞–µ–º production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.start_production_monitoring().await?;

        // 4. –ó–∞–ø—É—Å–∫–∞–µ–º health checks –∏ metrics collection
        self.start_health_monitoring().await?;

        // 5. –ó–∞–ø—É—Å–∫–∞–µ–º resource monitoring –∏ auto-scaling
        self.start_resource_monitoring().await?;

        // 6. –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        self.perform_readiness_checks().await?;

        let initialization_time = start_time.elapsed();
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ
        self.ready.store(true, std::sync::atomic::Ordering::Relaxed);

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        {
            let mut metrics = self.production_metrics.write().await;
            metrics.last_health_check = Some(Instant::now());
        }

        info!("‚úÖ Production DIMemoryService –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {:?}", initialization_time);
        
        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.log_initialization_summary().await;
        
        Ok(())
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏ –ø–∞–º—è—Ç–∏
    async fn initialize_memory_layers(&self) -> Result<()> {
        info!("üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–µ–≤ –ø–∞–º—è—Ç–∏...");

        let store = self.container.resolve::<VectorStore>()?;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ–∏ —Å timeout
        for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
            let layer_result = timeout(
                Duration::from_secs(30),
                store.init_layer(layer)
            ).await;

            match layer_result {
                Ok(Ok(_)) => {
                    debug!("‚úì –°–ª–æ–π {:?} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", layer);
                }
                Ok(Err(e)) => {
                    return Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ—è {:?}: {}", layer, e));
                }
                Err(_) => {
                    return Err(anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ—è {:?}", layer));
                }
            }
        }

        info!("‚úÖ –í—Å–µ —Å–ª–æ–∏ –ø–∞–º—è—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        Ok(())
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
    async fn initialize_coordinators(&self) -> Result<()> {
        info!("‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");

        let mut initialization_tasks = vec![];

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if let Some(ref embedding_coordinator) = self.embedding_coordinator {
            let coordinator = embedding_coordinator.clone();
            initialization_tasks.push(tokio::spawn(async move {
                timeout(Duration::from_secs(60), coordinator.initialize()).await
                    .map_err(|_| anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EmbeddingCoordinator"))?
            }));
        }

        if let Some(ref search_coordinator) = self.search_coordinator {
            let coordinator = search_coordinator.clone();
            initialization_tasks.push(tokio::spawn(async move {
                timeout(Duration::from_secs(60), coordinator.initialize()).await
                    .map_err(|_| anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SearchCoordinator"))?
            }));
        }

        if let Some(ref health_manager) = self.health_manager {
            let manager = health_manager.clone();
            initialization_tasks.push(tokio::spawn(async move {
                timeout(Duration::from_secs(30), manager.initialize()).await
                    .map_err(|_| anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HealthManager"))?
            }));
        }

        if let Some(ref resource_controller) = self.resource_controller {
            let controller = resource_controller.clone();
            initialization_tasks.push(tokio::spawn(async move {
                timeout(Duration::from_secs(30), controller.initialize()).await
                    .map_err(|_| anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ResourceController"))?
            }));
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        for task in initialization_tasks {
            match task.await {
                Ok(Ok(_)) => {
                    // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                }
                Ok(Err(e)) => {
                    warn!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", e);
                    return Err(e);
                }
                Err(e) => {
                    warn!("Panic –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", e);
                    return Err(anyhow::anyhow!("Panic –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e));
                }
            }
        }

        info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        Ok(())
    }

    /// Production insert —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏ –∏ circuit breaker
    pub async fn insert(&self, record: Record) -> Result<()> {
        let operation_start = Instant::now();
        
        // –ü–æ–ª—É—á–∞–µ–º permit –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è concurrency
        let _permit = self.operation_limiter.acquire().await
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å permit –¥–ª—è insert: {}", e))?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        self.check_circuit_breaker().await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        if let Some(ref resource_controller) = self.resource_controller {
            let resource_check = resource_controller.check_resources("insert").await?;
            if !resource_check {
                return Err(anyhow::anyhow!("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è insert –æ–ø–µ—Ä–∞—Ü–∏–∏"));
            }
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        {
            let mut lifecycle = self.lifecycle_manager.write().await;
            lifecycle.active_operations += 1;
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º insert —Å retry –ª–æ–≥–∏–∫–æ–π
        let insert_result = self.retry_handler.execute(|| async {
            let store = self.container.resolve::<VectorStore>()?;
            
            if let Ok(batch_manager) = self.container.resolve::<Arc<BatchOperationManager>>() {
                debug!("üîÑ Insert —á–µ—Ä–µ–∑ batch manager");
                batch_manager.add(record.clone()).await?;
            } else {
                debug!("üîÑ –ü—Ä—è–º–æ–π insert –≤ store");
                store.insert(&record).await?;
            }
            
            Ok(())
        }).await;

        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        {
            let mut lifecycle = self.lifecycle_manager.write().await;
            lifecycle.active_operations = lifecycle.active_operations.saturating_sub(1);
        }

        let operation_duration = operation_start.elapsed();

        match insert_result {
            RetryResult::Success(_, attempts) => {
                self.record_successful_operation(operation_duration).await;
                
                if attempts > 1 {
                    debug!("‚úÖ Insert —É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ {:?}", attempts, operation_duration);
                } else {
                    debug!("‚úÖ Insert —É—Å–ø–µ—à–µ–Ω –∑–∞ {:?}", operation_duration);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                if let Some(metrics) = self.container.try_resolve::<Arc<MetricsCollector>>() {
                    metrics.record_vector_insert(operation_duration);
                }

                Ok(())
            }
            RetryResult::ExhaustedRetries(e) | RetryResult::NonRetriable(e) => {
                self.record_failed_operation(operation_duration).await;
                error!("‚ùå Insert –Ω–µ —É–¥–∞–ª—Å—è: {}", e);
                Err(e)
            }
        }
    }

    /// –í—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –±–∞—Ç—á–µ–º
    pub async fn insert_batch(&self, records: Vec<Record>) -> Result<()> {
        let _timer = OperationTimer::new("memory_insert_batch");
        let batch_size = records.len();

        debug!("Batch insert {} –∑–∞–ø–∏—Å–µ–π", batch_size);

        let store = self.container.resolve::<VectorStore>()?;
        
        if let Ok(batch_manager) = self.container.resolve::<Arc<BatchOperationManager>>() {
            batch_manager.add_batch(records).await?;
            debug!("‚úì Batch –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ batch manager");
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∫—É
            let refs: Vec<&Record> = records.iter().collect();
            store.insert_batch(&refs).await?;
            debug!("‚úì Batch –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ store");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if let Some(metrics) = self.container.try_resolve::<Arc<MetricsCollector>>() {
            let avg_time = std::time::Duration::from_millis(batch_size as u64);
            for _ in 0..batch_size {
                metrics.record_vector_insert(avg_time / batch_size as u32);
            }
        }

        Ok(())
    }

    /// Production search —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏ –∏ sub-5ms performance
    pub async fn search(
        &self,
        query: &str,
        layer: Layer,
        options: SearchOptions,
    ) -> Result<Vec<Record>> {
        let operation_start = Instant::now();
        
        // –ü–æ–ª—É—á–∞–µ–º permit –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è concurrency  
        let _permit = self.operation_limiter.acquire().await
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å permit –¥–ª—è search: {}", e))?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        self.check_circuit_breaker().await?;

        debug!("üîç Production search –≤ —Å–ª–æ–µ {:?}: '{}'", layer, query);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        {
            let mut lifecycle = self.lifecycle_manager.write().await;
            lifecycle.active_operations += 1;
        }

        let search_result = if let Some(ref search_coordinator) = self.search_coordinator {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º production SearchCoordinator —Å sub-5ms HNSW
            debug!("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º SearchCoordinator –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞");
            
            self.retry_handler.execute(|| async {
                // Timeout –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è sub-5ms performance
                timeout(
                    Duration::from_millis(50), // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π timeout –¥–ª—è sub-5ms —Ü–µ–ª–∏
                    search_coordinator.search(query, layer, options.clone())
                ).await
                .map_err(|_| anyhow::anyhow!("Search timeout - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç 50ms –¥–ª—è sub-5ms —Ü–µ–ª–∏"))?
            }).await
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ (–¥–ª—è minimal mode)
            debug!("üîÑ Fallback –ø–æ–∏—Å–∫ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞");
            
            self.retry_handler.execute(|| async {
                let embedding = self.get_embedding_fallback(query).await?;
                let store = self.container.resolve::<VectorStore>()?;
                store.search(&embedding, layer, options.top_k).await
            }).await
        };

        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        {
            let mut lifecycle = self.lifecycle_manager.write().await;
            lifecycle.active_operations = lifecycle.active_operations.saturating_sub(1);
        }

        let operation_duration = operation_start.elapsed();

        match search_result {
            RetryResult::Success(results, attempts) => {
                self.record_successful_operation(operation_duration).await;
                
                let result_count = results.len();
                let duration_ms = operation_duration.as_millis() as f64;
                
                if duration_ms > 5.0 {
                    warn!("‚è±Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {:.2}ms –¥–ª—è '{}' (—Ü–µ–ª—å <5ms)", duration_ms, query);
                } else {
                    debug!("‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫: {:.2}ms –¥–ª—è '{}' ({} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)", duration_ms, query, result_count);
                }
                
                if attempts > 1 {
                    debug!("‚úÖ Search —É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫", attempts);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                if let Some(metrics) = self.container.try_resolve::<Arc<MetricsCollector>>() {
                    metrics.record_vector_search(operation_duration);
                }

                Ok(results)
            }
            RetryResult::ExhaustedRetries(e) | RetryResult::NonRetriable(e) => {
                self.record_failed_operation(operation_duration).await;
                error!("‚ùå Search –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è '{}': {}", query, e);
                Err(e)
            }
        }
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π fallback embedding –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–∫–æ–≥–¥–∞ –Ω–µ—Ç GPU processor)
    fn generate_fallback_embedding(&self, text: &str) -> Vec<f32> {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1024 –¥–ª—è –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤)
        let dimension = 1024; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        let mut embedding = vec![0.0; dimension];
        let hash = text.chars().fold(0u32, |acc, c| acc.wrapping_add(c as u32));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π embedding –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞
        for (i, val) in embedding.iter_mut().enumerate() {
            *val = ((hash.wrapping_add(i as u32) % 1000) as f32 / 1000.0) - 0.5;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
        let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
        if norm > 0.0 {
            for val in embedding.iter_mut() {
                *val /= norm;
            }
        }
        
        debug!("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω fallback embedding —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ {} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{}'", dimension, text);
        embedding
    }

    /// –ü–æ–ª—É—á–∏—Ç—å embedding —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏–ª–∏ fallback
    async fn get_embedding_fallback(&self, text: &str) -> Result<Vec<f32>> {
        if let Some(ref embedding_coordinator) = self.embedding_coordinator {
            embedding_coordinator.get_embedding(text).await
        } else {
            Ok(self.generate_fallback_embedding(text))
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å circuit breaker
    async fn check_circuit_breaker(&self) -> Result<()> {
        let mut breaker = self.circuit_breaker.write().await;
        
        if breaker.is_open {
            if let Some(last_failure) = breaker.last_failure {
                if last_failure.elapsed() > breaker.recovery_timeout {
                    breaker.is_open = false;
                    breaker.failure_count = 0;
                    info!("üîÑ Circuit breaker –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    return Ok(());
                }
            }
            return Err(anyhow::anyhow!("üö´ Circuit breaker –æ—Ç–∫—Ä—ã—Ç - –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"));
        }
        
        Ok(())
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    async fn record_successful_operation(&self, duration: Duration) {
        // –û–±–Ω–æ–≤–ª—è–µ–º circuit breaker
        {
            let mut breaker = self.circuit_breaker.write().await;
            breaker.failure_count = 0;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º production –º–µ—Ç—Ä–∏–∫–∏
        {
            let mut metrics = self.production_metrics.write().await;
            metrics.total_operations += 1;
            metrics.successful_operations += 1;
            
            // Exponential moving average –¥–ª—è response time
            let duration_ms = duration.as_millis() as f64;
            let alpha = 0.1;
            if metrics.avg_response_time_ms == 0.0 {
                metrics.avg_response_time_ms = duration_ms;
            } else {
                metrics.avg_response_time_ms = alpha * duration_ms + (1.0 - alpha) * metrics.avg_response_time_ms;
            }
        }
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    async fn record_failed_operation(&self, duration: Duration) {
        // –û–±–Ω–æ–≤–ª—è–µ–º circuit breaker
        {
            let mut breaker = self.circuit_breaker.write().await;
            breaker.failure_count += 1;
            breaker.last_failure = Some(Instant::now());
            
            if breaker.failure_count >= breaker.failure_threshold {
                breaker.is_open = true;
                error!("üö´ Circuit breaker –æ—Ç–∫—Ä—ã—Ç –ø–æ—Å–ª–µ {} –æ—à–∏–±–æ–∫", breaker.failure_count);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º production –º–µ—Ç—Ä–∏–∫–∏
        {
            let mut metrics = self.production_metrics.write().await;
            metrics.total_operations += 1;
            metrics.failed_operations += 1;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ circuit breaker trips –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
            if self.circuit_breaker.read().await.is_open {
                metrics.circuit_breaker_trips += 1;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º response time –¥–∞–∂–µ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            let duration_ms = duration.as_millis() as f64;
            let alpha = 0.1;
            if metrics.avg_response_time_ms == 0.0 {
                metrics.avg_response_time_ms = duration_ms;
            } else {
                metrics.avg_response_time_ms = alpha * duration_ms + (1.0 - alpha) * metrics.avg_response_time_ms;
            }
        }
    }

    /// Production —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏
    pub async fn get_stats(&self) -> MemorySystemStats {
        debug!("üìä –°–±–æ—Ä production —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏");

        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        let health_status = if let Some(ref health_manager) = self.health_manager {
            health_manager.system_health().await
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º–æ–π health monitor
            let health = self.container.resolve::<HealthMonitor>().unwrap_or_else(|_| {
                use crate::health::HealthMonitorConfig;
                Arc::new(HealthMonitor::new(HealthMonitorConfig::default()))
            });
            Ok(health.get_system_health())
        };

        // Cache —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ EmbeddingCoordinator –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        let cache_stats = if let Some(ref embedding_coordinator) = self.embedding_coordinator {
            embedding_coordinator.cache_stats().await
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º–æ–π cache
            let cache = self.container.resolve::<Arc<dyn EmbeddingCacheInterface>>().unwrap_or_else(|_| {
                use crate::{EmbeddingCache, CacheConfig};
                let temp_cache = EmbeddingCache::new(&std::env::temp_dir().join("fallback_cache"), CacheConfig::default()).unwrap();
                Arc::new(Arc::new(temp_cache) as Arc<dyn EmbeddingCacheInterface>)
            });
            cache.stats()
        };

        let promotion_stats = PromotionStats::default(); // TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ PromotionCoordinator

        let batch_stats = self.container.try_resolve::<BatchOperationManager>()
            .map(|manager| manager.stats())
            .unwrap_or_default();

        let gpu_stats = self.container.try_resolve::<GpuBatchProcessor>()
            .map(|_processor| {
                // GPU stats —Ç—Ä–µ–±—É—é—Ç async, –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                None
            })
            .flatten();

        // –î–æ–±–∞–≤–ª—è–µ–º production –º–µ—Ç—Ä–∏–∫–∏
        let production_metrics = self.production_metrics.read().await;
        let circuit_breaker = self.circuit_breaker.read().await;
        let lifecycle = self.lifecycle_manager.read().await;
        
        debug!("üìà Production —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} –æ–ø–µ—Ä–∞—Ü–∏–π, {} –∞–∫—Ç–∏–≤–Ω—ã—Ö, circuit breaker: {}", 
               production_metrics.total_operations,
               lifecycle.active_operations,
               if circuit_breaker.is_open { "–æ—Ç–∫—Ä—ã—Ç" } else { "–∑–∞–∫—Ä—ã—Ç" });

        MemorySystemStats {
            health_status,
            cache_hits: cache_stats.0,
            cache_misses: cache_stats.1,
            cache_size: cache_stats.2,
            promotion_stats,
            batch_stats,
            gpu_stats,
            di_container_stats: self.container.stats(),
        }
    }

    // === Production Monitoring Methods ===

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    async fn start_production_monitoring(&self) -> Result<()> {
        info!("üìä –ó–∞–ø—É—Å–∫ production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");
        
        let production_metrics = self.production_metrics.clone();
        let circuit_breaker = self.circuit_breaker.clone();
        
        tokio::spawn(async move {
            let mut interval = tokio::time::interval(Duration::from_secs(60));
            
            loop {
                interval.tick().await;
                
                let metrics = production_metrics.read().await;
                let breaker = circuit_breaker.read().await;
                
                if metrics.total_operations > 0 {
                    let success_rate = (metrics.successful_operations as f64 / metrics.total_operations as f64) * 100.0;
                    
                    debug!("üìä Production –º–µ—Ç—Ä–∏–∫–∏: –æ–ø–µ—Ä–∞—Ü–∏–π={}, —É—Å–ø–µ—Ö={}%, avg_response={}ms, circuit_breaker={}", 
                           metrics.total_operations,
                           success_rate,
                           metrics.avg_response_time_ms,
                           if breaker.is_open { "–æ—Ç–∫—Ä—ã—Ç" } else { "–∑–∞–∫—Ä—ã—Ç" });
                    
                    if success_rate < 95.0 {
                        warn!("üìâ –ù–∏–∑–∫–∏–π success rate: {:.1}%", success_rate);
                    }
                    
                    if metrics.avg_response_time_ms > 100.0 {
                        warn!("‚è±Ô∏è –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {:.1}ms", metrics.avg_response_time_ms);
                    }
                }
            }
        });
        
        debug!("üìä Production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω");
        Ok(())
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å health –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    async fn start_health_monitoring(&self) -> Result<()> {
        if let Some(ref health_manager) = self.health_manager {
            info!("üöë –ó–∞–ø—É—Å–∫ health –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");
            
            let manager = health_manager.clone();
            tokio::spawn(async move {
                let mut interval = tokio::time::interval(Duration::from_secs(30));
                
                loop {
                    interval.tick().await;
                    
                    if let Err(e) = manager.run_health_check().await {
                        error!("‚ùå Health check –Ω–µ —É–¥–∞–ª—Å—è: {}", e);
                    }
                }
            });
            
            debug!("üöë Health –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω");
        }
        
        Ok(())
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å resource –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    async fn start_resource_monitoring(&self) -> Result<()> {
        if let Some(ref resource_controller) = self.resource_controller {
            info!("üíæ –ó–∞–ø—É—Å–∫ resource –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ auto-scaling...");
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º auto-scaling monitoring
            resource_controller.start_autoscaling_monitoring().await?;
            
            debug!("üíæ Resource –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω");
        }
        
        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    async fn perform_readiness_checks(&self) -> Result<()> {
        info!("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏...");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        let mut coordinator_statuses = Vec::new();

        if let Some(ref embedding_coordinator) = self.embedding_coordinator {
            let ready = embedding_coordinator.is_ready().await;
            coordinator_statuses.push(("EmbeddingCoordinator", ready));
        }

        if let Some(ref search_coordinator) = self.search_coordinator {
            let ready = search_coordinator.is_ready().await;
            coordinator_statuses.push(("SearchCoordinator", ready));
        }

        if let Some(ref health_manager) = self.health_manager {
            let ready = health_manager.is_ready().await;
            coordinator_statuses.push(("HealthManager", ready));
        }

        if let Some(ref resource_controller) = self.resource_controller {
            let ready = resource_controller.is_ready().await;
            coordinator_statuses.push(("ResourceController", ready));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã
        for (name, ready) in &coordinator_statuses {
            if *ready {
                debug!("‚úÖ {} –≥–æ—Ç–æ–≤", name);
            } else {
                warn!("‚ö†Ô∏è {} –Ω–µ –≥–æ—Ç–æ–≤", name);
                return Err(anyhow::anyhow!("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä {} –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", name));
            }
        }

        info!("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã");
        Ok(())
    }

    /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async fn log_initialization_summary(&self) {
        let _production_metrics = self.production_metrics.read().await;
        let circuit_breaker = self.circuit_breaker.read().await;
        let coordinator_count = self.count_active_coordinators();
        let di_stats = self.container.stats();

        info!("üéâ === PRODUCTION INITIALIZATION SUMMARY ===");
        info!("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤: {}", coordinator_count);
        info!("üîß DI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {}", di_stats.total_types);
        info!("üö¶ Circuit breaker: {}", if circuit_breaker.is_open { "–æ—Ç–∫—Ä—ã—Ç" } else { "–∑–∞–∫—Ä—ã—Ç" });
        info!("‚ö° –õ–∏–º–∏—Ç concurrency: {}", self.operation_limiter.available_permits());
        info!("üìà –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –Ω–∞–≥—Ä—É–∑–∫–µ");
        info!("============================================");
    }

    /// Production graceful shutdown
    pub async fn shutdown(&self) -> Result<()> {
        info!("üõë –ù–∞—á–∞–ª–æ graceful shutdown...");

        // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ shutdown –∑–∞–ø—Ä–æ—à–µ–Ω
        {
            let mut lifecycle = self.lifecycle_manager.write().await;
            lifecycle.shutdown_requested = true;
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        let shutdown_timeout = {
            let lifecycle = self.lifecycle_manager.read().await;
            lifecycle.shutdown_timeout.clone()
        };

        let wait_start = Instant::now();
        while wait_start.elapsed() < shutdown_timeout {
            let active_ops = {
                let lifecycle = self.lifecycle_manager.read().await;
                lifecycle.active_operations
            };

            if active_ops == 0 {
                break;
            }

            debug!("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...", active_ops);
            tokio::time::sleep(Duration::from_millis(100)).await;
        }

        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ
        self.ready.store(false, std::sync::atomic::Ordering::Relaxed);

        // Shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        self.shutdown_coordinators().await?;

        // –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        let production_metrics = self.production_metrics.read().await;
        info!("üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {} –æ–ø–µ—Ä–∞—Ü–∏–π, {} —É—Å–ø–µ—à–Ω—ã—Ö, {} –Ω–µ—É–¥–∞—á–Ω—ã—Ö", 
              production_metrics.total_operations,
              production_metrics.successful_operations,
              production_metrics.failed_operations);

        info!("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω");
        Ok(())
    }

    /// Shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    async fn shutdown_coordinators(&self) -> Result<()> {
        info!("üîå Shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");

        let mut shutdown_tasks = vec![];

        // –ó–∞–ø—É—Å–∫–∞–µ–º shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if let Some(ref embedding_coordinator) = self.embedding_coordinator {
            let coordinator = embedding_coordinator.clone();
            shutdown_tasks.push(tokio::spawn(async move {
                coordinator.shutdown().await
            }));
        }

        if let Some(ref search_coordinator) = self.search_coordinator {
            let coordinator = search_coordinator.clone();
            shutdown_tasks.push(tokio::spawn(async move {
                coordinator.shutdown().await
            }));
        }

        if let Some(ref health_manager) = self.health_manager {
            let manager = health_manager.clone();
            shutdown_tasks.push(tokio::spawn(async move {
                manager.shutdown().await
            }));
        }

        if let Some(ref resource_controller) = self.resource_controller {
            let controller = resource_controller.clone();
            shutdown_tasks.push(tokio::spawn(async move {
                controller.shutdown().await
            }));
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö shutdown –æ–ø–µ—Ä–∞—Ü–∏–π
        for task in shutdown_tasks {
            if let Err(e) = task.await {
                warn!("–û—à–∏–±–∫–∞ shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", e);
            }
        }

        {
            let mut lifecycle = self.lifecycle_manager.write().await;
            lifecycle.coordinators_shutdown = true;
        }

        info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        Ok(())
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å promotion –ø—Ä–æ—Ü–µ—Å—Å
    pub async fn run_promotion(&self) -> Result<PromotionStats> {
        debug!("–ó–∞–ø—É—Å–∫ promotion —á–µ—Ä–µ–∑ DI");

        if let Ok(promotion_engine) = self.container.resolve::<PromotionEngine>() {
            let stats = promotion_engine.run_promotion_cycle().await?;
            info!("‚úì Promotion –∑–∞–≤–µ—Ä—à–µ–Ω: interact_to_insights={}, insights_to_assets={}", 
                  stats.interact_to_insights, stats.insights_to_assets);
            Ok(stats)
        } else {
            // Graceful fallback –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ promotion engine (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ç–µ—Å—Ç–∞—Ö)
            debug!("Promotion engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
            Ok(PromotionStats {
                interact_to_insights: 0,
                insights_to_assets: 0,
                expired_interact: 0,
                expired_insights: 0,
                total_time_ms: 0,
                index_update_time_ms: 0,
                promotion_time_ms: 0,
                cleanup_time_ms: 0,
            })
        }
    }
    
    /// –ê–ª–∏–∞—Å –¥–ª—è run_promotion –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    pub async fn run_promotion_cycle(&self) -> Result<PromotionStats> {
        self.run_promotion().await
    }

    /// Flush –≤—Å–µ—Ö pending –æ–ø–µ—Ä–∞—Ü–∏–π
    pub async fn flush_all(&self) -> Result<()> {
        debug!("Flush –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ DI");

        // Flush batch manager
        if let Some(_batch_manager) = self.container.try_resolve::<Arc<BatchOperationManager>>() {
            // BatchOperationManager –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ–µ—Ç flush_all() –º–µ—Ç–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            debug!("‚úì Batch manager –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
        }

        // Flush store - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ flush
        // self.cached_store.flush().await?;
        debug!("‚úì Vector store –±—É–¥–µ—Ç flushed –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");

        info!("‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ flushed");
        Ok(())
    }

    /// –ë–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π
    pub async fn batch_insert(&self, records: Vec<Record>) -> Result<BatchInsertResult> {
        let timer = OperationTimer::new("batch_insert");
        let total_records = records.len();
        let mut inserted = 0;
        let mut failed = 0;
        let mut errors = Vec::new();

        debug!("–ë–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ {} –∑–∞–ø–∏—Å–µ–π", total_records);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch manager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if let Ok(batch_manager) = self.container.resolve::<Arc<BatchOperationManager>>() {
            for record in records {
                match batch_manager.add(record).await {
                    Ok(_) => inserted += 1,
                    Err(e) => {
                        failed += 1;
                        errors.push(e.to_string());
                    }
                }
            }
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∫—É
            let store = self.container.resolve::<VectorStore>()?;
            for record in records {
                match store.insert(&record).await {
                    Ok(_) => inserted += 1,
                    Err(e) => {
                        failed += 1;
                        errors.push(e.to_string());
                    }
                }
            }
        }

        let elapsed = timer.elapsed().as_millis() as u64;
        debug!("–ë–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {}/{} —É—Å–ø–µ—à–Ω–æ –∑–∞ {}–º—Å", inserted, total_records, elapsed);

        Ok(BatchInsertResult {
            inserted,
            failed,
            errors,
            total_time_ms: elapsed,
        })
    }

    /// –ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫
    pub async fn batch_search(&self, queries: Vec<String>, layer: Layer, options: SearchOptions) -> Result<BatchSearchResult> {
        let timer = OperationTimer::new("batch_search");
        let mut results = Vec::new();

        debug!("–ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫ {} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–ª–æ–µ {:?}", queries.len(), layer);

        for query in &queries {
            let search_results = self.search(query, layer, options.clone()).await?;
            results.push(search_results);
        }

        let elapsed = timer.elapsed().as_millis() as u64;
        debug!("–ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {}–º—Å", elapsed);

        Ok(BatchSearchResult {
            queries,
            results,
            total_time_ms: elapsed,
        })
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    pub async fn update(&self, record: Record) -> Result<()> {
        let _timer = OperationTimer::new("memory_update");
        let store = self.container.resolve::<VectorStore>()?;
        
        debug!("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {}", record.id);
        
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
        store.delete_by_id(&record.id, record.layer).await?;
        // –ó–∞—Ç–µ–º –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        store.insert(&record).await?;
        
        debug!("‚úì –ó–∞–ø–∏—Å—å {} –æ–±–Ω–æ–≤–ª–µ–Ω–∞", record.id);
        Ok(())
    }

    /// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
    pub async fn delete(&self, id: &uuid::Uuid, layer: Layer) -> Result<()> {
        let _timer = OperationTimer::new("memory_delete");
        let store = self.container.resolve::<VectorStore>()?;
        
        debug!("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {} –∏–∑ —Å–ª–æ—è {:?}", id, layer);
        store.delete_by_id(id, layer).await?;
        
        debug!("‚úì –ó–∞–ø–∏—Å—å {} —É–¥–∞–ª–µ–Ω–∞", id);
        Ok(())
    }

    /// –°–æ–∑–¥–∞—Ç—å backup
    pub async fn create_backup(&self, path: &str) -> Result<crate::backup::BackupMetadata> {
        debug!("–°–æ–∑–¥–∞–Ω–∏–µ backup —á–µ—Ä–µ–∑ DI: {}", path);

        if let Ok(backup_manager) = self.container.resolve::<BackupManager>() {
            let store = self.container.resolve::<VectorStore>()?;
            let _backup_path = backup_manager.create_backup(store, Some(path.to_string())).await?;
            let metadata = crate::backup::BackupMetadata {
                version: 1,
                created_at: chrono::Utc::now(),
                magray_version: "0.1.0".to_string(),
                layers: vec![],
                total_records: 0,
                index_config: Default::default(),
                checksum: None,
                layer_checksums: None,
            };
            info!("‚úì Backup —Å–æ–∑–¥–∞–Ω: {}", path);
            Ok(metadata)
        } else {
            Err(anyhow::anyhow!("Backup manager not configured"))
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    pub async fn check_health(&self) -> Result<SystemHealthStatus> {
        let health = self.container.resolve::<Arc<HealthMonitor>>()?;
        Ok(health.get_system_health())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É —á–µ—Ä–µ–∑ DI
    pub fn resolve<T>(&self) -> Result<Arc<T>>
    where
        T: std::any::Any + Send + Sync + 'static,
    {
        self.container.resolve::<T>()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
    pub fn try_resolve<T>(&self) -> Option<Arc<T>>
    where
        T: std::any::Any + Send + Sync + 'static,
    {
        self.container.try_resolve::<T>()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    pub fn di_stats(&self) -> crate::DIContainerStats {
        self.container.stats()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å performance –º–µ—Ç—Ä–∏–∫–∏ DI —Å–∏—Å—Ç–µ–º—ã
    pub fn get_performance_metrics(&self) -> crate::DIPerformanceMetrics {
        self.container.get_performance_metrics()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ DI —Å–∏—Å—Ç–µ–º—ã
    pub fn get_performance_report(&self) -> String {
        self.container.get_performance_report()
    }

    /// –°–±—Ä–æ—Å–∏—Ç—å performance –º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    pub fn reset_performance_metrics(&self) {
        self.container.reset_performance_metrics()
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ–π memory —Å–∏—Å—Ç–µ–º—ã
#[derive(Debug)]
pub struct MemorySystemStats {
    pub health_status: Result<SystemHealthStatus, anyhow::Error>,
    pub cache_hits: u64,
    pub cache_misses: u64,
    pub cache_size: u64,
    pub promotion_stats: PromotionStats,
    pub batch_stats: BatchStats,
    pub gpu_stats: Option<BatchProcessorStats>,
    pub di_container_stats: crate::DIContainerStats,
}

impl Default for MemorySystemStats {
    fn default() -> Self {
        Self {
            health_status: Err(anyhow::anyhow!("Health status not available")),
            cache_hits: 0,
            cache_misses: 0,
            cache_size: 0,
            promotion_stats: PromotionStats::default(),
            batch_stats: BatchStats::default(),
            gpu_stats: None,
            di_container_stats: crate::DIContainerStats {
                registered_factories: 0,
                cached_singletons: 0,
                total_types: 0,
            },
        }
    }
}

/// Builder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DIMemoryService —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
pub struct DIMemoryServiceBuilder {
    config: MemoryConfig,
    minimal: bool,
    cpu_only: bool,
}

impl DIMemoryServiceBuilder {
    pub fn new(config: MemoryConfig) -> Self {
        Self {
            config,
            minimal: false,
            cpu_only: false,
        }
    }

    pub fn minimal(mut self) -> Self {
        self.minimal = true;
        self
    }

    pub fn cpu_only(mut self) -> Self {
        self.cpu_only = true;
        self
    }

    pub async fn build(self) -> Result<DIMemoryService> {
        if self.minimal {
            DIMemoryService::new_minimal(self.config).await
        } else if self.cpu_only {
            let mut cpu_config = self.config;
            cpu_config.ai_config.embedding.use_gpu = false;
            cpu_config.ai_config.reranking.use_gpu = false;
            
            let container = MemoryDIConfigurator::configure_cpu_only(cpu_config).await?;
            
            // CPU-only –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ (–∫–∞–∫ minimal)
            Ok(DIMemoryService {
                container,
                embedding_coordinator: None,
                search_coordinator: None,
                health_manager: None,
                resource_controller: None,
                ready: Arc::new(std::sync::atomic::AtomicBool::new(false)),
                circuit_breaker: Arc::new(RwLock::new(CircuitBreakerState::default())),
                production_metrics: Arc::new(RwLock::new(ProductionMetrics::default())),
                lifecycle_manager: Arc::new(RwLock::new(LifecycleManager::default())),
                performance_timer: Arc::new(std::sync::Mutex::new(Instant::now())),
                retry_handler: RetryHandler::new(RetryPolicy::fast()),
                operation_limiter: Arc::new(Semaphore::new(50)), // –°—Ä–µ–¥–Ω–∏–π –ª–∏–º–∏—Ç –¥–ª—è CPU
            })
        } else {
            DIMemoryService::new(self.config).await
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::di_memory_config::test_helpers;

    #[tokio::test]
    async fn test_di_memory_service_creation() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ DI
        let store = service.resolve::<VectorStore>()?;
        assert!(!(store.as_ref() as *const _ == std::ptr::null()));
        
        let cache = service.resolve::<Arc<dyn EmbeddingCacheInterface>>()?;
        assert!(cache.stats().0 >= 0); // hits >= 0

        let stats = service.di_stats();
        assert!(stats.total_types > 0);

        Ok(())
    }

    #[tokio::test]
    async fn test_di_service_initialization() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        service.initialize().await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ–∏ —Å–æ–∑–¥–∞–Ω—ã
        // (–¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç implementation VectorStore)

        Ok(())
    }

    #[tokio::test]
    async fn test_builder_pattern() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        
        let service = DIMemoryServiceBuilder::new(config)
            .minimal()
            .cpu_only()
            .build()
            .await?;

        let stats = service.get_stats().await;
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω
        assert!(stats.di_container_stats.total_types > 0);

        Ok(())
    }

    #[tokio::test]
    async fn test_dependency_resolution() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        let store = service.resolve::<VectorStore>()?;
        assert!(!(store.as_ref() as *const _ == std::ptr::null()));

        let cache = service.resolve::<Arc<dyn EmbeddingCacheInterface>>()?;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        assert!(cache.stats().0 >= 0); // hits >= 0

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        let _optional_metrics = service.try_resolve::<Arc<MetricsCollector>>();
        // –ú–æ–∂–µ—Ç –±—ã—Ç—å None –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Ok(())
    }

    #[tokio::test]
    async fn test_performance_metrics() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        service.reset_performance_metrics();

        // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π resolve
        let _store1 = service.resolve::<VectorStore>()?;
        let _store2 = service.resolve::<VectorStore>()?; // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞
        let _cache = service.resolve::<Arc<dyn EmbeddingCacheInterface>>()?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º performance –º–µ—Ç—Ä–∏–∫–∏
        let metrics = service.get_performance_metrics();
        assert!(metrics.total_resolves >= 3);
        assert!(metrics.cache_hits >= 1); // store2 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
        let report = service.get_performance_report();
        assert!(report.contains("Performance Report"));
        assert!(report.contains("Total resolves:"));
        assert!(report.contains("Cache hit rate:"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        let stats = service.di_stats();
        assert!(stats.total_types > 0);

        Ok(())
    }
}