use anyhow::{anyhow, Result};
use parking_lot::RwLock;
use std::collections::HashMap;
use std::sync::Arc;
use tracing::{debug, info, warn};

use crate::{
    vector_index_hnswlib::{VectorIndexHnswRs, HnswRsConfig},
    types::Layer,
};

// @component: {"k":"C","id":"dynamic_dimension","t":"Dynamic dimension support –¥–ª—è –≤–µ–∫—Ç–æ—Ä–æ–≤","m":{"cur":0,"tgt":90,"u":"%"},"f":["dimension","dynamic","adaptation"]}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π –≤–µ–∫—Ç–æ—Ä–æ–≤
pub struct DynamicDimensionManager {
    /// –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø–æ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—è–º
    indices_by_dimension: Arc<RwLock<HashMap<usize, DimensionGroup>>>,
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—è–º–∏
    config: DimensionConfig,
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
    stats: Arc<RwLock<DimensionStats>>,
}

/// –ì—Ä—É–ø–ø–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
#[allow(dead_code)]
struct DimensionGroup {
    pub dimension: usize,
    pub indices: HashMap<Layer, Arc<VectorIndexHnswRs>>,
    pub record_count: usize,
    pub created_at: std::time::Instant,
    pub last_used: std::time::Instant,
}

#[derive(Debug, Clone)]
pub struct DimensionConfig {
    /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤
    pub supported_dimensions: Vec<usize>,
    /// –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
    pub default_dimension: usize,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
    pub max_active_dimensions: usize,
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    pub auto_detect_dimension: bool,
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—è–º–∏
    pub enable_dimension_conversion: bool,
    /// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ (–º–∏–Ω—É—Ç—ã)
    pub unused_index_ttl_minutes: u64,
}

impl Default for DimensionConfig {
    fn default() -> Self {
        Self {
            supported_dimensions: vec![
                384,   // sentence-transformers/all-MiniLM-L6-v2
                512,   // OpenAI text-embedding-ada-002
                768,   // BERT, RoBERTa
                1024,  // Qwen3, BGE-M3 (—Ç–µ–∫—É—â–∏–π –¥–µ—Ñ–æ–ª—Ç)
                1536,  // OpenAI text-embedding-3-small
                3072,  // OpenAI text-embedding-3-large
            ],
            default_dimension: 1024,
            max_active_dimensions: 3,
            auto_detect_dimension: true,
            enable_dimension_conversion: false, // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ
            unused_index_ttl_minutes: 60,
        }
    }
}

#[derive(Debug, Default, Clone)]
pub struct DimensionStats {
    pub active_dimensions: HashMap<usize, DimensionUsageStats>,
    pub dimension_conversions: u64,
    pub auto_detections: u64,
    pub index_evictions: u64,
}

#[derive(Debug, Default, Clone)]
pub struct DimensionUsageStats {
    pub record_count: usize,
    pub search_count: u64,
    pub last_access: Option<std::time::Instant>,
    pub total_memory_mb: f64,
}

impl DynamicDimensionManager {
    pub fn new(config: DimensionConfig) -> Result<Self> {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if config.supported_dimensions.is_empty() {
            return Err(anyhow!("At least one supported dimension must be specified"));
        }
        
        if !config.supported_dimensions.contains(&config.default_dimension) {
            return Err(anyhow!("Default dimension {} not in supported dimensions", config.default_dimension));
        }

        info!("üéØ DynamicDimensionManager initialized:");
        info!("  Supported dimensions: {:?}", config.supported_dimensions);
        info!("  Default dimension: {}", config.default_dimension);
        info!("  Max active: {}", config.max_active_dimensions);

        Ok(Self {
            indices_by_dimension: Arc::new(RwLock::new(HashMap::new())),
            config,
            stats: Arc::new(RwLock::new(DimensionStats::default())),
        })
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ —Å–ª–æ—è
    pub fn get_or_create_index(
        &self,
        dimension: usize,
        layer: Layer,
    ) -> Result<Arc<VectorIndexHnswRs>> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
        if !self.is_dimension_supported(dimension) {
            if self.config.auto_detect_dimension {
                warn!("üìè Dimension {} not in supported list, auto-adding", dimension);
                // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å
            } else {
                return Err(anyhow!("Dimension {} not supported", dimension));
            }
        }

        let mut indices = self.indices_by_dimension.write();
        
        // –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if !indices.contains_key(&dimension) {
            self.create_dimension_group(&mut indices, dimension)?;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
        let dimension_group = indices.get_mut(&dimension)
            .ok_or_else(|| anyhow!("Failed to create dimension group for {}", dimension))?;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        dimension_group.last_used = std::time::Instant::now();

        // –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–æ—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if let std::collections::hash_map::Entry::Vacant(e) = dimension_group.indices.entry(layer) {
            let index_config = HnswRsConfig {
                dimension,
                max_connections: 24,
                ef_construction: 400,
                ef_search: 100,
                max_elements: 1_000_000,
                max_layers: 16,
                use_parallel: true,
            };

            let index = Arc::new(VectorIndexHnswRs::new(index_config)?);
            e.insert(index.clone());

            info!("üîß Created new index: dimension={}, layer={:?}", dimension, layer);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.update_dimension_stats(dimension);

        Ok(dimension_group.indices[&layer].clone())
    }

    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–∞
    pub fn detect_dimension(&self, vector: &[f32]) -> usize {
        let detected = vector.len();
        
        if self.config.auto_detect_dimension {
            let mut stats = self.stats.write();
            stats.auto_detections += 1;
        }

        // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        if self.is_dimension_supported(detected) {
            debug!("üìè Auto-detected supported dimension: {}", detected);
            return detected;
        }

        // –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é
        let closest = self.find_closest_supported_dimension(detected);
        
        if closest != detected {
            warn!("üìè Vector dimension {} not supported, using closest: {}", detected, closest);
        }

        closest
    }

    /// –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    fn find_closest_supported_dimension(&self, target: usize) -> usize {
        self.config.supported_dimensions
            .iter()
            .min_by_key(|&&dim| ((dim as i32) - (target as i32)).abs())
            .copied()
            .unwrap_or(self.config.default_dimension)
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    pub fn is_dimension_supported(&self, dimension: usize) -> bool {
        self.config.supported_dimensions.contains(&dimension)
    }

    /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –∫ –Ω—É–∂–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    pub fn convert_vector_dimension(&self, vector: Vec<f32>, target_dimension: usize) -> Result<Vec<f32>> {
        if !self.config.enable_dimension_conversion {
            return Err(anyhow!("Dimension conversion is disabled"));
        }

        let current_dimension = vector.len();
        
        if current_dimension == target_dimension {
            return Ok(vector);
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        {
            let mut stats = self.stats.write();
            stats.dimension_conversions += 1;
        }

        if current_dimension < target_dimension {
            // –†–∞—Å—à–∏—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä (padding –Ω—É–ª—è–º–∏)
            let mut extended = vector;
            extended.resize(target_dimension, 0.0);
            
            info!("üìè Extended vector: {} -> {} dimensions", current_dimension, target_dimension);
            Ok(extended)
        } else {
            // –°–∂–∏–º–∞–µ–º –≤–µ–∫—Ç–æ—Ä (truncation)
            let truncated = vector[..target_dimension].to_vec();
            
            warn!("üìè Truncated vector: {} -> {} dimensions", current_dimension, target_dimension);
            Ok(truncated)
        }
    }

    /// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    pub async fn cleanup_unused_indices(&self) -> Result<usize> {
        let ttl = std::time::Duration::from_secs(self.config.unused_index_ttl_minutes * 60);
        let mut indices = self.indices_by_dimension.write();
        let mut removed_count = 0;

        let now = std::time::Instant::now();
        
        // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        let to_remove: Vec<usize> = indices
            .iter()
            .filter(|(_, group)| {
                group.record_count == 0 && now.duration_since(group.last_used) > ttl
            })
            .map(|(&dim, _)| dim)
            .collect();

        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≥—Ä—É–ø–ø—ã
        for dimension in to_remove {
            indices.remove(&dimension);
            removed_count += 1;
            info!("üßπ Removed unused dimension group: {}", dimension);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if removed_count > 0 {
            let mut stats = self.stats.write();
            stats.index_evictions += removed_count as u64;
        }

        Ok(removed_count)
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—è–º
    pub fn get_dimension_stats(&self) -> DimensionStats {
        let indices = self.indices_by_dimension.read();
        let mut stats = self.stats.write();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
        stats.active_dimensions.clear();
        
        for (&dimension, group) in indices.iter() {
            let total_records: usize = group.indices
                .values()
                .map(|index| index.len())
                .sum();

            let memory_estimate = (total_records * dimension * 4) as f64 / 1024.0 / 1024.0; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ

            stats.active_dimensions.insert(dimension, DimensionUsageStats {
                record_count: total_records,
                search_count: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
                last_access: Some(group.last_used),
                total_memory_mb: memory_estimate,
            });
        }

        (*stats).clone()
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
    pub fn get_active_dimensions(&self) -> Vec<usize> {
        let indices = self.indices_by_dimension.read();
        indices.keys().copied().collect()
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    pub fn get_dimension_info(&self, dimension: usize) -> Option<DimensionInfo> {
        let indices = self.indices_by_dimension.read();
        
        if let Some(group) = indices.get(&dimension) {
            let total_records: usize = group.indices
                .values()
                .map(|index| index.len())
                .sum();

            Some(DimensionInfo {
                dimension,
                layers: group.indices.keys().copied().collect(),
                total_records,
                created_at: group.created_at,
                last_used: group.last_used,
                memory_usage_mb: (total_records * dimension * 4) as f64 / 1024.0 / 1024.0,
            })
        } else {
            None
        }
    }

    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π
    pub fn add_supported_dimension(&mut self, dimension: usize) -> Result<()> {
        if dimension == 0 {
            return Err(anyhow!("Invalid dimension: 0"));
        }

        if !self.config.supported_dimensions.contains(&dimension) {
            self.config.supported_dimensions.push(dimension);
            self.config.supported_dimensions.sort();
            
            info!("‚ûï Added supported dimension: {}", dimension);
        }

        Ok(())
    }

    /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    fn create_dimension_group(
        &self,
        indices: &mut HashMap<usize, DimensionGroup>,
        dimension: usize,
    ) -> Result<()> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
        if indices.len() >= self.config.max_active_dimensions {
            // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            if let Some(least_used_dim) = self.find_least_used_dimension(indices) {
                indices.remove(&least_used_dim);
                warn!("üìâ Evicted dimension {} to make room for {}", least_used_dim, dimension);
            }
        }

        let group = DimensionGroup {
            dimension,
            indices: HashMap::new(),
            record_count: 0,
            created_at: std::time::Instant::now(),
            last_used: std::time::Instant::now(),
        };

        indices.insert(dimension, group);
        info!("üÜï Created new dimension group: {}", dimension);

        Ok(())
    }

    fn find_least_used_dimension(&self, indices: &HashMap<usize, DimensionGroup>) -> Option<usize> {
        indices
            .iter()
            .filter(|(_, group)| group.record_count == 0) // –¢–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã
            .min_by_key(|(_, group)| group.last_used)
            .map(|(&dim, _)| dim)
    }

    fn update_dimension_stats(&self, dimension: usize) {
        let mut stats = self.stats.write();
        
        stats.active_dimensions.entry(dimension).or_default();
    }
}

#[derive(Debug)]
pub struct DimensionInfo {
    pub dimension: usize,
    pub layers: Vec<Layer>,
    pub total_records: usize,
    pub created_at: std::time::Instant,
    pub last_used: std::time::Instant,
    pub memory_usage_mb: f64,
}

/// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π wrapper –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
pub struct DimensionAwareVectorStore {
    dimension_manager: Arc<DynamicDimensionManager>,
}

impl DimensionAwareVectorStore {
    pub fn new(config: DimensionConfig) -> Result<Self> {
        let dimension_manager = Arc::new(DynamicDimensionManager::new(config)?);
        
        Ok(Self {
            dimension_manager,
        })
    }

    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    pub fn add_vector_adaptive(
        &self,
        id: String,
        vector: Vec<f32>,
        layer: Layer,
    ) -> Result<()> {
        let dimension = self.dimension_manager.detect_dimension(&vector);
        let target_dimension = if self.dimension_manager.is_dimension_supported(dimension) {
            dimension
        } else {
            self.dimension_manager.config.default_dimension
        };

        let final_vector = if dimension != target_dimension {
            self.dimension_manager.convert_vector_dimension(vector, target_dimension)?
        } else {
            vector
        };

        let index = self.dimension_manager.get_or_create_index(target_dimension, layer)?;
        index.add(id, final_vector)?;

        Ok(())
    }

    /// –ü–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    pub fn search_adaptive(
        &self,
        query: &[f32],
        layer: Layer,
        k: usize,
    ) -> Result<Vec<(String, f32)>> {
        let query_dimension = self.dimension_manager.detect_dimension(query);
        let target_dimension = if self.dimension_manager.is_dimension_supported(query_dimension) {
            query_dimension
        } else {
            self.dimension_manager.config.default_dimension
        };

        let final_query = if query_dimension != target_dimension {
            self.dimension_manager.convert_vector_dimension(query.to_vec(), target_dimension)?
        } else {
            query.to_vec()
        };

        let index = self.dimension_manager.get_or_create_index(target_dimension, layer)?;
        index.search(&final_query, k)
    }

    pub fn get_dimension_manager(&self) -> Arc<DynamicDimensionManager> {
        self.dimension_manager.clone()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_dimension_detection() {
        let config = DimensionConfig::default();
        let manager = DynamicDimensionManager::new(config).unwrap();

        // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
        let vector_768 = vec![0.1; 768];
        assert_eq!(manager.detect_dimension(&vector_768), 768);

        // –¢–µ—Å—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
        let vector_999 = vec![0.1; 999];
        let closest = manager.detect_dimension(&vector_999);
        assert!(manager.is_dimension_supported(closest));
    }

    #[test]
    fn test_dimension_conversion() {
        let mut config = DimensionConfig::default();
        config.enable_dimension_conversion = true;
        
        let manager = DynamicDimensionManager::new(config).unwrap();

        // –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        let small_vector = vec![0.1, 0.2, 0.3];
        let extended = manager.convert_vector_dimension(small_vector, 5).unwrap();
        assert_eq!(extended.len(), 5);
        assert_eq!(extended[3], 0.0); // Padding –Ω—É–ª—è–º–∏

        // –¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è
        let large_vector = vec![0.1, 0.2, 0.3, 0.4, 0.5];
        let truncated = manager.convert_vector_dimension(large_vector, 3).unwrap();
        assert_eq!(truncated.len(), 3);
        assert_eq!(truncated[2], 0.3);
    }
}