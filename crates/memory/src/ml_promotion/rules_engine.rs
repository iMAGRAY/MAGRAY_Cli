use anyhow::Result;
use async_trait::async_trait;
use chrono::{DateTime, Duration, Timelike, Utc};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use tracing::{debug, info, warn};

use super::traits::PromotionRulesEngine;
use super::types::PromotionDecision;
use crate::types::{Layer, Record};

/// Configurable promotion rules engine
#[derive(Debug, Clone)]
pub struct ConfigurableRulesEngine {
    config: RulesConfig,
    layer_strategies: HashMap<Layer, LayerStrategy>,
    business_rules: Vec<BusinessRule>,
    promotion_history: PromotionHistory,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è business rules
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RulesConfig {
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ promotion –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ (—á–∞—Å—ã)
    pub min_repromotion_interval_hours: u64,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ promotion –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
    pub max_promotions_per_record_per_day: u32,
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º layer –ø–µ—Ä–µ–¥ promotion (—á–∞—Å—ã)
    pub min_layer_residence_time_hours: u64,
    /// –í–∫–ª—é—á–∏—Ç—å strict validation rules
    pub strict_validation: bool,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è promotion (0.0-1.0)
    pub max_system_load_for_promotion: f32,
    /// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è aggressive/conservative promotion
    pub time_windows: TimeWindowConfig,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TimeWindowConfig {
    /// –ß–∞—Å –Ω–∞—á–∞–ª–∞ aggressive promotion (0-23)
    pub aggressive_start_hour: u8,
    /// –ß–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è aggressive promotion (0-23)
    pub aggressive_end_hour: u8,
    /// –ú–Ω–æ–∂–∏—Ç–µ–ª—å threshold –≤–æ –≤—Ä–µ–º—è aggressive –ø–µ—Ä–∏–æ–¥–∞
    pub aggressive_threshold_multiplier: f32,
    /// –ú–Ω–æ–∂–∏—Ç–µ–ª—å threshold –≤–æ –≤—Ä–µ–º—è conservative –ø–µ—Ä–∏–æ–¥–∞
    pub conservative_threshold_multiplier: f32,
}

impl Default for RulesConfig {
    fn default() -> Self {
        Self {
            min_repromotion_interval_hours: 24,
            max_promotions_per_record_per_day: 3,
            min_layer_residence_time_hours: 1,
            strict_validation: false,
            max_system_load_for_promotion: 0.8,
            time_windows: TimeWindowConfig {
                aggressive_start_hour: 9,
                aggressive_end_hour: 17,
                aggressive_threshold_multiplier: 0.8,
                conservative_threshold_multiplier: 1.2,
            },
        }
    }
}

impl RulesConfig {
    pub fn production() -> Self {
        Self {
            min_repromotion_interval_hours: 48,
            max_promotions_per_record_per_day: 2,
            min_layer_residence_time_hours: 6,
            strict_validation: true,
            max_system_load_for_promotion: 0.7,
            time_windows: TimeWindowConfig {
                aggressive_start_hour: 10,
                aggressive_end_hour: 16,
                aggressive_threshold_multiplier: 0.9,
                conservative_threshold_multiplier: 1.1,
            },
        }
    }

    pub fn development() -> Self {
        Self {
            min_repromotion_interval_hours: 1,
            max_promotions_per_record_per_day: 10,
            min_layer_residence_time_hours: 0,
            strict_validation: false,
            max_system_load_for_promotion: 1.0,
            time_windows: TimeWindowConfig {
                aggressive_start_hour: 0,
                aggressive_end_hour: 23,
                aggressive_threshold_multiplier: 0.5,
                conservative_threshold_multiplier: 1.0,
            },
        }
    }
}

/// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ layer
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct LayerStrategy {
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π access_count –¥–ª—è promotion –∏–∑ —ç—Ç–æ–≥–æ layer
    pub min_access_count: u32,
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π confidence score –¥–ª—è promotion
    pub min_confidence_score: f32,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ —á–∞—Å–∞—Ö –¥–ª—è promotion
    pub max_age_hours: Option<u64>,
    /// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç layer –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    pub priority: u8,
    /// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è layer
    pub special_conditions: Vec<SpecialCondition>,
}

/// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è promotion
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum SpecialCondition {
    /// –¢—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    MinTextLength(usize),
    /// –¢—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    RequiredKeywords(Vec<String>),
    /// –ò—Å–∫–ª—é—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    BlacklistKeywords(Vec<String>),
    /// –¢—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –≤–∞–∂–Ω–æ—Å—Ç—å
    MinSemanticImportance(f32),
    /// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    TimeOfDayRestriction { start_hour: u8, end_hour: u8 },
}

/// –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–æ
#[derive(Debug, Clone)]
pub enum BusinessRule {
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ promotion –≤ —á–∞—Å
    MaxPromotionsPerHour(u32),
    /// –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –º–µ–∂–¥—É layers
    LayerBalance {
        min_interact_ratio: f32,
        max_assets_ratio: f32,
    },
    /// –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
    NoDuplicateContent,
    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ access patterns
    UserAccessPatterns,
}

/// –ò—Å—Ç–æ—Ä–∏—è promotion –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
#[derive(Debug, Clone)]
pub struct PromotionHistory {
    recent_promotions: HashMap<uuid::Uuid, Vec<DateTime<Utc>>>,
    daily_counts: HashMap<uuid::Uuid, u32>,
    last_cleanup: DateTime<Utc>,
}

impl Default for PromotionHistory {
    fn default() -> Self {
        Self {
            recent_promotions: HashMap::new(),
            daily_counts: HashMap::new(),
            last_cleanup: Utc::now(),
        }
    }
}

impl PromotionHistory {
    fn cleanup_old_entries(&mut self) {
        let now = Utc::now();
        let cutoff = now - Duration::hours(48);

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ promotion –∑–∞–ø–∏—Å–∏
        self.recent_promotions.retain(|_, timestamps| {
            timestamps.retain(|&ts| ts > cutoff);
            !timestamps.is_empty()
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º daily counts –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å
        if (now - self.last_cleanup).num_hours() >= 24 {
            self.daily_counts.clear();
            self.last_cleanup = now;
        }
    }
}

#[async_trait]
impl PromotionRulesEngine for ConfigurableRulesEngine {
    async fn can_promote(&self, record: &Record) -> bool {
        debug!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ promotion –¥–ª—è –∑–∞–ø–∏—Å–∏ {}", record.id);

        // 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if !self.check_basic_requirements(record) {
            debug!("‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã");
            return false;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ layer strategy
        if !self.check_layer_strategy(record) {
            debug!("‚ùå Layer strategy –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
            return false;
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ promotion history
        if !self.check_promotion_history(record) {
            debug!("‚ùå Promotion history –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è");
            return false;
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ business rules
        if !self.check_business_rules(record).await {
            debug!("‚ùå Business rules –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã");
            return false;
        }

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        if !self.check_system_conditions().await {
            debug!("‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç");
            return false;
        }

        debug!("‚úÖ –ó–∞–ø–∏—Å—å {} –º–æ–∂–µ—Ç –±—ã—Ç—å promoted", record.id);
        true
    }

    fn determine_target_layer(&self, record: &Record, confidence: f32) -> Layer {
        let adjusted_confidence = self.adjust_confidence_for_time_window(confidence);

        match record.layer {
            Layer::Interact => {
                if adjusted_confidence > 0.9 {
                    // –í—ã—Å–æ–∫–∏–π confidence - –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤ Assets
                    Layer::Assets
                } else if adjusted_confidence > 0.7 {
                    // –°—Ä–µ–¥–Ω–∏–π confidence - –≤ Insights
                    Layer::Insights
                } else {
                    // –ù–∏–∑–∫–∏–π confidence - –æ—Å—Ç–∞–µ—Ç—Å—è –≤ Interact
                    Layer::Interact
                }
            }
            Layer::Insights => {
                if adjusted_confidence > 0.8 {
                    Layer::Assets
                } else {
                    Layer::Insights
                }
            }
            Layer::Assets => Layer::Assets, // –£–∂–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
        }
    }

    async fn filter_candidates(&self, candidates: Vec<Record>) -> Result<Vec<Record>> {
        let total_candidates = candidates.len();
        info!(
            "üî¨ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ business rules",
            total_candidates
        );

        let mut filtered = Vec::new();
        let mut processed = 0;

        for record in candidates {
            processed += 1;

            if self.can_promote(&record).await {
                filtered.push(record);
            }

            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if processed % 100 == 0 {
                debug!("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {}/{} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", processed, total_candidates);
            }
        }

        info!(
            "‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {}/{} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
            filtered.len(),
            total_candidates
        );
        Ok(filtered)
    }

    fn validate_promotion(&self, decision: &PromotionDecision) -> bool {
        debug!(
            "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è promotion decision –¥–ª—è –∑–∞–ø–∏—Å–∏ {}",
            decision.record_id
        );

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ target layer –ª–æ–≥–∏—á–µ–Ω
        if !self.is_valid_layer_transition(decision.current_layer, decision.target_layer) {
            warn!(
                "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥ {:?} ‚Üí {:?}",
                decision.current_layer, decision.target_layer
            );
            return false;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º confidence score
        if decision.confidence < self.get_min_confidence_for_layer(decision.current_layer) {
            warn!(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π confidence: {} < {}",
                decision.confidence,
                self.get_min_confidence_for_layer(decision.current_layer)
            );
            return false;
        }

        // 3. Strict validation –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.config.strict_validation {
            if !self.strict_validation_checks(decision) {
                warn!("‚ùå Strict validation failed");
                return false;
            }
        }

        debug!("‚úÖ Promotion decision –≤–∞–ª–∏–¥–Ω–∞");
        true
    }
}

impl ConfigurableRulesEngine {
    pub fn new(config: RulesConfig) -> Self {
        info!("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConfigurableRulesEngine");
        info!("  - Strict validation: {}", config.strict_validation);
        info!(
            "  - Max system load: {:.1}%",
            config.max_system_load_for_promotion * 100.0
        );
        info!(
            "  - Min repromotion interval: {}h",
            config.min_repromotion_interval_hours
        );

        let mut layer_strategies = HashMap::new();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ layer
        layer_strategies.insert(
            Layer::Interact,
            LayerStrategy {
                min_access_count: 2,
                min_confidence_score: 0.6,
                max_age_hours: Some(168), // 1 –Ω–µ–¥–µ–ª—è
                priority: 1,
                special_conditions: vec![
                    SpecialCondition::MinTextLength(10),
                    SpecialCondition::TimeOfDayRestriction {
                        start_hour: 6,
                        end_hour: 22,
                    },
                ],
            },
        );

        layer_strategies.insert(
            Layer::Insights,
            LayerStrategy {
                min_access_count: 5,
                min_confidence_score: 0.75,
                max_age_hours: Some(720), // 1 –º–µ—Å—è—Ü
                priority: 2,
                special_conditions: vec![
                    SpecialCondition::MinTextLength(20),
                    SpecialCondition::MinSemanticImportance(0.7),
                ],
            },
        );

        layer_strategies.insert(
            Layer::Assets,
            LayerStrategy {
                min_access_count: 10,
                min_confidence_score: 0.9,
                max_age_hours: None, // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                priority: 3,
                special_conditions: vec![
                    SpecialCondition::MinTextLength(50),
                    SpecialCondition::MinSemanticImportance(0.8),
                ],
            },
        );

        let business_rules = vec![
            BusinessRule::MaxPromotionsPerHour(100),
            BusinessRule::LayerBalance {
                min_interact_ratio: 0.6,
                max_assets_ratio: 0.1,
            },
            BusinessRule::NoDuplicateContent,
            BusinessRule::UserAccessPatterns,
        ];

        Self {
            config,
            layer_strategies,
            business_rules,
            promotion_history: PromotionHistory::default(),
        }
    }

    pub fn with_custom_strategies(mut self, strategies: HashMap<Layer, LayerStrategy>) -> Self {
        self.layer_strategies = strategies;
        self
    }

    pub fn add_business_rule(&mut self, rule: BusinessRule) {
        self.business_rules.push(rule);
        info!("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ business rule");
    }

    fn check_basic_requirements(&self, record: &Record) -> bool {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º layer
        let age_in_layer = Utc::now().signed_duration_since(record.ts);
        if age_in_layer.num_hours() < self.config.min_layer_residence_time_hours as i64 {
            debug!(
                "–ó–∞–ø–∏—Å—å {} —Å–ª–∏—à–∫–æ–º –Ω–æ–≤–∞—è –≤ layer: {}h < {}h",
                record.id,
                age_in_layer.num_hours(),
                self.config.min_layer_residence_time_hours
            );
            return false;
        }

        true
    }

    fn check_layer_strategy(&self, record: &Record) -> bool {
        let strategy = match self.layer_strategies.get(&record.layer) {
            Some(s) => s,
            None => {
                warn!("–ù–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è layer {:?}", record.layer);
                return false;
            }
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ access_count
        if record.access_count < strategy.min_access_count {
            debug!(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ accesses: {} < {}",
                record.access_count, strategy.min_access_count
            );
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        if let Some(max_age) = strategy.max_age_hours {
            let age = Utc::now().signed_duration_since(record.ts);
            if age.num_hours() > max_age as i64 {
                debug!("–ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è: {}h > {}h", age.num_hours(), max_age);
                return false;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        self.check_special_conditions(record, &strategy.special_conditions)
    }

    fn check_special_conditions(&self, record: &Record, conditions: &[SpecialCondition]) -> bool {
        for condition in conditions {
            match condition {
                SpecialCondition::MinTextLength(min_len) => {
                    if record.text.len() < *min_len {
                        debug!(
                            "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {} < {}",
                            record.text.len(),
                            min_len
                        );
                        return false;
                    }
                }
                SpecialCondition::RequiredKeywords(keywords) => {
                    let text_lower = record.text.to_lowercase();
                    let has_keyword = keywords
                        .iter()
                        .any(|kw| text_lower.contains(&kw.to_lowercase()));
                    if !has_keyword {
                        debug!("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ keywords");
                        return false;
                    }
                }
                SpecialCondition::BlacklistKeywords(keywords) => {
                    let text_lower = record.text.to_lowercase();
                    let has_blacklisted = keywords
                        .iter()
                        .any(|kw| text_lower.contains(&kw.to_lowercase()));
                    if has_blacklisted {
                        debug!("–°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ keywords");
                        return false;
                    }
                }
                SpecialCondition::MinSemanticImportance(min_importance) => {
                    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏
                    let semantic_score = self.calculate_semantic_importance(&record.text);
                    if semantic_score < *min_importance {
                        debug!(
                            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å: {} < {}",
                            semantic_score, min_importance
                        );
                        return false;
                    }
                }
                SpecialCondition::TimeOfDayRestriction {
                    start_hour,
                    end_hour,
                } => {
                    let current_hour = Utc::now().time().hour() as u8;
                    if current_hour < *start_hour || current_hour > *end_hour {
                        debug!(
                            "–í–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {}h –Ω–µ –≤ [{}h, {}h]",
                            current_hour, start_hour, end_hour
                        );
                        return false;
                    }
                }
            }
        }
        true
    }

    fn check_promotion_history(&self, record: &Record) -> bool {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É re-promotion
        if let Some(timestamps) = self.promotion_history.recent_promotions.get(&record.id) {
            let min_interval = Duration::hours(self.config.min_repromotion_interval_hours as i64);
            let now = Utc::now();

            if let Some(&last_promotion) = timestamps.last() {
                if now - last_promotion < min_interval {
                    debug!("–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è re-promotion –∑–∞–ø–∏—Å–∏ {}", record.id);
                    return false;
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        if let Some(&daily_count) = self.promotion_history.daily_counts.get(&record.id) {
            if daily_count >= self.config.max_promotions_per_record_per_day {
                debug!("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç promotion –¥–ª—è –∑–∞–ø–∏—Å–∏ {}", record.id);
                return false;
            }
        }

        true
    }

    async fn check_business_rules(&self, record: &Record) -> bool {
        for rule in &self.business_rules {
            let rule_passed = match rule {
                BusinessRule::MaxPromotionsPerHour(_max_per_hour) => {
                    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting
                    true
                }
                BusinessRule::LayerBalance {
                    min_interact_ratio: _,
                    max_assets_ratio: _,
                } => {
                    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É layers
                    true
                }
                BusinessRule::NoDuplicateContent => {
                    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    !self.is_duplicate_content(&record.text)
                }
                BusinessRule::UserAccessPatterns => {
                    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                    true
                }
            };

            if !rule_passed {
                return false;
            }
        }

        true
    }

    async fn check_system_conditions(&self) -> bool {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        let current_system_load = self.get_current_system_load().await;

        if current_system_load > self.config.max_system_load_for_promotion {
            debug!(
                "–°–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞: {:.2} > {:.2}",
                current_system_load, self.config.max_system_load_for_promotion
            );
            return false;
        }

        true
    }

    fn adjust_confidence_for_time_window(&self, confidence: f32) -> f32 {
        let current_hour = Utc::now().time().hour() as u8;
        let time_config = &self.config.time_windows;

        if current_hour >= time_config.aggressive_start_hour
            && current_hour <= time_config.aggressive_end_hour
        {
            // Aggressive period - –ø–æ–Ω–∏–∂–∞–µ–º threshold
            confidence * time_config.aggressive_threshold_multiplier
        } else {
            // Conservative period - –ø–æ–≤—ã—à–∞–µ–º threshold
            confidence * time_config.conservative_threshold_multiplier
        }
    }

    fn is_valid_layer_transition(&self, from: Layer, to: Layer) -> bool {
        match (from, to) {
            (Layer::Interact, Layer::Insights) => true,
            (Layer::Interact, Layer::Assets) => true, // Skip level promotion allowed
            (Layer::Insights, Layer::Assets) => true,
            (layer, target) if layer == target => true, // Stay in same layer
            _ => false,                                 // Backwards promotion not allowed
        }
    }

    fn get_min_confidence_for_layer(&self, layer: Layer) -> f32 {
        self.layer_strategies
            .get(&layer)
            .map(|s| s.min_confidence_score)
            .unwrap_or(0.5)
    }

    fn strict_validation_checks(&self, _decision: &PromotionDecision) -> bool {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–≥–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        true
    }

    fn calculate_semantic_importance(&self, text: &str) -> f32 {
        // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã ML –∞–Ω–∞–ª–∏–∑
        let word_count = text.split_whitespace().count();
        (word_count as f32 / 100.0).min(1.0)
    }

    fn is_duplicate_content(&self, _text: &str) -> bool {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        false
    }

    async fn get_current_system_load(&self) -> f32 {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        0.3 // 30% load
    }

    /// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é promotion –≤ –∏—Å—Ç–æ—Ä–∏—é
    pub fn record_promotion(&mut self, record_id: uuid::Uuid) {
        let now = Utc::now();

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self.promotion_history.cleanup_old_entries();

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é promotion
        self.promotion_history
            .recent_promotions
            .entry(record_id)
            .or_insert_with(Vec::new)
            .push(now);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫
        *self
            .promotion_history
            .daily_counts
            .entry(record_id)
            .or_insert(0) += 1;

        debug!("üìù –ó–∞–ø–∏—Å–∞–Ω–∞ promotion –¥–ª—è {}", record_id);
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É promotion rules
    pub fn get_rules_statistics(&self) -> RulesStatistics {
        RulesStatistics {
            total_records_in_history: self.promotion_history.recent_promotions.len(),
            business_rules_count: self.business_rules.len(),
            layer_strategies_count: self.layer_strategies.len(),
            last_cleanup: self.promotion_history.last_cleanup,
        }
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã rules engine
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RulesStatistics {
    pub total_records_in_history: usize,
    pub business_rules_count: usize,
    pub layer_strategies_count: usize,
    pub last_cleanup: DateTime<Utc>,
}

#[cfg(test)]
mod tests {
    use super::*;
    use uuid::Uuid;

    fn create_test_record(layer: Layer, access_count: u32, text: &str) -> Record {
        Record {
            id: Uuid::new_v4(),
            text: text.to_string(),
            embedding: vec![0.1; 384],
            ts: Utc::now() - Duration::hours(2), // 2 hours old
            layer,
            access_count,
            score: 0.0,
            kind: "test".to_string(),
            tags: vec!["test".to_string()],
            project: "test_project".to_string(),
            session: "test_session".to_string(),
            last_access: Utc::now(),
        }
    }

    #[tokio::test]
    async fn test_basic_promotion_rules() {
        let config = RulesConfig::development();
        let rules_engine = ConfigurableRulesEngine::new(config);

        let record = create_test_record(
            Layer::Interact,
            5,
            "This is a test record with sufficient text",
        );

        let can_promote = rules_engine.can_promote(&record).await;
        assert!(can_promote);
    }

    #[tokio::test]
    async fn test_insufficient_access_count() {
        let config = RulesConfig::default();
        let rules_engine = ConfigurableRulesEngine::new(config);

        let record = create_test_record(Layer::Interact, 1, "Short text"); // Insufficient access count

        let can_promote = rules_engine.can_promote(&record).await;
        assert!(!can_promote);
    }

    #[test]
    fn test_target_layer_determination() {
        let config = RulesConfig::default();
        let rules_engine = ConfigurableRulesEngine::new(config);

        let record = create_test_record(Layer::Interact, 5, "Test record");

        let target_high_confidence = rules_engine.determine_target_layer(&record, 0.95);
        assert_eq!(target_high_confidence, Layer::Assets);

        let target_medium_confidence = rules_engine.determine_target_layer(&record, 0.75);
        assert_eq!(target_medium_confidence, Layer::Insights);
    }

    #[tokio::test]
    async fn test_filter_candidates() {
        let config = RulesConfig::development();
        let rules_engine = ConfigurableRulesEngine::new(config);

        let candidates = vec![
            create_test_record(Layer::Interact, 5, "Good record with enough text"),
            create_test_record(Layer::Interact, 1, "Bad"), // Too few accesses
            create_test_record(
                Layer::Interact,
                3,
                "Another good record with sufficient content",
            ),
        ];

        let filtered = rules_engine.filter_candidates(candidates).await.unwrap();
        assert_eq!(filtered.len(), 2); // Should filter out the record with too few accesses
    }
}
