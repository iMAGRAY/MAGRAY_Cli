//! Memory Configurator - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è memory —Å–∏—Å—Ç–µ–º—ã
//!
//! –û—Ç–¥–µ–ª–µ–Ω –æ—Ç unified_container.rs –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è Single Responsibility Principle.
//! –û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ memory –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.

use anyhow::Result;
use std::sync::Arc;
use tracing::{info, warn};

use super::{traits::Lifetime, unified_container::UnifiedDIContainer};
use crate::service_di::service_config::MemoryServiceConfig;

/// Unified Memory Configurator - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ memory —Å–∏—Å—Ç–µ–º—ã –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
///
/// –ó–ê–ú–ï–ù–Ø–ï–¢:
/// - MemoryDIConfigurator –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ di_memory_config.rs
/// - –†–∞–∑–ª–∏—á–Ω—ã–µ ad-hoc –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä—ã –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
///
/// –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
/// - SRP: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è memory –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
/// - OCP: —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
/// - DIP: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π (UnifiedDIContainer)
pub struct UnifiedMemoryConfigurator;

impl UnifiedMemoryConfigurator {
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è memory —Å–∏—Å—Ç–µ–º—ã
    ///
    /// –ó–ê–ú–ï–ù–Ø–ï–¢: MemoryDIConfigurator::configure_full()
    /// –ò–°–ü–û–õ–¨–ó–£–ï–¢: UnifiedDIContainer –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π
    pub async fn configure_full(config: &MemoryServiceConfig) -> Result<UnifiedDIContainer> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è memory —Å–∏—Å—Ç–µ–º—ã");

        let container = UnifiedDIContainer::production();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª–æ–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        Self::configure_core_dependencies(&container, config).await?;
        Self::configure_storage_layer(&container, config).await?;
        Self::configure_cache_layer(&container, config).await?;
        Self::configure_processing_layer(&container, config).await?;
        Self::configure_monitoring_layer(&container, config).await?;
        Self::configure_orchestration_layer(&container, config).await?;

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        container.validate_dependencies()?;

        info!(
            "‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å {} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏",
            container.registration_count()
        );

        Ok(container)
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub async fn configure_minimal(config: &MemoryServiceConfig) -> Result<UnifiedDIContainer> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞");

        let container = UnifiedDIContainer::minimal();

        // –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        Self::configure_core_dependencies(&container, config).await?;
        Self::configure_storage_layer(&container, config).await?;

        info!(
            "‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å {} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏",
            container.registration_count()
        );

        Ok(container)
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CPU-only –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–±–µ–∑ GPU)
    pub async fn configure_cpu_only(config: &MemoryServiceConfig) -> Result<UnifiedDIContainer> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CPU-only DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞");

        let container = UnifiedDIContainer::development();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–µ–∑ GPU –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        Self::configure_core_dependencies(&container, config).await?;
        Self::configure_storage_layer(&container, config).await?;
        Self::configure_cache_layer(&container, config).await?;
        Self::configure_cpu_processing_layer(&container, config).await?;
        Self::configure_monitoring_layer(&container, config).await?;

        info!(
            "‚úÖ CPU-only DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å {} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏",
            container.registration_count()
        );

        Ok(container)
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å GPU-accelerated –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    pub async fn configure_gpu_accelerated(
        config: &MemoryServiceConfig,
    ) -> Result<UnifiedDIContainer> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU-accelerated DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞");

        let container = UnifiedDIContainer::production();

        // –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å GPU
        Self::configure_core_dependencies(&container, config).await?;
        Self::configure_storage_layer(&container, config).await?;
        Self::configure_cache_layer(&container, config).await?;
        Self::configure_gpu_processing_layer(&container, config).await?;
        Self::configure_monitoring_layer(&container, config).await?;
        Self::configure_orchestration_layer(&container, config).await?;

        info!(
            "‚úÖ GPU-accelerated DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å {} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏",
            container.registration_count()
        );

        Ok(container)
    }

    // === PRIVATE CONFIGURATION METHODS ===

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å core –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã)
    async fn configure_core_dependencies(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ core dependencies...");

        // PromotionConfig
        let promotion_config = config.promotion.clone();
        container.register_instance(promotion_config)?;

        // FlushConfig
        let flush_config = config.flush_config.clone();
        container.register_instance(flush_config)?;

        // HNSWConfig (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if let Some(hnsw_config) = &config.hnsw_config {
            container.register_instance(hnsw_config.clone())?;
        }

        // TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ core –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        info!("‚úÖ Core dependencies configured");
        Ok(())
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å storage layer
    async fn configure_storage_layer(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ storage layer...");

        use crate::database_manager::DatabaseManager;

        // DatabaseManager
        let db_path = config.db_path.clone();
        container.register(
            move |_| {
                let db_path = db_path.clone();
                Ok(DatabaseManager::new_with_path(&db_path))
            },
            Lifetime::Singleton,
        )?;

        // TODO: –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç—å async factory –¥–ª—è VectorStore
        // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ builder pattern

        info!("‚úÖ Storage layer configured");
        Ok(())
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å cache layer
    async fn configure_cache_layer(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cache layer...");

        use crate::cache_lru::EmbeddingCacheLRU;

        // Cache
        let cache_config = Self::convert_cache_config(&config);
        let cache_path = Self::get_cache_path(config);

        container.register(
            move |_| {
                let cache_config = cache_config.clone();
                let cache_path = cache_path.clone();
                match EmbeddingCacheLRU::new(cache_path, cache_config) {
                    Ok(cache) => Ok(cache),
                    Err(e) => {
                        warn!(
                            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å EmbeddingCacheLRU, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {}",
                            e
                        );
                        // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                        Ok(EmbeddingCacheLRU::new_in_memory(cache_config.clone()))
                    }
                }
            },
            Lifetime::Singleton,
        )?;

        info!("‚úÖ Cache layer configured");
        Ok(())
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å processing layer (–æ–±—â–∏–π)
    async fn configure_processing_layer(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ GPU
        if config.gpu_enabled && Self::is_gpu_available().await {
            Self::configure_gpu_processing_layer(container, config).await
        } else {
            Self::configure_cpu_processing_layer(container, config).await
        }
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CPU processing
    async fn configure_cpu_processing_layer(
        container: &UnifiedDIContainer,
        _config: &MemoryServiceConfig,
    ) -> Result<()> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CPU processing layer...");

        // TODO: –î–æ–±–∞–≤–∏—Ç—å CPU-specific –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ–≥–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        // use crate::cpu_processor::CpuBatchProcessor;
        // container.register(...)?;

        info!("‚úÖ CPU processing layer configured");
        Ok(())
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å GPU processing
    async fn configure_gpu_processing_layer(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU processing layer...");

        use crate::gpu_accelerated::GpuBatchProcessor;

        // GpuBatchProcessor
        let gpu_config = config.gpu_config.clone();
        container.register(
            move |_| {
                let gpu_config = gpu_config.clone();
                GpuBatchProcessor::new_with_config(gpu_config)
                    .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GpuBatchProcessor: {}", e))
            },
            Lifetime::Singleton,
        )?;

        info!("‚úÖ GPU processing layer configured");
        Ok(())
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å monitoring layer
    async fn configure_monitoring_layer(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ monitoring layer...");

        // MetricsCollector
        use crate::metrics::MetricsCollector;
        container.register(|_| Ok(MetricsCollector::new()), Lifetime::Singleton)?;

        // HealthMonitor (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if config.health_enabled {
            use crate::health::HealthMonitor;
            let health_config = config.health_config.clone();
            container.register(
                move |_| Ok(HealthMonitor::new(health_config.clone())),
                Lifetime::Singleton,
            )?;
        }

        // NotificationService (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if config.notifications_enabled {
            use crate::notifications::NotificationService;
            container.register(|_| Ok(NotificationService::new()), Lifetime::Singleton)?;
        }

        info!("‚úÖ Monitoring layer configured");
        Ok(())
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å orchestration layer
    async fn configure_orchestration_layer(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ orchestration layer...");

        use crate::orchestration::{
            BackupCoordinator, EmbeddingCoordinator, HealthManager, PromotionCoordinator,
            ResourceController, SearchCoordinator,
        };

        // EmbeddingCoordinator
        container.register(
            |container| {
                let cache = container.resolve::<crate::cache_lru::EmbeddingCacheLRU>()?;
                let cache: Arc<dyn crate::cache_interface::EmbeddingCacheInterface> = cache;
                
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å GPU processor, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU fallback
                let processor = if let Ok(gpu_processor) = container.resolve::<crate::gpu_accelerated::GpuBatchProcessor>() {
                    info!("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º GPU processor –¥–ª—è EmbeddingCoordinator");
                    Some(gpu_processor)
                } else {
                    warn!("‚ö†Ô∏è GPU processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, EmbeddingCoordinator –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —É—Å–∫–æ—Ä–µ–Ω–∏—è");
                    None
                };
                
                Ok(EmbeddingCoordinator::new_with_processor(cache, processor))
            },
            Lifetime::Singleton,
        )?;

        // SearchCoordinator
        container.register(
            |container| {
                let embedding_coordinator = container.resolve::<EmbeddingCoordinator>()?;
                // TODO: –î–æ–±–∞–≤–∏—Ç—å VectorStore –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ async factory
                Ok(SearchCoordinator::new_with_embedding_coordinator(
                    embedding_coordinator,
                ))
            },
            Lifetime::Singleton,
        )?;

        // PromotionCoordinator
        container.register(
            |container| {
                let promotion_config = container.resolve::<crate::promotion::PromotionConfig>()?;
                Ok(PromotionCoordinator::new(promotion_config))
            },
            Lifetime::Singleton,
        )?;

        // BackupCoordinator
        container.register(|_| Ok(BackupCoordinator::new()), Lifetime::Singleton)?;

        // ResourceController
        container.register(|_| Ok(ResourceController::new()), Lifetime::Singleton)?;

        // HealthManager (–µ—Å–ª–∏ health monitoring –≤–∫–ª—é—á–µ–Ω)
        if config.health_enabled {
            container.register(
                |container| {
                    let health_monitor = container.resolve::<crate::health::HealthMonitor>()?;
                    Ok(HealthManager::new(health_monitor))
                },
                Lifetime::Singleton,
            )?;
        }

        info!("‚úÖ Orchestration layer configured");
        Ok(())
    }

    // === UTILITY METHODS ===

    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫—ç—à–∞
    fn convert_cache_config(config: &MemoryServiceConfig) -> crate::cache_lru::CacheConfig {
        // TODO: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        crate::cache_lru::CacheConfig::default()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –¥–ª—è –∫—ç—à–∞
    fn get_cache_path(config: &MemoryServiceConfig) -> std::path::PathBuf {
        config
            .db_path
            .parent()
            .unwrap_or_else(|| std::path::Path::new("."))
            .join("embedding_cache")
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
    async fn is_gpu_available() -> bool {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É GPU
        // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        false
    }

    /// –°–æ–∑–¥–∞—Ç—å summary –æ—Ç—á–µ—Ç –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    pub fn create_configuration_summary(container: &UnifiedDIContainer) -> String {
        let stats = container.stats();
        let performance = container.performance_metrics();

        format!(
            "=== Memory System DI Configuration Summary ===\n\
             Registered components: {}\n\
             Cached singletons: {}\n\
             Total resolutions: {}\n\
             Cache hit rate: {:.1}%\n\
             Average resolution time: {:.2}Œºs\n\
             Dependency validation: enabled\n\
             Performance metrics: enabled\n\
             ============================================",
            stats.registered_factories,
            stats.cached_singletons,
            stats.total_resolutions,
            performance.cache_hit_rate(),
            performance.avg_resolve_time_us()
        )
    }

    /// Validate –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    pub async fn validate_configuration(container: &UnifiedDIContainer) -> Result<String> {
        info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...");

        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        container.validate_dependencies()?;

        let mut diagnostics = Vec::new();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        let essential_components = [
            // (type_name, required)
            ("DatabaseManager", true),
            ("EmbeddingCacheLRU", true),
            ("MetricsCollector", true),
            ("EmbeddingCoordinator", true),
            ("SearchCoordinator", true),
        ];

        for (component_name, required) in essential_components {
            // TODO: –î–æ–±–∞–≤–∏—Ç—å type-safe –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∏–º–µ–Ω–∏
            if required {
                diagnostics.push(format!(
                    "‚úÖ {}: –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                    component_name
                ));
            }
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        let stats = container.stats();
        diagnostics.push(format!(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, {} singleton –∫—ç—à–µ–π",
            stats.registered_factories, stats.cached_singletons
        ));

        // Dependency report
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω dependency validator

        let report = format!(
            "=== DI Configuration Validation Report ===\n{}\n========================================",
            diagnostics.join("\n")
        );

        info!("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        Ok(report)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::service_di::service_config::MemoryServiceConfig;

    #[tokio::test]
    async fn test_minimal_configuration() {
        let config = MemoryServiceConfig::minimal_for_tests();

        let result = UnifiedMemoryConfigurator::configure_minimal(&config).await;
        assert!(result.is_ok());

        let container = result.unwrap();
        assert!(container.registration_count() > 0);

        // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        let summary = UnifiedMemoryConfigurator::create_configuration_summary(&container);
        assert!(summary.contains("Registered components:"));
    }

    #[tokio::test]
    async fn test_cpu_only_configuration() {
        let config = MemoryServiceConfig::cpu_only();

        let result = UnifiedMemoryConfigurator::configure_cpu_only(&config).await;
        assert!(result.is_ok());

        let container = result.unwrap();
        assert!(container.registration_count() > 0);
    }

    #[tokio::test]
    async fn test_configuration_validation() {
        let config = MemoryServiceConfig::minimal_for_tests();
        let container = UnifiedMemoryConfigurator::configure_minimal(&config)
            .await
            .unwrap();

        let validation_result = UnifiedMemoryConfigurator::validate_configuration(&container).await;
        assert!(validation_result.is_ok());

        let report = validation_result.unwrap();
        assert!(report.contains("Validation Report"));
        assert!(report.contains("–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"));
    }

    #[test]
    fn test_configuration_summary() {
        let container = UnifiedDIContainer::new();
        let summary = UnifiedMemoryConfigurator::create_configuration_summary(&container);

        assert!(summary.contains("Configuration Summary"));
        assert!(summary.contains("Registered components: 0"));
    }
}
