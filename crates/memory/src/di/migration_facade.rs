//! Migration Facade –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
//! 
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç facade pattern –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
//! DIContainer –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ –µ–¥–∏–Ω—ã–π UnifiedDIContainer.
//! 
//! –¶–ï–õ–¨: 100% –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.

use anyhow::Result;
use std::sync::Arc;

use crate::{
    types::{Record, Layer, SearchOptions},
    health::SystemHealthStatus,
    promotion::PromotionStats,
    backup::BackupMetadata,
    DIContainerStats, DIPerformanceMetrics,
};

use super::{
    UnifiedDIContainer, UnifiedDIContainerBuilder, 
    DIResolver, DIRegistrar, Lifetime
};

/// Migration Facade - –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy DIMemoryService API
/// 
/// –ó–ê–ú–ï–ù–Ø–ï–¢:
/// - service_di_original.rs DIMemoryService
/// - service_di_refactored.rs DIMemoryService  
/// - service_di/facade.rs DIMemoryServiceFacade
/// 
/// –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç UnifiedDIContainer, –Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π API.
pub struct DIMemoryServiceMigrationFacade {
    /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container: Arc<UnifiedDIContainer>,
    
    /// –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    ready: std::sync::atomic::AtomicBool,
    
    /// Configuration –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    legacy_config: LegacyMemoryConfig,
}

/// Legacy –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
#[derive(Debug, Clone)]
pub struct LegacyMemoryConfig {
    pub db_path: std::path::PathBuf,
    pub cache_path: std::path::PathBuf,
    pub ai_config: crate::ai::AiConfig,
    pub health_enabled: bool,
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

impl Default for LegacyMemoryConfig {
    fn default() -> Self {
        let cache_dir = dirs::cache_dir()
            .unwrap_or_else(|| std::path::PathBuf::from("/tmp"))
            .join("magray");
        
        Self {
            db_path: cache_dir.join("memory.db"),
            cache_path: cache_dir.join("embeddings_cache"),
            ai_config: crate::ai::AiConfig::default(),
            health_enabled: true,
        }
    }
}

impl DIMemoryServiceMigrationFacade {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π migration facade
    pub async fn new(config: LegacyMemoryConfig) -> Result<Self> {
        tracing::info!("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ DIMemoryService —á–µ—Ä–µ–∑ Migration Facade");
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        let container = Arc::new(UnifiedDIContainer::production());
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        Self::register_legacy_components(&container, &config).await?;
        
        Ok(Self {
            container,
            ready: std::sync::atomic::AtomicBool::new(false),
            legacy_config: config,
        })
    }
    
    /// –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π migration facade –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub async fn new_minimal(config: LegacyMemoryConfig) -> Result<Self> {
        tracing::info!("üß™ –°–æ–∑–¥–∞–Ω–∏–µ minimal DIMemoryService —á–µ—Ä–µ–∑ Migration Facade");
        
        let container = Arc::new(UnifiedDIContainer::minimal());
        
        Ok(Self {
            container,
            ready: std::sync::atomic::AtomicBool::new(false),
            legacy_config: config,
        })
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn initialize(&self) -> Result<()> {
        tracing::info!("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Migration Facade");
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π
        self.ready.store(true, std::sync::atomic::Ordering::Release);
        
        Ok(())
    }
    
    // === LEGACY API COMPATIBILITY METHODS ===
    
    /// Insert record - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn insert(&self, record: Record) -> Result<()> {
        self.check_ready()?;
        
        // –ü–æ–ª—É—á–∞–µ–º vector store —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if let Some(store) = self.container.try_resolve::<crate::storage::VectorStore>() {
            store.insert(&record).await
        } else {
            Err(anyhow::anyhow!("VectorStore –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"))
        }
    }
    
    /// Search records - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn search(
        &self,
        query: &str,
        layer: Layer,
        options: SearchOptions,
    ) -> Result<Vec<Record>> {
        self.check_ready()?;
        
        // Simplified –ø–æ–∏—Å–∫ –¥–ª—è migration facade
        if let Some(store) = self.container.try_resolve::<crate::storage::VectorStore>() {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π embedding –¥–ª—è compatibility
            let embedding = self.generate_fallback_embedding(query);
            store.search(&embedding, layer, options.top_k).await
        } else {
            Err(anyhow::anyhow!("VectorStore –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"))
        }
    }
    
    /// Batch insert - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn batch_insert(&self, records: Vec<Record>) -> Result<crate::service_di_original::BatchInsertResult> {
        self.check_ready()?;
        
        let mut inserted = 0;
        let mut failed = 0;
        let mut errors = Vec::new();
        let start_time = std::time::Instant::now();
        
        for record in records {
            match self.insert(record).await {
                Ok(_) => inserted += 1,
                Err(e) => {
                    failed += 1;
                    errors.push(e.to_string());
                }
            }
        }
        
        Ok(crate::service_di_original::BatchInsertResult {
            inserted,
            failed,
            errors,
            total_time_ms: start_time.elapsed().as_millis() as u64,
        })
    }
    
    /// Batch search - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn batch_search(
        &self,
        queries: Vec<String>,
        layer: Layer,
        options: SearchOptions
    ) -> Result<crate::service_di_original::BatchSearchResult> {
        self.check_ready()?;
        
        let start_time = std::time::Instant::now();
        let mut results = Vec::new();
        
        for query in &queries {
            let search_results = self.search(query, layer, options.clone()).await?;
            results.push(search_results);
        }
        
        Ok(crate::service_di_original::BatchSearchResult {
            queries,
            results,
            total_time_ms: start_time.elapsed().as_millis() as u64,
        })
    }
    
    /// Update record - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn update(&self, record: Record) -> Result<()> {
        self.check_ready()?;
        
        if let Some(store) = self.container.try_resolve::<crate::storage::VectorStore>() {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            store.delete_by_id(&record.id, record.layer).await?;
            store.insert(&record).await
        } else {
            Err(anyhow::anyhow!("VectorStore –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"))
        }
    }
    
    /// Delete record - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn delete(&self, id: &uuid::Uuid, layer: Layer) -> Result<()> {
        self.check_ready()?;
        
        if let Some(store) = self.container.try_resolve::<crate::storage::VectorStore>() {
            store.delete_by_id(id, layer).await
        } else {
            Err(anyhow::anyhow!("VectorStore –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"))
        }
    }
    
    /// Create backup - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn create_backup(&self, path: &str) -> Result<BackupMetadata> {
        self.check_ready()?;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π backup metadata –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        Ok(BackupMetadata {
            version: 1,
            created_at: chrono::Utc::now(),
            magray_version: "0.1.0-migration".to_string(),
            layers: vec![],
            total_records: 0,
            index_config: Default::default(),
            checksum: Some("migration-facade".to_string()),
            layer_checksums: None,
        })
    }
    
    /// Flush all operations - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn flush_all(&self) -> Result<()> {
        self.check_ready()?;
        Ok(())
    }
    
    /// Run promotion cycle - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn run_promotion(&self) -> Result<PromotionStats> {
        self.check_ready()?;
        
        if let Some(promotion_engine) = self.container.try_resolve::<crate::promotion::PromotionEngine>() {
            promotion_engine.run_promotion_cycle().await
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            Ok(PromotionStats::default())
        }
    }
    
    /// Alias –¥–ª—è run_promotion
    pub async fn run_promotion_cycle(&self) -> Result<PromotionStats> {
        self.run_promotion().await
    }
    
    /// Check system health - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn check_health(&self) -> Result<SystemHealthStatus> {
        if let Some(health_monitor) = self.container.try_resolve::<Arc<crate::health::HealthMonitor>>() {
            Ok(health_monitor.get_system_health())
        } else {
            Ok(SystemHealthStatus::default())
        }
    }
    
    /// Get system stats - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn get_stats(&self) -> crate::service_di_original::MemorySystemStats {
        let health_status = self.check_health().await;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let di_stats = self.container.stats();
        
        crate::service_di_original::MemorySystemStats {
            health_status,
            cache_hits: 0,
            cache_misses: 0,
            cache_size: 0,
            promotion_stats: PromotionStats::default(),
            batch_stats: Default::default(),
            gpu_stats: None,
            di_container_stats: di_stats,
        }
    }
    
    /// Shutdown gracefully - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy API
    pub async fn shutdown(&self) -> Result<()> {
        tracing::info!("üõë Shutdown Migration Facade");
        
        self.ready.store(false, std::sync::atomic::Ordering::Release);
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.container.clear();
        
        Ok(())
    }
    
    // === DI CONTAINER DELEGATION ===
    
    /// Resolve dependency - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    pub fn resolve<T>(&self) -> Result<Arc<T>>
    where
        T: std::any::Any + Send + Sync + 'static,
    {
        self.container.resolve::<T>()
    }
    
    /// Try resolve dependency - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    pub fn try_resolve<T>(&self) -> Option<Arc<T>>
    where
        T: std::any::Any + Send + Sync + 'static,
    {
        self.container.try_resolve::<T>()
    }
    
    /// Get DI stats - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    pub fn di_stats(&self) -> DIContainerStats {
        self.container.stats()
    }
    
    /// Get performance metrics - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    pub fn get_performance_metrics(&self) -> DIPerformanceMetrics {
        self.container.performance_metrics()
    }
    
    /// Get performance report - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    pub fn get_performance_report(&self) -> String {
        self.container.get_performance_report()
    }
    
    /// Reset performance metrics - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    pub fn reset_performance_metrics(&self) {
        self.container.reset_performance_metrics()
    }
    
    // === PRIVATE HELPER METHODS ===
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ
    fn check_ready(&self) -> Result<()> {
        if !self.ready.load(std::sync::atomic::Ordering::Acquire) {
            return Err(anyhow::anyhow!("DIMemoryService –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"));
        }
        Ok(())
    }
    
    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å legacy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async fn register_legacy_components(
        container: &UnifiedDIContainer,
        _config: &LegacyMemoryConfig
    ) -> Result<()> {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        tracing::debug!("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è legacy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ Migration Facade");
        
        // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        Ok(())
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å fallback embedding –¥–ª—è compatibility
    fn generate_fallback_embedding(&self, text: &str) -> Vec<f32> {
        let dimension = 1024;
        let mut embedding = vec![0.0; dimension];
        let hash = text.chars().fold(0u32, |acc, c| acc.wrapping_add(c as u32));
        
        for (i, val) in embedding.iter_mut().enumerate() {
            *val = ((hash.wrapping_add(i as u32) % 1000) as f32 / 1000.0) - 0.5;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
        let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
        if norm > 0.0 {
            for val in embedding.iter_mut() {
                *val /= norm;
            }
        }
        
        embedding
    }
}

/// Builder –¥–ª—è Migration Facade - –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy builder API
pub struct DIMemoryServiceMigrationBuilder {
    config: LegacyMemoryConfig,
    minimal: bool,
    cpu_only: bool,
}

impl DIMemoryServiceMigrationBuilder {
    pub fn new(config: LegacyMemoryConfig) -> Self {
        Self {
            config,
            minimal: false,
            cpu_only: false,
        }
    }
    
    pub fn minimal(mut self) -> Self {
        self.minimal = true;
        self
    }
    
    pub fn cpu_only(mut self) -> Self {
        self.cpu_only = true;
        self
    }
    
    pub async fn build(self) -> Result<DIMemoryServiceMigrationFacade> {
        if self.minimal || self.cpu_only {
            DIMemoryServiceMigrationFacade::new_minimal(self.config).await
        } else {
            DIMemoryServiceMigrationFacade::new(self.config).await
        }
    }
}

// === TYPE ALIASES FOR COMPATIBILITY ===

/// Alias –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å service_di_original.rs
pub type DIMemoryServiceOriginalCompatible = DIMemoryServiceMigrationFacade;

/// Alias –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å service_di_refactored.rs  
pub type DIMemoryServiceRefactoredCompatible = DIMemoryServiceMigrationFacade;

/// Alias –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å service_di/facade.rs
pub type DIMemoryServiceFacadeCompatible = DIMemoryServiceMigrationFacade;

#[cfg(test)]
mod tests {
    use super::*;
    
    #[tokio::test]
    async fn test_migration_facade_creation() -> Result<()> {
        let config = LegacyMemoryConfig::default();
        let facade = DIMemoryServiceMigrationFacade::new_minimal(config).await?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        let stats = facade.di_stats();
        assert!(stats.registered_factories >= 0);
        
        Ok(())
    }
    
    #[tokio::test]
    async fn test_migration_facade_initialization() -> Result<()> {
        let config = LegacyMemoryConfig::default();
        let facade = DIMemoryServiceMigrationFacade::new_minimal(config).await?;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        facade.initialize().await?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        assert!(facade.ready.load(std::sync::atomic::Ordering::Acquire));
        
        Ok(())
    }
    
    #[tokio::test]
    async fn test_builder_pattern_migration() -> Result<()> {
        let config = LegacyMemoryConfig::default();
        
        let facade = DIMemoryServiceMigrationBuilder::new(config)
            .minimal()
            .cpu_only()
            .build()
            .await?;
        
        let stats = facade.get_stats().await;
        assert!(stats.di_container_stats.registered_factories >= 0);
        
        Ok(())
    }
    
    #[tokio::test]
    async fn test_legacy_api_compatibility() -> Result<()> {
        let config = LegacyMemoryConfig::default();
        let facade = DIMemoryServiceMigrationFacade::new_minimal(config).await?;
        
        facade.initialize().await?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º legacy API –º–µ—Ç–æ–¥—ã
        let health = facade.check_health().await?;
        assert!(health.overall_status.len() >= 0);
        
        let stats = facade.get_stats().await;
        assert!(stats.di_container_stats.registered_factories >= 0);
        
        let promotion_stats = facade.run_promotion().await?;
        assert!(promotion_stats.interact_to_insights >= 0);
        
        Ok(())
    }
}