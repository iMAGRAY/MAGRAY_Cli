//! Service Registry Implementation - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
//!
//! –û—Ç–¥–µ–ª–µ–Ω –æ—Ç unified_container_impl.rs –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è Single Responsibility Principle.
//! –û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.

use anyhow::Result;
use parking_lot::RwLock;
use std::{
    any::{Any, TypeId},
    collections::HashMap,
    sync::Arc,
};
use tracing::{debug, info, warn};

use super::{
    core_traits::{LifetimeStrategy, ServiceFactory},
    errors::DIError,
};

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–µ
pub struct FactoryInfo {
    /// –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    pub factory: ServiceFactory,
    /// –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
    pub lifetime: LifetimeStrategy,
    /// –ò–º—è —Ç–∏–ø–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    pub type_name: String,
    /// –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    pub registered_at: std::time::Instant,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –∫–æ–≥–¥–∞ —Ç–∏–ø –±—ã–ª —Ä–∞–∑—Ä–µ—à–µ–Ω
    pub resolution_count: std::sync::atomic::AtomicU64,
}

impl FactoryInfo {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–±—Ä–∏–∫–µ
    pub fn new(factory: ServiceFactory, lifetime: LifetimeStrategy, type_name: String) -> Self {
        Self {
            factory,
            lifetime,
            type_name,
            registered_at: std::time::Instant::now(),
            resolution_count: std::sync::atomic::AtomicU64::new(0),
        }
    }

    /// –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    pub fn increment_resolution_count(&self) {
        self.resolution_count
            .fetch_add(1, std::sync::atomic::Ordering::Relaxed);
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    pub fn get_resolution_count(&self) -> u64 {
        self.resolution_count
            .load(std::sync::atomic::Ordering::Relaxed)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    pub fn age(&self) -> std::time::Duration {
        self.registered_at.elapsed()
    }
}

impl std::fmt::Debug for FactoryInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("FactoryInfo")
            .field("lifetime", &self.lifetime)
            .field("type_name", &self.type_name)
            .field("registered_at", &self.registered_at)
            .field("resolution_count", &self.get_resolution_count())
            .finish()
    }
}

/// Service Registry Implementation - –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤
///
/// –ü–†–ò–ù–¶–ò–ü–´:
/// - SRP: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
/// - OCP: —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ lifetime —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
/// - LSP: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É ServiceRegistry
/// - ISP: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
/// - DIP: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π (ServiceFactory, LifetimeStrategy)
pub struct ServiceRegistryImpl {
    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–±—Ä–∏–∫–∏ –ø–æ TypeId
    factories: RwLock<HashMap<TypeId, FactoryInfo>>,
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è registry
    config: RegistryConfig,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è service registry
#[derive(Debug, Clone)]
pub struct RegistryConfig {
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    pub max_registrations: usize,
    /// –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    pub verbose_logging: bool,
    /// –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–∏–ø–æ–≤
    pub allow_reregistration: bool,
}

impl Default for RegistryConfig {
    fn default() -> Self {
        Self {
            max_registrations: 10_000,
            verbose_logging: cfg!(debug_assertions),
            allow_reregistration: false,
        }
    }
}

impl RegistryConfig {
    /// Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    pub fn production() -> Self {
        Self {
            max_registrations: 50_000,
            verbose_logging: false,
            allow_reregistration: false,
        }
    }

    /// Development –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    pub fn development() -> Self {
        Self {
            max_registrations: 5_000,
            verbose_logging: true,
            allow_reregistration: true,
        }
    }

    /// Minimal –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub fn minimal() -> Self {
        Self {
            max_registrations: 1_000,
            verbose_logging: false,
            allow_reregistration: true,
        }
    }
}

impl ServiceRegistryImpl {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π service registry —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn new(config: RegistryConfig) -> Self {
        info!(
            "üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ ServiceRegistryImpl —Å –ª–∏–º–∏—Ç–æ–º {} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π",
            config.max_registrations
        );

        Self {
            factories: RwLock::new(HashMap::new()),
            config,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å service registry —Å default –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn default() -> Self {
        Self::new(RegistryConfig::default())
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø —Å —Ñ–∞–±—Ä–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    pub fn register_type_erased(
        &self,
        type_id: TypeId,
        type_name: String,
        factory: ServiceFactory,
        lifetime: LifetimeStrategy,
    ) -> Result<(), DIError> {
        if self.config.verbose_logging {
            debug!(
                "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ {} ({:?}) —Å lifetime {:?}",
                type_name, type_id, lifetime
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        {
            let factories = self.factories.read();
            if factories.len() >= self.config.max_registrations {
                let error = DIError::RegistrationLimitExceeded {
                    limit: self.config.max_registrations,
                    current: factories.len(),
                };
                warn!("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {}", error);
                return Err(error);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        {
            let factories = self.factories.read();
            if factories.contains_key(&type_id) {
                if !self.config.allow_reregistration {
                    let error = DIError::DuplicateRegistration {
                        type_name: type_name.clone(),
                    };
                    warn!("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {}: {}", type_name, error);
                    return Err(error);
                } else {
                    warn!("‚ö†Ô∏è –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ {} —Ä–∞–∑—Ä–µ—à–µ–Ω–∞", type_name);
                }
            }
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É
        {
            let mut factories = self.factories.write();
            let factory_info = FactoryInfo::new(factory, lifetime, type_name.clone());

            factories.insert(type_id, factory_info);
        }

        if self.config.verbose_logging {
            info!("‚úÖ –¢–∏–ø {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", type_name);
        }

        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–∏–ø
    pub fn is_registered(&self, type_id: TypeId) -> bool {
        let factories = self.factories.read();
        factories.contains_key(&type_id)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–±—Ä–∏–∫–µ –ø–æ TypeId
    pub fn get_factory_info(&self, type_id: TypeId) -> Option<FactoryInfo> {
        let factories = self.factories.read();
        // Note: –ú—ã –Ω–µ –º–æ–∂–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å FactoryInfo –∏–∑-–∑–∞ ServiceFactory
        // –ü–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Option –∏ —Ç—Ä–µ–±—É–µ–º –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ factory —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
        None
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–±—Ä–∏–∫—É –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –Ω–µ–π (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø)
    pub fn with_factory<R, F>(&self, type_id: TypeId, f: F) -> Option<R>
    where
        F: FnOnce(&FactoryInfo) -> R,
    {
        let factories = self.factories.read();
        factories.get(&type_id).map(f)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    pub fn get_registered_types(&self) -> Vec<(TypeId, String)> {
        let factories = self.factories.read();
        factories
            .iter()
            .map(|(&type_id, info)| (type_id, info.type_name.clone()))
            .collect()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    pub fn registration_count(&self) -> usize {
        let factories = self.factories.read();
        factories.len()
    }

    /// –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–∏–ø–∞
    pub fn unregister(&self, type_id: TypeId) -> bool {
        let mut factories = self.factories.write();
        if let Some(info) = factories.remove(&type_id) {
            if self.config.verbose_logging {
                info!("üóëÔ∏è –¢–∏–ø {} —É–¥–∞–ª–µ–Ω –∏–∑ registry", info.type_name);
            }
            true
        } else {
            false
        }
    }

    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    pub fn clear(&self) {
        let mut factories = self.factories.write();
        let count = factories.len();
        factories.clear();

        info!("üßπ –û—á–∏—â–µ–Ω–æ {} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∏–∑ ServiceRegistry", count);
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É registry
    pub fn get_stats(&self) -> RegistryStats {
        let factories = self.factories.read();

        let total_registrations = factories.len();
        let mut lifetime_counts = HashMap::new();
        let mut total_resolutions = 0;
        let mut oldest_registration = None;
        let mut newest_registration = None;

        for (type_id, info) in factories.iter() {
            // –ü–æ–¥—Å—á–µ—Ç –ø–æ lifetime
            *lifetime_counts.entry(info.lifetime).or_insert(0) += 1;

            // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            total_resolutions += info.get_resolution_count();

            // –ù–∞–π–¥–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if oldest_registration.is_none() || info.registered_at < oldest_registration.unwrap() {
                oldest_registration = Some(info.registered_at);
            }
            if newest_registration.is_none() || info.registered_at > newest_registration.unwrap() {
                newest_registration = Some(info.registered_at);
            }
        }

        RegistryStats {
            total_registrations,
            singleton_count: lifetime_counts
                .get(&LifetimeStrategy::Singleton)
                .copied()
                .unwrap_or(0),
            transient_count: lifetime_counts
                .get(&LifetimeStrategy::Transient)
                .copied()
                .unwrap_or(0),
            scoped_count: lifetime_counts
                .get(&LifetimeStrategy::Scoped)
                .copied()
                .unwrap_or(0),
            total_resolutions,
            average_resolutions_per_type: if total_registrations > 0 {
                total_resolutions as f64 / total_registrations as f64
            } else {
                0.0
            },
            registry_age: oldest_registration.map(|t| t.elapsed()),
            max_registrations: self.config.max_registrations,
            utilization: (total_registrations as f64 / self.config.max_registrations as f64)
                * 100.0,
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ registry
    pub fn get_detailed_report(&self) -> String {
        let stats = self.get_stats();
        let factories = self.factories.read();

        // –ù–∞–π–¥–µ–º —Ç–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∏–ø–æ–≤
        let mut type_usage: Vec<_> = factories
            .iter()
            .map(|(type_id, info)| {
                (
                    info.type_name.clone(),
                    info.get_resolution_count(),
                    info.lifetime,
                )
            })
            .collect();
        type_usage.sort_by(|a, b| b.1.cmp(&a.1));

        let top_used = type_usage
            .iter()
            .take(5)
            .map(|(name, count, lifetime)| {
                format!("  {} ({:?}): {} resolutions", name, lifetime, count)
            })
            .collect::<Vec<_>>()
            .join("\n");

        format!(
            "=== Service Registry Detailed Report ===\n\
             Total registrations: {}\n\
             - Singleton: {}\n\
             - Transient: {}\n\
             - Scoped: {}\n\
             Total resolutions: {}\n\
             Average resolutions per type: {:.2}\n\
             Registry utilization: {:.1}% ({}/{})\n\
             Registry age: {:?}\n\
             \n\
             Top 5 most used types:\n\
             {}\n\
             =======================================",
            stats.total_registrations,
            stats.singleton_count,
            stats.transient_count,
            stats.scoped_count,
            stats.total_resolutions,
            stats.average_resolutions_per_type,
            stats.utilization,
            stats.total_registrations,
            stats.max_registrations,
            stats.registry_age.unwrap_or_default(),
            if top_used.is_empty() {
                "  None"
            } else {
                &top_used
            }
        )
    }

    /// Validate registry state
    pub fn validate(&self) -> Result<(), Vec<String>> {
        let mut errors = Vec::new();
        let factories = self.factories.read();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if factories.len() > self.config.max_registrations {
            errors.push(format!(
                "Registry –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç: {} > {}",
                factories.len(),
                self.config.max_registrations
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–º–Ω–æ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∏–ø–æ–≤)
        let unused_count = factories
            .values()
            .filter(|info| info.get_resolution_count() == 0)
            .count();

        if unused_count > factories.len() / 2 {
            errors.push(format!(
                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∏–ø–æ–≤: {} –∏–∑ {} ({:.1}%)",
                unused_count,
                factories.len(),
                (unused_count as f64 / factories.len() as f64) * 100.0
            ));
        }

        if errors.is_empty() {
            Ok(())
        } else {
            Err(errors)
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é registry
    pub fn get_config(&self) -> &RegistryConfig {
        &self.config
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ service registry
#[derive(Debug, Clone)]
pub struct RegistryStats {
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    pub total_registrations: usize,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ singleton —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    pub singleton_count: usize,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ transient —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    pub transient_count: usize,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ scoped —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    pub scoped_count: usize,
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    pub total_resolutions: u64,
    /// –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —Ç–∏–ø
    pub average_resolutions_per_type: f64,
    /// –í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è registry
    pub registry_age: Option<std::time::Duration>,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    pub max_registrations: usize,
    /// –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è registry –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    pub utilization: f64,
}

#[cfg(test)]
mod tests {
    use super::*;

    // Mock factory –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    fn create_mock_factory() -> ServiceFactory {
        Box::new(|_| Ok(Box::new("test_value") as Box<dyn Any + Send + Sync>))
    }

    #[test]
    fn test_registry_creation() {
        let registry = ServiceRegistryImpl::default();
        assert_eq!(registry.registration_count(), 0);
    }

    #[test]
    fn test_type_registration() {
        let registry = ServiceRegistryImpl::default();
        let type_id = TypeId::of::<String>();
        let factory = create_mock_factory();

        let result = registry.register_type_erased(
            type_id,
            "String".to_string(),
            factory,
            LifetimeStrategy::Singleton,
        );

        assert!(result.is_ok());
        assert_eq!(registry.registration_count(), 1);
        assert!(registry.is_registered(type_id));
    }

    #[test]
    fn test_duplicate_registration_blocked() {
        let registry = ServiceRegistryImpl::new(RegistryConfig {
            allow_reregistration: false,
            ..Default::default()
        });
        let type_id = TypeId::of::<String>();

        // –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏
        let result1 = registry.register_type_erased(
            type_id,
            "String".to_string(),
            create_mock_factory(),
            LifetimeStrategy::Singleton,
        );
        assert!(result1.is_ok());

        // –í—Ç–æ—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        let result2 = registry.register_type_erased(
            type_id,
            "String".to_string(),
            create_mock_factory(),
            LifetimeStrategy::Singleton,
        );
        assert!(result2.is_err());
    }

    #[test]
    fn test_reregistration_allowed() {
        let registry = ServiceRegistryImpl::new(RegistryConfig {
            allow_reregistration: true,
            ..Default::default()
        });
        let type_id = TypeId::of::<String>();

        // –û–±–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
        let result1 = registry.register_type_erased(
            type_id,
            "String".to_string(),
            create_mock_factory(),
            LifetimeStrategy::Singleton,
        );
        assert!(result1.is_ok());

        let result2 = registry.register_type_erased(
            type_id,
            "String".to_string(),
            create_mock_factory(),
            LifetimeStrategy::Transient,
        );
        assert!(result2.is_ok());
    }

    #[test]
    fn test_registration_limit() {
        let registry = ServiceRegistryImpl::new(RegistryConfig {
            max_registrations: 2,
            ..Default::default()
        });

        // –ü–µ—Ä–≤—ã–µ –¥–≤–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
        for i in 0..2 {
            let result = registry.register_type_erased(
                TypeId::of::<usize>(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
                format!("Type{}", i),
                create_mock_factory(),
                LifetimeStrategy::Singleton,
            );
            if i == 0 {
                assert!(result.is_ok());
            } else {
                // –í—Ç–æ—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (allow_reregistration = false –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                assert!(result.is_err());
            }
        }
    }

    #[test]
    fn test_registry_stats() {
        let registry = ServiceRegistryImpl::default();

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ lifetime
        registry
            .register_type_erased(
                TypeId::of::<String>(),
                "String".to_string(),
                create_mock_factory(),
                LifetimeStrategy::Singleton,
            )
            .unwrap();

        registry
            .register_type_erased(
                TypeId::of::<i32>(),
                "i32".to_string(),
                create_mock_factory(),
                LifetimeStrategy::Transient,
            )
            .unwrap();

        let stats = registry.get_stats();
        assert_eq!(stats.total_registrations, 2);
        assert_eq!(stats.singleton_count, 1);
        assert_eq!(stats.transient_count, 1);
        assert_eq!(stats.scoped_count, 0);
        assert!(stats.utilization > 0.0);
    }

    #[test]
    fn test_registry_clear() {
        let registry = ServiceRegistryImpl::default();

        registry
            .register_type_erased(
                TypeId::of::<String>(),
                "String".to_string(),
                create_mock_factory(),
                LifetimeStrategy::Singleton,
            )
            .unwrap();

        assert_eq!(registry.registration_count(), 1);

        registry.clear();
        assert_eq!(registry.registration_count(), 0);
    }

    #[test]
    fn test_registry_detailed_report() {
        let registry = ServiceRegistryImpl::default();

        registry
            .register_type_erased(
                TypeId::of::<String>(),
                "String".to_string(),
                create_mock_factory(),
                LifetimeStrategy::Singleton,
            )
            .unwrap();

        let report = registry.get_detailed_report();
        assert!(report.contains("Service Registry Detailed Report"));
        assert!(report.contains("Total registrations: 1"));
        assert!(report.contains("Singleton: 1"));
    }

    #[test]
    fn test_registry_validation() {
        let registry = ServiceRegistryImpl::default();

        // –ü—É—Å—Ç–æ–π registry –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
        assert!(registry.validate().is_ok());

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
        registry
            .register_type_erased(
                TypeId::of::<String>(),
                "String".to_string(),
                create_mock_factory(),
                LifetimeStrategy::Singleton,
            )
            .unwrap();

        assert!(registry.validate().is_ok());
    }
}
