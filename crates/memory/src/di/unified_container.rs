//! Unified Dependency Injection Container
//!
//! –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ DI —Ä–µ—à–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ –≤ –µ–¥–∏–Ω—É—é,
//! —á–∏—Å—Ç—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö SOLID.
//!
//! –ü–†–û–ë–õ–ï–ú–´ –ö–û–¢–û–†–´–ï –†–ï–®–ê–ï–¢:
//! - 4 –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è DIContainer —Å—Ç—Ä—É–∫—Ç—É—Ä
//! - Service Locator anti-pattern
//! - God Objects >1000 —Å—Ç—Ä–æ–∫
//! - .unwrap() –≤—ã–∑–æ–≤—ã –±–µ–∑ error handling
//! - –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
//!
//! –ü–†–ò–ù–¶–ò–ü–´ SOLID:
//! - SRP: –ö–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
//! - OCP: –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ trait abstraction
//! - LSP: –í–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã–µ implementations
//! - ISP: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ, —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã  
//! - DIP: Constructor Injection, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π

use crate::service_di_facade::MemoryServiceConfig;
use anyhow::{anyhow, Result};
use parking_lot::RwLock;
use std::{
    any::{Any, TypeId},
    collections::HashMap,
    sync::Arc,
    time::{Duration, Instant},
};
use tracing::{debug, error, info, warn};

use super::{
    object_safe_resolver::{ObjectSafeResolver, TypeSafeResolver},
    traits::{
        DIContainerStats, DIPerformanceMetrics, DIRegistrar, DIResolver, Lifetime, TypeMetrics,
    },
};
use crate::service_di::service_config::MemoryServiceConfig;

/// Factory function type –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
pub type ComponentFactory =
    Box<dyn Fn(&UnifiedDIContainer) -> Result<Arc<dyn Any + Send + Sync>> + Send + Sync>;

/// Registration –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
struct ComponentRegistration {
    /// Factory —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    factory: ComponentFactory,
    /// –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    lifetime: Lifetime,
    /// –ò–º—è —Ç–∏–ø–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    type_name: String,
    /// –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registered_at: Instant,
}

/// Cache entry –¥–ª—è singleton/scoped –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
#[derive(Debug)]
struct CacheEntry {
    /// –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    instance: Arc<dyn Any + Send + Sync>,
    /// –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    created_at: Instant,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π
    access_count: u64,
    /// –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞
    last_access: Instant,
}

/// Unified DI Container - –µ–¥–∏–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
///
/// –ó–ê–ú–ï–ù–Ø–ï–¢:
/// - ContainerCore –∏–∑ di/container_core.rs
/// - DIMemoryServiceFacade –∏–∑ service_di/facade.rs  
/// - DIMemoryService –∏–∑ service_di_original.rs
/// - DIMemoryService –∏–∑ service_di_refactored.rs
///
/// –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
/// - Constructor Injection –≤–º–µ—Å—Ç–æ Service Locator
/// - Result<T, E> –≤–º–µ—Å—Ç–æ .unwrap() calls
/// - Trait-based abstractions –¥–ª—è extensibility
/// - Comprehensive error handling
/// - Performance metrics –∏ monitoring
pub struct UnifiedDIContainer {
    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    registrations: RwLock<HashMap<TypeId, ComponentRegistration>>,

    /// Cache –¥–ª—è singleton –∏ scoped —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    instance_cache: RwLock<HashMap<TypeId, CacheEntry>>,

    /// –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è cycle detection
    dependency_graph: RwLock<HashMap<TypeId, Vec<TypeId>>>,

    /// –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_metrics: RwLock<DIPerformanceMetrics>,

    /// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    configuration: ContainerConfiguration,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
#[derive(Debug, Clone)]
pub struct ContainerConfiguration {
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    pub max_cache_size: usize,
    /// Timeout –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    pub instance_creation_timeout: Duration,
    /// –í–∫–ª—é—á–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    pub enable_dependency_validation: bool,
    /// –í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub enable_performance_metrics: bool,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    pub max_dependency_depth: u32,
    /// Cache cleanup interval
    pub cache_cleanup_interval: Duration,
}

impl Default for ContainerConfiguration {
    fn default() -> Self {
        Self {
            max_cache_size: 1000,
            instance_creation_timeout: Duration::from_secs(30),
            enable_dependency_validation: true,
            enable_performance_metrics: true,
            max_dependency_depth: 20,
            cache_cleanup_interval: Duration::from_secs(300), // 5 minutes
        }
    }
}

impl ContainerConfiguration {
    /// Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    pub fn production() -> Self {
        Self {
            max_cache_size: 5000,
            instance_creation_timeout: Duration::from_secs(10),
            enable_dependency_validation: true,
            enable_performance_metrics: true,
            max_dependency_depth: 15,
            cache_cleanup_interval: Duration::from_secs(600), // 10 minutes
        }
    }

    /// Development –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –æ—Ç–ª–∞–¥–∫–æ–π
    pub fn development() -> Self {
        Self {
            max_cache_size: 500,
            instance_creation_timeout: Duration::from_secs(60),
            enable_dependency_validation: true,
            enable_performance_metrics: true,
            max_dependency_depth: 25,
            cache_cleanup_interval: Duration::from_secs(180), // 3 minutes
        }
    }

    /// Minimal –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub fn minimal() -> Self {
        Self {
            max_cache_size: 100,
            instance_creation_timeout: Duration::from_secs(5),
            enable_dependency_validation: false,
            enable_performance_metrics: false,
            max_dependency_depth: 10,
            cache_cleanup_interval: Duration::from_secs(60), // 1 minute
        }
    }
}

/// Container builder –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
pub struct UnifiedDIContainerBuilder {
    configuration: ContainerConfiguration,
}

impl UnifiedDIContainerBuilder {
    pub fn new() -> Self {
        Self {
            configuration: ContainerConfiguration::default(),
        }
    }

    pub fn with_configuration(mut self, config: ContainerConfiguration) -> Self {
        self.configuration = config;
        self
    }

    pub fn with_max_cache_size(mut self, size: usize) -> Self {
        self.configuration.max_cache_size = size;
        self
    }

    pub fn with_instance_timeout(mut self, timeout: Duration) -> Self {
        self.configuration.instance_creation_timeout = timeout;
        self
    }

    pub fn enable_validation(mut self) -> Self {
        self.configuration.enable_dependency_validation = true;
        self
    }

    pub fn disable_validation(mut self) -> Self {
        self.configuration.enable_dependency_validation = false;
        self
    }

    pub fn enable_metrics(mut self) -> Self {
        self.configuration.enable_performance_metrics = true;
        self
    }

    pub fn disable_metrics(mut self) -> Self {
        self.configuration.enable_performance_metrics = false;
        self
    }

    pub fn build(self) -> UnifiedDIContainer {
        UnifiedDIContainer::with_configuration(self.configuration)
    }
}

impl Default for UnifiedDIContainerBuilder {
    fn default() -> Self {
        Self::new()
    }
}

impl UnifiedDIContainer {
    /// –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å default –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn new() -> Self {
        Self::with_configuration(ContainerConfiguration::default())
    }

    /// –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn with_configuration(config: ContainerConfiguration) -> Self {
        info!(
            "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ UnifiedDIContainer —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {:?}",
            config
        );

        Self {
            registrations: RwLock::new(HashMap::new()),
            instance_cache: RwLock::new(HashMap::new()),
            dependency_graph: RwLock::new(HashMap::new()),
            performance_metrics: RwLock::new(DIPerformanceMetrics::default()),
            configuration: config,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å production-ready –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    pub fn production() -> Self {
        Self::with_configuration(ContainerConfiguration::production())
    }

    /// –°–æ–∑–¥–∞—Ç—å development –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    pub fn development() -> Self {
        Self::with_configuration(ContainerConfiguration::development())
    }

    /// –°–æ–∑–¥–∞—Ç—å minimal –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub fn minimal() -> Self {
        Self::with_configuration(ContainerConfiguration::minimal())
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å factory —Ñ—É–Ω–∫—Ü–∏–µ–π
    ///
    /// –ü–†–ò–ú–ï–ù–Ø–ï–¢:
    /// - SRP: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    /// - DIP: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ (factory function)
    /// - OCP: —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ lifetimes
    pub fn register<T, F>(&self, factory: F, lifetime: Lifetime) -> Result<()>
    where
        T: Any + Send + Sync + 'static,
        F: Fn(&UnifiedDIContainer) -> Result<T> + Send + Sync + 'static,
    {
        let type_id = TypeId::of::<T>();
        let type_name = std::any::type_name::<T>().to_string();
        let type_name_for_closure = type_name.clone();

        debug!("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {} ({:?})", type_name, lifetime);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–∏–ø
        {
            let registrations = self.registrations.read();
            if registrations.contains_key(&type_id) {
                return Err(anyhow!(
                    "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ",
                    type_name
                ));
            }
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É factory —Ñ—É–Ω–∫—Ü–∏–∏ —Å error handling
        let wrapped_factory: ComponentFactory = Box::new(move |container| {
            let start_time = Instant::now();

            match std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| factory(container))) {
                Ok(Ok(instance)) => {
                    let duration = start_time.elapsed();

                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                    if container.configuration.enable_performance_metrics {
                        container.record_successful_creation(type_id, duration);
                    }

                    debug!(
                        "‚úÖ –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä {} –∑–∞ {:?}",
                        type_name_for_closure, duration
                    );
                    Ok(Arc::new(instance) as Arc<dyn Any + Send + Sync>)
                }
                Ok(Err(e)) => {
                    let duration = start_time.elapsed();

                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                    if container.configuration.enable_performance_metrics {
                        container.record_failed_creation(type_id, duration, &e);
                    }

                    error!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {}: {}", type_name_for_closure, e);
                    Err(e)
                }
                Err(panic_err) => {
                    let duration = start_time.elapsed();
                    let error = anyhow!(
                        "Panic –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {}: {:?}",
                        type_name_for_closure,
                        panic_err
                    );

                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ panic
                    if container.configuration.enable_performance_metrics {
                        container.record_failed_creation(type_id, duration, &error);
                    }

                    error!(
                        "üí• Panic –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {}: {:?}",
                        type_name_for_closure, panic_err
                    );
                    Err(error)
                }
            }
        });

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        {
            let mut registrations = self.registrations.write();
            registrations.insert(
                type_id,
                ComponentRegistration {
                    factory: wrapped_factory,
                    lifetime,
                    type_name: type_name,
                    registered_at: Instant::now(),
                },
            );
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if self.configuration.enable_performance_metrics {
            self.record_registration(type_id);
        }

        // type_name moved, recreate from type
        info!(
            "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å lifetime {:?}",
            std::any::type_name::<T>(),
            lifetime
        );
        Ok(())
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
    pub fn register_instance<T>(&self, instance: T) -> Result<()>
    where
        T: Any + Send + Sync + 'static,
    {
        let type_id = TypeId::of::<T>();
        let type_name = std::any::type_name::<T>().to_string();

        debug!("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {}", type_name);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        {
            let registrations = self.registrations.read();
            if registrations.contains_key(&type_id) {
                return Err(anyhow!(
                    "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ",
                    type_name
                ));
            }
        }

        // –°–æ–∑–¥–∞–µ–º factory –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        let instance_arc = Arc::new(instance);
        let factory: ComponentFactory =
            Box::new(move |_container| Ok(instance_arc.clone() as Arc<dyn Any + Send + Sync>));

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ singleton
        {
            let mut registrations = self.registrations.write();
            registrations.insert(
                type_id,
                ComponentRegistration {
                    factory,
                    lifetime: Lifetime::Singleton,
                    type_name: type_name.clone(),
                    registered_at: Instant::now(),
                },
            );
        }

        if self.configuration.enable_performance_metrics {
            self.record_registration(type_id);
        }

        info!("‚úÖ Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä {} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", type_name);
        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–∏–ø
    pub fn is_registered<T>(&self) -> bool
    where
        T: Any + Send + Sync + 'static,
    {
        let type_id = TypeId::of::<T>();
        let registrations = self.registrations.read();
        registrations.contains_key(&type_id)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    pub fn registration_count(&self) -> usize {
        let registrations = self.registrations.read();
        registrations.len()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    pub fn registered_types(&self) -> Vec<String> {
        let registrations = self.registrations.read();
        registrations
            .values()
            .map(|reg| reg.type_name.clone())
            .collect()
    }

    /// –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —Ü–∏–∫–ª—ã
    pub fn validate_dependencies(&self) -> Result<()> {
        if !self.configuration.enable_dependency_validation {
            return Ok(());
        }

        debug!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...");

        let dependency_graph = self.dependency_graph.read();
        let cycles = self.detect_cycles(&dependency_graph);

        if !cycles.is_empty() {
            let mut error_msg = String::from("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n");

            for cycle in cycles {
                let cycle_names: Vec<String> = cycle
                    .iter()
                    .map(|type_id| self.get_type_name(*type_id))
                    .collect();
                error_msg.push_str(&format!("  -> {}\n", cycle_names.join(" -> ")));
            }

            return Err(anyhow!(error_msg));
        }

        debug!("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
        Ok(())
    }

    /// –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    pub fn add_dependency<TDependent, TDependency>(&self)
    where
        TDependent: Any + 'static,
        TDependency: Any + 'static,
    {
        if !self.configuration.enable_dependency_validation {
            return;
        }

        let dependent_id = TypeId::of::<TDependent>();
        let dependency_id = TypeId::of::<TDependency>();

        let mut graph = self.dependency_graph.write();
        graph
            .entry(dependent_id)
            .or_insert_with(Vec::new)
            .push(dependency_id);

        debug!(
            "üîó –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {} -> {}",
            self.get_type_name(dependent_id),
            self.get_type_name(dependency_id)
        );
    }

    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∫—ç—à–∏
    pub fn clear(&self) {
        info!("üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...");

        {
            let mut registrations = self.registrations.write();
            registrations.clear();
        }

        {
            let mut cache = self.instance_cache.write();
            cache.clear();
        }

        {
            let mut graph = self.dependency_graph.write();
            graph.clear();
        }

        if self.configuration.enable_performance_metrics {
            let mut metrics = self.performance_metrics.write();
            *metrics = DIPerformanceMetrics::default();
        }

        info!("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—á–∏—â–µ–Ω");
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    pub fn stats(&self) -> DIContainerStats {
        let registrations = self.registrations.read();
        let cache = self.instance_cache.read();
        let metrics = self.performance_metrics.read();

        DIContainerStats {
            registered_factories: registrations.len(),
            cached_singletons: cache.len(),
            total_resolutions: metrics.total_resolutions,
            cache_hits: metrics.cache_hits,
            validation_errors: 0, // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub fn performance_metrics(&self) -> DIPerformanceMetrics {
        if self.configuration.enable_performance_metrics {
            self.performance_metrics.read().clone()
        } else {
            DIPerformanceMetrics::default()
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub fn get_performance_report(&self) -> String {
        if !self.configuration.enable_performance_metrics {
            return "Performance metrics disabled".to_string();
        }

        let metrics = self.performance_metrics.read();
        let stats = self.stats();

        format!(
            "=== Unified DI Container Performance Report ===\n\
             Total resolutions: {}\n\
             Cache hit rate: {:.1}%\n\
             Average resolution time: {:.2}Œºs\n\
             Total factories: {}\n\
             Cached singletons: {}\n\
             Error count: {}\n\
             Dependency depth: {}\n\
             ==========================================",
            metrics.total_resolutions,
            metrics.cache_hit_rate(),
            metrics.avg_resolve_time_us(),
            stats.registered_factories,
            stats.cached_singletons,
            metrics.error_count,
            metrics.dependency_depth
        )
    }

    /// –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub fn reset_performance_metrics(&self) {
        if self.configuration.enable_performance_metrics {
            let mut metrics = self.performance_metrics.write();
            *metrics = DIPerformanceMetrics::default();
            debug!("üîÑ Performance –º–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
        }
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å cleanup task –¥–ª—è –∫—ç—à–∞
    pub fn start_cache_cleanup_task(self: Arc<Self>) -> tokio::task::JoinHandle<()> {
        let cleanup_interval = self.configuration.cache_cleanup_interval;

        tokio::spawn(async move {
            let mut interval = tokio::time::interval(cleanup_interval);

            loop {
                interval.tick().await;
                self.cleanup_expired_cache_entries();
            }
        })
    }

    // === PRIVATE HELPER METHODS ===

    /// –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–∏–ø–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    fn get_type_name(&self, type_id: TypeId) -> String {
        let registrations = self.registrations.read();
        registrations
            .get(&type_id)
            .map(|reg| reg.type_name.clone())
            .unwrap_or_else(|| format!("Unknown({:?})", type_id))
    }

    /// –û–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ü–∏–∫–ª—ã –≤ –≥—Ä–∞—Ñ–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    fn detect_cycles(&self, graph: &HashMap<TypeId, Vec<TypeId>>) -> Vec<Vec<TypeId>> {
        let mut cycles = Vec::new();
        let mut visited = std::collections::HashSet::new();
        let mut rec_stack = std::collections::HashSet::new();
        let mut current_path = Vec::new();

        for &node in graph.keys() {
            if !visited.contains(&node) {
                self.dfs_cycle_detection(
                    node,
                    graph,
                    &mut visited,
                    &mut rec_stack,
                    &mut current_path,
                    &mut cycles,
                );
            }
        }

        cycles
    }

    /// DFS –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
    fn dfs_cycle_detection(
        &self,
        node: TypeId,
        graph: &HashMap<TypeId, Vec<TypeId>>,
        visited: &mut std::collections::HashSet<TypeId>,
        rec_stack: &mut std::collections::HashSet<TypeId>,
        current_path: &mut Vec<TypeId>,
        cycles: &mut Vec<Vec<TypeId>>,
    ) {
        visited.insert(node);
        rec_stack.insert(node);
        current_path.push(node);

        if let Some(neighbors) = graph.get(&node) {
            for &neighbor in neighbors {
                if !visited.contains(&neighbor) {
                    self.dfs_cycle_detection(
                        neighbor,
                        graph,
                        visited,
                        rec_stack,
                        current_path,
                        cycles,
                    );
                } else if rec_stack.contains(&neighbor) {
                    // –ù–∞–π–¥–µ–Ω —Ü–∏–∫–ª
                    if let Some(cycle_start) = current_path.iter().position(|&x| x == neighbor) {
                        let cycle = current_path[cycle_start..].to_vec();
                        cycles.push(cycle);
                    }
                }
            }
        }

        current_path.pop();
        rec_stack.remove(&node);
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    fn record_successful_creation(&self, type_id: TypeId, duration: Duration) {
        let mut metrics = self.performance_metrics.write();
        metrics.total_resolutions += 1;
        metrics.total_resolution_time += duration;

        let type_metrics = metrics
            .type_metrics
            .entry(type_id)
            .or_insert_with(TypeMetrics::new);
        type_metrics.resolutions += 1;
        type_metrics.total_time += duration;
        type_metrics.average_time = type_metrics.total_time / type_metrics.resolutions as u32;
        type_metrics.last_resolution = Some(Instant::now());
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    fn record_failed_creation(&self, type_id: TypeId, duration: Duration, error: &anyhow::Error) {
        let mut metrics = self.performance_metrics.write();
        metrics.total_resolutions += 1;
        metrics.total_resolution_time += duration;
        metrics.error_count += 1;

        let type_metrics = metrics
            .type_metrics
            .entry(type_id)
            .or_insert_with(TypeMetrics::new);
        type_metrics.resolutions += 1;
        type_metrics.total_time += duration;
        type_metrics.error_count += 1;
        type_metrics.average_time = type_metrics.total_time / type_metrics.resolutions as u32;
        type_metrics.last_resolution = Some(Instant::now());

        warn!(
            "üìä –ó–∞–ø–∏—Å–∞–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {}: {}",
            self.get_type_name(type_id),
            error
        );
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    fn record_registration(&self, type_id: TypeId) {
        // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
        debug!("üìä –ó–∞–ø–∏—Å–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {}", self.get_type_name(type_id));
    }

    /// –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞
    fn cleanup_expired_cache_entries(&self) {
        let mut cache = self.instance_cache.write();
        let now = Instant::now();
        let cleanup_threshold = Duration::from_secs(3600); // 1 —á–∞—Å

        let initial_size = cache.len();
        cache.retain(|_type_id, entry| now.duration_since(entry.last_access) < cleanup_threshold);

        let cleaned_count = initial_size - cache.len();
        if cleaned_count > 0 {
            debug!("üßπ –û—á–∏—â–µ–Ω–æ {} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞", cleaned_count);
        }
    }
}

// === TRAIT IMPLEMENTATIONS ===

impl DIResolver for UnifiedDIContainer {
    /// –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - CORE METHOD —Å complete error handling
    fn resolve<T>(&self) -> Result<Arc<T>>
    where
        T: Any + Send + Sync + 'static,
    {
        let type_id = TypeId::of::<T>();
        let type_name = self.get_type_name(type_id);
        let start_time = Instant::now();

        debug!("üîç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {}", type_name);

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è singleton/scoped
        if let Some(cached_instance) = self.get_from_cache(type_id) {
            let duration = start_time.elapsed();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É cache hit
            if self.configuration.enable_performance_metrics {
                self.record_cache_hit(type_id, duration);
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç–∏–ø
            match cached_instance.downcast::<T>() {
                Ok(instance) => {
                    debug!("‚úÖ –ü–æ–ª—É—á–µ–Ω {} –∏–∑ –∫—ç—à–∞ –∑–∞ {:?}", type_name, duration);
                    return Ok(instance);
                }
                Err(_) => {
                    error!("‚ùå Type mismatch –¥–ª—è {}: –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º—É —Ç–∏–ø—É", type_name);
                    return Err(anyhow!("Type mismatch –¥–ª—è {}", type_name));
                }
            }
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        let registration = {
            let registrations = self.registrations.read();
            match registrations.get(&type_id) {
                Some(reg) => {
                    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
                    (reg.lifetime, reg.type_name.clone())
                }
                None => {
                    let duration = start_time.elapsed();
                    if self.configuration.enable_performance_metrics {
                        self.record_cache_miss(type_id, duration);
                    }

                    error!("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ", type_name);
                    return Err(anyhow!("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", type_name));
                }
            }
        };

        // 3. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —á–µ—Ä–µ–∑ factory
        let instance_result = {
            let registrations = self.registrations.read();
            if let Some(reg) = registrations.get(&type_id) {
                // –í—ã–∑—ã–≤–∞–µ–º factory –≤ timeout-–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è deadlock
                let creation_start = Instant::now();
                let creation_result = (reg.factory)(self);

                let creation_duration = creation_start.elapsed();
                if creation_duration > self.configuration.instance_creation_timeout {
                    warn!(
                        "‚è±Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ {} –∑–∞–Ω—è–ª–æ {:?} (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {:?})",
                        type_name, creation_duration, self.configuration.instance_creation_timeout
                    );
                }

                creation_result
            } else {
                Err(anyhow!(
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è {} –∏—Å—á–µ–∑–ª–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è",
                    type_name
                ))
            }
        };

        let instance = match instance_result {
            Ok(instance) => instance,
            Err(e) => {
                let duration = start_time.elapsed();
                if self.configuration.enable_performance_metrics {
                    self.record_failed_creation(type_id, duration, &e);
                }

                error!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {}: {}", type_name, e);
                return Err(e);
            }
        };

        // 4. –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
        let typed_instance = match instance.downcast::<T>() {
            Ok(typed) => typed,
            Err(_) => {
                let duration = start_time.elapsed();
                let error = anyhow!(
                    "Type mismatch: —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É {}",
                    type_name
                );

                if self.configuration.enable_performance_metrics {
                    self.record_failed_creation(type_id, duration, &error);
                }

                error!("‚ùå {}", error);
                return Err(error);
            }
        };

        // 5. –ö—ç—à–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if registration.0 != Lifetime::Transient {
            self.cache_instance(
                type_id,
                typed_instance.clone() as Arc<dyn Any + Send + Sync>,
            );
        }

        let total_duration = start_time.elapsed();

        // 6. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.configuration.enable_performance_metrics {
            self.record_cache_miss(type_id, total_duration);
        }

        debug!(
            "‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä {} –∑–∞ {:?}",
            type_name, total_duration
        );
        Ok(typed_instance)
    }

    /// –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    fn try_resolve<T>(&self) -> Option<Arc<T>>
    where
        T: Any + Send + Sync + 'static,
    {
        match self.resolve::<T>() {
            Ok(instance) => Some(instance),
            Err(e) => {
                let type_name = std::any::type_name::<T>();
                debug!("üîç try_resolve –¥–ª—è {} –Ω–µ —É–¥–∞–ª—Å—è: {}", type_name, e);
                None
            }
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–∏–ø
    fn is_registered<T>(&self) -> bool
    where
        T: Any + Send + Sync + 'static,
    {
        self.is_registered::<T>()
    }
}

impl DIRegistrar for UnifiedDIContainer {
    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å factory —Ñ—É–Ω–∫—Ü–∏–µ–π
    fn register<T, F>(&self, factory: F, lifetime: Lifetime) -> Result<()>
    where
        T: Any + Send + Sync + 'static,
        F: Fn(&dyn ObjectSafeResolver) -> Result<T> + Send + Sync + 'static,
    {
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º factory –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å UnifiedDIContainer as ObjectSafeResolver
        let adapted_factory =
            move |container: &UnifiedDIContainer| factory(container as &dyn ObjectSafeResolver);

        self.register(adapted_factory, lifetime)
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
    fn register_instance<T>(&self, instance: T) -> Result<()>
    where
        T: Any + Send + Sync + 'static,
    {
        self.register_instance(instance)
    }
}

// === CACHE HELPER METHODS ===

impl UnifiedDIContainer {
    /// –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑ –∫—ç—à–∞
    fn get_from_cache(&self, type_id: TypeId) -> Option<Arc<dyn Any + Send + Sync>> {
        let mut cache = self.instance_cache.write();

        if let Some(entry) = cache.get_mut(&type_id) {
            entry.access_count += 1;
            entry.last_access = Instant::now();

            Some(entry.instance.clone())
        } else {
            None
        }
    }

    /// –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
    fn cache_instance(&self, type_id: TypeId, instance: Arc<dyn Any + Send + Sync>) {
        let mut cache = self.instance_cache.write();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if cache.len() >= self.configuration.max_cache_size {
            // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if let Some(oldest_type_id) = cache
                .iter()
                .min_by_key(|(_, entry)| entry.last_access)
                .map(|(&type_id, _)| type_id)
            {
                cache.remove(&oldest_type_id);
                debug!(
                    "üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä: {}",
                    self.get_type_name(oldest_type_id)
                );
            }
        }

        let now = Instant::now();
        cache.insert(
            type_id,
            CacheEntry {
                instance,
                created_at: now,
                access_count: 1,
                last_access: now,
            },
        );

        debug!(
            "üíæ –≠–∫–∑–µ–º–ø–ª—è—Ä {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à",
            self.get_type_name(type_id)
        );
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å cache hit
    fn record_cache_hit(&self, type_id: TypeId, duration: Duration) {
        let mut metrics = self.performance_metrics.write();
        metrics.total_resolutions += 1;
        metrics.cache_hits += 1;
        metrics.total_resolution_time += duration;

        let type_metrics = metrics
            .type_metrics
            .entry(type_id)
            .or_insert_with(TypeMetrics::new);
        type_metrics.resolutions += 1;
        type_metrics.cache_hits += 1;
        type_metrics.total_time += duration;
        type_metrics.average_time = type_metrics.total_time / type_metrics.resolutions as u32;
        type_metrics.last_resolution = Some(Instant::now());
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å cache miss
    fn record_cache_miss(&self, type_id: TypeId, duration: Duration) {
        let mut metrics = self.performance_metrics.write();
        metrics.total_resolutions += 1;
        metrics.cache_misses += 1;
        metrics.total_resolution_time += duration;

        let type_metrics = metrics
            .type_metrics
            .entry(type_id)
            .or_insert_with(TypeMetrics::new);
        type_metrics.resolutions += 1;
        type_metrics.total_time += duration;
        type_metrics.average_time = type_metrics.total_time / type_metrics.resolutions as u32;
        type_metrics.last_resolution = Some(Instant::now());
    }
}

/// –ù–û–í–´–ô UNIFIED MEMORY CONFIGURATOR
///
/// –ó–∞–º–µ–Ω—è–µ—Ç MemoryDIConfigurator –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ di_memory_config.rs
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ memory —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
pub struct UnifiedMemoryConfigurator;

impl UnifiedMemoryConfigurator {
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è memory —Å–∏—Å—Ç–µ–º—ã
    ///
    /// –ó–ê–ú–ï–ù–Ø–ï–¢: MemoryDIConfigurator::configure_full()
    /// –ò–°–ü–û–õ–¨–ó–£–ï–¢: UnifiedDIContainer –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π
    pub async fn configure_full(config: &MemoryServiceConfig) -> Result<UnifiedDIContainer> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è memory —Å–∏—Å—Ç–µ–º—ã");

        let container = UnifiedDIContainer::production();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º core components
        Self::configure_core_dependencies(&container, config).await?;
        Self::configure_storage_layer(&container, config).await?;
        Self::configure_cache_layer(&container, config).await?;
        Self::configure_monitoring_layer(&container, config).await?;
        Self::configure_orchestration_layer(&container, config).await?;

        info!(
            "‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å {} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏",
            container.registration_count()
        );

        Ok(container)
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub async fn configure_minimal(config: &MemoryServiceConfig) -> Result<UnifiedDIContainer> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞");

        let container = UnifiedDIContainer::minimal();

        // –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        Self::configure_core_dependencies(&container, config).await?;
        Self::configure_storage_layer(&container, config).await?;

        info!(
            "‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å {} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏",
            container.registration_count()
        );

        Ok(container)
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CPU-only –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–±–µ–∑ GPU)
    pub async fn configure_cpu_only(config: &MemoryServiceConfig) -> Result<UnifiedDIContainer> {
        info!("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CPU-only DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞");

        let container = UnifiedDIContainer::new();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–µ–∑ GPU –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        Self::configure_core_dependencies(&container, config).await?;
        Self::configure_storage_layer(&container, config).await?;
        Self::configure_cache_layer(&container, config).await?;

        Ok(container)
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å core –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    async fn configure_core_dependencies(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        use crate::storage::VectorStore;
        use crate::types::{PromotionConfig, Record};

        // VectorStore
        let db_path = config.db_path.clone();
        container.register(
            move |_| {
                // TODO: VectorStore::new is async, need to refactor this
                // For now, create a placeholder or use builder pattern
                use std::path::PathBuf;
                let db_path: PathBuf = db_path.clone();
                // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                // –í production –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async factory –∏–ª–∏ builder
                Err::<Arc<crate::storage::VectorStore>, _>(anyhow!(
                    "VectorStore creation requires async context, use builder pattern"
                ))
            },
            Lifetime::Singleton,
        )?;

        // PromotionConfig
        let promotion_config = config.promotion.clone();
        container.register_instance(promotion_config)?;

        info!("‚úÖ Core dependencies configured");
        Ok(())
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å storage layer
    async fn configure_storage_layer(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        use crate::database_manager::DatabaseManager;

        // DatabaseManager
        let db_path = config.db_path.clone();
        container.register(move |_| Ok(DatabaseManager::new()), Lifetime::Singleton)?;

        info!("‚úÖ Storage layer configured");
        Ok(())
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å cache layer
    async fn configure_cache_layer(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        use crate::cache_lru::EmbeddingCacheLRU;

        // Cache
        let cache_config = config.cache_config.clone();
        let cache_path = std::env::temp_dir().join("embedding_cache");
        container.register(
            move |_| {
                let cache_config = cache_config.clone();
                let cache_path = cache_path.clone();
                Ok(EmbeddingCacheLRU::new(cache_path, cache_config)?)
            },
            Lifetime::Singleton,
        )?;

        info!("‚úÖ Cache layer configured");
        Ok(())
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å monitoring layer
    async fn configure_monitoring_layer(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        use crate::health::HealthMonitor;
        use crate::metrics::MetricsCollector;

        if config.health_enabled {
            // HealthMonitor
            let health_config = config.health_config.clone();
            container.register(
                move |_| Ok(HealthMonitor::new(health_config.clone())),
                Lifetime::Singleton,
            )?;
        }

        // MetricsCollector
        container.register(|_| Ok(MetricsCollector::new()), Lifetime::Singleton)?;

        info!("‚úÖ Monitoring layer configured");
        Ok(())
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å orchestration layer
    async fn configure_orchestration_layer(
        container: &UnifiedDIContainer,
        config: &MemoryServiceConfig,
    ) -> Result<()> {
        use crate::orchestration::{EmbeddingCoordinator, HealthManager, SearchCoordinator};

        // EmbeddingCoordinator
        container.register(
            |container| {
                let gpu_processor =
                    container.resolve::<crate::gpu_accelerated::GpuBatchProcessor>()?;
                let cache = container.resolve::<crate::cache_lru::EmbeddingCacheLRU>()?;
                Ok(EmbeddingCoordinator::new(gpu_processor, cache))
            },
            Lifetime::Singleton,
        )?;

        // SearchCoordinator
        container.register(
            |container| {
                let vector_store = container.resolve::<crate::storage::VectorStore>()?;
                let embedding_coordinator = container.resolve::<EmbeddingCoordinator>()?;
                Ok(SearchCoordinator::new(vector_store, embedding_coordinator))
            },
            Lifetime::Singleton,
        )?;

        if config.health_enabled {
            // HealthManager
            container.register(
                |container| {
                    let health_monitor = container.resolve::<crate::health::HealthMonitor>()?;
                    Ok(HealthManager::new(health_monitor))
                },
                Lifetime::Singleton,
            )?;
        }

        info!("‚úÖ Orchestration layer configured");
        Ok(())
    }
}

// === OBJECT SAFE RESOLVER IMPLEMENTATION ===
//
// –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã E0038: DIResolver trait –Ω–µ dyn-compatible
// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç object-safe API –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ trait objects

impl ObjectSafeResolver for UnifiedDIContainer {
    fn resolve_by_type_id(&self, type_id: TypeId) -> Result<Arc<dyn Any + Send + Sync>> {
        let type_name = self.get_type_name(type_id);
        let start_time = Instant::now();

        debug!("üîç ObjectSafe: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∏–ø–∞ {} –ø–æ TypeId", type_name);

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è singleton/scoped
        if let Some(cached_instance) = self.get_from_cache(type_id) {
            let duration = start_time.elapsed();

            if self.configuration.enable_performance_metrics {
                self.record_cache_hit(type_id, duration);
            }

            debug!(
                "‚úÖ ObjectSafe: –ø–æ–ª—É—á–µ–Ω {} –∏–∑ –∫—ç—à–∞ –∑–∞ {:?}",
                type_name, duration
            );
            return Ok(cached_instance);
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        let registration = {
            let registrations = self.registrations.read();
            match registrations.get(&type_id) {
                Some(reg) => (reg.lifetime, reg.type_name.clone()),
                None => {
                    let duration = start_time.elapsed();
                    if self.configuration.enable_performance_metrics {
                        self.record_cache_miss(type_id, duration);
                    }

                    error!("‚ùå ObjectSafe: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", type_name);
                    return Err(anyhow!(
                        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ",
                        type_name
                    ));
                }
            }
        };

        // 3. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —á–µ—Ä–µ–∑ factory
        let instance_result = {
            let registrations = self.registrations.read();
            if let Some(reg) = registrations.get(&type_id) {
                let creation_start = Instant::now();
                let creation_result = (reg.factory)(self);

                let creation_duration = creation_start.elapsed();
                if creation_duration > self.configuration.instance_creation_timeout {
                    warn!(
                        "‚è±Ô∏è ObjectSafe: —Å–æ–∑–¥–∞–Ω–∏–µ {} –∑–∞–Ω—è–ª–æ {:?} (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {:?})",
                        type_name, creation_duration, self.configuration.instance_creation_timeout
                    );
                }

                creation_result
            } else {
                return Err(anyhow!(
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {} –∏—Å—á–µ–∑–ª–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                    type_name
                ));
            }
        };

        // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        match instance_result {
            Ok(instance) => {
                let total_duration = start_time.elapsed();

                // –ö—ç—à–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if registration.0 == Lifetime::Singleton {
                    self.cache_instance(type_id, instance.clone());
                }

                if self.configuration.enable_performance_metrics {
                    self.record_cache_miss(type_id, total_duration);
                }

                debug!(
                    "‚úÖ ObjectSafe: —Å–æ–∑–¥–∞–Ω {} –∑–∞ {:?}",
                    type_name, total_duration
                );
                Ok(instance)
            }
            Err(e) => {
                let duration = start_time.elapsed();
                if self.configuration.enable_performance_metrics {
                    self.record_cache_miss(type_id, duration);
                }

                error!("‚ùå ObjectSafe: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {}: {}", type_name, e);
                Err(e)
            }
        }
    }

    fn try_resolve_by_type_id(&self, type_id: TypeId) -> Option<Arc<dyn Any + Send + Sync>> {
        let type_name = self.get_type_name(type_id);

        debug!(
            "üîç ObjectSafe: –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–∏–ø–∞ {} –ø–æ TypeId",
            type_name
        );

        match self.resolve_by_type_id(type_id) {
            Ok(instance) => {
                debug!("‚úÖ ObjectSafe: —Ç–∏–ø {} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω", type_name);
                Some(instance)
            }
            Err(e) => {
                debug!(
                    "‚ö†Ô∏è ObjectSafe: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–∏–ø {}: {}",
                    type_name, e
                );
                None
            }
        }
    }

    fn is_registered_by_type_id(&self, type_id: TypeId) -> bool {
        let registrations = self.registrations.read();
        registrations.contains_key(&type_id)
    }

    fn get_registered_types(&self) -> Vec<TypeId> {
        let registrations = self.registrations.read();
        registrations.keys().cloned().collect()
    }

    fn get_type_name(&self, type_id: TypeId) -> Option<String> {
        let registrations = self.registrations.read();
        registrations.get(&type_id).map(|reg| reg.type_name.clone())
    }
}

impl UnifiedDIContainer {
    /// –°–æ–∑–¥–∞—Ç—å TypeSafeResolver –¥–ª—è object-safe –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    pub fn as_object_safe_resolver(self: Arc<Self>) -> TypeSafeResolver {
        TypeSafeResolver::new(self as Arc<dyn ObjectSafeResolver>)
    }
}
