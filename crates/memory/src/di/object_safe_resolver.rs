//! Object-Safe DI Resolver
//!
//! –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã E0038: DIResolver trait –Ω–µ dyn-compatible –∏–∑-–∑–∞ generic –º–µ—Ç–æ–¥–æ–≤.
//!
//! –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û–ï –†–ï–®–ï–ù–ò–ï:
//! - Type-erased Service Locator —Å TypeMap –¥–ª—è dynamic dispatch
//! - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ compile-time type safety —á–µ—Ä–µ–∑ wrapper API
//! - SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã: ISP (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã), DIP (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π)
//!
//! PATTERN: Type Erasure + Service Locator (controlled anti-pattern)

use anyhow::{anyhow, Result};
use std::{
    any::{Any, TypeId},
    collections::HashMap,
    sync::Arc,
};
use tracing::{debug, error, warn};

/// Object-safe trait –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –±–µ–∑ generics
///
/// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø Interface Segregation (ISP) - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
/// –¥–ª—è object-safe –æ–ø–µ—Ä–∞—Ü–∏–π
pub trait ObjectSafeResolver: Send + Sync {
    /// –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ TypeId (type-erased)
    fn resolve_by_type_id(&self, type_id: TypeId) -> Result<Arc<dyn Any + Send + Sync + 'static>>;

    /// –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
    fn try_resolve_by_type_id(
        &self,
        type_id: TypeId,
    ) -> Option<Arc<dyn Any + Send + Sync + 'static>>;

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–∏–ø
    fn is_registered_by_type_id(&self, type_id: TypeId) -> bool;

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    fn get_registered_types(&self) -> Vec<TypeId>;

    /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    fn get_type_name(&self, type_id: TypeId) -> Option<String>;
}

/// Type-safe wrapper –¥–ª—è Object-safe resolver
///
/// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç compile-time type safety –ø–æ–≤–µ—Ä—Ö type-erased resolver
/// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø Dependency Inversion (DIP)
pub struct TypeSafeResolver {
    /// Object-safe resolver –¥–ª—è actual dependency resolution
    resolver: Arc<dyn ObjectSafeResolver>,
}

impl TypeSafeResolver {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π type-safe resolver
    pub fn new(resolver: Arc<dyn ObjectSafeResolver>) -> Self {
        debug!("üîß TypeSafeResolver: —Å–æ–∑–¥–∞–Ω–∏–µ wrapper –¥–ª—è object-safe resolver");
        Self { resolver }
    }

    /// –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å compile-time type safety
    pub fn resolve<T>(&self) -> Result<Arc<T>>
    where
        T: Any + Send + Sync + 'static,
    {
        let type_id = TypeId::of::<T>();
        let type_name = std::any::type_name::<T>();

        debug!("üîç TypeSafeResolver: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∏–ø–∞ {}", type_name);

        let any_instance = self
            .resolver
            .resolve_by_type_id(type_id)
            .map_err(|e| anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–∏–ø {}: {}", type_name, e))?;

        // Type-safe downcast —Å proper error handling
        any_instance
            .downcast::<T>()
            .map_err(|_| {
                error!("‚ùå TypeSafeResolver: —Ç–∏–ø {} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É", type_name);
                anyhow!("Type mismatch –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ {}: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º—É", type_name)
            })
    }

    /// –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    pub fn try_resolve<T>(&self) -> Option<Arc<T>>
    where
        T: Any + Send + Sync + 'static,
    {
        let type_id = TypeId::of::<T>();
        let type_name = std::any::type_name::<T>();

        debug!("üîç TypeSafeResolver: –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–∏–ø–∞ {}", type_name);

        let any_instance = self.resolver.try_resolve_by_type_id(type_id)?;

        // Safe downcast - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ panic
        match any_instance.downcast::<T>() {
            Ok(typed_instance) => {
                debug!("‚úÖ TypeSafeResolver: —Ç–∏–ø {} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω", type_name);
                Some(typed_instance)
            }
            Err(_) => {
                warn!("‚ö†Ô∏è TypeSafeResolver: type mismatch –¥–ª—è {}", type_name);
                None
            }
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–∏–ø
    pub fn is_registered<T>(&self) -> bool
    where
        T: Any + Send + Sync + 'static,
    {
        let type_id = TypeId::of::<T>();
        self.resolver.is_registered_by_type_id(type_id)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    pub fn get_diagnostic_info(&self) -> ResolverDiagnostics {
        let registered_types = self.resolver.get_registered_types();
        let type_names: Vec<String> = registered_types
            .iter()
            .filter_map(|&type_id| self.resolver.get_type_name(type_id))
            .collect();

        ResolverDiagnostics {
            total_registered: registered_types.len(),
            registered_types,
            type_names,
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å underlying object-safe resolver (–¥–ª—è advanced –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    pub fn inner(&self) -> &Arc<dyn ObjectSafeResolver> {
        &self.resolver
    }
}

/// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ resolver
#[derive(Debug, Clone)]
pub struct ResolverDiagnostics {
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    pub total_registered: usize,
    /// –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö TypeId
    pub registered_types: Vec<TypeId>,
    /// –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    pub type_names: Vec<String>,
}

/// Service Locator —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è ObjectSafeResolver
///
/// WARNING: –≠—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Service Locator anti-pattern.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–∫ implementation detail –¥–ª—è type erasure,
/// external API –æ—Å—Ç–∞–µ—Ç—Å—è dependency injection based.
pub struct ServiceLocatorResolver {
    /// Type-erased registry –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    registry: parking_lot::RwLock<HashMap<TypeId, Arc<dyn Any + Send + Sync + 'static>>>,
    /// –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    type_names: parking_lot::RwLock<HashMap<TypeId, String>>,
}

impl ServiceLocatorResolver {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π service locator resolver
    pub fn new() -> Self {
        debug!("üîß ServiceLocatorResolver: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ registry");
        Self {
            registry: parking_lot::RwLock::new(HashMap::new()),
            type_names: parking_lot::RwLock::new(HashMap::new()),
        }
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å type safety
    pub fn register<T>(&self, instance: Arc<T>) -> Result<()>
    where
        T: Any + Send + Sync + 'static,
    {
        let type_id = TypeId::of::<T>();
        let type_name = std::any::type_name::<T>().to_string();

        debug!("üìù ServiceLocatorResolver: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ {}", type_name);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        {
            let registry = self.registry.read();
            if registry.contains_key(&type_id) {
                warn!(
                    "‚ö†Ô∏è ServiceLocatorResolver: —Ç–∏–ø {} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å",
                    type_name
                );
            }
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å type erasure
        {
            let mut registry = self.registry.write();
            let mut type_names = self.type_names.write();

            let any_instance: Arc<dyn Any + Send + Sync + 'static> = instance;
            registry.insert(type_id, any_instance);
            type_names.insert(type_id, type_name.clone());
        }

        debug!(
            "‚úÖ ServiceLocatorResolver: —Ç–∏–ø {} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
            type_name
        );
        Ok(())
    }

    /// –†–∞–∑—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    pub fn unregister<T>(&self) -> bool
    where
        T: Any + Send + Sync + 'static,
    {
        let type_id = TypeId::of::<T>();
        let type_name = std::any::type_name::<T>();

        debug!(
            "üóëÔ∏è ServiceLocatorResolver: —Ä–∞–∑—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ {}",
            type_name
        );

        let mut registry = self.registry.write();
        let mut type_names = self.type_names.write();

        let removed = registry.remove(&type_id).is_some();
        type_names.remove(&type_id);

        if removed {
            debug!(
                "‚úÖ ServiceLocatorResolver: —Ç–∏–ø {} —Ä–∞–∑—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                type_name
            );
        } else {
            warn!(
                "‚ö†Ô∏è ServiceLocatorResolver: —Ç–∏–ø {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                type_name
            );
        }

        removed
    }

    /// –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å registry
    pub fn clear(&self) {
        debug!("üßπ ServiceLocatorResolver: –æ—á–∏—Å—Ç–∫–∞ registry");

        let mut registry = self.registry.write();
        let mut type_names = self.type_names.write();

        let count = registry.len();
        registry.clear();
        type_names.clear();

        debug!("‚úÖ ServiceLocatorResolver: –æ—á–∏—â–µ–Ω–æ {} —Ç–∏–ø–æ–≤", count);
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    pub fn count(&self) -> usize {
        self.registry.read().len()
    }
}

impl Default for ServiceLocatorResolver {
    fn default() -> Self {
        Self::new()
    }
}

impl ObjectSafeResolver for ServiceLocatorResolver {
    fn resolve_by_type_id(&self, type_id: TypeId) -> Result<Arc<dyn Any + Send + Sync + 'static>> {
        let registry = self.registry.read();
        let type_names = self.type_names.read();

        let type_name = type_names
            .get(&type_id)
            .map(|s| s.as_str())
            .unwrap_or("Unknown");

        match registry.get(&type_id) {
            Some(instance) => {
                debug!("‚úÖ ServiceLocatorResolver: —Ç–∏–ø {} —Ä–∞–∑—Ä–µ—à–µ–Ω", type_name);
                Ok(instance.clone())
            }
            None => {
                let registered: Vec<String> = type_names.values().cloned().collect();
                error!(
                    "‚ùå ServiceLocatorResolver: —Ç–∏–ø {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: [{}]",
                    type_name,
                    registered.join(", ")
                );
                Err(anyhow!(
                    "–¢–∏–ø {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: [{}]",
                    type_name,
                    registered.join(", ")
                ))
            }
        }
    }

    fn try_resolve_by_type_id(
        &self,
        type_id: TypeId,
    ) -> Option<Arc<dyn Any + Send + Sync + 'static>> {
        let registry = self.registry.read();
        registry.get(&type_id).cloned()
    }

    fn is_registered_by_type_id(&self, type_id: TypeId) -> bool {
        let registry = self.registry.read();
        registry.contains_key(&type_id)
    }

    fn get_registered_types(&self) -> Vec<TypeId> {
        let registry = self.registry.read();
        registry.keys().cloned().collect()
    }

    fn get_type_name(&self, type_id: TypeId) -> Option<String> {
        let type_names = self.type_names.read();
        type_names.get(&type_id).cloned()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    // Test service implementations
    struct TestServiceA {
        pub value: i32,
    }

    struct TestServiceB {
        #[allow(dead_code)]
        pub name: String,
    }

    #[test]
    fn test_service_locator_basic_operations() {
        let resolver = ServiceLocatorResolver::new();

        // Register services
        let service_a = Arc::new(TestServiceA { value: 42 });
        let service_b = Arc::new(TestServiceB {
            name: "test".to_string(),
        });

        resolver.register(service_a.clone()).unwrap();
        resolver.register(service_b.clone()).unwrap();

        // Test registration check
        assert!(resolver.is_registered_by_type_id(TypeId::of::<TestServiceA>()));
        assert!(resolver.is_registered_by_type_id(TypeId::of::<TestServiceB>()));

        // Test count
        assert_eq!(resolver.count(), 2);

        // Test type names
        assert!(resolver
            .get_type_name(TypeId::of::<TestServiceA>())
            .is_some());
    }

    #[test]
    fn test_type_safe_wrapper() {
        let service_locator = Arc::new(ServiceLocatorResolver::new());
        let resolver = TypeSafeResolver::new(service_locator.clone());

        // Register service
        let service = Arc::new(TestServiceA { value: 123 });
        service_locator.register(service.clone()).unwrap();

        // Test type-safe resolution
        let resolved = resolver.resolve::<TestServiceA>().unwrap();
        assert_eq!(resolved.value, 123);

        // Test try_resolve
        let try_resolved = resolver.try_resolve::<TestServiceA>().unwrap();
        assert_eq!(try_resolved.value, 123);

        // Test is_registered
        assert!(resolver.is_registered::<TestServiceA>());
        assert!(!resolver.is_registered::<TestServiceB>());
    }

    #[test]
    fn test_type_mismatch_handling() {
        let service_locator = Arc::new(ServiceLocatorResolver::new());
        let resolver = TypeSafeResolver::new(service_locator.clone());

        // Register service A
        let service_a = Arc::new(TestServiceA { value: 42 });
        service_locator.register(service_a).unwrap();

        // Try to resolve as different type - should fail gracefully
        let result = resolver.try_resolve::<TestServiceB>();
        assert!(result.is_none());

        // resolve() should return error
        let result = resolver.resolve::<TestServiceB>();
        assert!(result.is_err());
    }
}
