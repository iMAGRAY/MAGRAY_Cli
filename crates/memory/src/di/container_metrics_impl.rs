//! Container Metrics Implementation - —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
//!
//! –û—Ç–¥–µ–ª–µ–Ω –æ—Ç unified_container_impl.rs –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è Single Responsibility Principle.
//! –û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ —Å–±–æ—Ä, –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

use parking_lot::RwLock;
use std::{
    any::TypeId,
    collections::HashMap,
    sync::atomic::{AtomicU64, Ordering},
    time::{Duration, Instant},
};
use tracing::{debug, info};

use super::{
    core_traits::{CacheStats, ContainerMetrics, ResolutionStats},
    errors::DIError,
};

/// Container Metrics Implementation - –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
///
/// –ü–†–ò–ù–¶–ò–ü–´:
/// - SRP: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - —Å–±–æ—Ä –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
/// - OCP: —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–µ—Ç—Ä–∏–∫
/// - LSP: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É ContainerMetrics
/// - ISP: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ—Ç—Ä–∏–∫
/// - DIP: –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
pub struct ContainerMetricsImpl {
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
    config: MetricsConfig,
    /// –û–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏ (lock-free –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    counters: MetricsCounters,
    /// –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º (—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
    type_metrics: RwLock<HashMap<TypeId, TypeMetrics>>,
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_stats: RwLock<PerformanceStats>,
    /// –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è metrics collector
    created_at: Instant,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
#[derive(Debug, Clone)]
pub struct MetricsConfig {
    /// –í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø–∞–º
    pub collect_type_metrics: bool,
    /// –í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä timing –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    pub collect_timing: bool,
    /// –í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
    pub collect_cache_stats: bool,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    pub max_tracked_types: usize,
    /// –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    pub aggregation_interval: Duration,
}

impl Default for MetricsConfig {
    fn default() -> Self {
        Self {
            collect_type_metrics: true,
            collect_timing: true,
            collect_cache_stats: true,
            max_tracked_types: 10_000,
            aggregation_interval: Duration::from_secs(60),
        }
    }
}

impl MetricsConfig {
    /// Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º overhead
    pub fn production() -> Self {
        Self {
            collect_type_metrics: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            collect_timing: true,
            collect_cache_stats: true,
            max_tracked_types: 1_000,
            aggregation_interval: Duration::from_secs(300), // 5 –º–∏–Ω—É—Ç
        }
    }

    /// Development –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –º–µ—Ç—Ä–∏–∫
    pub fn development() -> Self {
        Self {
            collect_type_metrics: true,
            collect_timing: true,
            collect_cache_stats: true,
            max_tracked_types: 50_000,
            aggregation_interval: Duration::from_secs(30),
        }
    }

    /// Minimal –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub fn minimal() -> Self {
        Self {
            collect_type_metrics: false,
            collect_timing: false,
            collect_cache_stats: false,
            max_tracked_types: 100,
            aggregation_interval: Duration::from_secs(10),
        }
    }
}

/// Lock-free —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è high-performance –º–µ—Ç—Ä–∏–∫
#[derive(Debug)]
struct MetricsCounters {
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    total_resolutions: AtomicU64,
    /// –£—Å–ø–µ—à–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    successful_resolutions: AtomicU64,
    /// –ù–µ—É–¥–∞—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    failed_resolutions: AtomicU64,
    /// Cache hits
    cache_hits: AtomicU64,
    /// Cache misses  
    cache_misses: AtomicU64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
    error_count: AtomicU64,
}

impl Default for MetricsCounters {
    fn default() -> Self {
        Self {
            total_resolutions: AtomicU64::new(0),
            successful_resolutions: AtomicU64::new(0),
            failed_resolutions: AtomicU64::new(0),
            cache_hits: AtomicU64::new(0),
            cache_misses: AtomicU64::new(0),
            error_count: AtomicU64::new(0),
        }
    }
}

/// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
#[derive(Debug, Clone)]
pub struct TypeMetrics {
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    pub resolutions: u64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    pub failures: u64,
    /// –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    pub total_time: Duration,
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    pub min_time: Duration,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    pub max_time: Duration,
    /// –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    pub last_resolution: Option<Instant>,
    /// Cache hits –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    pub cache_hits: u64,
    /// –ò–º—è —Ç–∏–ø–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    pub type_name: String,
}

impl TypeMetrics {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–∏–ø–∞
    pub fn new(type_name: String) -> Self {
        Self {
            resolutions: 0,
            failures: 0,
            total_time: Duration::ZERO,
            min_time: Duration::MAX,
            max_time: Duration::ZERO,
            last_resolution: None,
            cache_hits: 0,
            type_name,
        }
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    pub fn record_success(&mut self, duration: Duration) {
        self.resolutions += 1;
        self.total_time += duration;
        self.last_resolution = Some(Instant::now());

        if duration < self.min_time {
            self.min_time = duration;
        }
        if duration > self.max_time {
            self.max_time = duration;
        }
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    pub fn record_failure(&mut self, duration: Duration) {
        self.failures += 1;
        self.total_time += duration;
        self.last_resolution = Some(Instant::now());
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å cache hit
    pub fn record_cache_hit(&mut self) {
        self.cache_hits += 1;
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    pub fn avg_time(&self) -> Duration {
        if self.resolutions > 0 {
            self.total_time / self.resolutions as u32
        } else {
            Duration::ZERO
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å success rate –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    pub fn success_rate(&self) -> f64 {
        let total = self.resolutions + self.failures;
        if total > 0 {
            (self.resolutions as f64 / total as f64) * 100.0
        } else {
            0.0
        }
    }
}

/// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
#[derive(Debug, Default)]
struct PerformanceStats {
    /// –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã collector
    total_runtime: Duration,
    /// –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    total_resolution_time: Duration,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    max_single_resolution_time: Duration,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥—Ä–µ–≥–∞—Ü–∏–π
    aggregation_count: u64,
    /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    last_aggregation: Option<Instant>,
}

impl ContainerMetricsImpl {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π metrics collector
    pub fn new(config: MetricsConfig) -> Self {
        info!(
            "üìä –°–æ–∑–¥–∞–Ω–∏–µ ContainerMetricsImpl —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {:?}",
            config
        );

        Self {
            config,
            counters: MetricsCounters::default(),
            type_metrics: RwLock::new(HashMap::new()),
            performance_stats: RwLock::new(PerformanceStats::default()),
            created_at: Instant::now(),
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å metrics collector —Å default –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn default() -> Self {
        Self::new(MetricsConfig::default())
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    pub fn record_resolution_success(&self, type_id: TypeId, duration_ns: u64) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏ (lock-free)
        self.counters
            .total_resolutions
            .fetch_add(1, Ordering::Relaxed);
        self.counters
            .successful_resolutions
            .fetch_add(1, Ordering::Relaxed);

        let duration = Duration::from_nanos(duration_ns);

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä timing –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if self.config.collect_timing {
            let mut perf_stats = self.performance_stats.write();
            perf_stats.total_resolution_time += duration;

            if duration > perf_stats.max_single_resolution_time {
                perf_stats.max_single_resolution_time = duration;
            }
        }

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø–∞–º
        if self.config.collect_type_metrics {
            self.update_type_metrics(type_id, |metrics| {
                metrics.record_success(duration);
            });
        }

        if self.config.collect_timing {
            debug!(
                "üìä –ó–∞–ø–∏—Å–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ {:?} –∑–∞ {:?}",
                type_id, duration
            );
        }
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    pub fn record_resolution_failure(&self, type_id: TypeId, error: &DIError) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
        self.counters
            .total_resolutions
            .fetch_add(1, Ordering::Relaxed);
        self.counters
            .failed_resolutions
            .fetch_add(1, Ordering::Relaxed);
        self.counters.error_count.fetch_add(1, Ordering::Relaxed);

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø–∞–º
        if self.config.collect_type_metrics {
            self.update_type_metrics(type_id, |metrics| {
                metrics.record_failure(Duration::ZERO); // –ù–µ –∑–Ω–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è failed resolution
            });
        }

        debug!("üìä –ó–∞–ø–∏—Å–∞–Ω–∞ –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è {:?}: {}", type_id, error);
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å cache hit
    pub fn record_cache_hit(&self, type_id: TypeId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
        self.counters.cache_hits.fetch_add(1, Ordering::Relaxed);

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º
        if self.config.collect_type_metrics {
            self.update_type_metrics(type_id, |metrics| {
                metrics.record_cache_hit();
            });
        }

        if self.config.collect_cache_stats {
            debug!("üìä –ó–∞–ø–∏—Å–∞–Ω cache hit –¥–ª—è {:?}", type_id);
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    pub fn get_resolution_stats(&self) -> ResolutionStats {
        let total_resolutions = self.counters.total_resolutions.load(Ordering::Relaxed);
        let successful_resolutions = self.counters.successful_resolutions.load(Ordering::Relaxed);
        let failed_resolutions = self.counters.failed_resolutions.load(Ordering::Relaxed);

        let (avg_resolution_time_ns, max_resolution_time_ns) = if self.config.collect_timing {
            let perf_stats = self.performance_stats.read();
            let avg = if total_resolutions > 0 {
                perf_stats.total_resolution_time.as_nanos() as u64 / total_resolutions
            } else {
                0
            };
            (avg, perf_stats.max_single_resolution_time.as_nanos() as u64)
        } else {
            (0, 0)
        };

        let resolutions_by_type = if self.config.collect_type_metrics {
            let type_metrics = self.type_metrics.read();
            type_metrics
                .iter()
                .map(|(&type_id, metrics)| (type_id, metrics.resolutions))
                .collect()
        } else {
            HashMap::new()
        };

        ResolutionStats {
            total_resolutions,
            successful_resolutions,
            failed_resolutions,
            avg_resolution_time_ns,
            max_resolution_time_ns,
            resolutions_by_type,
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    pub fn get_cache_stats(&self) -> CacheStats {
        let cache_hits = self.counters.cache_hits.load(Ordering::Relaxed);
        let cache_misses = self.counters.cache_misses.load(Ordering::Relaxed);
        let total_requests = cache_hits + cache_misses;

        CacheStats {
            cache_hits,
            cache_misses,
            cache_size: 0, // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ ContainerCache –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            cache_hit_rate: if total_requests > 0 {
                (cache_hits as f64 / total_requests as f64) * 100.0
            } else {
                0.0
            },
        }
    }

    /// –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
    pub fn reset_metrics(&self) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.counters.total_resolutions.store(0, Ordering::Relaxed);
        self.counters
            .successful_resolutions
            .store(0, Ordering::Relaxed);
        self.counters.failed_resolutions.store(0, Ordering::Relaxed);
        self.counters.cache_hits.store(0, Ordering::Relaxed);
        self.counters.cache_misses.store(0, Ordering::Relaxed);
        self.counters.error_count.store(0, Ordering::Relaxed);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.config.collect_type_metrics {
            let mut type_metrics = self.type_metrics.write();
            type_metrics.clear();
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if self.config.collect_timing {
            let mut perf_stats = self.performance_stats.write();
            *perf_stats = PerformanceStats::default();
        }

        info!("üîÑ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ ContainerMetrics —Å–±—Ä–æ—à–µ–Ω—ã");
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –º–µ—Ç—Ä–∏–∫–∞—Ö
    pub fn get_detailed_report(&self) -> String {
        let resolution_stats = self.get_resolution_stats();
        let cache_stats = self.get_cache_stats();
        let uptime = self.created_at.elapsed();

        let mut report = format!(
            "=== Container Metrics Detailed Report ===\n\
             Uptime: {:?}\n\
             \n\
             Resolution Statistics:\n\
             - Total resolutions: {}\n\
             - Successful: {} ({:.1}%)\n\
             - Failed: {} ({:.1}%)\n\
             - Average time: {:.2}Œºs\n\
             - Max time: {:.2}Œºs\n\
             \n\
             Cache Statistics:\n\
             - Hits: {} ({:.1}%)\n\
             - Misses: {}\n\
             - Hit rate: {:.1}%\n",
            uptime,
            resolution_stats.total_resolutions,
            resolution_stats.successful_resolutions,
            if resolution_stats.total_resolutions > 0 {
                (resolution_stats.successful_resolutions as f64
                    / resolution_stats.total_resolutions as f64)
                    * 100.0
            } else {
                0.0
            },
            resolution_stats.failed_resolutions,
            if resolution_stats.total_resolutions > 0 {
                (resolution_stats.failed_resolutions as f64
                    / resolution_stats.total_resolutions as f64)
                    * 100.0
            } else {
                0.0
            },
            resolution_stats.avg_resolution_time_ns as f64 / 1000.0, // ns to Œºs
            resolution_stats.max_resolution_time_ns as f64 / 1000.0, // ns to Œºs
            cache_stats.cache_hits,
            cache_stats.cache_hit_rate,
            cache_stats.cache_misses,
            cache_stats.cache_hit_rate
        );

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ç–∏–ø–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.config.collect_type_metrics {
            let type_metrics = self.type_metrics.read();

            if !type_metrics.is_empty() {
                report.push_str("\nTop 10 Most Used Types:\n");

                let mut sorted_types: Vec<_> = type_metrics.values().collect();
                sorted_types.sort_by(|a, b| b.resolutions.cmp(&a.resolutions));

                for (i, metrics) in sorted_types.iter().take(10).enumerate() {
                    report.push_str(&format!(
                        "{}. {} - {} resolutions (avg: {:?})\n",
                        i + 1,
                        metrics.type_name,
                        metrics.resolutions,
                        metrics.avg_time()
                    ));
                }
            }
        }

        report.push_str("========================================");
        report
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å background –∑–∞–¥–∞—á—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    pub fn start_aggregation_task(metrics: std::sync::Arc<Self>) -> tokio::task::JoinHandle<()> {
        let aggregation_interval = metrics.config.aggregation_interval;

        tokio::spawn(async move {
            let mut interval = tokio::time::interval(aggregation_interval);

            loop {
                interval.tick().await;
                metrics.aggregate_metrics();
            }
        })
    }

    /// Validate —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    pub fn validate(&self) -> Result<(), Vec<String>> {
        let mut warnings = Vec::new();
        let stats = self.get_resolution_stats();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º success rate
        if stats.total_resolutions > 100 {
            let success_rate =
                (stats.successful_resolutions as f64 / stats.total_resolutions as f64) * 100.0;
            if success_rate < 95.0 {
                warnings.push(format!(
                    "–ù–∏–∑–∫–∏–π success rate: {:.1}% (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è > 95%)",
                    success_rate
                ));
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if self.config.collect_timing && stats.avg_resolution_time_ns > 10_000_000 {
            // 10ms
            warnings.push(format!(
                "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {:.2}ms (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è < 10ms)",
                stats.avg_resolution_time_ns as f64 / 1_000_000.0
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º cache hit rate
        let cache_stats = self.get_cache_stats();
        let total_cache_requests = cache_stats.cache_hits + cache_stats.cache_misses;
        if total_cache_requests > 100 && cache_stats.cache_hit_rate < 70.0 {
            warnings.push(format!(
                "–ù–∏–∑–∫–∏–π cache hit rate: {:.1}% (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è > 70%)",
                cache_stats.cache_hit_rate
            ));
        }

        if warnings.is_empty() {
            Ok(())
        } else {
            Err(warnings)
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫
    pub fn get_config(&self) -> &MetricsConfig {
        &self.config
    }

    // === PRIVATE HELPER METHODS ===

    /// –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
    fn update_type_metrics<F>(&self, type_id: TypeId, updater: F)
    where
        F: FnOnce(&mut TypeMetrics),
    {
        let mut type_metrics = self.type_metrics.write();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤
        if type_metrics.len() >= self.config.max_tracked_types
            && !type_metrics.contains_key(&type_id)
        {
            // –£–¥–∞–ª—è–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∏–ø—ã –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
            self.evict_least_used_types(&mut type_metrics);
        }

        let metrics = type_metrics
            .entry(type_id)
            .or_insert_with(|| TypeMetrics::new(format!("Type({:?})", type_id)));

        updater(metrics);
    }

    /// –£–¥–∞–ª–∏—Ç—å –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∏–ø—ã –∏–∑ –º–µ—Ç—Ä–∏–∫
    fn evict_least_used_types(&self, type_metrics: &mut HashMap<TypeId, TypeMetrics>) {
        let target_size = (self.config.max_tracked_types as f64 * 0.8) as usize;

        if type_metrics.len() <= target_size {
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        let mut types_by_usage: Vec<_> = type_metrics
            .iter()
            .map(|(&type_id, metrics)| (type_id, metrics.resolutions))
            .collect();

        types_by_usage.sort_by(|a, b| a.1.cmp(&b.1)); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é

        // –£–¥–∞–ª—è–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
        let to_remove = type_metrics.len() - target_size;
        for (type_id, _) in types_by_usage.into_iter().take(to_remove) {
            type_metrics.remove(&type_id);
        }

        debug!(
            "üßπ –£–¥–∞–ª–µ–Ω–æ {} –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑ –º–µ—Ç—Ä–∏–∫",
            to_remove
        );
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫
    fn aggregate_metrics(&self) {
        debug!("üìä –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫...");

        let mut perf_stats = self.performance_stats.write();
        perf_stats.aggregation_count += 1;
        perf_stats.last_aggregation = Some(Instant::now());
        perf_stats.total_runtime = self.created_at.elapsed();

        // TODO: –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–µ–π, —Å–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏ —Ç.–¥.
    }
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è ContainerMetrics trait
impl ContainerMetrics for ContainerMetricsImpl {
    fn record_resolution_success(&self, type_id: TypeId, duration_ns: u64) {
        self.record_resolution_success(type_id, duration_ns);
    }

    fn record_resolution_failure(&self, type_id: TypeId, error: &DIError) {
        self.record_resolution_failure(type_id, error);
    }

    fn record_cache_hit(&self, type_id: TypeId) {
        self.record_cache_hit(type_id);
    }

    fn get_resolution_stats(&self) -> ResolutionStats {
        self.get_resolution_stats()
    }

    fn get_cache_stats(&self) -> CacheStats {
        self.get_cache_stats()
    }

    fn reset_metrics(&self) {
        self.reset_metrics();
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_metrics_creation() {
        let metrics = ContainerMetricsImpl::new(MetricsConfig::minimal());
        let stats = metrics.get_resolution_stats();

        assert_eq!(stats.total_resolutions, 0);
        assert_eq!(stats.successful_resolutions, 0);
        assert_eq!(stats.failed_resolutions, 0);
    }

    #[test]
    fn test_record_success() {
        let metrics = ContainerMetricsImpl::new(MetricsConfig::development());
        let type_id = TypeId::of::<String>();

        metrics.record_resolution_success(type_id, 1_000_000); // 1ms in ns

        let stats = metrics.get_resolution_stats();
        assert_eq!(stats.total_resolutions, 1);
        assert_eq!(stats.successful_resolutions, 1);
        assert_eq!(stats.failed_resolutions, 0);
        assert_eq!(stats.avg_resolution_time_ns, 1_000_000);
    }

    #[test]
    fn test_record_failure() {
        let metrics = ContainerMetricsImpl::new(MetricsConfig::development());
        let type_id = TypeId::of::<String>();
        let error = DIError::TypeNotRegistered { type_id };

        metrics.record_resolution_failure(type_id, &error);

        let stats = metrics.get_resolution_stats();
        assert_eq!(stats.total_resolutions, 1);
        assert_eq!(stats.successful_resolutions, 0);
        assert_eq!(stats.failed_resolutions, 1);
    }

    #[test]
    fn test_cache_hit_recording() {
        let metrics = ContainerMetricsImpl::new(MetricsConfig::development());
        let type_id = TypeId::of::<String>();

        metrics.record_cache_hit(type_id);

        let cache_stats = metrics.get_cache_stats();
        assert_eq!(cache_stats.cache_hits, 1);
        assert_eq!(cache_stats.cache_misses, 0);
    }

    #[test]
    fn test_metrics_reset() {
        let metrics = ContainerMetricsImpl::new(MetricsConfig::development());
        let type_id = TypeId::of::<String>();

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics.record_resolution_success(type_id, 1_000_000);
        metrics.record_cache_hit(type_id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
        let stats_before = metrics.get_resolution_stats();
        assert_eq!(stats_before.total_resolutions, 1);

        let cache_stats_before = metrics.get_cache_stats();
        assert_eq!(cache_stats_before.cache_hits, 1);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º
        metrics.reset_metrics();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–±—Ä–æ—Å–∏–ª–∏—Å—å
        let stats_after = metrics.get_resolution_stats();
        assert_eq!(stats_after.total_resolutions, 0);

        let cache_stats_after = metrics.get_cache_stats();
        assert_eq!(cache_stats_after.cache_hits, 0);
    }

    #[test]
    fn test_detailed_report() {
        let metrics = ContainerMetricsImpl::new(MetricsConfig::development());
        let type_id = TypeId::of::<String>();

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics.record_resolution_success(type_id, 1_000_000);
        metrics.record_cache_hit(type_id);

        let report = metrics.get_detailed_report();
        assert!(report.contains("Container Metrics Detailed Report"));
        assert!(report.contains("Total resolutions: 1"));
        assert!(report.contains("Hits: 1"));
    }

    #[test]
    fn test_metrics_validation() {
        let metrics = ContainerMetricsImpl::new(MetricsConfig::minimal());

        // –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º–∏
        assert!(metrics.validate().is_ok());
    }

    #[test]
    fn test_type_metrics_with_limit() {
        let config = MetricsConfig {
            collect_type_metrics: true,
            max_tracked_types: 2,
            ..MetricsConfig::minimal()
        };
        let metrics = ContainerMetricsImpl::new(config);

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è 3 —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        metrics.record_resolution_success(TypeId::of::<String>(), 1_000_000);
        metrics.record_resolution_success(TypeId::of::<i32>(), 1_000_000);
        metrics.record_resolution_success(TypeId::of::<f64>(), 1_000_000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞
        let stats = metrics.get_resolution_stats();
        assert_eq!(stats.total_resolutions, 3);
    }
}
