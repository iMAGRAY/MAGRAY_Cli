//! Service Resolver Implementation - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
//!
//! –û—Ç–¥–µ–ª–µ–Ω –æ—Ç unified_container_impl.rs –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è Single Responsibility Principle.
//! –û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–±—Ä–∏–∫–∏.

use anyhow::Result as AnyResult;
use parking_lot::RwLock;
use std::{
    any::{Any, TypeId},
    collections::HashMap,
    sync::Arc,
    time::{Duration, Instant},
};
use tracing::{debug, error, warn};

use super::{
    container_cache::ContainerCache, core_traits::LifetimeStrategy, errors::DIError,
    service_registry_impl::ServiceRegistryImpl,
};

/// Service Resolver Implementation - –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
///
/// –ü–†–ò–ù–¶–ò–ü–´:
/// - SRP: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
/// - OCP: —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
/// - LSP: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É ServiceResolver
/// - ISP: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
/// - DIP: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π (ServiceRegistry, ContainerCache)
pub struct ServiceResolverImpl {
    /// Registry –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–±—Ä–∏–∫
    registry: Arc<ServiceRegistryImpl>,
    /// Cache manager –¥–ª—è singleton –∏ scoped —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    cache: Arc<ContainerCache>,
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è resolver
    config: ResolverConfig,
    /// –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    metrics: RwLock<ResolverMetrics>,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è service resolver
#[derive(Debug, Clone)]
pub struct ResolverConfig {
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
    pub max_resolution_time: Duration,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å—Ç–µ–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤)
    pub max_resolution_depth: usize,
    /// –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    pub verbose_logging: bool,
    /// –í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    pub enable_caching: bool,
    /// Timeout –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    pub instance_creation_timeout: Duration,
}

impl Default for ResolverConfig {
    fn default() -> Self {
        Self {
            max_resolution_time: Duration::from_secs(30),
            max_resolution_depth: 50,
            verbose_logging: cfg!(debug_assertions),
            enable_caching: true,
            instance_creation_timeout: Duration::from_secs(10),
        }
    }
}

impl ResolverConfig {
    /// Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    pub fn production() -> Self {
        Self {
            max_resolution_time: Duration::from_secs(10),
            max_resolution_depth: 25,
            verbose_logging: false,
            enable_caching: true,
            instance_creation_timeout: Duration::from_secs(5),
        }
    }

    /// Development –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º debugging
    pub fn development() -> Self {
        Self {
            max_resolution_time: Duration::from_secs(60),
            max_resolution_depth: 100,
            verbose_logging: true,
            enable_caching: true,
            instance_creation_timeout: Duration::from_secs(30),
        }
    }

    /// Minimal –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub fn minimal() -> Self {
        Self {
            max_resolution_time: Duration::from_secs(5),
            max_resolution_depth: 10,
            verbose_logging: false,
            enable_caching: false,
            instance_creation_timeout: Duration::from_secs(2),
        }
    }
}

/// –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
#[derive(Debug, Default, Clone)]
pub struct ResolverMetrics {
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    pub total_resolutions: u64,
    /// –£—Å–ø–µ—à–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    pub successful_resolutions: u64,
    /// –ù–µ—É–¥–∞—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    pub failed_resolutions: u64,
    /// Cache hits
    pub cache_hits: u64,
    /// Cache misses
    pub cache_misses: u64,
    /// –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    pub total_resolution_time: Duration,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    pub max_resolution_time: Duration,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    pub max_resolution_depth: usize,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ timeout-–æ–≤
    pub timeout_count: u64,
}

impl ResolverMetrics {
    /// –ü–æ–ª—É—á–∏—Ç—å hit rate –∫—ç—à–∞
    pub fn cache_hit_rate(&self) -> f64 {
        let total = self.cache_hits + self.cache_misses;
        if total > 0 {
            (self.cache_hits as f64 / total as f64) * 100.0
        } else {
            0.0
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å success rate —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    pub fn success_rate(&self) -> f64 {
        if self.total_resolutions > 0 {
            (self.successful_resolutions as f64 / self.total_resolutions as f64) * 100.0
        } else {
            0.0
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    pub fn avg_resolution_time(&self) -> Duration {
        if self.total_resolutions > 0 {
            self.total_resolution_time / self.total_resolutions as u32
        } else {
            Duration::ZERO
        }
    }
}

/// Context –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–µ–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤)
#[derive(Debug)]
struct ResolutionContext {
    /// –°—Ç–µ–∫ —Ç–∏–ø–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å —Ä–∞–∑—Ä–µ—à–∞—é—Ç—Å—è
    resolution_stack: Vec<TypeId>,
    /// –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    start_time: Instant,
}

impl ResolutionContext {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    fn new() -> Self {
        Self {
            resolution_stack: Vec::new(),
            start_time: Instant::now(),
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —Ü–∏–∫–ª
    fn has_cycle(&self, type_id: TypeId) -> bool {
        self.resolution_stack.contains(&type_id)
    }

    /// –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –≤ —Å—Ç–µ–∫
    fn push(&mut self, type_id: TypeId) {
        self.resolution_stack.push(type_id);
    }

    /// –£–±—Ä–∞—Ç—å —Ç–∏–ø –∏–∑ —Å—Ç–µ–∫–∞
    fn pop(&mut self) -> Option<TypeId> {
        self.resolution_stack.pop()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≥–ª—É–±–∏–Ω—É —Å—Ç–µ–∫–∞
    fn depth(&self) -> usize {
        self.resolution_stack.len()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    fn elapsed(&self) -> Duration {
        self.start_time.elapsed()
    }
}

impl ServiceResolverImpl {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π service resolver
    pub fn new(
        registry: Arc<ServiceRegistryImpl>,
        cache: Arc<ContainerCache>,
        config: ResolverConfig,
    ) -> Self {
        debug!(
            "üîç –°–æ–∑–¥–∞–Ω–∏–µ ServiceResolverImpl —Å max_depth={}",
            config.max_resolution_depth
        );

        Self {
            registry,
            cache,
            config,
            metrics: RwLock::new(ResolverMetrics::default()),
        }
    }

    /// –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ TypeId
    pub fn resolve_type_erased(
        &self,
        type_id: TypeId,
    ) -> Result<Arc<dyn Any + Send + Sync>, DIError> {
        let mut context = ResolutionContext::new();
        self.resolve_internal(type_id, &mut context)
    }

    /// –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    pub fn try_resolve_type_erased(&self, type_id: TypeId) -> Option<Arc<dyn Any + Send + Sync>> {
        match self.resolve_type_erased(type_id) {
            Ok(instance) => Some(instance),
            Err(e) => {
                if self.config.verbose_logging {
                    debug!("üîç try_resolve –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è {:?}: {}", type_id, e);
                }
                None
            }
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ —Ç–∏–ø –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω
    pub fn can_resolve(&self, type_id: TypeId) -> bool {
        self.registry.is_registered(type_id)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    pub fn get_metrics(&self) -> ResolverMetrics {
        self.metrics.read().clone()
    }

    /// –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
    pub fn reset_metrics(&self) {
        let mut metrics = self.metrics.write();
        *metrics = ResolverMetrics::default();
        debug!("üîÑ –ú–µ—Ç—Ä–∏–∫–∏ ServiceResolver —Å–±—Ä–æ—à–µ–Ω—ã");
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö
    pub fn get_detailed_report(&self) -> String {
        let metrics = self.get_metrics();
        let cache_stats = self.cache.stats();

        format!(
            "=== Service Resolver Detailed Report ===\n\
             Total resolutions: {}\n\
             - Successful: {} ({:.1}%)\n\
             - Failed: {} ({:.1}%)\n\
             - Timeouts: {}\n\
             Cache performance:\n\
             - Hits: {} ({:.1}%)\n\
             - Misses: {}\n\
             - Cache utilization: {:.1}%\n\
             Performance metrics:\n\
             - Average resolution time: {:?}\n\
             - Maximum resolution time: {:?}\n\
             - Maximum resolution depth: {}\n\
             =======================================",
            metrics.total_resolutions,
            metrics.successful_resolutions,
            metrics.success_rate(),
            metrics.failed_resolutions,
            100.0 - metrics.success_rate(),
            metrics.timeout_count,
            metrics.cache_hits,
            metrics.cache_hit_rate(),
            metrics.cache_misses,
            cache_stats.cache_utilization,
            metrics.avg_resolution_time(),
            metrics.max_resolution_time,
            metrics.max_resolution_depth
        )
    }

    /// Validate —Å–æ—Å—Ç–æ—è–Ω–∏–µ resolver
    pub fn validate(&self) -> Result<(), Vec<String>> {
        let mut errors = Vec::new();
        let metrics = self.get_metrics();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º success rate
        if metrics.total_resolutions > 100 && metrics.success_rate() < 50.0 {
            errors.push(format!(
                "–ù–∏–∑–∫–∏–π success rate: {:.1}% (–º–µ–Ω–µ–µ 50%)",
                metrics.success_rate()
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout-—ã
        if metrics.timeout_count > metrics.total_resolutions / 10 {
            errors.push(format!(
                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ timeout-–æ–≤: {} –∏–∑ {} ({:.1}%)",
                metrics.timeout_count,
                metrics.total_resolutions,
                (metrics.timeout_count as f64 / metrics.total_resolutions as f64) * 100.0
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        if metrics.avg_resolution_time() > Duration::from_millis(100) {
            errors.push(format!(
                "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {:?}",
                metrics.avg_resolution_time()
            ));
        }

        if errors.is_empty() {
            Ok(())
        } else {
            Err(errors)
        }
    }

    // === PRIVATE IMPLEMENTATION METHODS ===

    /// –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    fn resolve_internal(
        &self,
        type_id: TypeId,
        context: &mut ResolutionContext,
    ) -> Result<Arc<dyn Any + Send + Sync>, DIError> {
        let start_time = Instant::now();

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        {
            let mut metrics = self.metrics.write();
            metrics.total_resolutions += 1;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout –æ–±—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        if context.elapsed() > self.config.max_resolution_time {
            self.record_timeout();
            return Err(DIError::ResolutionTimeout {
                type_id,
                timeout: self.config.max_resolution_time,
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É —Å—Ç–µ–∫–∞
        if context.depth() >= self.config.max_resolution_depth {
            self.record_failure();
            return Err(DIError::MaxDepthExceeded {
                max_depth: self.config.max_resolution_depth,
                current_depth: context.depth(),
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if context.has_cycle(type_id) {
            self.record_failure();
            return Err(DIError::CircularDependency {
                dependency_chain: context.resolution_stack.clone(),
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—Å–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
        if self.config.enable_caching {
            if let Some(cached) = self.try_get_from_cache(type_id) {
                self.record_cache_hit();
                self.record_success(start_time);

                if self.config.verbose_logging {
                    debug!(
                        "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω {:?} –∏–∑ –∫—ç—à–∞ –∑–∞ {:?}",
                        type_id,
                        start_time.elapsed()
                    );
                }

                return Ok(cached);
            } else {
                self.record_cache_miss();
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –≤ —Å—Ç–µ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        context.push(type_id);

        // –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–±—Ä–∏–∫—É
        let result = self.registry.with_factory(type_id, |factory_info| {
            if self.config.verbose_logging {
                debug!(
                    "üè≠ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {:?} —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É (lifetime: {:?})",
                    type_id, factory_info.lifetime
                );
            }

            // Timeout –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            let instance_start = Instant::now();

            // –í—ã–∑—ã–≤–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É - —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
            let factory_result = std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| {
                // Note: –ó–¥–µ—Å—å –Ω–∞–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ container –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ factory
                // –ù–æ —ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å. –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                // —ç—Ç–æ —Ä–µ—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ dependency injection –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ resolver
                (factory_info.factory)(
                    // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º dummy resolver
                    &crate::di::unified_container_impl::UnifiedContainer::minimal(),
                )
            }));

            let instance_duration = instance_start.elapsed();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            if instance_duration > self.config.instance_creation_timeout {
                warn!(
                    "‚è±Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ {:?} –∑–∞–Ω—è–ª–æ {:?} (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {:?})",
                    type_id, instance_duration, self.config.instance_creation_timeout
                );
            }

            match factory_result {
                Ok(Ok(instance)) => {
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–∞
                    factory_info.increment_resolution_count();

                    // –ö—ç—à–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if self.config.enable_caching
                        && factory_info.lifetime != LifetimeStrategy::Transient
                    {
                        self.cache
                            .store(type_id, instance.clone(), factory_info.lifetime);
                    }

                    Ok(instance)
                }
                Ok(Err(e)) => Err(DIError::FactoryError {
                    type_id,
                    source: Box::new(e),
                }),
                Err(panic_info) => Err(DIError::FactoryPanic {
                    type_id,
                    panic_message: format!("{:?}", panic_info),
                }),
            }
        });

        // –£–±–∏—Ä–∞–µ–º —Ç–∏–ø –∏–∑ —Å—Ç–µ–∫–∞
        context.pop();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        match result {
            Some(Ok(instance)) => {
                self.record_success(start_time);

                if self.config.verbose_logging {
                    debug!(
                        "‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä {:?} –∑–∞ {:?}",
                        type_id,
                        start_time.elapsed()
                    );
                }

                Ok(instance)
            }
            Some(Err(e)) => {
                self.record_failure();

                if self.config.verbose_logging {
                    error!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {:?}: {}", type_id, e);
                }

                Err(e)
            }
            None => {
                self.record_failure();
                let error = DIError::TypeNotRegistered { type_id };

                if self.config.verbose_logging {
                    error!("‚ùå –¢–∏–ø {:?} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", type_id);
                }

                Err(error)
            }
        }
    }

    /// –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    fn try_get_from_cache(&self, type_id: TypeId) -> Option<Arc<dyn Any + Send + Sync>> {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö lifetime —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.cache
            .get::<dyn Any>(type_id, LifetimeStrategy::Singleton)
            .or_else(|| self.cache.get::<dyn Any>(type_id, LifetimeStrategy::Scoped))
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    fn record_success(&self, start_time: Instant) {
        let duration = start_time.elapsed();
        let mut metrics = self.metrics.write();

        metrics.successful_resolutions += 1;
        metrics.total_resolution_time += duration;

        if duration > metrics.max_resolution_time {
            metrics.max_resolution_time = duration;
        }
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    fn record_failure(&self) {
        let mut metrics = self.metrics.write();
        metrics.failed_resolutions += 1;
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å timeout
    fn record_timeout(&self) {
        let mut metrics = self.metrics.write();
        metrics.timeout_count += 1;
        metrics.failed_resolutions += 1;
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å cache hit
    fn record_cache_hit(&self) {
        let mut metrics = self.metrics.write();
        metrics.cache_hits += 1;
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å cache miss
    fn record_cache_miss(&self) {
        let mut metrics = self.metrics.write();
        metrics.cache_misses += 1;
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::di::{container_cache::CacheConfig, core_traits::ServiceFactory};

    // Helper –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock factory
    fn create_mock_factory() -> ServiceFactory {
        Box::new(|_| Ok(Box::new("test_value") as Box<dyn Any + Send + Sync>))
    }

    #[test]
    fn test_resolver_creation() {
        let registry = Arc::new(ServiceRegistryImpl::default());
        let cache = Arc::new(ContainerCache::new(CacheConfig::default()));
        let config = ResolverConfig::default();

        let resolver = ServiceResolverImpl::new(registry, cache, config);
        let metrics = resolver.get_metrics();

        assert_eq!(metrics.total_resolutions, 0);
        assert_eq!(metrics.successful_resolutions, 0);
    }

    #[test]
    fn test_type_not_registered() {
        let registry = Arc::new(ServiceRegistryImpl::default());
        let cache = Arc::new(ContainerCache::new(CacheConfig::default()));
        let config = ResolverConfig::minimal();

        let resolver = ServiceResolverImpl::new(registry, cache, config);
        let type_id = TypeId::of::<String>();

        let result = resolver.resolve_type_erased(type_id);
        assert!(result.is_err());

        let metrics = resolver.get_metrics();
        assert_eq!(metrics.total_resolutions, 1);
        assert_eq!(metrics.failed_resolutions, 1);
        assert_eq!(metrics.success_rate(), 0.0);
    }

    #[test]
    fn test_can_resolve() {
        let registry = Arc::new(ServiceRegistryImpl::default());
        let cache = Arc::new(ContainerCache::new(CacheConfig::default()));
        let config = ResolverConfig::minimal();

        let resolver = ServiceResolverImpl::new(registry.clone(), cache, config);
        let type_id = TypeId::of::<String>();

        // –¢–∏–ø –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        assert!(!resolver.can_resolve(type_id));

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–∏–ø
        registry
            .register_type_erased(
                type_id,
                "String".to_string(),
                create_mock_factory(),
                LifetimeStrategy::Singleton,
            )
            .expect("Operation failed - converted from unwrap()");

        // –¢–µ–ø–µ—Ä—å —Ç–∏–ø –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω
        assert!(resolver.can_resolve(type_id));
    }

    #[test]
    fn test_metrics_reset() {
        let registry = Arc::new(ServiceRegistryImpl::default());
        let cache = Arc::new(ContainerCache::new(CacheConfig::default()));
        let config = ResolverConfig::minimal();

        let resolver = ServiceResolverImpl::new(registry, cache, config);
        let type_id = TypeId::of::<String>();

        // –î–µ–ª–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        let _ = resolver.resolve_type_erased(type_id);

        let metrics_before = resolver.get_metrics();
        assert_eq!(metrics_before.total_resolutions, 1);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        resolver.reset_metrics();

        let metrics_after = resolver.get_metrics();
        assert_eq!(metrics_after.total_resolutions, 0);
    }

    #[test]
    fn test_detailed_report() {
        let registry = Arc::new(ServiceRegistryImpl::default());
        let cache = Arc::new(ContainerCache::new(CacheConfig::default()));
        let config = ResolverConfig::minimal();

        let resolver = ServiceResolverImpl::new(registry, cache, config);

        let report = resolver.get_detailed_report();
        assert!(report.contains("Service Resolver Detailed Report"));
        assert!(report.contains("Total resolutions: 0"));
    }

    #[test]
    fn test_resolver_validation() {
        let registry = Arc::new(ServiceRegistryImpl::default());
        let cache = Arc::new(ContainerCache::new(CacheConfig::default()));
        let config = ResolverConfig::minimal();

        let resolver = ServiceResolverImpl::new(registry, cache, config);

        // –ù–æ–≤—ã–π resolver –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
        assert!(resolver.validate().is_ok());
    }
}
