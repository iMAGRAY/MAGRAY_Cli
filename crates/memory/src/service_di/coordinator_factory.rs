//! Coordinator Factory Module - Single Responsibility –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
//! 
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É orchestration –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤.
//! –ü—Ä–∏–º–µ–Ω—è–µ—Ç Factory pattern, Dependency Inversion –∏ Open/Closed –ø—Ä–∏–Ω—Ü–∏–ø—ã.

use anyhow::{Context, Result};
use std::sync::Arc;
use tracing::{debug, info, warn};

// Import traits –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
use crate::orchestration::traits::EmbeddingCoordinator as EmbeddingCoordinatorTrait;

use crate::{
    cache_interface::EmbeddingCacheInterface,
    di::unified_container::UnifiedDIContainer as DIContainer,
    health::HealthMonitor,
    storage::VectorStore,
    gpu_accelerated::GpuBatchProcessor,
    orchestration::{
        EmbeddingCoordinator,
        SearchCoordinator,
        HealthManager,
        ResourceController,
    },
};

use crate::orchestration::Coordinator;

/// Trait –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ (Dependency Inversion)
pub trait CoordinatorFactory {
    async fn create_embedding_coordinator(&self, container: &DIContainer) -> Result<Arc<EmbeddingCoordinator>>;
    async fn create_search_coordinator(&self, container: &DIContainer, embedding_coordinator: &Arc<EmbeddingCoordinator>) -> Result<Arc<SearchCoordinator>>;
    async fn create_health_manager(&self, container: &DIContainer) -> Result<Arc<HealthManager>>;
    async fn create_resource_controller(&self, container: &DIContainer) -> Result<Arc<ResourceController>>;
}

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
// NOTE: Debug trait –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∏–∑-–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –±–µ–∑ Debug
pub struct OrchestrationCoordinators {
    pub embedding_coordinator: Option<Arc<EmbeddingCoordinator>>,
    pub search_coordinator: Option<Arc<SearchCoordinator>>,
    pub health_manager: Option<Arc<HealthManager>>,
    pub resource_controller: Option<Arc<ResourceController>>,
}

impl OrchestrationCoordinators {
    pub fn empty() -> Self {
        Self {
            embedding_coordinator: None,
            search_coordinator: None,
            health_manager: None,
            resource_controller: None,
        }
    }

    pub fn count_active(&self) -> usize {
        let mut count = 0;
        if self.embedding_coordinator.is_some() { count += 1; }
        if self.search_coordinator.is_some() { count += 1; }
        if self.health_manager.is_some() { count += 1; }
        if self.resource_controller.is_some() { count += 1; }
        count
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    pub async fn initialize_all(&self) -> Result<()> {
        info!("‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");

        let mut initialization_tasks = vec![];

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if let Some(ref embedding_coordinator) = self.embedding_coordinator {
            let coordinator = embedding_coordinator.clone();
            initialization_tasks.push(tokio::spawn(async move {
                tokio::time::timeout(
                    std::time::Duration::from_secs(60), 
                    coordinator.initialize()
                ).await
                    .map_err(|_| anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EmbeddingCoordinator"))?
            }));
        }

        if let Some(ref search_coordinator) = self.search_coordinator {
            let coordinator = search_coordinator.clone();
            initialization_tasks.push(tokio::spawn(async move {
                tokio::time::timeout(
                    std::time::Duration::from_secs(60),
                    coordinator.initialize()
                ).await
                    .map_err(|_| anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SearchCoordinator"))?
            }));
        }

        if let Some(ref health_manager) = self.health_manager {
            let manager = health_manager.clone();
            initialization_tasks.push(tokio::spawn(async move {
                tokio::time::timeout(
                    std::time::Duration::from_secs(30),
                    manager.initialize()
                ).await
                    .map_err(|_| anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HealthManager"))?
            }));
        }

        if let Some(ref resource_controller) = self.resource_controller {
            let controller = resource_controller.clone();
            initialization_tasks.push(tokio::spawn(async move {
                tokio::time::timeout(
                    std::time::Duration::from_secs(30),
                    controller.initialize()
                ).await
                    .map_err(|_| anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ResourceController"))?
            }));
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        for task in initialization_tasks {
            match task.await {
                Ok(Ok(_)) => {
                    // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                }
                Ok(Err(e)) => {
                    return Err(e);
                }
                Err(e) => {
                    return Err(anyhow::anyhow!("Panic –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", e));
                }
            }
        }

        info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        Ok(())
    }

    /// Shutdown –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    pub async fn shutdown_all(&self) -> Result<()> {
        info!("üîå Shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");

        let mut shutdown_tasks = vec![];

        // –ó–∞–ø—É—Å–∫–∞–µ–º shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if let Some(ref embedding_coordinator) = self.embedding_coordinator {
            let coordinator = embedding_coordinator.clone();
            shutdown_tasks.push(tokio::spawn(async move {
                coordinator.shutdown().await
            }));
        }

        if let Some(ref search_coordinator) = self.search_coordinator {
            let coordinator = search_coordinator.clone();
            shutdown_tasks.push(tokio::spawn(async move {
                coordinator.shutdown().await
            }));
        }

        if let Some(ref health_manager) = self.health_manager {
            let manager = health_manager.clone();
            shutdown_tasks.push(tokio::spawn(async move {
                manager.shutdown().await
            }));
        }

        if let Some(ref resource_controller) = self.resource_controller {
            let controller = resource_controller.clone();
            shutdown_tasks.push(tokio::spawn(async move {
                controller.shutdown().await
            }));
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö shutdown –æ–ø–µ—Ä–∞—Ü–∏–π
        for task in shutdown_tasks {
            if let Err(e) = task.await {
                tracing::warn!("–û—à–∏–±–∫–∞ shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", e);
            }
        }

        info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    pub async fn check_readiness(&self) -> Result<()> {
        info!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");

        let mut coordinator_statuses = Vec::new();

        if let Some(ref embedding_coordinator) = self.embedding_coordinator {
            let ready = embedding_coordinator.is_ready().await;
            coordinator_statuses.push(("EmbeddingCoordinator", ready));
        }

        if let Some(ref search_coordinator) = self.search_coordinator {
            let ready = search_coordinator.is_ready().await;
            coordinator_statuses.push(("SearchCoordinator", ready));
        }

        if let Some(ref health_manager) = self.health_manager {
            let ready = health_manager.is_ready().await;
            coordinator_statuses.push(("HealthManager", ready));
        }

        if let Some(ref resource_controller) = self.resource_controller {
            let ready = resource_controller.is_ready().await;
            coordinator_statuses.push(("ResourceController", ready));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã
        for (name, ready) in &coordinator_statuses {
            if *ready {
                debug!("‚úÖ {} –≥–æ—Ç–æ–≤", name);
            } else {
                return Err(anyhow::anyhow!("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä {} –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", name));
            }
        }

        info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ");
        Ok(())
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ (alias –¥–ª—è initialize_all)
    pub async fn initialize(&self) -> Result<()> {
        self.initialize_all().await
    }

    /// Shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ (alias –¥–ª—è shutdown_all)
    pub async fn shutdown(&self) -> Result<()> {
        self.shutdown_all().await
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    pub async fn check_health(&self) -> Result<crate::health::SystemHealthStatus> {
        if let Some(health_manager) = &self.health_manager {
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default health status
            Ok(crate::health::SystemHealthStatus::default())
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π health status –µ—Å–ª–∏ –Ω–µ—Ç health manager
            Ok(crate::health::SystemHealthStatus::default())
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É cache –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    pub async fn get_cache_stats(&self) -> (u64, u64, u64) {
        let mut total_hits = 0;
        let mut total_misses = 0; 
        let mut total_size = 0;

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç embedding –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        if let Some(embedding_coord) = &self.embedding_coordinator {
            let (hits, misses, size) = embedding_coord.cache_stats().await;
            total_hits += hits;
            total_misses += misses;
            total_size += size;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç search –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        if let Some(search_coord) = &self.search_coordinator {
            let stats = search_coord.metrics().await;
            // –í –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            total_hits += 0;
            total_misses += 0;
        }

        (total_hits, total_misses, total_size)
    }
}

/// Production-ready factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
pub struct ProductionCoordinatorFactory {
    pub create_embedding: bool,
    pub create_search: bool,
    pub create_health: bool,
    pub create_resources: bool,
}

impl Default for ProductionCoordinatorFactory {
    fn default() -> Self {
        Self {
            create_embedding: true,
            create_search: true,
            create_health: true,
            create_resources: true,
        }
    }
}

impl ProductionCoordinatorFactory {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn minimal() -> Self {
        Self {
            create_embedding: false,
            create_search: false,
            create_health: false,
            create_resources: false,
        }
    }

    pub fn custom(embedding: bool, search: bool, health: bool, resources: bool) -> Self {
        Self {
            create_embedding: embedding,
            create_search: search,
            create_health: health,
            create_resources: resources,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    pub async fn create_all_coordinators(&self, container: &DIContainer) -> Result<OrchestrationCoordinators> {
        info!("üéØ –°–æ–∑–¥–∞–Ω–∏–µ orchestration –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");

        let embedding_coordinator = if self.create_embedding {
            Some(self.create_embedding_coordinator(container).await
                .with_context(|| "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è EmbeddingCoordinator")?)
        } else {
            None
        };
        
        let search_coordinator = if self.create_search {
            match &embedding_coordinator {
                Some(embedding_coord) => {
                    Some(self.create_search_coordinator(container, embedding_coord).await
                        .with_context(|| "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SearchCoordinator")?)
                }
                None => {
                    warn!("‚ö†Ô∏è SearchCoordinator —Ç—Ä–µ–±—É–µ—Ç EmbeddingCoordinator, –Ω–æ –æ–Ω –Ω–µ —Å–æ–∑–¥–∞–Ω");
                    None
                }
            }
        } else {
            None
        };
        
        let health_manager = if self.create_health {
            Some(self.create_health_manager(container).await
                .with_context(|| "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HealthManager")?)
        } else {
            None
        };
        
        let resource_controller = if self.create_resources {
            Some(self.create_resource_controller(container).await
                .with_context(|| "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ResourceController")?)
        } else {
            None
        };

        let coordinators = OrchestrationCoordinators {
            embedding_coordinator,
            search_coordinator,
            health_manager,
            resource_controller,
        };

        info!("‚úÖ –°–æ–∑–¥–∞–Ωo {} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤", coordinators.count_active());
        
        Ok(coordinators)
    }

    /// –°–æ–∑–¥–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã (–∞–ª–∏–∞—Å –¥–ª—è create_all_coordinators)
    /// DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_all_coordinators —Å —è–≤–Ω—ã–º DI container
    pub async fn create_coordinators(&self) -> Result<OrchestrationCoordinators> {
        warn!("‚ö†Ô∏è DEPRECATED: create_coordinators() —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_all_coordinators() —Å —è–≤–Ω—ã–º DI container");
        
        // –î–ª—è facade –º—ã —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å proper error handling
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑–≤–Ω–µ
        let container = crate::di_container::DIContainer::default_container()
            .with_context(|| "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π DI container –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤")?;
            
        self.create_all_coordinators(&container).await
            .with_context(|| "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º")
    }

    /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
    pub fn with_container(_container: DIContainer) -> Self {
        Self {
            create_embedding: true,
            create_search: true,
            create_health: true,
            create_resources: true,
        }
    }
}

impl CoordinatorFactory for ProductionCoordinatorFactory {
    /// –°–æ–∑–¥–∞—Ç—å embedding coordinator —Å proper error handling
    async fn create_embedding_coordinator(&self, container: &DIContainer) -> Result<Arc<EmbeddingCoordinator>> {
        debug!("üî§ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ EmbeddingCoordinator...");
        
        let gpu_processor = container.resolve::<GpuBatchProcessor>()
            .with_context(|| "–ù–µ —É–¥–∞–ª–æ—Å—å resolve GpuBatchProcessor –∏–∑ DI container")?;
        
        // –°–æ–∑–¥–∞–µ–º cache —Å proper error handling
        let cache_path = std::env::temp_dir().join("embedding_cache");
        let cache_config = crate::cache_lru::CacheConfig::default();
        
        let cache = Arc::new(
            crate::cache_lru::EmbeddingCacheLRU::new(cache_path.clone(), cache_config)
                .with_context(|| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è embedding cache –ø–æ –ø—É—Ç–∏: {:?}", cache_path))?
        ) as Arc<dyn EmbeddingCacheInterface>;
        
        let coordinator = Arc::new(EmbeddingCoordinator::new(gpu_processor, cache));
        debug!("‚úÖ EmbeddingCoordinator —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
        
        Ok(coordinator)
    }

    /// –°–æ–∑–¥–∞—Ç—å search coordinator —Å dependency validation
    async fn create_search_coordinator(
        &self, 
        container: &DIContainer, 
        embedding_coordinator: &Arc<EmbeddingCoordinator>
    ) -> Result<Arc<SearchCoordinator>> {
        debug!("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ SearchCoordinator...");
        
        let store = container.resolve::<VectorStore>()
            .with_context(|| "–ù–µ —É–¥–∞–ª–æ—Å—å resolve VectorStore –∏–∑ DI container")?;
        
        let coordinator = Arc::new(SearchCoordinator::new_production(
            store,
            embedding_coordinator.clone(),
            64,  // max concurrent searches
            2000 // cache size
        ));
        
        debug!("‚úÖ SearchCoordinator —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å max_concurrent=64, cache_size=2000");
        Ok(coordinator)
    }

    /// –°–æ–∑–¥–∞—Ç—å health manager —Å error handling
    async fn create_health_manager(&self, container: &DIContainer) -> Result<Arc<HealthManager>> {
        debug!("üè• –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ HealthManager...");
        
        let health_monitor = container.resolve::<HealthMonitor>()
            .with_context(|| "–ù–µ —É–¥–∞–ª–æ—Å—å resolve HealthMonitor –∏–∑ DI container")?;
        
        let manager = Arc::new(HealthManager::new(health_monitor));
        debug!("‚úÖ HealthManager —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
        
        Ok(manager)
    }

    /// –°–æ–∑–¥–∞—Ç—å resource controller —Å validation
    async fn create_resource_controller(&self, container: &DIContainer) -> Result<Arc<ResourceController>> {
        debug!("‚ö° –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ ResourceController...");
        
        let resource_manager = container.resolve::<parking_lot::RwLock<crate::resource_manager::ResourceManager>>()
            .with_context(|| "–ù–µ —É–¥–∞–ª–æ—Å—å resolve ResourceManager –∏–∑ DI container")?;
        
        let controller = Arc::new(ResourceController::new_production(resource_manager));
        debug!("‚úÖ ResourceController —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
        
        Ok(controller)
    }
}

/// Test factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ (Open/Closed)
pub struct TestCoordinatorFactory;

impl CoordinatorFactory for TestCoordinatorFactory {
    async fn create_embedding_coordinator(&self, _container: &DIContainer) -> Result<Arc<EmbeddingCoordinator>> {
        // –í —Ç–µ—Å—Ç–∞—Ö –º–æ–∂–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å mock –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
        Err(anyhow::anyhow!("Test coordinator factory - not implemented"))
    }

    async fn create_search_coordinator(&self, _container: &DIContainer, _embedding_coordinator: &Arc<EmbeddingCoordinator>) -> Result<Arc<SearchCoordinator>> {
        Err(anyhow::anyhow!("Test coordinator factory - not implemented"))
    }

    async fn create_health_manager(&self, _container: &DIContainer) -> Result<Arc<HealthManager>> {
        Err(anyhow::anyhow!("Test coordinator factory - not implemented"))
    }

    async fn create_resource_controller(&self, _container: &DIContainer) -> Result<Arc<ResourceController>> {
        Err(anyhow::anyhow!("Test coordinator factory - not implemented"))
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_coordinator_factory_creation() {
        let factory = ProductionCoordinatorFactory::new();
        assert!(factory.create_embedding);
        assert!(factory.create_search);

        let minimal = ProductionCoordinatorFactory::minimal();
        assert!(!minimal.create_embedding);
        assert!(!minimal.create_search);

        let custom = ProductionCoordinatorFactory::custom(true, false, true, false);
        assert!(custom.create_embedding);
        assert!(!custom.create_search);
        assert!(custom.create_health);
        assert!(!custom.create_resources);
    }

    #[test]
    fn test_empty_coordinators() {
        let coords = OrchestrationCoordinators::empty();
        assert_eq!(coords.count_active(), 0);
        assert!(coords.embedding_coordinator.is_none());
        assert!(coords.search_coordinator.is_none());
    }
}