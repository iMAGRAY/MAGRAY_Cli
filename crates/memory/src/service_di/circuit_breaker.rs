//! Circuit Breaker Module - Single Responsibility –¥–ª—è resilience patterns
//!
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ circuit breaker –ª–æ–≥–∏–∫—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é.
//! –ü—Ä–∏–º–µ–Ω—è–µ—Ç Single Responsibility –∏ State pattern.

use anyhow::Result;
use std::time::{Duration, Instant};
use tokio::sync::RwLock;
use tracing::{debug, error, info, warn};

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breaker
#[derive(Debug, Clone, PartialEq)]
pub enum CircuitBreakerState {
    /// –ó–∞–∫—Ä—ã—Ç - –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    Closed,
    /// –û—Ç–∫—Ä—ã—Ç - –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è
    Open,
    /// –ü–æ–ª—É–æ—Ç–∫—Ä—ã—Ç - –ø—Ä–æ–±–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    HalfOpen,
}

impl Default for CircuitBreakerState {
    fn default() -> Self {
        CircuitBreakerState::Closed
    }
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Circuit Breaker
#[derive(Debug, Clone)]
pub struct CircuitBreakerConfig {
    /// –ü–æ—Ä–æ–≥ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
    pub failure_threshold: u32,
    /// –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ HalfOpen
    pub recovery_timeout: Duration,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    pub operation_timeout: Duration,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ HalfOpen —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    pub half_open_max_calls: u32,
}

impl Default for CircuitBreakerConfig {
    fn default() -> Self {
        Self {
            failure_threshold: 5,
            recovery_timeout: Duration::from_secs(60),
            operation_timeout: Duration::from_secs(30),
            half_open_max_calls: 3,
        }
    }
}

impl CircuitBreakerConfig {
    pub fn production() -> Self {
        Self {
            failure_threshold: 5,
            recovery_timeout: Duration::from_secs(60),
            operation_timeout: Duration::from_secs(30),
            half_open_max_calls: 3,
        }
    }

    pub fn minimal() -> Self {
        Self {
            failure_threshold: 3,
            recovery_timeout: Duration::from_secs(10),
            operation_timeout: Duration::from_secs(5),
            half_open_max_calls: 2,
        }
    }

    pub fn tolerant() -> Self {
        Self {
            failure_threshold: 10,
            recovery_timeout: Duration::from_secs(120),
            operation_timeout: Duration::from_secs(60),
            half_open_max_calls: 5,
        }
    }
}

/// –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breaker
#[derive(Debug, Clone)]
struct CircuitBreakerInternalState {
    state: CircuitBreakerState,
    failure_count: u32,
    success_count: u32,
    last_failure_time: Option<Instant>,
    last_success_time: Option<Instant>,
    half_open_calls: u32,
}

impl Default for CircuitBreakerInternalState {
    fn default() -> Self {
        Self {
            state: CircuitBreakerState::Closed,
            failure_count: 0,
            success_count: 0,
            last_failure_time: None,
            last_success_time: None,
            half_open_calls: 0,
        }
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Circuit Breaker
#[derive(Debug, Clone)]
pub struct CircuitBreakerStats {
    pub state: CircuitBreakerState,
    pub total_failures: u32,
    pub total_successes: u32,
    pub state_transitions: u32,
    pub last_failure_time: Option<Instant>,
    pub last_success_time: Option<Instant>,
    pub time_in_current_state: Duration,
}

/// Production-ready Circuit Breaker
pub struct CircuitBreaker {
    config: CircuitBreakerConfig,
    internal_state: RwLock<CircuitBreakerInternalState>,
    stats: RwLock<CircuitBreakerStats>,
    state_entered_at: RwLock<Instant>,
}

impl CircuitBreaker {
    pub fn new(config: CircuitBreakerConfig) -> Self {
        let now = Instant::now();
        Self {
            config,
            internal_state: RwLock::new(CircuitBreakerInternalState::default()),
            stats: RwLock::new(CircuitBreakerStats {
                state: CircuitBreakerState::Closed,
                total_failures: 0,
                total_successes: 0,
                state_transitions: 0,
                last_failure_time: None,
                last_success_time: None,
                time_in_current_state: Duration::from_secs(0),
            }),
            state_entered_at: RwLock::new(now),
        }
    }

    pub fn with_production_config() -> Self {
        Self::new(CircuitBreakerConfig::production())
    }

    pub fn with_minimal_config() -> Self {
        Self::new(CircuitBreakerConfig::minimal())
    }

    /// Alias –¥–ª—è with_production_config() –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    pub fn new_production() -> Self {
        Self::with_production_config()
    }

    /// Alias –¥–ª—è with_minimal_config() –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    pub fn new_minimal() -> Self {
        Self::with_minimal_config()
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
    pub async fn check_and_allow_operation(&self) -> Result<()> {
        let mut state = self.internal_state.write().await;

        match state.state {
            CircuitBreakerState::Closed => {
                // –û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
                debug!("Circuit breaker –∑–∞–∫—Ä—ã—Ç - –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞");
                Ok(())
            }
            CircuitBreakerState::Open => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ HalfOpen
                if let Some(last_failure) = state.last_failure_time {
                    if last_failure.elapsed() >= self.config.recovery_timeout {
                        self.transition_to_half_open(&mut state).await;
                        debug!("Circuit breaker –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ HalfOpen - –ø—Ä–æ–±–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞");
                        Ok(())
                    } else {
                        error!("üö´ Circuit breaker –æ—Ç–∫—Ä—ã—Ç - –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
                        Err(anyhow::anyhow!(
                            "Circuit breaker –æ—Ç–∫—Ä—ã—Ç - –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                        ))
                    }
                } else {
                    // –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ HalfOpen
                    self.transition_to_half_open(&mut state).await;
                    Ok(())
                }
            }
            CircuitBreakerState::HalfOpen => {
                // –†–∞–∑—Ä–µ—à–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                if state.half_open_calls < self.config.half_open_max_calls {
                    state.half_open_calls += 1;
                    debug!(
                        "Circuit breaker –≤ HalfOpen - –ø—Ä–æ–±–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è {} —Ä–∞–∑—Ä–µ—à–µ–Ω–∞",
                        state.half_open_calls
                    );
                    Ok(())
                } else {
                    warn!("Circuit breaker –≤ HalfOpen - –ª–∏–º–∏—Ç –ø—Ä–æ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω");
                    Err(anyhow::anyhow!(
                        "Circuit breaker –≤ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –ª–∏–º–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω"
                    ))
                }
            }
        }
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    pub async fn record_success(&self) {
        let mut state = self.internal_state.write().await;
        let mut stats = self.stats.write().await;

        state.failure_count = 0;
        state.success_count += 1;
        state.last_success_time = Some(Instant::now());

        stats.total_successes += 1;
        stats.last_success_time = state.last_success_time;

        match state.state {
            CircuitBreakerState::HalfOpen => {
                // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—Ö–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è?
                if state.success_count >= self.config.half_open_max_calls {
                    self.transition_to_closed(&mut state, &mut stats).await;
                    info!("üîÑ Circuit breaker –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");
                }
            }
            CircuitBreakerState::Open => {
                // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –Ω–æ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ - –∑–∞–∫—Ä—ã–≤–∞–µ–º
                warn!("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Open - –∑–∞–∫—Ä—ã–≤–∞–µ–º circuit breaker");
                self.transition_to_closed(&mut state, &mut stats).await;
            }
            CircuitBreakerState::Closed => {
                debug!("Circuit breaker –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏");
            }
        }
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    pub async fn record_failure(&self) {
        let mut state = self.internal_state.write().await;
        let mut stats = self.stats.write().await;

        state.failure_count += 1;
        state.success_count = 0;
        state.last_failure_time = Some(Instant::now());

        stats.total_failures += 1;
        stats.last_failure_time = state.last_failure_time;

        match state.state {
            CircuitBreakerState::Closed => {
                if state.failure_count >= self.config.failure_threshold {
                    self.transition_to_open(&mut state, &mut stats).await;
                    error!(
                        "üö´ Circuit breaker –æ—Ç–∫—Ä—ã—Ç –ø–æ—Å–ª–µ {} –Ω–µ—É–¥–∞—á",
                        state.failure_count
                    );
                }
            }
            CircuitBreakerState::HalfOpen => {
                // –õ—é–±–∞—è –Ω–µ—É–¥–∞—á–∞ –≤ HalfOpen –≤–µ–¥–µ—Ç –∫ Open
                self.transition_to_open(&mut state, &mut stats).await;
                error!("üö´ Circuit breaker –æ—Ç–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–∏ –≤ HalfOpen —Å–æ—Å—Ç–æ—è–Ω–∏–∏");
            }
            CircuitBreakerState::Open => {
                debug!("Circuit breaker –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–π –Ω–µ—É–¥–∞—á–∏");
            }
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pub async fn get_state(&self) -> CircuitBreakerState {
        let state = self.internal_state.read().await;
        state.state.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    pub async fn get_stats(&self) -> CircuitBreakerStats {
        let mut stats = self.stats.write().await;
        let state_entered_at = self.state_entered_at.read().await;
        stats.time_in_current_state = state_entered_at.elapsed();
        stats.clone()
    }

    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å circuit breaker (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    pub async fn reset(&self) {
        let mut state = self.internal_state.write().await;
        let mut stats = self.stats.write().await;

        *state = CircuitBreakerInternalState::default();
        stats.state = CircuitBreakerState::Closed;
        stats.state_transitions += 1;

        *self.state_entered_at.write().await = Instant::now();

        info!("Circuit breaker —Å–±—Ä–æ—à–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Closed");
    }

    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
    pub async fn force_open(&self) {
        let mut state = self.internal_state.write().await;
        let mut stats = self.stats.write().await;

        self.transition_to_open(&mut state, &mut stats).await;
        error!("üö® Circuit breaker –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç!");
    }

    // === Private helper methods ===

    async fn transition_to_closed(
        &self,
        state: &mut CircuitBreakerInternalState,
        stats: &mut CircuitBreakerStats,
    ) {
        state.state = CircuitBreakerState::Closed;
        state.failure_count = 0;
        state.success_count = 0;
        state.half_open_calls = 0;

        stats.state = CircuitBreakerState::Closed;
        stats.state_transitions += 1;

        *self.state_entered_at.write().await = Instant::now();
    }

    async fn transition_to_open(
        &self,
        state: &mut CircuitBreakerInternalState,
        stats: &mut CircuitBreakerStats,
    ) {
        state.state = CircuitBreakerState::Open;
        state.success_count = 0;
        state.half_open_calls = 0;

        stats.state = CircuitBreakerState::Open;
        stats.state_transitions += 1;

        *self.state_entered_at.write().await = Instant::now();
    }

    async fn transition_to_half_open(&self, state: &mut CircuitBreakerInternalState) {
        state.state = CircuitBreakerState::HalfOpen;
        state.half_open_calls = 0;
        state.success_count = 0;

        let mut stats = self.stats.write().await;
        stats.state = CircuitBreakerState::HalfOpen;
        stats.state_transitions += 1;

        *self.state_entered_at.write().await = Instant::now();
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    pub async fn get_state_description(&self) -> String {
        let state = self.internal_state.read().await;
        let stats = self.get_stats().await;

        match state.state {
            CircuitBreakerState::Closed => {
                format!(
                    "‚úÖ –ó–ê–ö–†–´–¢: {} –Ω–µ—É–¥–∞—á –∏–∑ {} –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö",
                    state.failure_count, self.config.failure_threshold
                )
            }
            CircuitBreakerState::Open => {
                let time_until_recovery = self
                    .config
                    .recovery_timeout
                    .saturating_sub(stats.time_in_current_state);
                format!("üö´ –û–¢–ö–†–´–¢: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {:?}", time_until_recovery)
            }
            CircuitBreakerState::HalfOpen => {
                format!(
                    "üîÑ –ü–û–õ–£–û–¢–ö–†–´–¢: {} –∏–∑ {} –ø—Ä–æ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                    state.half_open_calls, self.config.half_open_max_calls
                )
            }
        }
    }
}

impl Default for CircuitBreaker {
    fn default() -> Self {
        Self::new(CircuitBreakerConfig::default())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tokio::time::{sleep, Duration};

    #[tokio::test]
    async fn test_circuit_breaker_closed_state() {
        let cb = CircuitBreaker::with_minimal_config();

        // –í –∑–∞–∫—Ä—ã—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
        assert!(cb.check_and_allow_operation().await.is_ok());
        assert_eq!(cb.get_state().await, CircuitBreakerState::Closed);
    }

    #[tokio::test]
    async fn test_circuit_breaker_failure_threshold() {
        let cb = CircuitBreaker::with_minimal_config(); // threshold = 3

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–∏, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥
        cb.record_failure().await;
        cb.record_failure().await;
        assert_eq!(cb.get_state().await, CircuitBreakerState::Closed);

        // –ü—Ä–µ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è
        cb.record_failure().await;
        assert_eq!(cb.get_state().await, CircuitBreakerState::Open);
    }

    #[tokio::test]
    async fn test_circuit_breaker_recovery() {
        let mut config = CircuitBreakerConfig::minimal();
        config.recovery_timeout = Duration::from_millis(100);
        let cb = CircuitBreaker::new(config);

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º circuit breaker
        for _ in 0..3 {
            cb.record_failure().await;
        }
        assert_eq!(cb.get_state().await, CircuitBreakerState::Open);

        // –û–ø–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è
        assert!(cb.check_and_allow_operation().await.is_err());

        // –ñ–¥–µ–º recovery timeout
        sleep(Duration::from_millis(150)).await;

        // –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –≤ HalfOpen
        assert!(cb.check_and_allow_operation().await.is_ok());
        assert_eq!(cb.get_state().await, CircuitBreakerState::HalfOpen);
    }

    #[tokio::test]
    async fn test_circuit_breaker_half_open_success() {
        let cb = CircuitBreaker::with_minimal_config();

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º circuit breaker
        for _ in 0..3 {
            cb.record_failure().await;
        }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ HalfOpen –¥–ª—è —Ç–µ—Å—Ç–∞
        cb.reset().await;
        let mut state = cb.internal_state.write().await;
        state.state = CircuitBreakerState::HalfOpen;
        drop(state);

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—Ö–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        for _ in 0..2 {
            // half_open_max_calls = 2 –¥–ª—è minimal config
            cb.record_success().await;
        }

        assert_eq!(cb.get_state().await, CircuitBreakerState::Closed);
    }

    #[tokio::test]
    async fn test_circuit_breaker_stats() {
        let cb = CircuitBreaker::with_minimal_config();

        cb.record_success().await;
        cb.record_failure().await;
        cb.record_success().await;

        let stats = cb.get_stats().await;
        assert_eq!(stats.total_successes, 2);
        assert_eq!(stats.total_failures, 1);
        assert!(stats.last_success_time.is_some());
        assert!(stats.last_failure_time.is_some());
    }

    #[tokio::test]
    async fn test_circuit_breaker_force_operations() {
        let cb = CircuitBreaker::with_minimal_config();

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º
        cb.force_open().await;
        assert_eq!(cb.get_state().await, CircuitBreakerState::Open);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º
        cb.reset().await;
        assert_eq!(cb.get_state().await, CircuitBreakerState::Closed);
    }

    #[tokio::test]
    async fn test_state_description() {
        let cb = CircuitBreaker::with_minimal_config();

        let desc_closed = cb.get_state_description().await;
        assert!(desc_closed.contains("–ó–ê–ö–†–´–¢"));

        cb.force_open().await;
        let desc_open = cb.get_state_description().await;
        assert!(desc_open.contains("–û–¢–ö–†–´–¢"));
    }
}
