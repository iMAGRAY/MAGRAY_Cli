//! Operation Executor Module - Single Responsibility –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
//! 
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å –æ–ø–µ—Ä–∞—Ü–∏–π:
//! insert, search, batch operations, backup/restore.
//! –ü—Ä–∏–º–µ–Ω—è–µ—Ç Command pattern –∏ Dependency Inversion.

use anyhow::Result;
use async_trait::async_trait;
use std::{sync::Arc, time::{Duration, Instant}};
use tracing::{debug, info, warn, error};
use tokio::sync::Semaphore;

use crate::{
    di_container::DIContainer,
    storage::VectorStore,
    types::{Record, Layer, SearchOptions},
    metrics::MetricsCollector,
    batch_manager::BatchOperationManager,
    backup::BackupManager,
    orchestration::{
        EmbeddingCoordinator as EmbeddingCoordinatorImpl,
        SearchCoordinator as SearchCoordinatorImpl,
        RetryHandler, RetryPolicy, RetryResult,
    },
};

use common::OperationTimer;

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á–µ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏
#[derive(Debug, Clone)]
pub struct BatchInsertResult {
    pub inserted: usize,
    pub failed: usize,
    pub errors: Vec<String>,
    pub total_time_ms: u64,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
#[derive(Debug, Clone)]
pub struct BatchSearchResult {
    pub queries: Vec<String>,
    pub results: Vec<Vec<Record>>,
    pub total_time_ms: u64,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
#[derive(Debug, Clone)]
pub struct OperationConfig {
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ concurrent –æ–ø–µ—Ä–∞—Ü–∏–π
    pub max_concurrent_operations: usize,
    /// Timeout –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
    pub operation_timeout: Duration,
    /// –ü–æ–ª–∏—Ç–∏–∫–∞ retry
    pub retry_policy: RetryPolicy,
    /// –í–∫–ª—é—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
    pub enable_metrics: bool,
}

impl Default for OperationConfig {
    fn default() -> Self {
        Self {
            max_concurrent_operations: 100,
            operation_timeout: Duration::from_secs(30),
            retry_policy: RetryPolicy::default(),
            enable_metrics: true,
        }
    }
}

impl OperationConfig {
    pub fn production() -> Self {
        Self {
            max_concurrent_operations: 100,
            operation_timeout: Duration::from_secs(30),
            retry_policy: RetryPolicy::default(),
            enable_metrics: true,
        }
    }

    pub fn minimal() -> Self {
        Self {
            max_concurrent_operations: 10,
            operation_timeout: Duration::from_secs(5),
            retry_policy: RetryPolicy::fast(),
            enable_metrics: false,
        }
    }
}

/// Trait –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (Dependency Inversion)
#[async_trait]
pub trait OperationExecutor: Send + Sync {
    async fn insert(&self, record: Record) -> Result<()>;
    async fn search(&self, query: &str, layer: Layer, options: SearchOptions) -> Result<Vec<Record>>;
    async fn batch_insert(&self, records: Vec<Record>) -> Result<BatchInsertResult>;
    async fn batch_search(&self, queries: Vec<String>, layer: Layer, options: SearchOptions) -> Result<BatchSearchResult>;
    async fn update(&self, record: Record) -> Result<()>;
    async fn delete(&self, id: &uuid::Uuid, layer: Layer) -> Result<()>;
}

/// Production implementation –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏
pub struct ProductionOperationExecutor {
    /// DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container: Arc<DIContainer>,
    /// Embedding coordinator
    embedding_coordinator: Option<Arc<EmbeddingCoordinatorImpl>>,
    /// Search coordinator  
    search_coordinator: Option<Arc<SearchCoordinatorImpl>>,
    /// Retry handler
    retry_handler: RetryHandler,
    /// Concurrency limiter
    operation_limiter: Arc<Semaphore>,
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: OperationConfig,
}

impl ProductionOperationExecutor {
    pub fn new(
        container: Arc<DIContainer>,
        embedding_coordinator: Option<Arc<EmbeddingCoordinatorImpl>>,
        search_coordinator: Option<Arc<SearchCoordinatorImpl>>,
        config: OperationConfig,
    ) -> Self {
        let retry_handler = RetryHandler::new(config.retry_policy.clone());
        let operation_limiter = Arc::new(Semaphore::new(config.max_concurrent_operations));
        
        Self {
            container,
            embedding_coordinator,
            search_coordinator,
            retry_handler,
            operation_limiter,
            config,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å minimal executor –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub fn new_minimal(container: Arc<DIContainer>) -> Self {
        Self::new(
            container,
            None,
            None,
            OperationConfig::minimal(),
        )
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π fallback embedding –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–∫–æ–≥–¥–∞ –Ω–µ—Ç GPU processor)
    fn generate_fallback_embedding(&self, text: &str) -> Vec<f32> {
        let dimension = 1024; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        let mut embedding = vec![0.0; dimension];
        let hash = text.chars().fold(0u32, |acc, c| acc.wrapping_add(c as u32));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π embedding –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞
        for (i, val) in embedding.iter_mut().enumerate() {
            *val = ((hash.wrapping_add(i as u32) % 1000) as f32 / 1000.0) - 0.5;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
        let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
        if norm > 0.0 {
            for val in embedding.iter_mut() {
                *val /= norm;
            }
        }
        
        debug!("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω fallback embedding —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ {} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{}'", dimension, text);
        embedding
    }

    /// –ü–æ–ª—É—á–∏—Ç—å embedding —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏–ª–∏ fallback
    async fn get_embedding_fallback(&self, text: &str) -> Result<Vec<f32>> {
        if let Some(ref embedding_coordinator) = self.embedding_coordinator {
            embedding_coordinator.get_embedding(text).await
        } else {
            Ok(self.generate_fallback_embedding(text))
        }
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    fn record_operation_metrics(&self, operation_type: &str, duration: Duration) {
        if self.config.enable_metrics {
            if let Some(metrics) = self.container.try_resolve::<Arc<MetricsCollector>>() {
                match operation_type {
                    "insert" => metrics.record_vector_insert(duration),
                    "search" => metrics.record_vector_search(duration),
                    "batch_insert" => {
                        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ insert –æ–ø–µ—Ä–∞—Ü–∏–π
                        metrics.record_vector_insert(duration);
                    }
                    "batch_search" => {
                        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ search –æ–ø–µ—Ä–∞—Ü–∏–π
                        metrics.record_vector_search(duration);
                    }
                    _ => {
                        debug!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫: {}", operation_type);
                    }
                }
            }
        }
    }
}

#[async_trait]
impl OperationExecutor for ProductionOperationExecutor {
    /// Production insert —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏ –∏ retry –ª–æ–≥–∏–∫–æ–π
    async fn insert(&self, record: Record) -> Result<()> {
        let operation_start = Instant::now();
        
        // –ü–æ–ª—É—á–∞–µ–º permit –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è concurrency
        let _permit = self.operation_limiter.acquire().await
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å permit –¥–ª—è insert: {}", e))?;

        debug!("üì• Insert –∑–∞–ø–∏—Å–∏: {}", record.id);

        // –í—ã–ø–æ–ª–Ω—è–µ–º insert —Å retry –ª–æ–≥–∏–∫–æ–π
        let insert_result = self.retry_handler.execute(|| async {
            let store = self.container.resolve::<VectorStore>()?;
            
            if let Ok(batch_manager) = self.container.resolve::<Arc<BatchOperationManager>>() {
                debug!("üîÑ Insert —á–µ—Ä–µ–∑ batch manager");
                batch_manager.add(record.clone()).await?;
            } else {
                debug!("üîÑ –ü—Ä—è–º–æ–π insert –≤ store");
                store.insert(&record).await?;
            }
            
            Ok(())
        }).await;

        let operation_duration = operation_start.elapsed();

        match insert_result {
            RetryResult::Success(_, attempts) => {
                if attempts > 1 {
                    debug!("‚úÖ Insert —É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ {:?}", attempts, operation_duration);
                } else {
                    debug!("‚úÖ Insert —É—Å–ø–µ—à–µ–Ω –∑–∞ {:?}", operation_duration);
                }
                
                self.record_operation_metrics("insert", operation_duration);
                Ok(())
            }
            RetryResult::ExhaustedRetries(e) | RetryResult::NonRetriable(e) => {
                error!("‚ùå Insert –Ω–µ —É–¥–∞–ª—Å—è: {}", e);
                Err(e)
            }
        }
    }

    /// Production search —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏ –∏ sub-5ms performance
    async fn search(
        &self,
        query: &str,
        layer: Layer,
        options: SearchOptions,
    ) -> Result<Vec<Record>> {
        let operation_start = Instant::now();
        
        // –ü–æ–ª—É—á–∞–µ–º permit –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è concurrency  
        let _permit = self.operation_limiter.acquire().await
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å permit –¥–ª—è search: {}", e))?;

        debug!("üîç Search –≤ —Å–ª–æ–µ {:?}: '{}'", layer, query);

        let search_result = if let Some(ref search_coordinator) = self.search_coordinator {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º production SearchCoordinator —Å sub-5ms HNSW
            debug!("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º SearchCoordinator –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞");
            
            self.retry_handler.execute(|| async {
                // Timeout –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è sub-5ms performance
                tokio::time::timeout(
                    Duration::from_millis(50), // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π timeout –¥–ª—è sub-5ms —Ü–µ–ª–∏
                    search_coordinator.search(query, layer, options.clone())
                ).await
                .map_err(|_| anyhow::anyhow!("Search timeout - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç 50ms –¥–ª—è sub-5ms —Ü–µ–ª–∏"))?
            }).await
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ (–¥–ª—è minimal mode)
            debug!("üîÑ Fallback –ø–æ–∏—Å–∫ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞");
            
            self.retry_handler.execute(|| async {
                let embedding = self.get_embedding_fallback(query).await?;
                let store = self.container.resolve::<VectorStore>()?;
                store.search(&embedding, layer, options.top_k).await
            }).await
        };

        let operation_duration = operation_start.elapsed();

        match search_result {
            RetryResult::Success(results, attempts) => {
                let result_count = results.len();
                let duration_ms = operation_duration.as_millis() as f64;
                
                if duration_ms > 5.0 {
                    warn!("‚è±Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {:.2}ms –¥–ª—è '{}' (—Ü–µ–ª—å <5ms)", duration_ms, query);
                } else {
                    debug!("‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫: {:.2}ms –¥–ª—è '{}' ({} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)", duration_ms, query, result_count);
                }
                
                if attempts > 1 {
                    debug!("‚úÖ Search —É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫", attempts);
                }

                self.record_operation_metrics("search", operation_duration);
                Ok(results)
            }
            RetryResult::ExhaustedRetries(e) | RetryResult::NonRetriable(e) => {
                error!("‚ùå Search –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è '{}': {}", query, e);
                Err(e)
            }
        }
    }

    /// –ë–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π
    async fn batch_insert(&self, records: Vec<Record>) -> Result<BatchInsertResult> {
        let timer = OperationTimer::new("batch_insert");
        let total_records = records.len();
        let mut inserted = 0;
        let mut failed = 0;
        let mut errors = Vec::new();

        debug!("–ë–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ {} –∑–∞–ø–∏—Å–µ–π", total_records);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch manager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if let Ok(batch_manager) = self.container.resolve::<Arc<BatchOperationManager>>() {
            for record in records {
                match batch_manager.add(record).await {
                    Ok(_) => inserted += 1,
                    Err(e) => {
                        failed += 1;
                        errors.push(e.to_string());
                    }
                }
            }
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∫—É
            let store = self.container.resolve::<VectorStore>()?;
            for record in records {
                match store.insert(&record).await {
                    Ok(_) => inserted += 1,
                    Err(e) => {
                        failed += 1;
                        errors.push(e.to_string());
                    }
                }
            }
        }

        let elapsed = timer.elapsed().as_millis() as u64;
        debug!("–ë–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {}/{} —É—Å–ø–µ—à–Ω–æ –∑–∞ {}–º—Å", inserted, total_records, elapsed);

        self.record_operation_metrics("batch_insert", timer.elapsed());

        Ok(BatchInsertResult {
            inserted,
            failed,
            errors,
            total_time_ms: elapsed,
        })
    }

    /// –ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫
    async fn batch_search(&self, queries: Vec<String>, layer: Layer, options: SearchOptions) -> Result<BatchSearchResult> {
        let timer = OperationTimer::new("batch_search");
        let mut results = Vec::new();

        debug!("–ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫ {} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–ª–æ–µ {:?}", queries.len(), layer);

        for query in &queries {
            let search_results = self.search(query, layer, options.clone()).await?;
            results.push(search_results);
        }

        let elapsed = timer.elapsed().as_millis() as u64;
        debug!("–ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {}–º—Å", elapsed);

        self.record_operation_metrics("batch_search", timer.elapsed());

        Ok(BatchSearchResult {
            queries,
            results,
            total_time_ms: elapsed,
        })
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    async fn update(&self, record: Record) -> Result<()> {
        let _timer = OperationTimer::new("memory_update");
        let store = self.container.resolve::<VectorStore>()?;
        
        debug!("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {}", record.id);
        
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
        store.delete_by_id(&record.id, record.layer).await?;
        // –ó–∞—Ç–µ–º –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        store.insert(&record).await?;
        
        debug!("‚úì –ó–∞–ø–∏—Å—å {} –æ–±–Ω–æ–≤–ª–µ–Ω–∞", record.id);
        Ok(())
    }

    /// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
    async fn delete(&self, id: &uuid::Uuid, layer: Layer) -> Result<()> {
        let _timer = OperationTimer::new("memory_delete");
        let store = self.container.resolve::<VectorStore>()?;
        
        debug!("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {} –∏–∑ —Å–ª–æ—è {:?}", id, layer);
        store.delete_by_id(id, layer).await?;
        
        debug!("‚úì –ó–∞–ø–∏—Å—å {} —É–¥–∞–ª–µ–Ω–∞", id);
        Ok(())
    }
}

/// –ü—Ä–æ—Å—Ç–æ–π executor –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
pub struct SimpleOperationExecutor {
    container: Arc<DIContainer>,
}

impl SimpleOperationExecutor {
    pub fn new(container: Arc<DIContainer>) -> Self {
        Self { container }
    }
}

#[async_trait]
impl OperationExecutor for SimpleOperationExecutor {
    async fn insert(&self, record: Record) -> Result<()> {
        let store = self.container.resolve::<VectorStore>()?;
        store.insert(&record).await
    }

    async fn search(&self, query: &str, layer: Layer, options: SearchOptions) -> Result<Vec<Record>> {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π embedding
        let dimension = 1024;
        let mut embedding = vec![0.0; dimension];
        let hash = query.chars().fold(0u32, |acc, c| acc.wrapping_add(c as u32));
        
        for (i, val) in embedding.iter_mut().enumerate() {
            *val = ((hash.wrapping_add(i as u32) % 1000) as f32 / 1000.0) - 0.5;
        }
        
        let store = self.container.resolve::<VectorStore>()?;
        store.search(&embedding, layer, options.top_k).await
    }

    async fn batch_insert(&self, records: Vec<Record>) -> Result<BatchInsertResult> {
        let mut inserted = 0;
        let mut failed = 0;
        let mut errors = Vec::new();
        let start = Instant::now();

        for record in records {
            match self.insert(record).await {
                Ok(_) => inserted += 1,
                Err(e) => {
                    failed += 1;
                    errors.push(e.to_string());
                }
            }
        }

        Ok(BatchInsertResult {
            inserted,
            failed,
            errors,
            total_time_ms: start.elapsed().as_millis() as u64,
        })
    }

    async fn batch_search(&self, queries: Vec<String>, layer: Layer, options: SearchOptions) -> Result<BatchSearchResult> {
        let mut results = Vec::new();
        let start = Instant::now();

        for query in &queries {
            let search_results = self.search(query, layer, options.clone()).await?;
            results.push(search_results);
        }

        Ok(BatchSearchResult {
            queries,
            results,
            total_time_ms: start.elapsed().as_millis() as u64,
        })
    }

    async fn update(&self, record: Record) -> Result<()> {
        let store = self.container.resolve::<VectorStore>()?;
        store.delete_by_id(&record.id, record.layer).await?;
        store.insert(&record).await
    }

    async fn delete(&self, id: &uuid::Uuid, layer: Layer) -> Result<()> {
        let store = self.container.resolve::<VectorStore>()?;
        store.delete_by_id(id, layer).await
    }
}

/// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (backup, restore, etc.)
pub struct ExtendedOperationExecutor {
    container: Arc<DIContainer>,
    base_executor: Arc<dyn OperationExecutor + Send + Sync>,
}

impl ExtendedOperationExecutor {
    pub fn new(
        container: Arc<DIContainer>,
        base_executor: Arc<dyn OperationExecutor + Send + Sync>,
    ) -> Self {
        Self {
            container,
            base_executor,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å backup
    pub async fn create_backup(&self, path: &str) -> Result<crate::backup::BackupMetadata> {
        debug!("–°–æ–∑–¥–∞–Ω–∏–µ backup —á–µ—Ä–µ–∑ DI: {}", path);

        if let Ok(backup_manager) = self.container.resolve::<BackupManager>() {
            let store = self.container.resolve::<VectorStore>()?;
            let _backup_path = backup_manager.create_backup(store, Some(path.to_string())).await?;
            let metadata = crate::backup::BackupMetadata {
                version: 1,
                created_at: chrono::Utc::now(),
                magray_version: "0.1.0".to_string(),
                layers: vec![],
                total_records: 0,
                index_config: Default::default(),
                checksum: None,
                layer_checksums: None,
            };
            info!("‚úì Backup —Å–æ–∑–¥–∞–Ω: {}", path);
            Ok(metadata)
        } else {
            Err(anyhow::anyhow!("Backup manager not configured"))
        }
    }

    /// Flush –≤—Å–µ—Ö pending –æ–ø–µ—Ä–∞—Ü–∏–π
    pub async fn flush_all(&self) -> Result<()> {
        debug!("Flush –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ DI");

        // Flush batch manager
        if let Some(_batch_manager) = self.container.try_resolve::<Arc<BatchOperationManager>>() {
            debug!("‚úì Batch manager –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
        }

        debug!("‚úì Vector store –±—É–¥–µ—Ç flushed –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");

        info!("‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ flushed");
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
    pub async fn get_operation_stats(&self) -> Result<crate::batch_manager::BatchStats> {
        if let Ok(batch_manager) = self.container.resolve::<Arc<BatchOperationManager>>() {
            Ok(batch_manager.get_stats().await?)
        } else {
            Ok(crate::batch_manager::BatchStats::default())
        }
    }
}

// Delegating implementation –¥–ª—è ExtendedOperationExecutor
#[async_trait]
impl OperationExecutor for ExtendedOperationExecutor {
    async fn insert(&self, record: Record) -> Result<()> {
        self.base_executor.insert(record).await
    }

    async fn search(&self, query: &str, layer: Layer, options: SearchOptions) -> Result<Vec<Record>> {
        self.base_executor.search(query, layer, options).await
    }

    async fn batch_insert(&self, records: Vec<Record>) -> Result<BatchInsertResult> {
        self.base_executor.batch_insert(records).await
    }

    async fn batch_search(&self, queries: Vec<String>, layer: Layer, options: SearchOptions) -> Result<BatchSearchResult> {
        self.base_executor.batch_search(queries, layer, options).await
    }

    async fn update(&self, record: Record) -> Result<()> {
        self.base_executor.update(record).await
    }

    async fn delete(&self, id: &uuid::Uuid, layer: Layer) -> Result<()> {
        self.base_executor.delete(id, layer).await
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::di_memory_config::test_helpers;

    #[tokio::test]
    async fn test_operation_config() {
        let config = OperationConfig::production();
        assert_eq!(config.max_concurrent_operations, 100);
        assert!(config.enable_metrics);

        let minimal = OperationConfig::minimal();
        assert_eq!(minimal.max_concurrent_operations, 10);
        assert!(!minimal.enable_metrics);
    }

    #[tokio::test]
    async fn test_simple_executor() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let container = Arc::new(crate::di_memory_config::MemoryDIConfigurator::configure_minimal(config).await?);
        
        let executor = SimpleOperationExecutor::new(container);

        // Test basic search (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –±–µ–∑ embedding coordinator)
        let results = executor.search("test query", Layer::Interact, SearchOptions::default()).await;
        // –ú–æ–∂–µ—Ç –Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å
        assert!(results.is_ok());

        Ok(())
    }

    #[test]
    fn test_batch_results() {
        let result = BatchInsertResult {
            inserted: 5,
            failed: 2,
            errors: vec!["Error 1".to_string(), "Error 2".to_string()],
            total_time_ms: 150,
        };

        assert_eq!(result.inserted, 5);
        assert_eq!(result.failed, 2);
        assert_eq!(result.errors.len(), 2);
        assert_eq!(result.total_time_ms, 150);
    }
}