//! Lifecycle Manager Module - Single Responsibility –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
//! 
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–∏—Å–∞:
//! –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, shutdown, readiness checks.
//! –ü—Ä–∏–º–µ–Ω—è–µ—Ç Single Responsibility –∏ State Machine pattern.

use anyhow::Result;
use std::{
    sync::Arc,
    time::{Duration, Instant},
    sync::atomic::{AtomicBool, AtomicU32, Ordering},
};
use tracing::{info, debug, warn, error};
use tokio::{sync::RwLock, time::timeout};

use crate::{
    storage::VectorStore,
    types::Layer,
};

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–µ—Ä–≤–∏—Å–∞
#[derive(Debug, Clone, PartialEq)]
pub enum LifecycleState {
    /// –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    Uninitialized,
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
    Initializing,
    /// –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
    Ready,
    /// –î–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏)
    Degraded,
    /// –í—ã–∫–ª—é—á–∞–µ—Ç—Å—è
    ShuttingDown,
    /// –í—ã–∫–ª—é—á–µ–Ω
    Shutdown,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è lifecycle manager
#[derive(Debug, Clone)]
pub struct LifecycleConfig {
    /// Timeout –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    pub initialization_timeout: Duration,
    /// Timeout –¥–ª—è graceful shutdown
    pub shutdown_timeout: Duration,
    /// –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ readiness
    pub readiness_check_interval: Duration,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    pub operation_drain_timeout: Duration,
}

impl Default for LifecycleConfig {
    fn default() -> Self {
        Self {
            initialization_timeout: Duration::from_secs(120),
            shutdown_timeout: Duration::from_secs(30),
            readiness_check_interval: Duration::from_secs(10),
            operation_drain_timeout: Duration::from_secs(15),
        }
    }
}

impl LifecycleConfig {
    pub fn production() -> Self {
        Self {
            initialization_timeout: Duration::from_secs(120),
            shutdown_timeout: Duration::from_secs(30),
            readiness_check_interval: Duration::from_secs(10),
            operation_drain_timeout: Duration::from_secs(15),
        }
    }

    pub fn minimal() -> Self {
        Self {
            initialization_timeout: Duration::from_secs(30),
            shutdown_timeout: Duration::from_secs(5),
            readiness_check_interval: Duration::from_secs(5),
            operation_drain_timeout: Duration::from_secs(3),
        }
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
#[derive(Debug, Clone)]
pub struct OperationStats {
    pub active_operations: u32,
    pub total_operations: u64,
    pub failed_initializations: u32,
    pub graceful_shutdowns: u32,
    pub forced_shutdowns: u32,
}

impl Default for OperationStats {
    fn default() -> Self {
        Self {
            active_operations: 0,
            total_operations: 0,
            failed_initializations: 0,
            graceful_shutdowns: 0,
            forced_shutdowns: 0,
        }
    }
}

/// Lifecycle Manager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–∏—Å–∞
pub struct LifecycleManager {
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: LifecycleConfig,
    /// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state: Arc<RwLock<LifecycleState>>,
    /// –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ
    ready: Arc<AtomicBool>,
    /// –§–ª–∞–≥ –∑–∞–ø—Ä–æ—Å–∞ shutdown
    shutdown_requested: Arc<AtomicBool>,
    /// –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    active_operations: Arc<AtomicU32>,
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats: Arc<RwLock<OperationStats>>,
    /// –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state_entered_at: Arc<RwLock<Instant>>,
}

impl LifecycleManager {
    pub fn new(config: LifecycleConfig) -> Self {
        Self {
            config,
            state: Arc::new(RwLock::new(LifecycleState::Uninitialized)),
            ready: Arc::new(AtomicBool::new(false)),
            shutdown_requested: Arc::new(AtomicBool::new(false)),
            active_operations: Arc::new(AtomicU32::new(0)),
            stats: Arc::new(RwLock::new(OperationStats::default())),
            state_entered_at: Arc::new(RwLock::new(Instant::now())),
        }
    }

    pub fn with_production_config() -> Self {
        Self::new(LifecycleConfig::production())
    }

    pub fn with_minimal_config() -> Self {
        Self::new(LifecycleConfig::minimal())
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å
    pub async fn initialize<F, Fut>(&self, init_fn: F) -> Result<()>
    where
        F: FnOnce() -> Fut,
        Fut: std::future::Future<Output = Result<()>>,
    {
        info!("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞...");
        
        {
            let mut state = self.state.write().await;
            if *state != LifecycleState::Uninitialized {
                return Err(anyhow::anyhow!("–°–µ—Ä–≤–∏—Å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"));
            }
            *state = LifecycleState::Initializing;
            *self.state_entered_at.write().await = Instant::now();
        }

        let start_time = Instant::now();

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å timeout
        let init_result = timeout(
            self.config.initialization_timeout,
            init_fn()
        ).await;

        match init_result {
            Ok(Ok(_)) => {
                // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                {
                    let mut state = self.state.write().await;
                    *state = LifecycleState::Ready;
                    *self.state_entered_at.write().await = Instant::now();
                }
                
                self.ready.store(true, Ordering::Relaxed);
                
                let initialization_time = start_time.elapsed();
                info!("‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {:?}", initialization_time);
                
                Ok(())
            }
            Ok(Err(e)) => {
                // –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                {
                    let mut state = self.state.write().await;
                    *state = LifecycleState::Uninitialized;
                    let mut stats = self.stats.write().await;
                    stats.failed_initializations += 1;
                }
                
                error!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e);
                Err(e)
            }
            Err(_) => {
                // Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                {
                    let mut state = self.state.write().await;
                    *state = LifecycleState::Uninitialized;
                    let mut stats = self.stats.write().await;
                    stats.failed_initializations += 1;
                }
                
                let timeout_err = anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ({:?})", self.config.initialization_timeout);
                error!("‚è±Ô∏è {}", timeout_err);
                Err(timeout_err)
            }
        }
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∏ –ø–∞–º—è—Ç–∏
    pub async fn initialize_memory_layers(&self, store: Arc<VectorStore>) -> Result<()> {
        info!("üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–µ–≤ –ø–∞–º—è—Ç–∏...");

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ–∏ —Å timeout
        for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
            let layer_result = timeout(
                Duration::from_secs(30),
                store.init_layer(layer)
            ).await;

            match layer_result {
                Ok(Ok(_)) => {
                    debug!("‚úì –°–ª–æ–π {:?} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", layer);
                }
                Ok(Err(e)) => {
                    return Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ—è {:?}: {}", layer, e));
                }
                Err(_) => {
                    return Err(anyhow::anyhow!("Timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ—è {:?}", layer));
                }
            }
        }

        info!("‚úÖ –í—Å–µ —Å–ª–æ–∏ –ø–∞–º—è—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        Ok(())
    }

    /// Graceful shutdown —Å–µ—Ä–≤–∏—Å–∞
    pub async fn shutdown<F, Fut>(&self, shutdown_fn: F) -> Result<()>
    where
        F: FnOnce() -> Fut,
        Fut: std::future::Future<Output = Result<()>>,
    {
        info!("üõë –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...");
        
        {
            let mut state = self.state.write().await;
            if *state == LifecycleState::ShuttingDown || *state == LifecycleState::Shutdown {
                return Ok(()); // –£–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ shutdown
            }
            *state = LifecycleState::ShuttingDown;
            *self.state_entered_at.write().await = Instant::now();
        }

        // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ shutdown –∑–∞–ø—Ä–æ—à–µ–Ω
        self.shutdown_requested.store(true, Ordering::Relaxed);
        self.ready.store(false, Ordering::Relaxed);

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        let drain_result = self.drain_active_operations().await;
        if let Err(e) = drain_result {
            warn!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {}", e);
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º shutdown –ª–æ–≥–∏–∫—É
        let shutdown_result = timeout(
            self.config.shutdown_timeout,
            shutdown_fn()
        ).await;

        let success = match shutdown_result {
            Ok(Ok(_)) => {
                info!("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω");
                true
            }
            Ok(Err(e)) => {
                error!("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è shutdown: {}", e);
                false
            }
            Err(_) => {
                error!("‚è±Ô∏è Timeout shutdown - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ");
                false
            }
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        {
            let mut state = self.state.write().await;
            *state = LifecycleState::Shutdown;
            
            let mut stats = self.stats.write().await;
            if success {
                stats.graceful_shutdowns += 1;
            } else {
                stats.forced_shutdowns += 1;
            }
        }

        if success {
            Ok(())
        } else {
            Err(anyhow::anyhow!("Shutdown –Ω–µ —É–¥–∞–ª—Å—è"))
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    pub async fn is_ready(&self) -> bool {
        let state = self.state.read().await;
        *state == LifecycleState::Ready && self.ready.load(Ordering::Relaxed)
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–µ—Ä–≤–∏—Å –Ω–µ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è
    pub fn is_shutdown_requested(&self) -> bool {
        self.shutdown_requested.load(Ordering::Relaxed)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pub async fn get_state(&self) -> LifecycleState {
        let state = self.state.read().await;
        state.clone()
    }

    /// –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    pub fn increment_active_operations(&self) -> u32 {
        self.active_operations.fetch_add(1, Ordering::Relaxed) + 1
    }

    /// –£–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    pub fn decrement_active_operations(&self) -> u32 {
        self.active_operations.fetch_sub(1, Ordering::Relaxed).saturating_sub(1)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    pub fn get_active_operations(&self) -> u32 {
        self.active_operations.load(Ordering::Relaxed)
    }

    /// –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pub async fn degrade(&self, reason: &str) {
        warn!("‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {}", reason);
        
        let mut state = self.state.write().await;
        if *state == LifecycleState::Ready {
            *state = LifecycleState::Degraded;
            *self.state_entered_at.write().await = Instant::now();
        }
    }

    /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏–∑ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    pub async fn recover(&self) -> Result<()> {
        info!("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...");
        
        let mut state = self.state.write().await;
        if *state == LifecycleState::Degraded {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            *state = LifecycleState::Ready;
            *self.state_entered_at.write().await = Instant::now();
            self.ready.store(true, Ordering::Relaxed);
            
            info!("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
        }
        
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    pub async fn get_stats(&self) -> OperationStats {
        let mut stats = self.stats.read().await.clone();
        stats.active_operations = self.get_active_operations();
        stats
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    pub async fn time_in_current_state(&self) -> Duration {
        let state_entered_at = self.state_entered_at.read().await;
        state_entered_at.elapsed()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å human-readable –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    pub async fn get_state_description(&self) -> String {
        let state = self.get_state().await;
        let time_in_state = self.time_in_current_state().await;
        let active_ops = self.get_active_operations();
        
        match state {
            LifecycleState::Uninitialized => "üî¥ –ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù".to_string(),
            LifecycleState::Initializing => format!("üü° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ({:.1}s)", time_in_state.as_secs_f64()),
            LifecycleState::Ready => format!("üü¢ –ì–û–¢–û–í ({} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)", active_ops),
            LifecycleState::Degraded => format!("üü† –î–ï–ì–†–ê–î–ò–†–û–í–ê–ù ({:.1}s)", time_in_state.as_secs_f64()),
            LifecycleState::ShuttingDown => format!("üî∂ –í–´–ö–õ–Æ–ß–ï–ù–ò–ï ({} –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å)", active_ops),
            LifecycleState::Shutdown => "‚ö´ –í–´–ö–õ–Æ–ß–ï–ù".to_string(),
        }
    }

    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reset (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    pub async fn force_reset(&self) {
        let mut state = self.state.write().await;
        *state = LifecycleState::Uninitialized;
        
        self.ready.store(false, Ordering::Relaxed);
        self.shutdown_requested.store(false, Ordering::Relaxed);
        self.active_operations.store(0, Ordering::Relaxed);
        
        *self.state_entered_at.write().await = Instant::now();
        
        info!("‚ôªÔ∏è Lifecycle manager —Å–±—Ä–æ—à–µ–Ω");
    }

    // === Private methods ===

    /// –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    async fn drain_active_operations(&self) -> Result<()> {
        let start_time = Instant::now();
        
        while start_time.elapsed() < self.config.operation_drain_timeout {
            let active_ops = self.get_active_operations();
            
            if active_ops == 0 {
                debug!("‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
                return Ok(());
            }
            
            debug!("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...", active_ops);
            tokio::time::sleep(Duration::from_millis(100)).await;
        }
        
        let remaining_ops = self.get_active_operations();
        if remaining_ops > 0 {
            warn!("‚ö†Ô∏è Timeout –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π - {} –æ–ø–µ—Ä–∞—Ü–∏–π –±—É–¥—É—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä–≤–∞–Ω—ã", remaining_ops);
            return Err(anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {} –æ–ø–µ—Ä–∞—Ü–∏–π", remaining_ops));
        }
        
        Ok(())
    }
}

impl Default for LifecycleManager {
    fn default() -> Self {
        Self::new(LifecycleConfig::default())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tokio::time::{sleep, Duration};

    #[tokio::test]
    async fn test_lifecycle_initialization() {
        let manager = LifecycleManager::with_minimal_config();
        
        assert_eq!(manager.get_state().await, LifecycleState::Uninitialized);
        assert!(!manager.is_ready().await);
        
        // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        let result = manager.initialize(|| async { Ok(()) }).await;
        assert!(result.is_ok());
        assert_eq!(manager.get_state().await, LifecycleState::Ready);
        assert!(manager.is_ready().await);
    }

    #[tokio::test]
    async fn test_lifecycle_failed_initialization() {
        let manager = LifecycleManager::with_minimal_config();
        
        // –ù–µ—É–¥–∞—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        let result = manager.initialize(|| async { 
            Err(anyhow::anyhow!("Initialization failed"))
        }).await;
        
        assert!(result.is_err());
        assert_eq!(manager.get_state().await, LifecycleState::Uninitialized);
        assert!(!manager.is_ready().await);
        
        let stats = manager.get_stats().await;
        assert_eq!(stats.failed_initializations, 1);
    }

    #[tokio::test] 
    async fn test_lifecycle_shutdown() {
        let manager = LifecycleManager::with_minimal_config();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        manager.initialize(|| async { Ok(()) }).await.unwrap();
        assert_eq!(manager.get_state().await, LifecycleState::Ready);
        
        // Shutdown
        let result = manager.shutdown(|| async { Ok(()) }).await;
        assert!(result.is_ok());
        assert_eq!(manager.get_state().await, LifecycleState::Shutdown);
        assert!(manager.is_shutdown_requested());
        
        let stats = manager.get_stats().await;
        assert_eq!(stats.graceful_shutdowns, 1);
    }

    #[tokio::test]
    async fn test_active_operations_tracking() {
        let manager = LifecycleManager::with_minimal_config();
        
        assert_eq!(manager.get_active_operations(), 0);
        
        let count1 = manager.increment_active_operations();
        assert_eq!(count1, 1);
        assert_eq!(manager.get_active_operations(), 1);
        
        let count2 = manager.increment_active_operations();
        assert_eq!(count2, 2);
        
        let count3 = manager.decrement_active_operations();
        assert_eq!(count3, 1);
        assert_eq!(manager.get_active_operations(), 1);
    }

    #[tokio::test]
    async fn test_degraded_state() {
        let manager = LifecycleManager::with_minimal_config();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        manager.initialize(|| async { Ok(()) }).await.unwrap();
        assert_eq!(manager.get_state().await, LifecycleState::Ready);
        
        // –î–µ–≥—Ä–∞–¥–∏—Ä—É–µ–º
        manager.degrade("Test degradation").await;
        assert_eq!(manager.get_state().await, LifecycleState::Degraded);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        manager.recover().await.unwrap();
        assert_eq!(manager.get_state().await, LifecycleState::Ready);
        assert!(manager.is_ready().await);
    }

    #[tokio::test]
    async fn test_state_description() {
        let manager = LifecycleManager::with_minimal_config();
        
        let desc = manager.get_state_description().await;
        assert!(desc.contains("–ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù"));
        
        manager.initialize(|| async { Ok(()) }).await.unwrap();
        let desc_ready = manager.get_state_description().await;
        assert!(desc_ready.contains("–ì–û–¢–û–í"));
        
        manager.increment_active_operations();
        let desc_with_ops = manager.get_state_description().await;
        assert!(desc_with_ops.contains("1 –∞–∫—Ç–∏–≤–Ω—ã—Ö"));
    }

    #[tokio::test]
    async fn test_force_reset() {
        let manager = LifecycleManager::with_minimal_config();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        manager.initialize(|| async { Ok(()) }).await.unwrap();
        manager.increment_active_operations();
        
        assert_eq!(manager.get_state().await, LifecycleState::Ready);
        assert_eq!(manager.get_active_operations(), 1);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º
        manager.force_reset().await;
        
        assert_eq!(manager.get_state().await, LifecycleState::Uninitialized);
        assert_eq!(manager.get_active_operations(), 0);
        assert!(!manager.is_ready().await);
        assert!(!manager.is_shutdown_requested());
    }
}