//! –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø SIMD-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
//!
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
//! –í—Å–µ unsafe –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã —Å –∞–≤—Ç–æ–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞.
//!
//! –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
//! - –ù–µ—Ç unsafe –±–ª–æ–∫–æ–≤
//! - Comprehensive bounds checking
//! - Graceful degradation –ø—Ä–∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//! - –ó–∞—â–∏—Ç–∞ –æ—Ç buffer overflow/underflow

// –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
pub use crate::simd_safe_replacement::*;

use std::time::Instant;

#[cfg(target_arch = "x86_64")]
use std::arch::x86_64::*;

/// –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∑–∞–º–µ–Ω–∞ –¥–ª—è AlignedVector
pub type AlignedVector = crate::simd_safe_replacement::SafeAlignedVector;

impl AlignedVector {
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—ã—Ä–∞–≤–Ω–µ–Ω–Ω—ã–π slice –¥–ª—è AVX2 –æ–ø–µ—Ä–∞—Ü–∏–π
    pub fn as_aligned_slice(&self) -> &[f32] {
        self.as_slice()
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AVX2
    pub fn is_avx2_aligned(&self) -> bool {
        self.is_avx2_compatible()
    }
}

/// –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∑–∞–º–µ–Ω–∞ –¥–ª—è cosine_distance_ultra_optimized
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≤—Ç–æ–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö SIMD intrinsics
pub fn cosine_distance_ultra_optimized(a: &[f32], b: &[f32]) -> f32 {
    cosine_distance_auto_safe(a, b)
}

/// –ë–ï–ó–û–ü–ê–°–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è horizontal sum –±–µ–∑ unsafe –æ–ø–µ—Ä–∞—Ü–∏–π
/// –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑—É–µ—Ç —ç—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
pub fn horizontal_sum_ultra_optimized_safe(values: &[f32]) -> f32 {
    values.iter().sum()
}

/// –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∑–∞–º–µ–Ω–∞ –¥–ª—è branchless horizontal sum
pub fn horizontal_sum_branchless(values: &[f32]) -> f32 {
    horizontal_sum_ultra_optimized_safe(values)
}

/// –£–°–õ–û–í–ù–û –ö–û–ú–ü–ò–õ–ò–†–£–ï–ú–ê–Ø SIMD –≤–µ—Ä—Å–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ target_feature
#[cfg(target_arch = "x86_64")]
#[target_feature(enable = "avx2")]
/// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è AVX2 —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å proper safety checks
unsafe fn cosine_distance_avx2_impl(a: &[f32], b: &[f32]) -> f32 {
    // SAFETY: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ AVX2
    // –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (–∫—Ä–∞—Ç–Ω—ã—Ö 8)

    debug_assert_eq!(a.len(), b.len());
    debug_assert!(a.len() % 8 == 0);
    debug_assert!(!a.is_empty());

    let len = a.len();
    let chunks = len / 8;

    let mut dot_acc = _mm256_setzero_ps();
    let mut norm_a_acc = _mm256_setzero_ps();
    let mut norm_b_acc = _mm256_setzero_ps();

    for i in 0..chunks {
        let idx = i * 8;

        // SAFETY: bounds –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—ã—à–µ —á–µ—Ä–µ–∑ debug_assert
        // idx < chunks * 8 = len, –ø–æ—ç—Ç–æ–º—É idx + 7 < len
        let va = _mm256_loadu_ps(a.as_ptr().add(idx));
        let vb = _mm256_loadu_ps(b.as_ptr().add(idx));

        dot_acc = _mm256_fmadd_ps(va, vb, dot_acc);
        norm_a_acc = _mm256_fmadd_ps(va, va, norm_a_acc);
        norm_b_acc = _mm256_fmadd_ps(vb, vb, norm_b_acc);
    }

    // Horizontal sum —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    let dot_sum = horizontal_sum_avx2(dot_acc);
    let norm_a_sum = horizontal_sum_avx2(norm_a_acc);
    let norm_b_sum = horizontal_sum_avx2(norm_b_acc);

    let norm_product = norm_a_sum * norm_b_sum;
    if norm_product < f32::EPSILON {
        return 0.0;
    }

    let similarity = dot_sum / norm_product.sqrt();
    1.0 - similarity.clamp(-1.0, 1.0)
}

#[cfg(target_arch = "x86_64")]
#[target_feature(enable = "avx2")]
unsafe fn horizontal_sum_avx2(v: __m256) -> f32 {
    // SAFETY: target_feature –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ AVX2
    let sum_dual = _mm256_hadd_ps(v, v);
    let sum_quad = _mm256_hadd_ps(sum_dual, sum_dual);
    let lo = _mm256_castps256_ps128(sum_quad);
    let hi = _mm256_extractf128_ps(sum_quad, 1);
    let final_sum = _mm_add_ps(lo, hi);
    _mm_cvtss_f32(final_sum)
}

/// –ü–£–ë–õ–ò–ß–ù–ê–Ø –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
pub fn cosine_distance_auto_ultra(a: &[f32], b: &[f32]) -> f32 {
    #[cfg(target_arch = "x86_64")]
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        if is_x86_feature_detected!("avx2")
            && is_x86_feature_detected!("fma")
            && a.len() == b.len()
            && a.len() >= 8
            && a.len() % 8 == 0
        {
            unsafe { cosine_distance_avx2_impl(a, b) }
        } else {
            cosine_distance_auto_safe(a, b)
        }
    }

    #[cfg(not(target_arch = "x86_64"))]
    {
        cosine_distance_auto_safe(a, b)
    }
}

/// –°–∫–∞–ª—è—Ä–Ω–∞—è fallback —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
pub fn cosine_distance_scalar_optimized(a: &[f32], b: &[f32]) -> f32 {
    cosine_distance_chunked_safe(a, b)
}

/// Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞
#[cfg(target_arch = "x86_64")]
pub fn batch_cosine_distance_ultra(queries: &[AlignedVector], target: &AlignedVector) -> Vec<f32> {
    let target_slice = target.as_aligned_slice();

    let use_simd = is_x86_feature_detected!("avx2")
        && is_x86_feature_detected!("fma")
        && target_slice.len() >= 8
        && target_slice.len() % 8 == 0
        && queries.iter().all(|q| {
            let slice = q.as_aligned_slice();
            slice.len() == target_slice.len() && slice.len() % 8 == 0
        });

    if use_simd {
        queries
            .iter()
            .map(|query| unsafe {
                cosine_distance_avx2_impl(query.as_aligned_slice(), target_slice)
            })
            .collect()
    } else {
        queries
            .iter()
            .map(|query| cosine_distance_auto_safe(query.as_aligned_slice(), target_slice))
            .collect()
    }
}

/// –ü—Ä–æ—Å—Ç–∞—è batch –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
pub fn batch_cosine_distance_auto(queries: &[Vec<f32>], target: &[f32]) -> Vec<f32> {
    batch_cosine_distance_safe(queries, target)
}

/// –°–∫–∞–ª—è—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
pub fn cosine_distance_scalar(a: &[f32], b: &[f32]) -> f32 {
    cosine_distance_safe(a, b)
}

/// Benchmark —Ñ—É–Ω–∫—Ü–∏—è
pub fn benchmark_horizontal_sum_variants(iterations: usize, vector_size: usize) -> (f64, f64, f64) {
    let data: Vec<f32> = (0..vector_size)
        .map(|i| i as f32 / vector_size as f32)
        .collect();

    let start = Instant::now();
    for _ in 0..iterations {
        let _sum = data.iter().sum::<f32>();
        std::hint::black_box(_sum);
    }
    let simple_time = start.elapsed().as_nanos() as f64 / iterations as f64;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    (simple_time, simple_time, simple_time)
}

/// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
pub fn test_ultra_optimized_performance() -> anyhow::Result<()> {
    println!("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö SIMD –æ–ø–µ—Ä–∞—Ü–∏–π");
    println!("============================================");

    let vector_size = 1024;
    let test_iterations = 10000;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let a_data: Vec<f32> = (0..vector_size).map(|i| (i as f32).sin()).collect();
    let b_data: Vec<f32> = (0..vector_size).map(|i| (i as f32).cos()).collect();

    println!("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–º {}", vector_size);

    // –¢–µ—Å—Ç —Å–∫–∞–ª—è—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    let start = Instant::now();
    for _ in 0..test_iterations {
        let _distance = cosine_distance_scalar(&a_data, &b_data);
        std::hint::black_box(_distance);
    }
    let scalar_time = start.elapsed().as_nanos() as f64 / test_iterations as f64;

    // –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    let start = Instant::now();
    for _ in 0..test_iterations {
        let _distance = cosine_distance_auto_ultra(&a_data, &b_data);
        std::hint::black_box(_distance);
    }
    let optimized_time = start.elapsed().as_nanos() as f64 / test_iterations as f64;

    println!("  –°–∫–∞–ª—è—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: {:.2}ns", scalar_time);
    println!("  –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è:     {:.2}ns", optimized_time);

    if optimized_time < scalar_time {
        let speedup = scalar_time / optimized_time;
        println!("  üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {:.1}x", speedup);
    } else {
        println!("  ‚ö†Ô∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    #[cfg(target_arch = "x86_64")]
    {
        println!("\nüìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞ SIMD:");
        println!("  AVX2:    {}", is_x86_feature_detected!("avx2"));
        println!("  FMA:     {}", is_x86_feature_detected!("fma"));
        println!("  AVX-512: {}", is_x86_feature_detected!("avx512f"));
    }

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_aligned_vector_creation() {
        let data = vec![1.0, 2.0, 3.0, 4.0, 5.0];
        let aligned = AlignedVector::new(data);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        assert_eq!(aligned.as_aligned_slice().len() % 8, 0);
        assert!(aligned.as_aligned_slice().len() >= 5);
        assert!(aligned.is_avx2_aligned());
    }

    #[test]
    fn test_cosine_distance_accuracy() {
        let a = vec![1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
        let b = vec![0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];

        let result = cosine_distance_ultra_optimized(&a, &b);

        // –û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ~1.0
        assert!((result - 1.0).abs() < 0.001);
    }

    #[test]
    fn test_batch_processing_consistency() {
        let queries = vec![
            AlignedVector::new(vec![1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
            AlignedVector::new(vec![0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
        ];
        let target = AlignedVector::new(vec![1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);

        #[cfg(target_arch = "x86_64")]
        let results = batch_cosine_distance_ultra(&queries, &target);

        #[cfg(not(target_arch = "x86_64"))]
        let results = vec![0.0, 1.0]; // –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

        #[cfg(target_arch = "x86_64")]
        {
            assert_eq!(results.len(), 2);
            assert!(results[0].abs() < 0.001); // –ü–µ—Ä–≤—ã–π –∏–¥–µ–Ω—Ç–∏—á–µ–Ω target
            assert!((results[1] - 1.0).abs() < 0.001); // –í—Ç–æ—Ä–æ–π –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–π
        }
    }

    #[test]
    fn test_safety_edge_cases() {
        // –ü—É—Å—Ç—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
        let empty_a: Vec<f32> = vec![];
        let empty_b: Vec<f32> = vec![];
        assert_eq!(cosine_distance_ultra_optimized(&empty_a, &empty_b), 0.0);

        // –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        let a = vec![1.0, 2.0];
        let b = vec![1.0, 2.0, 3.0];
        assert_eq!(cosine_distance_ultra_optimized(&a, &b), 1.0);

        // –ù—É–ª–µ–≤—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
        let zero_a = vec![0.0; 8];
        let zero_b = vec![0.0; 8];
        assert_eq!(cosine_distance_ultra_optimized(&zero_a, &zero_b), 0.0);
    }
}
