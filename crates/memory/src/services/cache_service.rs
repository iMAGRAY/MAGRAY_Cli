//! CacheService - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞
//!
//! Single Responsibility: —Ç–æ–ª—å–∫–æ cache management
//! - embedding caching
//! - fallback embedding generation  
//! - cache statistics –∏ optimization
//! - cache lifecycle management

use anyhow::Result;
use async_trait::async_trait;
use std::sync::Arc;
use tracing::{debug, info, warn};

use crate::{
    di::UnifiedContainer,
    services::traits::CacheServiceTrait,
    CoordinatorServiceTrait,
    EmbeddingCache,
    cache_interface::EmbeddingCacheInterface,
};

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è cache management
/// –û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
#[allow(dead_code)]
pub struct CacheService {
    /// DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ cache
    container: Arc<UnifiedContainer>,
    /// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ embedding coordinator
    coordinator_service: Option<Arc<dyn CoordinatorServiceTrait>>,
    /// Fallback embedding —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
    embedding_dimension: usize,
}

impl CacheService {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π CacheService
    pub fn new(container: Arc<UnifiedContainer>) -> Self {
        info!("üíæ –°–æ–∑–¥–∞–Ω–∏–µ CacheService –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º");

        Self {
            container,
            coordinator_service: None,
            embedding_dimension: 1024, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å —Å coordinator service –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    #[allow(dead_code)]
    pub fn new_with_coordinator(
        container: Arc<UnifiedContainer>,
        coordinator_service: Arc<dyn CoordinatorServiceTrait>,
    ) -> Self {
        info!("üíæ –°–æ–∑–¥–∞–Ω–∏–µ CacheService —Å CoordinatorService");

        Self {
            container,
            coordinator_service: Some(coordinator_service),
            embedding_dimension: 1024,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é embedding
    #[allow(dead_code)]
    pub fn new_with_dimension(
        container: Arc<UnifiedContainer>,
        embedding_dimension: usize,
    ) -> Self {
        info!(
            "üíæ –°–æ–∑–¥–∞–Ω–∏–µ CacheService —Å embedding dimension={}",
            embedding_dimension
        );

        Self {
            container,
            coordinator_service: None,
            embedding_dimension,
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å cache –∏–∑ DI (–∑–∞–≥–ª—É—à–∫–∞)
    #[allow(dead_code)]
    fn get_cache(&self) -> Option<Arc<dyn EmbeddingCacheInterface>> {
        // NOTE: –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None —Ç–∞–∫ –∫–∞–∫ DI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dyn traits
        None
    }
}

#[async_trait]
impl CacheServiceTrait for CacheService {
    /// –ü–æ–ª—É—á–∏—Ç—å embedding –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
    #[allow(dead_code)]
    async fn get_or_create_embedding(&self, text: &str) -> Result<Vec<f32>> {
        debug!("üíæ CacheService: –ø–æ–ª—É—á–µ–Ω–∏–µ embedding –¥–ª—è '{}'", text);

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if let Some(coordinator_service) = &self.coordinator_service {
            if let Some(_embedding_coordinator) = coordinator_service.get_embedding_coordinator() {
                debug!("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º EmbeddingCoordinator –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è embedding");
                // NOTE: –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ embedding_coordinator –Ω–µ –∏–º–µ–µ—Ç get_embedding –º–µ—Ç–æ–¥–∞
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback embedding
                return Ok(self.generate_fallback_embedding(text));
            }
        }

        // Fallback –Ω–∞ –ø—Ä—è–º–æ–π cache + fallback embedding
        if let Some(_cache) = self.get_cache() {
            debug!("üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º cache –Ω–∞ –Ω–∞–ª–∏—á–∏–µ embedding");

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
            // NOTE: EmbeddingCacheInterface –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç async get –º–µ—Ç–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            // –ü–æ—ç—Ç–æ–º—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback embedding

            let embedding = self.generate_fallback_embedding(text);

            debug!(
                "‚úÖ CacheService: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω embedding —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ {} –¥–ª—è '{}'",
                embedding.len(),
                text
            );

            Ok(embedding)
        } else {
            // –ï—Å–ª–∏ cache –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback
            debug!("‚ö†Ô∏è Cache –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback embedding");
            Ok(self.generate_fallback_embedding(text))
        }
    }

    /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å fallback embedding
    #[allow(dead_code)]
    fn generate_fallback_embedding(&self, text: &str) -> Vec<f32> {
        let mut embedding = vec![0.0; self.embedding_dimension];
        let hash = text.chars().fold(0u32, |acc, c| acc.wrapping_add(c as u32));

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π embedding –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞
        for (i, val) in embedding.iter_mut().enumerate() {
            *val = ((hash.wrapping_add(i as u32) % 1000) as f32 / 1000.0) - 0.5;
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
        let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
        if norm > 0.0 {
            for val in embedding.iter_mut() {
                *val /= norm;
            }
        }

        debug!(
            "üîß CacheService: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω fallback embedding —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ {} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{}'",
            self.embedding_dimension, text
        );
        embedding
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    #[allow(dead_code)]
    async fn get_cache_stats(&self) -> (u64, u64, u64) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        if let Some(coordinator_service) = &self.coordinator_service {
            if let Some(_embedding_coordinator) = coordinator_service.get_embedding_coordinator() {
                debug!("üìä –ü–æ–ª—É—á–∞–µ–º cache —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ EmbeddingCoordinator");
                // NOTE: –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ embedding_coordinator –Ω–µ –∏–º–µ–µ—Ç cache_stats –º–µ—Ç–æ–¥–∞
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                return (0, 0, 0);
            }
        }

        // Fallback –Ω–∞ –ø—Ä—è–º–æ–π cache
        if let Some(cache) = self.get_cache() {
            debug!("üìä –ü–æ–ª—É—á–∞–µ–º cache —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é");
            return cache.stats();
        }

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        warn!("‚ö†Ô∏è Cache —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        (0, 0, 0) // hits, misses, size
    }

    /// –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
    #[allow(dead_code)]
    async fn clear_cache(&self) -> Result<()> {
        if let Some(_cache) = self.get_cache() {
            debug!("üßπ –û—á–∏—Å—Ç–∫–∞ cache");

            // NOTE: EmbeddingCacheInterface –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç clear –º–µ—Ç–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ cache.clear()

            info!("‚úÖ Cache –æ—á–∏—â–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
            Ok(())
        } else {
            Err(anyhow::anyhow!("Cache –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"))
        }
    }

    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    #[allow(dead_code)]
    async fn set_cache_size(&self, size: usize) -> Result<()> {
        info!("‚öôÔ∏è CacheService: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ cache = {}", size);

        if let Some(_cache) = self.get_cache() {
            // NOTE: EmbeddingCacheInterface –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç set_size –º–µ—Ç–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ cache.set_size(size)

            info!("‚úÖ –†–∞–∑–º–µ—Ä cache —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {} (–∑–∞–≥–ª—É—à–∫–∞)", size);
            Ok(())
        } else {
            Err(anyhow::anyhow!("Cache –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞"))
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å cache hit rate
    #[allow(dead_code)]
    async fn get_cache_hit_rate(&self) -> f64 {
        let (hits, misses, _size) = self.get_cache_stats().await;

        if hits + misses == 0 {
            return 0.0;
        }

        let hit_rate = (hits as f64 / (hits + misses) as f64) * 100.0;
        debug!("üìä CacheService: hit rate = {:.1}%", hit_rate);

        hit_rate
    }
}

impl CacheService {
    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É cache
    #[allow(dead_code)]
    pub async fn get_detailed_cache_stats(&self) -> CacheDetailedStats {
        let (hits, misses, size) = self.get_cache_stats().await;
        let hit_rate = self.get_cache_hit_rate().await;

        CacheDetailedStats {
            cache_hits: hits,
            cache_misses: misses,
            cache_size: size,
            hit_rate,
            total_requests: hits + misses,
            embedding_dimension: self.embedding_dimension,
            coordinator_available: self.coordinator_service.is_some(),
            cache_available: self.get_cache().is_some(),
        }
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å embedding dimension –¥–ª—è fallback
    #[allow(dead_code)]
    pub fn set_embedding_dimension(&mut self, dimension: usize) {
        info!(
            "‚öôÔ∏è CacheService: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ embedding dimension = {}",
            dimension
        );
        self.embedding_dimension = dimension;
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é embedding dimension
    #[allow(dead_code)]
    pub fn get_embedding_dimension(&self) -> usize {
        self.embedding_dimension
    }
}

/// –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ cache
#[derive(Debug)]
pub struct CacheDetailedStats {
    pub cache_hits: u64,
    pub cache_misses: u64,
    pub cache_size: u64,
    pub hit_rate: f64,
    pub total_requests: u64,
    pub embedding_dimension: usize,
    pub coordinator_available: bool,
    pub cache_available: bool,
}
