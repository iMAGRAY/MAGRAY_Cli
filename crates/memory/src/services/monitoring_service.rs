//! MonitoringService - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∏ –º–µ—Ç—Ä–∏–∫–∏
//!
//! Single Responsibility: —Ç–æ–ª—å–∫–æ monitoring –∏ metrics
//! - health monitoring
//! - performance metrics collection
//! - system resource tracking
//! - readiness checks

use anyhow::Result;
use async_trait::async_trait;
use std::sync::Arc;
use std::time::Duration;
use tokio::sync::RwLock;
use tracing::{debug, error, info, warn};

use crate::{
    batch_manager::BatchStats,
    di::{traits::DIResolver, UnifiedContainer},
    health::{HealthMonitor, SystemHealthStatus},
    promotion::PromotionStats,
    service_di::MemorySystemStats,
    services::traits::{MonitoringServiceTrait, ProductionMetrics},
    services::CoordinatorServiceTrait,
};
use crate::di::core_traits::ServiceResolver;

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/// –û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
#[allow(dead_code)]
pub struct MonitoringService {
    /// DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    container: Arc<UnifiedContainer>,
    /// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ production –º–µ—Ç—Ä–∏–∫–∏
    production_metrics: Arc<RwLock<ProductionMetrics>>,
    /// –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
    monitoring_tasks_count: Arc<std::sync::atomic::AtomicU32>,
    /// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    coordinator_service: Option<Arc<dyn CoordinatorServiceTrait>>,
}

impl MonitoringService {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π MonitoringService
    pub fn new(container: Arc<UnifiedContainer>) -> Self {
        info!("üìä –°–æ–∑–¥–∞–Ω–∏–µ MonitoringService –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");

        Self {
            container,
            production_metrics: Arc::new(RwLock::new(ProductionMetrics::default())),
            monitoring_tasks_count: Arc::new(std::sync::atomic::AtomicU32::new(0)),
            coordinator_service: None,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å —Å coordinator service –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    #[allow(dead_code)]
    pub fn new_with_coordinator(
        container: Arc<UnifiedContainer>,
        coordinator_service: Arc<dyn CoordinatorServiceTrait>,
    ) -> Self {
        info!("üìä –°–æ–∑–¥–∞–Ω–∏–µ MonitoringService —Å CoordinatorService");

        Self {
            container,
            production_metrics: Arc::new(RwLock::new(ProductionMetrics::default())),
            monitoring_tasks_count: Arc::new(std::sync::atomic::AtomicU32::new(0)),
            coordinator_service: Some(coordinator_service),
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å health monitor –∏–∑ DI
    #[allow(dead_code)]
    fn get_health_monitor(&self) -> Option<Arc<HealthMonitor>> {
        self.container.try_resolve::<HealthMonitor>()
    }
}

#[async_trait]
impl MonitoringServiceTrait for MonitoringService {
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    #[allow(dead_code)]
    async fn start_production_monitoring(&self) -> Result<()> {
        info!("üìä –ó–∞–ø—É—Å–∫ production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");

        let production_metrics = self.production_metrics.clone();
        let counter = self.monitoring_tasks_count.clone();

        tokio::spawn(async move {
            counter.fetch_add(1, std::sync::atomic::Ordering::Relaxed);

            let mut interval = tokio::time::interval(Duration::from_secs(60));

            loop {
                interval.tick().await;

                let metrics = production_metrics.read().await;

                if metrics.total_operations > 0 {
                    let success_rate = (metrics.successful_operations as f64
                        / metrics.total_operations as f64)
                        * 100.0;

                    debug!(
                        "üìä Production –º–µ—Ç—Ä–∏–∫–∏: –æ–ø–µ—Ä–∞—Ü–∏–π={}, —É—Å–ø–µ—Ö={}%, avg_response={}ms",
                        metrics.total_operations, success_rate, metrics.avg_response_time_ms
                    );

                    if success_rate < 95.0 {
                        warn!("üìâ –ù–∏–∑–∫–∏–π success rate: {:.1}%", success_rate);
                    }

                    if metrics.avg_response_time_ms > 100.0 {
                        warn!(
                            "‚è±Ô∏è –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {:.1}ms",
                            metrics.avg_response_time_ms
                        );
                    }
                }
            }
        });

        debug!("üìä Production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω");
        Ok(())
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å health –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    #[allow(dead_code)]
    async fn start_health_monitoring(&self) -> Result<()> {
        if let Some(coordinator_service) = &self.coordinator_service {
            if let Some(health_manager) = coordinator_service.get_health_manager() {
                info!("üöë –ó–∞–ø—É—Å–∫ health –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ HealthManager...");

                let _manager = health_manager.clone();
                let counter = self.monitoring_tasks_count.clone();

                tokio::spawn(async move {
                    counter.fetch_add(1, std::sync::atomic::Ordering::Relaxed);

                    let mut interval = tokio::time::interval(Duration::from_secs(30));

                    loop {
                        interval.tick().await;

                        // NOTE: run_health_check –∑–∞–≥–ª—É—à–∫–∞
                        if let Err(e) = async { Ok(()) as Result<()> }.await {
                            error!("‚ùå Health check –Ω–µ —É–¥–∞–ª—Å—è: {}", e);
                        }
                    }
                });

                debug!("üöë Health –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω");
            } else {
                warn!("‚ö†Ô∏è HealthManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è health –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
            }
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º–æ–π health monitor –µ—Å–ª–∏ –Ω–µ—Ç coordinator service
            if let Some(health_monitor) = self.get_health_monitor() {
                info!("üöë –ó–∞–ø—É—Å–∫ fallback health –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");

                let monitor = health_monitor.clone();
                let counter = self.monitoring_tasks_count.clone();

                tokio::spawn(async move {
                    counter.fetch_add(1, std::sync::atomic::Ordering::Relaxed);

                    let mut interval = tokio::time::interval(Duration::from_secs(60));

                    loop {
                        interval.tick().await;

                        let health = monitor.get_system_health();
                        debug!("üöë System health: {:?}", health);
                    }
                });

                debug!("üöë Fallback health –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω");
            } else {
                warn!("‚ö†Ô∏è –ù–∏ HealthManager, –Ω–∏ HealthMonitor –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
            }
        }

        Ok(())
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å resource –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    #[allow(dead_code)]
    async fn start_resource_monitoring(&self) -> Result<()> {
        if let Some(coordinator_service) = &self.coordinator_service {
            if let Some(resource_controller) = coordinator_service.get_resource_controller() {
                info!("üíæ –ó–∞–ø—É—Å–∫ resource –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ auto-scaling...");

                // –ó–∞–ø—É—Å–∫–∞–µ–º auto-scaling monitoring
                resource_controller.start_autoscaling_monitoring().await?;

                debug!("üíæ Resource –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω");
            } else {
                warn!("‚ö†Ô∏è ResourceController –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è resource –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
            }
        } else {
            warn!("‚ö†Ô∏è CoordinatorService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è resource –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        }

        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    #[allow(dead_code)]
    async fn perform_readiness_checks(&self) -> Result<()> {
        info!("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏...");

        if let Some(coordinator_service) = &self.coordinator_service {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ (–∑–∞–≥–ª—É—à–∫–∏)
            let mut coordinator_statuses = Vec::new();

            if coordinator_service.get_embedding_coordinator().is_some() {
                coordinator_statuses.push(("EmbeddingCoordinator", true));
            }

            if coordinator_service.get_search_coordinator().is_some() {
                coordinator_statuses.push(("SearchCoordinator", true));
            }

            if coordinator_service.get_health_manager().is_some() {
                coordinator_statuses.push(("HealthManager", true));
            }

            if coordinator_service.get_resource_controller().is_some() {
                coordinator_statuses.push(("ResourceController", true));
            }

            // –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã (–∑–∞–≥–ª—É—à–∫–∞)
            for (name, _ready) in &coordinator_statuses {
                debug!("‚úÖ {} –≥–æ—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)", name);
            }

            info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã");
        } else {
            info!("‚ÑπÔ∏è CoordinatorService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤");
        }

        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let di_stats = crate::DIContainerStats::default();
        if di_stats.registered_factories == 0 {
            return Err(anyhow::anyhow!(
                "DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—É—Å—Ç - –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤"
            ));
        }

        info!("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã");
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    #[allow(dead_code)]
    async fn get_system_stats(&self) -> MemorySystemStats {
        debug!("üìä –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...");

        // Health status (–∑–∞–≥–ª—É—à–∫–∞)
        let health_status = if let Some(_coordinator_service) = &self.coordinator_service {
            // Fallback –Ω–∞ –ø—Ä—è–º–æ–π health monitor
            if let Some(health) = self.get_health_monitor() {
                Ok(health.get_system_health())
            } else {
                Err(anyhow::anyhow!("Health monitoring –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
            }
        } else {
            Err(anyhow::anyhow!("CoordinatorService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
        };

        // Cache —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        let cache_stats = (0, 0, 0); // hits, misses, size

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∏, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É—é—Ç async –∏–ª–∏ —Å–ª–æ–∂–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
        let promotion_stats = PromotionStats::default();
        let batch_stats = BatchStats::default();
        let gpu_stats = None; // GPU stats —Ç—Ä–µ–±—É—é—Ç async

        MemorySystemStats {
            health_status,
            cache_hits: cache_stats.0,
            cache_misses: cache_stats.1,
            cache_size: cache_stats.2,
            promotion_stats,
            batch_stats,
            gpu_stats,
            di_container_stats: crate::DIContainerStats::default(),
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å health status
    #[allow(dead_code)]
    async fn check_health(&self) -> Result<SystemHealthStatus> {
        if let Some(health_monitor) = self.get_health_monitor() {
            Ok(health_monitor.get_system_health())
        } else {
            Err(anyhow::anyhow!("HealthMonitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å production –º–µ—Ç—Ä–∏–∫–∏
    #[allow(dead_code)]
    async fn get_production_metrics(&self) -> Result<ProductionMetrics> {
        let metrics = self.production_metrics.read().await;
        Ok(metrics.clone())
    }

    /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ summary
    #[allow(dead_code)]
    async fn log_initialization_summary(&self) {
        let _production_metrics = self.production_metrics.read().await;
        let coordinator_count = if let Some(coordinator_service) = &self.coordinator_service {
            coordinator_service.count_active_coordinators()
        } else {
            0
        };
        let di_stats = crate::DIContainerStats::default();
        let monitoring_tasks = self
            .monitoring_tasks_count
            .load(std::sync::atomic::Ordering::Relaxed);

        info!("üéâ === MONITORING INITIALIZATION SUMMARY ===");
        info!("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤: {}", coordinator_count);
        info!("üîß DI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {}", di_stats.registered_factories);
        info!("üìà –ó–∞–ø—É—â–µ–Ω–æ monitoring –∑–∞–¥–∞—á: {}", monitoring_tasks);
        info!("‚ö° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É");
        info!("===============================================");
    }
}

impl MonitoringService {
    /// –û–±–Ω–æ–≤–∏—Ç—å production –º–µ—Ç—Ä–∏–∫–∏ (helper –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ResilienceService)
    #[allow(dead_code)]
    pub async fn update_production_metrics(&self, new_metrics: ProductionMetrics) {
        let mut metrics = self.production_metrics.write().await;
        *metrics = new_metrics;
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã—Ö –∑–∞–¥–∞—á
    #[allow(dead_code)]
    pub fn get_monitoring_tasks_count(&self) -> u32 {
        self.monitoring_tasks_count
            .load(std::sync::atomic::Ordering::Relaxed)
    }
}
