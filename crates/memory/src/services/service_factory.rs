//! ServiceFactory - Dependency Injection integration –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
//!
//! –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:
//! - CoreMemoryService
//! - CoordinatorService  
//! - ResilienceService
//! - MonitoringService
//! - CacheService

use anyhow::Result;
use std::sync::Arc;
use tracing::{debug, info};

use crate::{
    di::UnifiedContainer,
    services::traits::{
        CacheServiceTrait, CoordinatorServiceTrait, CoreMemoryServiceTrait,
        MonitoringServiceTrait, ResilienceServiceTrait,
    },
    CacheServiceTrait as _, CoordinatorServiceTrait as _, CoreMemoryServiceTrait as _, MonitoringServiceTrait as _, ResilienceServiceTrait as _,
    services::{
        CacheService, CoordinatorService, CoreMemoryService, MonitoringService, ResilienceService,
    },
};

/// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ Dependency Injection –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
#[allow(dead_code)]
pub struct ServiceFactory {
    container: Arc<UnifiedContainer>,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
#[allow(dead_code)]
pub struct ServiceCollection {
    pub core_memory: Arc<dyn CoreMemoryServiceTrait>,
    pub coordinator: Arc<dyn CoordinatorServiceTrait>,
    pub resilience: Arc<dyn ResilienceServiceTrait>,
    pub monitoring: Arc<dyn MonitoringServiceTrait>,
    pub cache: Arc<dyn CacheServiceTrait>,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
#[derive(Debug, Clone)]
pub struct ServiceFactoryConfig {
    pub max_concurrent_operations: usize,
    pub circuit_breaker_threshold: u32,
    pub circuit_breaker_timeout_secs: u64,
    pub embedding_dimension: usize,
    pub production_mode: bool,
}

impl Default for ServiceFactoryConfig {
    fn default() -> Self {
        Self {
            max_concurrent_operations: 50,
            circuit_breaker_threshold: 5,
            circuit_breaker_timeout_secs: 60,
            embedding_dimension: 1024,
            production_mode: false,
        }
    }
}

impl ServiceFactoryConfig {
    /// –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è production
    #[allow(dead_code)]
    pub fn production() -> Self {
        Self {
            max_concurrent_operations: 100,
            circuit_breaker_threshold: 3,
            circuit_breaker_timeout_secs: 30,
            embedding_dimension: 1024,
            production_mode: true,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    #[allow(dead_code)]
    pub fn test() -> Self {
        Self {
            max_concurrent_operations: 10,
            circuit_breaker_threshold: 10,
            circuit_breaker_timeout_secs: 5,
            embedding_dimension: 512,
            production_mode: false,
        }
    }
}

impl ServiceFactory {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Ä–≤–∏—Å–æ–≤
    pub fn new(container: Arc<UnifiedContainer>) -> Self {
        info!("üè≠ –°–æ–∑–¥–∞–Ω–∏–µ ServiceFactory –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤");
        Self { container }
    }

    /// –°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    #[allow(dead_code)]
    pub async fn create_services(&self) -> Result<ServiceCollection> {
        let config = ServiceFactoryConfig::default();
        self.create_services_with_config(config).await
    }

    /// –°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    #[allow(dead_code)]
    pub async fn create_services_with_config(
        &self,
        config: ServiceFactoryConfig,
    ) -> Result<ServiceCollection> {
        info!("üè≠ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...");
        debug!(
            "üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: max_ops={}, threshold={}, timeout={}s, dim={}, prod={}",
            config.max_concurrent_operations,
            config.circuit_breaker_threshold,
            config.circuit_breaker_timeout_secs,
            config.embedding_dimension,
            config.production_mode
        );

        // 1. –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        let resilience = self.create_resilience_service(&config)?;
        let coordinator = self.create_coordinator_service()?;

        // 2. –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        let monitoring = self.create_monitoring_service(coordinator.clone())?;
        let cache = self.create_cache_service(coordinator.clone(), &config)?;
        let core_memory = self.create_core_memory_service(&config)?;

        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã (—Ç—Ä–µ–±—É–µ—Ç DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
        coordinator.create_coordinators(&self.container).await?;
        coordinator.initialize_coordinators().await?;

        info!("‚úÖ –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");

        Ok(ServiceCollection {
            core_memory,
            coordinator,
            resilience,
            monitoring,
            cache,
        })
    }

    /// –°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ core memory service (–¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π)
    #[allow(dead_code)]
    pub fn create_core_memory_only(
        &self,
        config: &ServiceFactoryConfig,
    ) -> Result<Arc<dyn CoreMemoryServiceTrait>> {
        debug!("üóÉÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ CoreMemoryService...");
        self.create_core_memory_service(config)
    }

    /// –°–æ–∑–¥–∞—Ç—å CoreMemoryService
    #[allow(dead_code)]
    fn create_core_memory_service(
        &self,
        config: &ServiceFactoryConfig,
    ) -> Result<Arc<dyn CoreMemoryServiceTrait>> {
        let service = if config.production_mode {
            CoreMemoryService::new_production(self.container.clone())
        } else {
            CoreMemoryService::new(self.container.clone(), config.max_concurrent_operations)
        };

        debug!("‚úÖ CoreMemoryService —Å–æ–∑–¥–∞–Ω");
        Ok(Arc::new(service))
    }

    /// –°–æ–∑–¥–∞—Ç—å CoordinatorService
    #[allow(dead_code)]
    fn create_coordinator_service(&self) -> Result<Arc<dyn CoordinatorServiceTrait>> {
        let service = CoordinatorService::new();
        debug!("‚úÖ CoordinatorService —Å–æ–∑–¥–∞–Ω");
        Ok(Arc::new(service))
    }

    /// –°–æ–∑–¥–∞—Ç—å ResilienceService
    #[allow(dead_code)]
    fn create_resilience_service(
        &self,
        config: &ServiceFactoryConfig,
    ) -> Result<Arc<dyn ResilienceServiceTrait>> {
        let service = if config.production_mode {
            ResilienceService::new_production()
        } else {
            ResilienceService::new_with_threshold(
                config.circuit_breaker_threshold,
                std::time::Duration::from_secs(config.circuit_breaker_timeout_secs),
            )
        };

        debug!("‚úÖ ResilienceService —Å–æ–∑–¥–∞–Ω");
        Ok(Arc::new(service))
    }

    /// –°–æ–∑–¥–∞—Ç—å MonitoringService
    #[allow(dead_code)]
    fn create_monitoring_service(
        &self,
        coordinator: Arc<dyn CoordinatorServiceTrait>,
    ) -> Result<Arc<dyn MonitoringServiceTrait>> {
        let service = MonitoringService::new_with_coordinator(self.container.clone(), coordinator);

        debug!("‚úÖ MonitoringService —Å–æ–∑–¥–∞–Ω");
        Ok(Arc::new(service))
    }

    /// –°–æ–∑–¥–∞—Ç—å CacheService
    #[allow(dead_code)]
    fn create_cache_service(
        &self,
        coordinator: Arc<dyn CoordinatorServiceTrait>,
        config: &ServiceFactoryConfig,
    ) -> Result<Arc<dyn CacheServiceTrait>> {
        let mut service = CacheService::new_with_coordinator(self.container.clone(), coordinator);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º embedding dimension
        service.set_embedding_dimension(config.embedding_dimension);

        debug!("‚úÖ CacheService —Å–æ–∑–¥–∞–Ω");
        Ok(Arc::new(service))
    }
}

impl ServiceCollection {
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    #[allow(dead_code)]
    pub async fn initialize_all(&self) -> Result<()> {
        info!("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...");

        // –ó–∞–ø—É—Å–∫–∞–µ–º monitoring
        self.monitoring.start_production_monitoring().await?;
        self.monitoring.start_health_monitoring().await?;
        self.monitoring.start_resource_monitoring().await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        self.monitoring.perform_readiness_checks().await?;

        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.monitoring.log_initialization_summary().await;

        info!("‚úÖ –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        Ok(())
    }

    /// Shutdown –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    #[allow(dead_code)]
    pub async fn shutdown_all(&self) -> Result<()> {
        info!("üõë Shutdown –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...");

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
        self.coordinator.shutdown_coordinators().await?;

        info!("‚úÖ –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    #[allow(dead_code)]
    pub async fn get_comprehensive_stats(&self) -> Result<ComprehensiveStats> {
        debug!("üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...");

        let system_stats = self.monitoring.get_system_stats().await;
        let production_metrics = self.monitoring.get_production_metrics().await?;
        let cache_hit_rate = self.cache.get_cache_hit_rate().await;
        let circuit_breaker_open = self.resilience.get_circuit_breaker_status().await;
        let coordinator_count = self.coordinator.count_active_coordinators();

        Ok(ComprehensiveStats {
            system_stats,
            production_metrics,
            cache_hit_rate,
            circuit_breaker_open,
            coordinator_count,
        })
    }
}

/// –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
#[derive(Debug)]
pub struct ComprehensiveStats {
    pub system_stats: crate::service_di::MemorySystemStats,
    pub production_metrics: crate::services::traits::ProductionMetrics,
    pub cache_hit_rate: f64,
    pub circuit_breaker_open: bool,
    pub coordinator_count: usize,
}
