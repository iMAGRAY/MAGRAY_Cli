//! ResilienceService - –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
//!
//! Single Responsibility: —Ç–æ–ª—å–∫–æ resilience –ª–æ–≥–∏–∫–∞
//! - circuit breaker implementation
//! - retry logic  
//! - failure tracking –∏ recovery
//! - error handling patterns

use anyhow::Result;
use async_trait::async_trait;
use std::time::{Duration, Instant};
use tokio::sync::RwLock;
use tracing::{debug, error, info, warn};

use crate::services::traits::{ProductionMetrics, ResilienceServiceTrait};

/// Circuit breaker —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#[derive(Debug, Clone)]
struct CircuitBreakerState {
    is_open: bool,
    failure_count: u32,
    last_failure: Option<Instant>,
    failure_threshold: u32,
    recovery_timeout: Duration,
}

impl Default for CircuitBreakerState {
    fn default() -> Self {
        Self {
            is_open: false,
            failure_count: 0,
            last_failure: None,
            failure_threshold: 5,
            recovery_timeout: Duration::from_secs(60),
        }
    }
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è resilience patterns
/// –û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
#[allow(dead_code)]
pub struct ResilienceService {
    /// Circuit breaker –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    circuit_breaker: RwLock<CircuitBreakerState>,
    /// Production –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è tracking
    production_metrics: RwLock<ProductionMetrics>,
}

impl ResilienceService {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ResilienceService
    pub fn new() -> Self {
        info!("üõ°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ ResilienceService –¥–ª—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏");

        Self {
            circuit_breaker: RwLock::new(CircuitBreakerState::default()),
            production_metrics: RwLock::new(ProductionMetrics::default()),
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ circuit breaker
    #[allow(dead_code)]
    pub fn new_with_threshold(failure_threshold: u32, recovery_timeout: Duration) -> Self {
        info!(
            "üõ°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ ResilienceService —Å threshold={}, recovery_timeout={:?}",
            failure_threshold, recovery_timeout
        );

        let mut breaker_state = CircuitBreakerState::default();
        breaker_state.failure_threshold = failure_threshold;
        breaker_state.recovery_timeout = recovery_timeout;

        Self {
            circuit_breaker: RwLock::new(breaker_state),
            production_metrics: RwLock::new(ProductionMetrics::default()),
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å –¥–ª—è production —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    #[allow(dead_code)]
    pub fn new_production() -> Self {
        Self::new_with_threshold(3, Duration::from_secs(30)) // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π circuit breaker –¥–ª—è production
    }

    /// –°–æ–∑–¥–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –º—è–≥–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    #[allow(dead_code)]
    pub fn new_for_tests() -> Self {
        Self::new_with_threshold(10, Duration::from_secs(5)) // –ú—è–≥–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    }
}

#[async_trait]
impl ResilienceServiceTrait for ResilienceService {
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å circuit breaker
    #[allow(dead_code)]
    async fn check_circuit_breaker(&self) -> Result<()> {
        let mut breaker = self.circuit_breaker.write().await;

        if breaker.is_open {
            if let Some(last_failure) = breaker.last_failure {
                if last_failure.elapsed() > breaker.recovery_timeout {
                    breaker.is_open = false;
                    breaker.failure_count = 0;
                    info!(
                        "üîÑ Circuit breaker –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ {:?}",
                        breaker.recovery_timeout
                    );
                    return Ok(());
                }
            }
            return Err(anyhow::anyhow!(
                "üö´ Circuit breaker –æ—Ç–∫—Ä—ã—Ç - –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            ));
        }

        Ok(())
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    #[allow(dead_code)]
    async fn record_successful_operation(&self, duration: Duration) {
        // –û–±–Ω–æ–≤–ª—è–µ–º circuit breaker
        {
            let mut breaker = self.circuit_breaker.write().await;
            breaker.failure_count = 0;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º production –º–µ—Ç—Ä–∏–∫–∏
        {
            let mut metrics = self.production_metrics.write().await;
            metrics.total_operations += 1;
            metrics.successful_operations += 1;

            // Exponential moving average –¥–ª—è response time
            let duration_ms = duration.as_millis() as f64;
            let alpha = 0.1;
            if metrics.avg_response_time_ms == 0.0 {
                metrics.avg_response_time_ms = duration_ms;
            } else {
                metrics.avg_response_time_ms =
                    alpha * duration_ms + (1.0 - alpha) * metrics.avg_response_time_ms;
            }
        }

        debug!("‚úÖ ResilienceService: —É—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞ {:?}", duration);
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    #[allow(dead_code)]
    async fn record_failed_operation(&self, duration: Duration) {
        // –û–±–Ω–æ–≤–ª—è–µ–º circuit breaker
        {
            let mut breaker = self.circuit_breaker.write().await;
            breaker.failure_count += 1;
            breaker.last_failure = Some(Instant::now());

            if breaker.failure_count >= breaker.failure_threshold {
                breaker.is_open = true;
                error!(
                    "üö´ Circuit breaker –æ—Ç–∫—Ä—ã—Ç –ø–æ—Å–ª–µ {} –æ—à–∏–±–æ–∫",
                    breaker.failure_count
                );
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º production –º–µ—Ç—Ä–∏–∫–∏
        {
            let mut metrics = self.production_metrics.write().await;
            metrics.total_operations += 1;
            metrics.failed_operations += 1;

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ circuit breaker trips –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
            if self.circuit_breaker.read().await.is_open {
                metrics.circuit_breaker_trips += 1;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º response time –¥–∞–∂–µ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            let duration_ms = duration.as_millis() as f64;
            let alpha = 0.1;
            if metrics.avg_response_time_ms == 0.0 {
                metrics.avg_response_time_ms = duration_ms;
            } else {
                metrics.avg_response_time_ms =
                    alpha * duration_ms + (1.0 - alpha) * metrics.avg_response_time_ms;
            }
        }

        warn!("‚ùå ResilienceService: –Ω–µ—É–¥–∞—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞ {:?}", duration);
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å circuit breaker
    #[allow(dead_code)]
    async fn get_circuit_breaker_status(&self) -> bool {
        let breaker = self.circuit_breaker.read().await;
        breaker.is_open
    }

    /// –°–±—Ä–æ—Å–∏—Ç—å circuit breaker
    #[allow(dead_code)]
    async fn reset_circuit_breaker(&self) -> Result<()> {
        let mut breaker = self.circuit_breaker.write().await;
        breaker.is_open = false;
        breaker.failure_count = 0;
        breaker.last_failure = None;

        info!("üîÑ Circuit breaker –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—à–µ–Ω");
        Ok(())
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å threshold –¥–ª—è circuit breaker
    #[allow(dead_code)]
    async fn set_failure_threshold(&self, threshold: u32) -> Result<()> {
        let mut breaker = self.circuit_breaker.write().await;
        breaker.failure_threshold = threshold;

        info!("‚öôÔ∏è Circuit breaker threshold —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {}", threshold);
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É failures
    #[allow(dead_code)]
    async fn get_failure_stats(&self) -> (u32, Duration) {
        let breaker = self.circuit_breaker.read().await;
        let recovery_timeout = breaker.recovery_timeout;
        let failure_count = breaker.failure_count;

        (failure_count, recovery_timeout)
    }
}

impl ResilienceService {
    /// –ü–æ–ª—É—á–∏—Ç—å production –º–µ—Ç—Ä–∏–∫–∏ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π helper –º–µ—Ç–æ–¥)
    #[allow(dead_code)]
    pub async fn get_production_metrics(&self) -> ProductionMetrics {
        let metrics = self.production_metrics.read().await;
        metrics.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É resilience
    #[allow(dead_code)]
    pub async fn get_resilience_stats(&self) -> ResilienceStats {
        let breaker = self.circuit_breaker.read().await;
        let metrics = self.production_metrics.read().await;

        ResilienceStats {
            circuit_breaker_open: breaker.is_open,
            failure_count: breaker.failure_count,
            failure_threshold: breaker.failure_threshold,
            recovery_timeout: breaker.recovery_timeout,
            last_failure: breaker.last_failure,
            total_operations: metrics.total_operations,
            successful_operations: metrics.successful_operations,
            failed_operations: metrics.failed_operations,
            circuit_breaker_trips: metrics.circuit_breaker_trips,
            success_rate: if metrics.total_operations > 0 {
                (metrics.successful_operations as f64 / metrics.total_operations as f64) * 100.0
            } else {
                0.0
            },
        }
    }
}

impl Default for ResilienceService {
    fn default() -> Self {
        Self::new()
    }
}

/// –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ resilience
#[derive(Debug)]
pub struct ResilienceStats {
    pub circuit_breaker_open: bool,
    pub failure_count: u32,
    pub failure_threshold: u32,
    pub recovery_timeout: Duration,
    pub last_failure: Option<Instant>,
    pub total_operations: u64,
    pub successful_operations: u64,
    pub failed_operations: u64,
    pub circuit_breaker_trips: u64,
    pub success_rate: f64,
}
