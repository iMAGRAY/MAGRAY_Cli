//! CoreMemoryService - –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é
//!
//! Single Responsibility: —Ç–æ–ª—å–∫–æ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
//! - insert/search/update/delete
//! - batch –æ–ø–µ—Ä–∞—Ü–∏–∏
//! - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å VectorStore —á–µ—Ä–µ–∑ DI

use anyhow::Result;
use async_trait::async_trait;
use std::sync::Arc;
use tokio::sync::Semaphore;
use tracing::{debug, info, warn};

use crate::{
    di::UnifiedContainer,
    di::core_traits::TypeSafeResolver,
    orchestration::SearchCoordinator,
    types::Record,
    VectorStore,
    MetricsCollector,
    Layer,
    SearchOptions,
    BatchInsertResult,
    BatchSearchResult,
    CoreMemoryServiceTrait,
};
use crate::batch_manager::BatchOperationManager;
use common::OperationTimer;

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è core memory –æ–ø–µ—Ä–∞—Ü–∏–π
/// –û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
#[allow(dead_code)]
pub struct CoreMemoryService {
    /// Type-safe resolver –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–æ–±—ä–µ–∫—Ç-–±–µ–∑–æ–ø–∞—Å–Ω—ã–π)
    resolver: TypeSafeResolver,
    /// Semaphore –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è concurrent –æ–ø–µ—Ä–∞—Ü–∏–π
    operation_limiter: Arc<Semaphore>,
}

impl CoreMemoryService {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π CoreMemoryService —Å type-safe resolver
    pub fn new(container: Arc<UnifiedContainer>, max_concurrent_operations: usize) -> Self {
        info!(
            "üóÉÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ CoreMemoryService —Å –ª–∏–º–∏—Ç–æ–º {} concurrent –æ–ø–µ—Ä–∞—Ü–∏–π –∏ object-safe resolver",
            max_concurrent_operations
        );

        // –°–æ–∑–¥–∞–µ–º type-safe resolver –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let resolver = container.as_object_safe_resolver();

        Self {
            resolver,
            operation_limiter: Arc::new(Semaphore::new(max_concurrent_operations)),
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub fn new_minimal(container: Arc<UnifiedContainer>) -> Self {
        Self::new(container, 10) // –ù–µ–±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    }

    /// –°–æ–∑–¥–∞—Ç—å production –≤–∞—Ä–∏–∞–Ω—Ç
    pub fn new_production(container: Arc<UnifiedContainer>) -> Self {
        Self::new(container, 100) // –í—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç –¥–ª—è production
    }

    /// –ü–æ–ª—É—á–∏—Ç—å VectorStore —á–µ—Ä–µ–∑ type-safe resolver
    fn get_vector_store(&self) -> Result<Arc<VectorStore>> {
        self.resolver.resolve::<VectorStore>()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å BatchOperationManager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    #[allow(dead_code)]
    fn get_batch_manager(&self) -> Option<Arc<BatchOperationManager>> {
        self.resolver.try_resolve::<BatchOperationManager>()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å MetricsCollector –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω  
    #[allow(dead_code)]
    fn get_metrics_collector(&self) -> Option<Arc<MetricsCollector>> {
        self.resolver.try_resolve::<MetricsCollector>()
    }
}

#[async_trait]
impl CoreMemoryServiceTrait for CoreMemoryService {
    /// –í—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
    #[allow(dead_code)]
    async fn insert(&self, record: Record) -> Result<()> {
        let _timer = OperationTimer::new("core_memory_insert");

        // –ü–æ–ª—É—á–∞–µ–º permit –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è concurrency
        let _permit = self
            .operation_limiter
            .acquire()
            .await
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å permit –¥–ª—è insert: {}", e))?;

        debug!("üîÑ CoreMemoryService: insert –∑–∞–ø–∏—Å–∏ {}", record.id);

        let store = self.get_vector_store()?;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch manager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if let Some(batch_manager) = self.get_batch_manager() {
            debug!("üîÑ Insert —á–µ—Ä–µ–∑ batch manager");
            batch_manager.add(record.clone()).await?;
        } else {
            debug!("üîÑ –ü—Ä—è–º–æ–π insert –≤ store");
            store.insert(&record).await?;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if let Some(metrics) = self.get_metrics_collector() {
            let duration = std::time::Duration::from_millis(1); // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            metrics.record_vector_insert(duration);
        }

        debug!("‚úÖ CoreMemoryService: –∑–∞–ø–∏—Å—å {} –≤—Å—Ç–∞–≤–ª–µ–Ω–∞", record.id);
        Ok(())
    }

    /// –í—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –±–∞—Ç—á–µ–º
    #[allow(dead_code)]
    async fn insert_batch(&self, records: Vec<Record>) -> Result<()> {
        let _timer = OperationTimer::new("core_memory_insert_batch");
        let batch_size = records.len();

        debug!("üîÑ CoreMemoryService: batch insert {} –∑–∞–ø–∏—Å–µ–π", batch_size);

        let store = self.get_vector_store()?;

        if let Some(batch_manager) = self.get_batch_manager() {
            batch_manager.add_batch(records).await?;
            debug!("‚úÖ Batch –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ batch manager");
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∫—É
            let refs: Vec<&Record> = records.iter().collect();
            store.insert_batch(&refs).await?;
            debug!("‚úÖ Batch –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ store");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if let Some(metrics) = self.get_metrics_collector() {
            let avg_time = std::time::Duration::from_millis(batch_size as u64);
            for _ in 0..batch_size {
                metrics.record_vector_insert(avg_time / batch_size as u32);
            }
        }

        info!(
            "‚úÖ CoreMemoryService: {} –∑–∞–ø–∏—Å–µ–π –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –±–∞—Ç—á–µ–º",
            batch_size
        );
        Ok(())
    }

    /// –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    /// NOTE: –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤, embedding –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è fallback –º–µ—Ç–æ–¥–æ–º
    #[allow(dead_code)]
    async fn search(
        &self,
        query: &str,
        layer: Layer,
        options: SearchOptions,
    ) -> Result<Vec<Record>> {
        let _timer = OperationTimer::new("core_memory_search");

        // –ü–æ–ª—É—á–∞–µ–º permit –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è concurrency
        let _permit = self
            .operation_limiter
            .acquire()
            .await
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å permit –¥–ª—è search: {}", e))?;

        debug!(
            "üîç CoreMemoryService: –ø–æ–∏—Å–∫ –≤ —Å–ª–æ–µ {:?}: '{}'",
            layer, query
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback embedding (–±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤)
        let embedding = self.generate_simple_embedding(query);

        let store = self.get_vector_store()?;
        let results = store.search(&embedding, layer, options.top_k).await?;

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if let Some(metrics) = self.get_metrics_collector() {
            let duration = std::time::Duration::from_millis(5); // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            metrics.record_vector_search(duration);
        }

        debug!(
            "‚úÖ CoreMemoryService: –Ω–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{}'",
            results.len(),
            query
        );
        Ok(results)
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    #[allow(dead_code)]
    async fn update(&self, record: Record) -> Result<()> {
        let _timer = OperationTimer::new("core_memory_update");
        let store = self.get_vector_store()?;

        debug!("üîÑ CoreMemoryService: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {}", record.id);

        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
        store.delete_by_id(&record.id, record.layer).await?;
        // –ó–∞—Ç–µ–º –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        store.insert(&record).await?;

        debug!("‚úÖ CoreMemoryService: –∑–∞–ø–∏—Å—å {} –æ–±–Ω–æ–≤–ª–µ–Ω–∞", record.id);
        Ok(())
    }

    /// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
    #[allow(dead_code)]
    async fn delete(&self, id: &uuid::Uuid, layer: Layer) -> Result<()> {
        let _timer = OperationTimer::new("core_memory_delete");
        let store = self.get_vector_store()?;

        debug!(
            "üîÑ CoreMemoryService: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {} –∏–∑ —Å–ª–æ—è {:?}",
            id, layer
        );
        store.delete_by_id(id, layer).await?;

        debug!("‚úÖ CoreMemoryService: –∑–∞–ø–∏—Å—å {} —É–¥–∞–ª–µ–Ω–∞", id);
        Ok(())
    }

    /// –ë–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    #[allow(dead_code)]
    async fn batch_insert(&self, records: Vec<Record>) -> Result<BatchInsertResult> {
        let timer = OperationTimer::new("core_memory_batch_insert");
        let total_records = records.len();
        let mut inserted = 0;
        let mut failed = 0;
        let mut errors = Vec::new();

        debug!(
            "üîÑ CoreMemoryService: –±–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ {} –∑–∞–ø–∏—Å–µ–π",
            total_records
        );

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch manager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if let Some(batch_manager) = self.get_batch_manager() {
            for record in records {
                match batch_manager.add(record).await {
                    Ok(_) => inserted += 1,
                    Err(e) => {
                        failed += 1;
                        errors.push(e.to_string());
                    }
                }
            }
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∫—É
            let store = self.get_vector_store()?;
            for record in records {
                match store.insert(&record).await {
                    Ok(_) => inserted += 1,
                    Err(e) => {
                        failed += 1;
                        errors.push(e.to_string());
                    }
                }
            }
        }

        let elapsed = timer.elapsed().as_millis() as u64;

        if failed > 0 {
            warn!(
                "‚ö†Ô∏è CoreMemoryService: –±–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ {}/{} —É—Å–ø–µ—à–Ω–æ, {} –æ—à–∏–±–æ–∫ –∑–∞ {}–º—Å",
                inserted, total_records, failed, elapsed
            );
        } else {
            info!(
                "‚úÖ CoreMemoryService: –±–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ {}/{} —É—Å–ø–µ—à–Ω–æ –∑–∞ {}–º—Å",
                inserted, total_records, elapsed
            );
        }

        Ok(BatchInsertResult {
            inserted,
            failed,
            errors,
            total_time_ms: elapsed,
        })
    }

    /// –ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫
    #[allow(dead_code)]
    async fn batch_search(
        &self,
        queries: Vec<String>,
        layer: Layer,
        options: SearchOptions,
    ) -> Result<BatchSearchResult> {
        let timer = OperationTimer::new("core_memory_batch_search");
        let mut results = Vec::new();

        debug!(
            "üîç CoreMemoryService: –±–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫ {} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–ª–æ–µ {:?}",
            queries.len(),
            layer
        );

        for query in &queries {
            let search_results = self.search(query, layer, options.clone()).await?;
            results.push(search_results);
        }

        let elapsed = timer.elapsed().as_millis() as u64;
        info!(
            "‚úÖ CoreMemoryService: –±–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {}–º—Å",
            elapsed
        );

        Ok(BatchSearchResult {
            queries,
            results,
            total_time_ms: elapsed,
        })
    }
}

impl CoreMemoryService {
    /// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π embedding –¥–ª—è fallback –ø–æ–∏—Å–∫–∞
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    #[allow(dead_code)]
    fn generate_simple_embedding(&self, text: &str) -> Vec<f32> {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1024 –¥–ª—è –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤)
        let dimension = 1024; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        let mut embedding = vec![0.0; dimension];
        let hash = text.chars().fold(0u32, |acc, c| acc.wrapping_add(c as u32));

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π embedding –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞
        for (i, val) in embedding.iter_mut().enumerate() {
            *val = ((hash.wrapping_add(i as u32) % 1000) as f32 / 1000.0) - 0.5;
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
        let norm = embedding.iter().map(|x| x * x).sum::<f32>().sqrt();
        if norm > 0.0 {
            for val in embedding.iter_mut() {
                *val /= norm;
            }
        }

        debug!(
            "üîß CoreMemoryService: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω simple embedding —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ {} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{}'",
            dimension, text
        );
        embedding
    }
}
