//! CoordinatorService - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏ –∏ –∏—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è  
//!
//! Single Responsibility: —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
//! - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
//! - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
//! - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ trait –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

use anyhow::Result;
use async_trait::async_trait;
use std::sync::Arc;
use tracing::{debug, info, warn};

use crate::di::core_traits::ServiceResolver;
#[cfg(feature = "gpu-acceleration")]
use crate::gpu_accelerated::GpuBatchProcessor;
use crate::health::HealthMonitor;
use crate::orchestration::{
    HealthManager, ResourceController, SearchCoordinator as SearchCoordinatorImpl,
};
use crate::services::traits::CoordinatorServiceTrait;
use crate::storage::VectorStore;
use crate::{
    cache_interface::EmbeddingCacheInterface,
    di::{traits::DIResolver, UnifiedContainer},
    orchestration::EmbeddingCoordinator as EmbeddingCoordinatorImpl,
    EmbeddingCache,
};

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
#[allow(dead_code)]
struct CoordinatorRefs {
    embedding_coordinator: Option<Arc<EmbeddingCoordinatorImpl>>,
    search_coordinator: Option<Arc<SearchCoordinatorImpl>>,
    health_manager: Option<Arc<HealthManager>>,
    resource_controller: Option<Arc<ResourceController>>,
}

impl Default for CoordinatorRefs {
    fn default() -> Self {
        Self {
            embedding_coordinator: None,
            search_coordinator: None,
            health_manager: None,
            resource_controller: None,
        }
    }
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏
/// –û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏
#[allow(dead_code)]
pub struct CoordinatorService {
    /// –°—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
    coordinators: Arc<tokio::sync::RwLock<CoordinatorRefs>>,
}

impl CoordinatorService {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π CoordinatorService
    pub fn new() -> Self {
        info!("üéØ –°–æ–∑–¥–∞–Ω–∏–µ CoordinatorService –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏");

        Self {
            coordinators: Arc::new(tokio::sync::RwLock::new(CoordinatorRefs::default())),
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å embedding coordinator
    #[allow(dead_code)]
    async fn create_embedding_coordinator(
        &self,
        container: &UnifiedContainer,
    ) -> Result<Arc<EmbeddingCoordinatorImpl>> {
        debug!("üéØ –°–æ–∑–¥–∞–Ω–∏–µ EmbeddingCoordinator...");

        #[cfg(feature = "gpu-acceleration")]
        let _gpu_processor = container.resolve::<GpuBatchProcessor>()?;
        #[cfg(not(feature = "gpu-acceleration"))]
        let _gpu_processor: Option<std::sync::Arc<()>> = None;

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π cache –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        let _cache = container.resolve::<EmbeddingCache>().ok();

        let coordinator = Arc::new(EmbeddingCoordinatorImpl::new_stub());
        debug!("‚úÖ EmbeddingCoordinator —Å–æ–∑–¥–∞–Ω");

        Ok(coordinator)
    }

    /// –°–æ–∑–¥–∞—Ç—å search coordinator  
    #[allow(dead_code)]
    async fn create_search_coordinator(
        &self,
        container: &UnifiedContainer,
        embedding_coordinator: &Arc<EmbeddingCoordinatorImpl>,
    ) -> Result<Arc<SearchCoordinatorImpl>> {
        debug!("üéØ –°–æ–∑–¥–∞–Ω–∏–µ SearchCoordinator...");

        let store = container.resolve::<VectorStore>()?;

        let coordinator = Arc::new(SearchCoordinatorImpl::new_production(
            store,
            embedding_coordinator.clone(),
            64,   // max concurrent searches
            2000, // cache size
        ));
        debug!("‚úÖ SearchCoordinator —Å–æ–∑–¥–∞–Ω");

        Ok(coordinator)
    }

    /// –°–æ–∑–¥–∞—Ç—å health manager
    #[allow(dead_code)]
    async fn create_health_manager(
        &self,
        container: &UnifiedContainer,
    ) -> Result<Arc<HealthManager>> {
        debug!("üéØ –°–æ–∑–¥–∞–Ω–∏–µ HealthManager...");

        let health_monitor = container.resolve::<HealthMonitor>()?;

        let manager = Arc::new(HealthManager::new(health_monitor));
        debug!("‚úÖ HealthManager —Å–æ–∑–¥–∞–Ω");

        Ok(manager)
    }

    /// –°–æ–∑–¥–∞—Ç—å resource controller
    #[allow(dead_code)]
    async fn create_resource_controller(
        &self,
        container: &UnifiedContainer,
    ) -> Result<Arc<ResourceController>> {
        debug!("üéØ –°–æ–∑–¥–∞–Ω–∏–µ ResourceController...");

        let resource_manager =
            container.resolve::<parking_lot::RwLock<crate::resource_manager::ResourceManager>>()?;

        let controller = Arc::new(ResourceController::new_production(resource_manager));
        debug!("‚úÖ ResourceController —Å–æ–∑–¥–∞–Ω");

        Ok(controller)
    }
}

#[async_trait]
impl CoordinatorServiceTrait for CoordinatorService {
    /// –°–æ–∑–¥–∞—Ç—å –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
    #[allow(dead_code)]
    async fn create_coordinators(&self, container: &UnifiedContainer) -> Result<()> {
        info!("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");
        // –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è EmbeddingCoordinator
        #[cfg(feature = "gpu-acceleration")]
        let _gpu_processor = container.resolve::<GpuBatchProcessor>().ok();
        #[cfg(not(feature = "gpu-acceleration"))]
        let _gpu_processor: Option<std::sync::Arc<()>> = None;
        let _cache = container.resolve::<EmbeddingCache>().ok();
        let mut guard = self.coordinators.write().await;
        guard.embedding_coordinator = Some(Arc::new(EmbeddingCoordinatorImpl::new_stub()));
        Ok(())
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
    #[allow(dead_code)]
    async fn initialize_coordinators(&self) -> Result<()> {
        info!("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");

        let coordinators = self.coordinators.read().await;
        let mut initialization_tasks = vec![];

        // NOTE: –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –Ω–µ –∏–º–µ—é—Ç initialize –º–µ—Ç–æ–¥–∞
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if coordinators.embedding_coordinator.is_some() {
            initialization_tasks.push(tokio::spawn(async move {
                debug!("‚úÖ EmbeddingCoordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
                Ok(())
            }));
        }

        if coordinators.search_coordinator.is_some() {
            initialization_tasks.push(tokio::spawn(async move {
                debug!("‚úÖ SearchCoordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
                Ok(())
            }));
        }

        if coordinators.health_manager.is_some() {
            initialization_tasks.push(tokio::spawn(async move {
                debug!("‚úÖ HealthManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
                Ok(())
            }));
        }

        if coordinators.resource_controller.is_some() {
            initialization_tasks.push(tokio::spawn(async move {
                debug!("‚úÖ ResourceController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
                Ok(())
            }));
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        for task in initialization_tasks {
            match task.await {
                Ok(Ok(_)) => {
                    // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                }
                Ok(Err(e)) => {
                    warn!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", e);
                    return Err(e);
                }
                Err(e) => {
                    warn!("‚ö†Ô∏è Panic –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", e);
                    return Err(anyhow::anyhow!("Panic –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e));
                }
            }
        }

        info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å embedding coordinator
    #[allow(dead_code)]
    fn get_embedding_coordinator(&self) -> Option<Arc<EmbeddingCoordinatorImpl>> {
        // NOTE: –≠—Ç–æ blocking call, –Ω–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º try_read –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        if let Ok(coordinators) = self.coordinators.try_read() {
            coordinators.embedding_coordinator.clone()
        } else {
            None
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å search coordinator
    #[allow(dead_code)]
    fn get_search_coordinator(&self) -> Option<Arc<SearchCoordinatorImpl>> {
        if let Ok(coordinators) = self.coordinators.try_read() {
            coordinators.search_coordinator.clone()
        } else {
            None
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å health manager
    #[allow(dead_code)]
    fn get_health_manager(&self) -> Option<Arc<HealthManager>> {
        if let Ok(coordinators) = self.coordinators.try_read() {
            coordinators.health_manager.clone()
        } else {
            None
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å resource controller
    #[allow(dead_code)]
    fn get_resource_controller(&self) -> Option<Arc<ResourceController>> {
        if let Ok(coordinators) = self.coordinators.try_read() {
            coordinators.resource_controller.clone()
        } else {
            None
        }
    }

    /// Shutdown –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    #[allow(dead_code)]
    async fn shutdown_coordinators(&self) -> Result<()> {
        info!("üîå Shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");

        let coordinators = self.coordinators.read().await;
        let mut shutdown_tasks: Vec<tokio::task::JoinHandle<Result<(), anyhow::Error>>> = vec![];

        // NOTE: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è shutdown
        if coordinators.embedding_coordinator.is_some() {
            shutdown_tasks.push(tokio::spawn(async move {
                debug!("‚úÖ EmbeddingCoordinator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
                Ok(())
            }));
        }

        if coordinators.search_coordinator.is_some() {
            shutdown_tasks.push(tokio::spawn(async move {
                debug!("‚úÖ SearchCoordinator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
                Ok(())
            }));
        }

        if coordinators.health_manager.is_some() {
            shutdown_tasks.push(tokio::spawn(async move {
                debug!("‚úÖ HealthManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
                Ok(())
            }));
        }

        if coordinators.resource_controller.is_some() {
            shutdown_tasks.push(tokio::spawn(async move {
                debug!("‚úÖ ResourceController –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
                Ok(())
            }));
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö shutdown –æ–ø–µ—Ä–∞—Ü–∏–π
        for task in shutdown_tasks {
            if let Err(e) = task.await {
                warn!("‚ö†Ô∏è –û—à–∏–±–∫–∞ shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", e);
            }
        }

        info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        Ok(())
    }

    /// –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
    #[allow(dead_code)]
    fn count_active_coordinators(&self) -> usize {
        if let Ok(coordinators) = self.coordinators.try_read() {
            let mut count = 0;
            if coordinators.embedding_coordinator.is_some() {
                count += 1;
            }
            if coordinators.search_coordinator.is_some() {
                count += 1;
            }
            if coordinators.health_manager.is_some() {
                count += 1;
            }
            if coordinators.resource_controller.is_some() {
                count += 1;
            }
            count
        } else {
            0
        }
    }
}

impl Default for CoordinatorService {
    fn default() -> Self {
        Self::new()
    }
}
