//! DIMemoryService - Refactored Facade Pattern
//! 
//! –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DIMemoryService –∫–∞–∫ Facade,
//! –¥–µ–ª–µ–≥–∏—Ä—É—é—â–∏–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–æ–¥—É–ª—è–º.
//! –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 100% –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—É–±–ª–∏—á–Ω–æ–≥–æ API.

use anyhow::Result;
use std::sync::Arc;
use tracing::{info, debug};

use crate::{
    di_container::DIContainer,
    di_memory_config::MemoryDIConfigurator,
    health::SystemHealthStatus,
    promotion::PromotionStats,
    types::{Record, Layer, SearchOptions},
    service_di::{
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        OrchestrationCoordinators,
        ProductionCoordinatorFactory,
        ProductionMonitoringManager,
        CircuitBreaker,
        LifecycleManager,
        ProductionOperationExecutor,
        ExtendedOperationExecutor,
        OperationExecutor,
        BatchInsertResult,
        BatchSearchResult,
        MemorySystemStats,
        OperationConfig,
    },
};

// Re-export –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
pub use crate::service_di::{
    default_config,
    MemoryConfig,
    MemoryServiceConfig,
    MemoryServiceConfigBuilder,
};

/// Production-ready DI Memory Service - FACADE PATTERN
/// 
/// –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –±–æ–ª—å—à–µ –ù–ï —è–≤–ª—è–µ—Ç—Å—è God Object!
/// –û–Ω —Å–ª—É–∂–∏—Ç Facade –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:
/// - ServiceConfig: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
/// - CoordinatorFactory: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤  
/// - ProductionMonitoring: –º–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/// - CircuitBreaker: resilience patterns
/// - LifecycleManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
/// - OperationExecutor: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
pub struct DIMemoryService {
    /// DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ –≤—Å–µ–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    container: Arc<DIContainer>,
    /// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã orchestration
    coordinators: OrchestrationCoordinators,
    /// Production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏
    monitoring_manager: ProductionMonitoringManager,
    /// Circuit breaker –¥–ª—è resilience
    circuit_breaker: Arc<CircuitBreaker>,
    /// Lifecycle manager
    lifecycle_manager: Arc<LifecycleManager>,
    /// Operation executor –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    operation_executor: Arc<dyn OperationExecutor + Send + Sync>,
    /// Extended executor –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    extended_executor: ExtendedOperationExecutor,
}

impl DIMemoryService {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π production-ready DI-based —Å–µ—Ä–≤–∏—Å
    pub async fn new(config: MemoryConfig) -> Result<Self> {
        info!("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ production DIMemoryService —Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π");

        // 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        let container = Arc::new(MemoryDIConfigurator::configure_full(config).await?);

        // 2. –°–æ–∑–¥–∞—ë–º orchestration –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ Factory
        let coordinator_factory = ProductionCoordinatorFactory::new();
        let coordinators = coordinator_factory.create_all_coordinators(&container).await?;

        // 3. –°–æ–∑–¥–∞—ë–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        let monitoring_manager = ProductionMonitoringManager::new()
            .with_health_manager(coordinators.health_manager.clone())
            .with_resource_controller(coordinators.resource_controller.clone());

        let circuit_breaker = Arc::new(CircuitBreaker::with_production_config());
        let lifecycle_manager = Arc::new(LifecycleManager::with_production_config());

        // 4. –°–æ–∑–¥–∞—ë–º operation executor
        let operation_executor = Arc::new(ProductionOperationExecutor::new(
            container.clone(),
            coordinators.embedding_coordinator.clone(),
            coordinators.search_coordinator.clone(),
            OperationConfig::production(),
        ));

        let extended_executor = ExtendedOperationExecutor::new(
            container.clone(),
            operation_executor.clone(),
        );

        let service = Self {
            container,
            coordinators,
            monitoring_manager,
            circuit_breaker,
            lifecycle_manager,
            operation_executor,
            extended_executor,
        };

        info!("‚úÖ Production DIMemoryService —Å–æ–∑–¥–∞–Ω —Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π ({} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤)", 
              service.coordinators.count_active());
        
        Ok(service)
    }

    /// –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pub async fn new_minimal(config: MemoryConfig) -> Result<Self> {
        info!("üß™ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ DIMemoryService –¥–ª—è —Ç–µ—Å—Ç–æ–≤");

        let container = Arc::new(MemoryDIConfigurator::configure_minimal(config).await?);

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        let coordinators = OrchestrationCoordinators::empty();
        
        let monitoring_manager = ProductionMonitoringManager::new();
        let circuit_breaker = Arc::new(CircuitBreaker::with_minimal_config());
        let lifecycle_manager = Arc::new(LifecycleManager::with_minimal_config());

        // –ü—Ä–æ—Å—Ç–æ–π executor –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        let operation_executor = Arc::new(ProductionOperationExecutor::new_minimal(container.clone()));
        
        let extended_executor = ExtendedOperationExecutor::new(
            container.clone(),
            operation_executor.clone(),
        );

        Ok(Self {
            container,
            coordinators,
            monitoring_manager,
            circuit_breaker,
            lifecycle_manager,
            operation_executor,
            extended_executor,
        })
    }

    /// Production –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã - –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ LifecycleManager
    pub async fn initialize(&self) -> Result<()> {
        info!("üöÄ Production –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ LifecycleManager...");

        self.lifecycle_manager.initialize(|| async {
            // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏ –ø–∞–º—è—Ç–∏
            let store = self.container.resolve::<crate::storage::VectorStore>()?;
            self.lifecycle_manager.initialize_memory_layers(store).await?;

            // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            self.coordinators.initialize_all().await?;

            // 3. –ó–∞–ø—É—Å–∫–∞–µ–º production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.monitoring_manager.start_production_monitoring().await?;

            // 4. –ó–∞–ø—É—Å–∫–∞–µ–º health checks –∏ metrics collection
            self.monitoring_manager.start_health_monitoring().await?;

            // 5. –ó–∞–ø—É—Å–∫–∞–µ–º resource monitoring
            self.monitoring_manager.start_resource_monitoring().await?;

            // 6. –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            self.coordinators.check_readiness().await?;

            Ok(())
        }).await
    }

    /// Production insert - –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ OperationExecutor
    pub async fn insert(&self, record: Record) -> Result<()> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        self.circuit_breaker.check_and_allow_operation().await?;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        let _active_op_guard = self.lifecycle_manager.increment_active_operations();

        let start_time = std::time::Instant::now();

        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∫ operation executor
        let result = self.operation_executor.insert(record).await;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ circuit breaker –∏ monitoring
        let duration = start_time.elapsed();
        match result {
            Ok(_) => {
                self.circuit_breaker.record_success().await;
                self.monitoring_manager.record_successful_operation(duration).await;
                Ok(())
            }
            Err(e) => {
                self.circuit_breaker.record_failure().await;
                self.monitoring_manager.record_failed_operation(duration).await;
                Err(e)
            }
        }
    }

    /// Production search - –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ OperationExecutor
    pub async fn search(
        &self,
        query: &str,
        layer: Layer,
        options: SearchOptions,
    ) -> Result<Vec<Record>> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        self.circuit_breaker.check_and_allow_operation().await?;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        let _active_op_guard = self.lifecycle_manager.increment_active_operations();

        let start_time = std::time::Instant::now();

        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∫ operation executor
        let result = self.operation_executor.search(query, layer, options).await;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ circuit breaker –∏ monitoring
        let duration = start_time.elapsed();
        match result {
            Ok(results) => {
                self.circuit_breaker.record_success().await;
                self.monitoring_manager.record_successful_operation(duration).await;
                Ok(results)
            }
            Err(e) => {
                self.circuit_breaker.record_failure().await;
                self.monitoring_manager.record_failed_operation(duration).await;
                Err(e)
            }
        }
    }

    /// –í—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –±–∞—Ç—á–µ–º - –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ OperationExecutor
    pub async fn insert_batch(&self, records: Vec<Record>) -> Result<()> {
        let result = self.operation_executor.batch_insert(records).await?;
        debug!("‚úì Batch insert: {}/{} –∑–∞–ø–∏—Å–µ–π —É—Å–ø–µ—à–Ω–æ", result.inserted, result.inserted + result.failed);
        Ok(())
    }

    /// Production —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã - –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ –º–æ–¥—É–ª—è–º
    pub async fn get_stats(&self) -> MemorySystemStats {
        debug!("üìä –°–±–æ—Ä production —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏");

        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        let health_status = if let Some(ref health_manager) = self.coordinators.health_manager {
            health_manager.system_health().await
        } else {
            Err(anyhow::anyhow!("Health manager not available"))
        };

        // Cache —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ EmbeddingCoordinator –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        let cache_stats = if let Some(ref embedding_coordinator) = self.coordinators.embedding_coordinator {
            embedding_coordinator.cache_stats().await
        } else {
            (0, 0, 0)
        };

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º default –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        let promotion_stats = PromotionStats::default();
        let batch_stats = self.extended_executor.get_operation_stats().await
            .unwrap_or_default();
        let gpu_stats = None; // Async –ø–æ–ª—É—á–µ–Ω–∏–µ GPU stats –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

        MemorySystemStats {
            health_status,
            cache_hits: cache_stats.0,
            cache_misses: cache_stats.1,
            cache_size: cache_stats.2,
            promotion_stats,
            batch_stats,
            gpu_stats,
            di_container_stats: self.container.stats(),
        }
    }

    /// Production graceful shutdown - –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ LifecycleManager
    pub async fn shutdown(&self) -> Result<()> {
        info!("üõë –ù–∞—á–∞–ª–æ graceful shutdown —á–µ—Ä–µ–∑ LifecycleManager...");

        self.lifecycle_manager.shutdown(|| async {
            // Shutdown –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
            self.coordinators.shutdown_all().await?;
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.monitoring_manager.stop_all_monitoring().await?;

            Ok(())
        }).await
    }

    // === –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è BACKWARD COMPATIBILITY ===

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å promotion –ø—Ä–æ—Ü–µ—Å—Å - –î–ï–õ–ï–ì–ò–†–£–ï–¢
    pub async fn run_promotion(&self) -> Result<PromotionStats> {
        if let Ok(promotion_engine) = self.container.resolve::<crate::promotion::PromotionEngine>() {
            let stats = promotion_engine.run_promotion_cycle().await?;
            info!("‚úì Promotion –∑–∞–≤–µ—Ä—à–µ–Ω: interact_to_insights={}, insights_to_assets={}", 
                  stats.interact_to_insights, stats.insights_to_assets);
            Ok(stats)
        } else {
            debug!("Promotion engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
            Ok(PromotionStats::default())
        }
    }
    
    /// –ê–ª–∏–∞—Å –¥–ª—è run_promotion –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    pub async fn run_promotion_cycle(&self) -> Result<PromotionStats> {
        self.run_promotion().await
    }

    /// Flush –≤—Å–µ—Ö pending –æ–ø–µ—Ä–∞—Ü–∏–π - –î–ï–õ–ï–ì–ò–†–£–ï–¢
    pub async fn flush_all(&self) -> Result<()> {
        self.extended_executor.flush_all().await
    }

    /// –ë–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π - –î–ï–õ–ï–ì–ò–†–£–ï–¢
    pub async fn batch_insert(&self, records: Vec<Record>) -> Result<BatchInsertResult> {
        self.operation_executor.batch_insert(records).await
    }

    /// –ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫ - –î–ï–õ–ï–ì–ò–†–£–ï–¢
    pub async fn batch_search(&self, queries: Vec<String>, layer: Layer, options: SearchOptions) -> Result<BatchSearchResult> {
        self.operation_executor.batch_search(queries, layer, options).await
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å - –î–ï–õ–ï–ì–ò–†–£–ï–¢
    pub async fn update(&self, record: Record) -> Result<()> {
        self.operation_executor.update(record).await
    }

    /// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å - –î–ï–õ–ï–ì–ò–†–£–ï–¢
    pub async fn delete(&self, id: &uuid::Uuid, layer: Layer) -> Result<()> {
        self.operation_executor.delete(id, layer).await
    }

    /// –°–æ–∑–¥–∞—Ç—å backup - –î–ï–õ–ï–ì–ò–†–£–ï–¢
    pub async fn create_backup(&self, path: &str) -> Result<crate::backup::BackupMetadata> {
        self.extended_executor.create_backup(path).await
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã - –î–ï–õ–ï–ì–ò–†–£–ï–¢
    pub async fn check_health(&self) -> Result<SystemHealthStatus> {
        let health = self.container.resolve::<Arc<crate::health::HealthMonitor>>()?;
        Ok(health.get_system_health())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É —á–µ—Ä–µ–∑ DI - –ü–†–Ø–ú–ê–Ø –î–ï–õ–ï–ì–ê–¶–ò–Ø
    pub fn resolve<T>(&self) -> Result<Arc<T>>
    where
        T: std::any::Any + Send + Sync + 'static,
    {
        self.container.resolve::<T>()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É - –ü–†–Ø–ú–ê–Ø –î–ï–õ–ï–ì–ê–¶–ò–Ø
    pub fn try_resolve<T>(&self) -> Option<Arc<T>>
    where
        T: std::any::Any + Send + Sync + 'static,
    {
        self.container.try_resolve::<T>()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ - –ü–†–Ø–ú–ê–Ø –î–ï–õ–ï–ì–ê–¶–ò–Ø
    pub fn di_stats(&self) -> crate::DIContainerStats {
        self.container.stats()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å performance –º–µ—Ç—Ä–∏–∫–∏ DI —Å–∏—Å—Ç–µ–º—ã - –ü–†–Ø–ú–ê–Ø –î–ï–õ–ï–ì–ê–¶–ò–Ø
    pub fn get_performance_metrics(&self) -> crate::DIPerformanceMetrics {
        self.container.get_performance_metrics()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ DI —Å–∏—Å—Ç–µ–º—ã - –ü–†–Ø–ú–ê–Ø –î–ï–õ–ï–ì–ê–¶–ò–Ø
    pub fn get_performance_report(&self) -> String {
        self.container.get_performance_report()
    }

    /// –°–±—Ä–æ—Å–∏—Ç—å performance –º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤) - –ü–†–Ø–ú–ê–Ø –î–ï–õ–ï–ì–ê–¶–ò–Ø
    pub fn reset_performance_metrics(&self) {
        self.container.reset_performance_metrics()
    }
}

/// Builder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DIMemoryService —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ - BACKWARD COMPATIBILITY
pub struct DIMemoryServiceBuilder {
    config: MemoryConfig,
    minimal: bool,
    cpu_only: bool,
}

impl DIMemoryServiceBuilder {
    pub fn new(config: MemoryConfig) -> Self {
        Self {
            config,
            minimal: false,
            cpu_only: false,
        }
    }

    pub fn minimal(mut self) -> Self {
        self.minimal = true;
        self
    }

    pub fn cpu_only(mut self) -> Self {
        self.cpu_only = true;
        self
    }

    pub async fn build(self) -> Result<DIMemoryService> {
        if self.minimal {
            DIMemoryService::new_minimal(self.config).await
        } else if self.cpu_only {
            let mut cpu_config = self.config;
            cpu_config.ai_config.embedding.use_gpu = false;
            cpu_config.ai_config.reranking.use_gpu = false;
            
            // –î–ª—è CPU-only —Å–æ–∑–¥–∞–µ–º –∫–∞–∫ minimal
            DIMemoryService::new_minimal(cpu_config).await
        } else {
            DIMemoryService::new(self.config).await
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::di_memory_config::test_helpers;

    #[tokio::test]
    async fn test_di_memory_service_facade_creation() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ DI
        let store = service.resolve::<crate::storage::VectorStore>()?;
        assert!(!(store.as_ref() as *const _ == std::ptr::null()));
        
        let stats = service.di_stats();
        assert!(stats.total_types > 0);

        Ok(())
    }

    #[tokio::test]
    async fn test_facade_initialization() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ facade
        service.initialize().await?;

        Ok(())
    }

    #[tokio::test]
    async fn test_builder_pattern_facade() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        
        let service = DIMemoryServiceBuilder::new(config)
            .minimal()
            .cpu_only()
            .build()
            .await?;

        let stats = service.get_stats().await;
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω
        assert!(stats.di_container_stats.total_types > 0);

        Ok(())
    }

    #[tokio::test]
    async fn test_operation_delegation() -> Result<()> {
        let config = test_helpers::create_test_config()?;
        let service = DIMemoryService::new_minimal(config).await?;

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ facade
        let store = service.resolve::<crate::storage::VectorStore>()?;
        assert!(!(store.as_ref() as *const _ == std::ptr::null()));

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        let _optional_metrics = service.try_resolve::<Arc<crate::metrics::MetricsCollector>>();

        Ok(())
    }
}