use anyhow::Result;
use chrono::{DateTime, Duration, Utc};
use sled::{Db, Tree};
use std::collections::BTreeMap;
use std::sync::Arc;
use tracing::{debug, info, warn};

use crate::{
    storage::VectorStore,
    types::{Layer, PromotionConfig, Record},
};

/// Promotion engine —Å time-based –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º
pub struct PromotionEngine {
    store: Arc<VectorStore>,
    config: PromotionConfig,
    _db: Arc<Db>,
    /// –ò–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    time_indices: BTreeMap<Layer, Arc<Tree>>,
    /// –ò–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–µ–π –ø–æ score –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    score_indices: BTreeMap<Layer, Arc<Tree>>,
}

impl PromotionEngine {
    pub async fn new(store: Arc<VectorStore>, config: PromotionConfig, db: Arc<Db>) -> Result<Self> {
        info!("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PromotionEngine —Å time-based –∏–Ω–¥–µ–∫—Å–∞–º–∏");
        
        let mut time_indices = BTreeMap::new();
        let mut score_indices = BTreeMap::new();
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è
        for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
            let time_tree_name = format!("time_index_{:?}", layer);
            let score_tree_name = format!("score_index_{:?}", layer);
            
            let time_tree = db.open_tree(&time_tree_name)?;
            let score_tree = db.open_tree(&score_tree_name)?;
            
            time_indices.insert(layer, Arc::new(time_tree));
            score_indices.insert(layer, Arc::new(score_tree));
            
            info!("  üìä –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–æ—è {:?}", layer);
        }
        
        let engine = Self {
            store,
            config,
            _db: db,
            time_indices,
            score_indices,
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        engine.rebuild_indices_if_needed().await?;
        
        Ok(engine)
    }
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª promotion —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
    pub async fn run_promotion_cycle(&self) -> Result<PromotionStats> {
        let start_time = std::time::Instant::now();
        let mut stats = PromotionStats::default();
        
        info!("üîÑ –ó–∞–ø—É—Å–∫ promotion —Ü–∏–∫–ª–∞");
        
        // –≠—Ç–∞–ø 1: –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π
        let index_update_time = std::time::Instant::now();
        self.update_indices_incremental().await?;
        stats.index_update_time_ms = index_update_time.elapsed().as_millis() as u64;
        
        // –≠—Ç–∞–ø 2: Promote –∑–∞–ø–∏—Å–∏ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
        let promotion_time = std::time::Instant::now();
        stats.interact_to_insights = self.promote_interact_to_insights().await?;
        stats.insights_to_assets = self.promote_insights_to_assets().await?;
        stats.promotion_time_ms = promotion_time.elapsed().as_millis() as u64;
        
        // –≠—Ç–∞–ø 3: –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
        let cleanup_time = std::time::Instant::now();
        stats.expired_interact = self.expire_records(Layer::Interact).await?;
        stats.expired_insights = self.expire_records(Layer::Insights).await?;
        stats.cleanup_time_ms = cleanup_time.elapsed().as_millis() as u64;
        
        stats.total_time_ms = start_time.elapsed().as_millis() as u64;
        
        info!("‚úÖ Promotion —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {}ms", stats.total_time_ms);
        info!("   –ò–Ω–¥–µ–∫—Å—ã: {}ms, Promotion: {}ms, Cleanup: {}ms", 
              stats.index_update_time_ms, stats.promotion_time_ms, stats.cleanup_time_ms);
        
        Ok(stats)
    }
    
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ Interact -> Insights
    async fn promote_interact_to_insights(&self) -> Result<usize> {
        let now = Utc::now();
        let threshold_time = now - Duration::hours(self.config.interact_ttl_hours as i64);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º time-based –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        let candidates = self.find_candidates_by_time(
            Layer::Interact,
            threshold_time,
            self.config.promote_threshold,
            2, // min_access_count
        ).await?;
        
        let count = candidates.len();
        if count > 0 {
            info!("üîÑ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ {} –∑–∞–ø–∏—Å–µ–π: Interact -> Insights", count);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º decay –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–π
            let promoted: Vec<_> = candidates.into_iter()
                .map(|mut r| {
                    r.layer = Layer::Insights;
                    r.score *= self.config.decay_factor;
                    r
                })
                .collect();
            
            // Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.store.insert_batch(&promoted.iter().collect::<Vec<_>>()).await?;
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–ª–æ—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            for record in &promoted {
                self.delete_record_with_index_update(Layer::Interact, &record.id).await?;
                self.update_indices_for_record(&record, true).await?;
            }
        }
        
        Ok(count)
    }
    
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ Insights -> Assets
    async fn promote_insights_to_assets(&self) -> Result<usize> {
        let now = Utc::now();
        let threshold_time = now - Duration::days(self.config.insights_ttl_days as i64);
        
        let candidates = self.find_candidates_by_time(
            Layer::Insights,
            threshold_time,
            self.config.promote_threshold * 1.2,
            5, // min_access_count
        ).await?;
        
        let count = candidates.len();
        if count > 0 {
            info!("üîÑ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ {} –∑–∞–ø–∏—Å–µ–π: Insights -> Assets", count);
            
            let promoted: Vec<_> = candidates.into_iter()
                .map(|mut r| {
                    r.layer = Layer::Assets;
                    r
                })
                .collect();
            
            self.store.insert_batch(&promoted.iter().collect::<Vec<_>>()).await?;
            
            for record in &promoted {
                self.delete_record_with_index_update(Layer::Insights, &record.id).await?;
                self.update_indices_for_record(&record, true).await?;
            }
        }
        
        Ok(count)
    }
    
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
    async fn expire_records(&self, layer: Layer) -> Result<usize> {
        let expiry_time = match layer {
            Layer::Interact => Utc::now() - Duration::hours(self.config.interact_ttl_hours as i64 * 2),
            Layer::Insights => Utc::now() - Duration::days(self.config.insights_ttl_days as i64),
            Layer::Assets => return Ok(0), // Assets –Ω–µ –∏—Å—Ç–µ–∫–∞—é—Ç
        };
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ expiry_time –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω–¥–µ–∫—Å
        let expired = self.find_expired_records(layer, expiry_time).await?;
        let count = expired.len();
        
        if count > 0 {
            info!("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ {} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ {:?}", count, layer);
            
            // Batch —É–¥–∞–ª–µ–Ω–∏–µ
            for record_id in expired {
                self.delete_record_with_index_update(layer, &record_id).await?;
            }
        }
        
        Ok(count)
    }
    
    /// –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è time-based –∏–Ω–¥–µ–∫—Å
    async fn find_candidates_by_time(
        &self,
        layer: Layer,
        before: DateTime<Utc>,
        min_score: f32,
        min_access_count: u32,
    ) -> Result<Vec<Record>> {
        let time_index = self.time_indices.get(&layer)
            .ok_or_else(|| anyhow::anyhow!("Time index not found for layer {:?}", layer))?;
        
        let mut candidates = Vec::new();
        let before_key = self.datetime_to_key(before);
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–≥–æ—Ä–∞–∑–¥–æ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º O(n))
        let range = time_index.range(..before_key);
        
        for result in range {
            let (_time_key, record_id_bytes) = result?;
            let record_id_str = String::from_utf8(record_id_bytes.to_vec())?;
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            if let Ok(Some(record)) = self.store.get_by_id(&record_id_str.parse()?, layer).await {
                if record.layer == layer 
                    && record.score >= min_score 
                    && record.access_count >= min_access_count 
                {
                    candidates.push(record);
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á—Ä–µ–∑–º–µ—Ä–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
                    if candidates.len() >= 1000 {
                        warn!("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (1000), –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫");
                        break;
                    }
                }
            }
        }
        
        debug!("üîç –ù–∞–π–¥–µ–Ω–æ {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ {:?} (time-based search)", candidates.len(), layer);
        Ok(candidates)
    }
    
    /// –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
    async fn find_expired_records(
        &self,
        layer: Layer,
        before: DateTime<Utc>,
    ) -> Result<Vec<uuid::Uuid>> {
        let time_index = self.time_indices.get(&layer)
            .ok_or_else(|| anyhow::anyhow!("Time index not found for layer {:?}", layer))?;
        
        let mut expired_ids = Vec::new();
        let before_key = self.datetime_to_key(before);
        
        // –í—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏
        let range = time_index.range(..before_key);
        
        for result in range {
            let (_, record_id_bytes) = result?;
            let record_id_str = String::from_utf8(record_id_bytes.to_vec())?;
            expired_ids.push(record_id_str.parse()?);
        }
        
        debug!("üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ {:?}", expired_ids.len(), layer);
        Ok(expired_ids)
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
    async fn update_indices_incremental(&self) -> Result<()> {
        debug!("üìä –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤");
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        // –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ update
        // –ü–æ–∫–∞ –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        for layer in [Layer::Interact, Layer::Insights, Layer::Assets] {
            let index_size = self.time_indices.get(&layer).unwrap().len();
            debug!("  {:?}: {} –∑–∞–ø–∏—Å–µ–π –≤ time-–∏–Ω–¥–µ–∫—Å–µ", layer, index_size);
        }
        
        Ok(())
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
    async fn update_indices_for_record(&self, record: &Record, is_new: bool) -> Result<()> {
        let time_index = self.time_indices.get(&record.layer)
            .ok_or_else(|| anyhow::anyhow!("Time index not found for layer {:?}", record.layer))?;
        let score_index = self.score_indices.get(&record.layer)
            .ok_or_else(|| anyhow::anyhow!("Score index not found for layer {:?}", record.layer))?;
        
        let time_key = self.datetime_to_key(record.ts);
        let score_key = self.score_to_key(record.score);
        let record_id_bytes = record.id.to_string().as_bytes().to_vec();
        
        if is_new {
            time_index.insert(time_key, record_id_bytes.clone())?;
            score_index.insert(score_key, record_id_bytes)?;
        } else {
            time_index.remove(time_key)?;
            score_index.remove(score_key)?;
        }
        
        Ok(())
    }
    
    /// –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã
    async fn delete_record_with_index_update(&self, layer: Layer, id: &uuid::Uuid) -> Result<()> {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        if let Ok(Some(record)) = self.store.get_by_id(id, layer).await {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
            self.update_indices_for_record(&record, false).await?;
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–ø–∏—Å—å
        self.store.delete_by_id(id, layer).await?;
        Ok(())
    }
    
    /// Rebuilds all indices (expensive operation, only on first run)
    async fn rebuild_indices_if_needed(&self) -> Result<()> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö
        let interact_index_size = self.time_indices.get(&Layer::Interact).unwrap().len();
        
        if interact_index_size == 0 {
            info!("üîß –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: rebuild –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤");
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–ª–Ω—ã–π rebuild
            info!("‚úÖ –ò–Ω–¥–µ–∫—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ");
        } else {
            debug!("üìä –ò–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");
        }
        
        Ok(())
    }
    
    /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DateTime –≤ –∫–ª—é—á –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞
    fn datetime_to_key(&self, dt: DateTime<Utc>) -> [u8; 8] {
        (dt.timestamp() as u64).to_be_bytes()
    }
    
    /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç score –≤ –∫–ª—é—á –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞
    fn score_to_key(&self, score: f32) -> [u8; 4] {
        score.to_bits().to_be_bytes()
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub async fn get_performance_stats(&self) -> Result<PromotionPerformanceStats> {
        let mut stats = PromotionPerformanceStats::default();
        
        for (layer, time_index) in &self.time_indices {
            let time_index_size = time_index.len();
            let score_index_size = self.score_indices.get(layer).unwrap().len();
            
            match layer {
                Layer::Interact => {
                    stats.interact_time_index_size = time_index_size;
                    stats.interact_score_index_size = score_index_size;
                }
                Layer::Insights => {
                    stats.insights_time_index_size = time_index_size;
                    stats.insights_score_index_size = score_index_size;
                }
                Layer::Assets => {
                    stats.assets_time_index_size = time_index_size;
                    stats.assets_score_index_size = score_index_size;
                }
            }
        }
        
        Ok(stats)
    }
}

#[derive(Debug, Default)]
pub struct PromotionStats {
    pub interact_to_insights: usize,
    pub insights_to_assets: usize,
    pub expired_interact: usize,
    pub expired_insights: usize,
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub total_time_ms: u64,
    pub index_update_time_ms: u64,
    pub promotion_time_ms: u64,
    pub cleanup_time_ms: u64,
}

#[derive(Debug, Default)]
pub struct PromotionPerformanceStats {
    pub interact_time_index_size: usize,
    pub interact_score_index_size: usize,
    pub insights_time_index_size: usize,
    pub insights_score_index_size: usize,
    pub assets_time_index_size: usize,
    pub assets_score_index_size: usize,
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_key_conversion() {
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è key conversion
        let datetime_to_key = |dt: DateTime<Utc>| -> [u8; 8] {
            (dt.timestamp() as u64).to_be_bytes()
        };
        
        let score_to_key = |score: f32| -> [u8; 4] {
            score.to_bits().to_be_bytes()
        };
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        let dt1 = Utc::now();
        let dt2 = dt1 + Duration::hours(1);
        
        let key1 = datetime_to_key(dt1);
        let key2 = datetime_to_key(dt2);
        
        // –ë–æ–ª–µ–µ –ø–æ–∑–¥–Ω—è—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –±–æ–ª—å—à–∏–π –∫–ª—é—á
        assert!(key1 < key2);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ score
        let score1 = 0.5f32;
        let score2 = 0.8f32;
        
        let score_key1 = score_to_key(score1);
        let score_key2 = score_to_key(score2);
        
        // –ë–æ–ª—å—à–∏–π score –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –±–æ–ª—å—à–∏–π –∫–ª—é—á
        assert!(score_key1 < score_key2);
    }
}