use anyhow::Result;
use std::sync::Arc;
use tokio::sync::RwLock;
use tracing::{debug, error, info, warn};

use crate::fallback::FallbackEmbeddingService;
use ai::{EmbeddingConfig, Qwen3EmbeddingProvider};

/// Bridge adapter –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Qwen3EmbeddingProvider –≤ memory system
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É ai crate –∏ memory system –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
pub struct Qwen3MemoryBridge {
    /// –û—Å–Ω–æ–≤–Ω–æ–π Qwen3 embedding provider
    qwen3_provider: Arc<RwLock<Qwen3EmbeddingProvider>>,
    /// Fallback embedding service –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Qwen3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    fallback_service: Arc<RwLock<FallbackEmbeddingService>>,
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è embedding
    config: EmbeddingConfig,
    /// –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    initialized: std::sync::atomic::AtomicBool,
    /// –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_metrics: Arc<RwLock<BridgeMetrics>>,
}

/// –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ bridge
#[derive(Debug, Default, Clone)]
pub struct BridgeMetrics {
    pub total_requests: u64,
    pub successful_requests: u64,
    pub failed_requests: u64,
    pub qwen3_requests: u64,
    pub fallback_requests: u64,
    pub avg_latency_ms: f64,
    pub total_latency_ms: f64,
}

impl Qwen3MemoryBridge {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π bridge —Å Qwen3EmbeddingProvider
    pub async fn new(config: EmbeddingConfig) -> Result<Self> {
        info!("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Qwen3MemoryBridge");
        info!("   Model: qwen3emb");
        info!("   Embedding dimension: 1024");
        info!("   Batch size: {}", config.batch_size);

        // –°–æ–∑–¥–∞–µ–º Qwen3EmbeddingProvider —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        let qwen3_provider =
            Qwen3EmbeddingProvider::new_with_config(config.clone()).map_err(|e| {
                error!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Qwen3EmbeddingProvider: {}", e);
                anyhow::anyhow!("Failed to create Qwen3EmbeddingProvider: {}", e)
            })?;

        // –°–æ–∑–¥–∞–µ–º fallback service —Å dimension 1024 (Qwen3)
        let fallback_service = FallbackEmbeddingService::new(1024);

        let bridge = Self {
            qwen3_provider: Arc::new(RwLock::new(qwen3_provider)),
            fallback_service: Arc::new(RwLock::new(fallback_service)),
            config,
            initialized: std::sync::atomic::AtomicBool::new(false),
            performance_metrics: Arc::new(RwLock::new(BridgeMetrics::default())),
        };

        info!("‚úÖ Qwen3MemoryBridge —Å–æ–∑–¥–∞–Ω");
        Ok(bridge)
    }

    /// –°–æ–∑–¥–∞—Ç—å —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub async fn with_custom_config(
        model_path: std::path::PathBuf,
        batch_size: usize,
        max_seq_length: usize,
    ) -> Result<Self> {
        let config = EmbeddingConfig {
            model_name: "qwen3emb".to_string(),
            batch_size,
            max_length: max_seq_length,
            use_gpu: false, // CPU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            gpu_config: None,
            embedding_dim: Some(1024),
        };

        Self::new(config).await
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å bridge –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å
    pub async fn initialize(&self) -> Result<()> {
        if self.initialized.load(std::sync::atomic::Ordering::Relaxed) {
            return Ok(());
        }

        info!("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Qwen3MemoryBridge...");

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º Qwen3 provider —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
        let test_result = {
            let provider = self.qwen3_provider.read().await;
            provider.embed_text("test initialization")
        };

        match test_result {
            Ok(embedding) => {
                if embedding.len() == 1024 {
                    info!(
                        "‚úÖ Qwen3 provider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (embedding dim: {})",
                        embedding.len()
                    );
                } else {
                    warn!(
                        "‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding: {} (–æ–∂–∏–¥–∞–ª–æ—Å—å 1024)",
                        embedding.len()
                    );
                }
            }
            Err(e) => {
                error!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Qwen3 provider: {}", e);
                warn!("üîÑ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback —Ä–µ–∂–∏–º");
            }
        }

        self.initialized
            .store(true, std::sync::atomic::Ordering::Relaxed);
        info!("‚úÖ Qwen3MemoryBridge –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å embedding –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    pub async fn embed_text(&self, text: &str) -> Result<Vec<f32>> {
        if !self.initialized.load(std::sync::atomic::Ordering::Relaxed) {
            self.initialize().await?;
        }

        let start_time = std::time::Instant::now();
        let mut metrics = self.performance_metrics.write().await;
        metrics.total_requests += 1;

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Qwen3 provider –Ω–∞–ø—Ä—è–º—É—é
        let result = {
            let provider = self.qwen3_provider.read().await;
            provider.embed_text(text)
        };

        match result {
            Ok(embedding) => {
                metrics.successful_requests += 1;
                metrics.qwen3_requests += 1;

                let latency = start_time.elapsed().as_millis() as f64;
                metrics.total_latency_ms += latency;
                metrics.avg_latency_ms =
                    metrics.total_latency_ms / metrics.successful_requests as f64;

                debug!("‚úÖ Qwen3 embedding –ø–æ–ª—É—á–µ–Ω –∑–∞ {:.2}ms", latency);
                Ok(embedding)
            }
            Err(e) => {
                warn!(
                    "‚ö†Ô∏è Qwen3 provider –æ—à–∏–±–∫–∞: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º graceful fallback",
                    e
                );
                metrics.failed_requests += 1;

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback service
                let mut fallback = self.fallback_service.write().await;
                match fallback.embed(text) {
                    Ok(embedding) => {
                        metrics.fallback_requests += 1;
                        let latency = start_time.elapsed().as_millis() as f64;
                        metrics.total_latency_ms += latency;
                        metrics.avg_latency_ms =
                            metrics.total_latency_ms / (metrics.successful_requests + 1) as f64;

                        warn!("üîÑ Fallback embedding –ø–æ–ª—É—á–µ–Ω –∑–∞ {:.2}ms", latency);
                        Ok(embedding)
                    }
                    Err(fallback_error) => {
                        error!("‚ùå Fallback —Ç–∞–∫–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω: {}", fallback_error);
                        Err(anyhow::anyhow!(
                            "–í—Å–µ embedding –º–µ—Ç–æ–¥—ã –Ω–µ—É–¥–∞—á–Ω—ã: Qwen3: {}, Fallback: {}",
                            e,
                            fallback_error
                        ))
                    }
                }
            }
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å batch embeddings
    pub async fn embed_batch(&self, texts: &[String]) -> Result<Vec<Vec<f32>>> {
        if !self.initialized.load(std::sync::atomic::Ordering::Relaxed) {
            self.initialize().await?;
        }

        debug!(
            "üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ batch –∏–∑ {} —Ç–µ–∫—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Qwen3MemoryBridge",
            texts.len()
        );

        let start_time = std::time::Instant::now();
        let mut metrics = self.performance_metrics.write().await;
        metrics.total_requests += texts.len() as u64;

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Qwen3 batch processing
        let result = {
            let provider = self.qwen3_provider.read().await;
            provider.embed_batch(texts)
        };

        match result {
            Ok(embeddings) => {
                metrics.successful_requests += texts.len() as u64;
                metrics.qwen3_requests += texts.len() as u64;

                let latency = start_time.elapsed().as_millis() as f64;
                metrics.total_latency_ms += latency;
                metrics.avg_latency_ms =
                    metrics.total_latency_ms / metrics.successful_requests as f64;

                info!(
                    "‚úÖ Qwen3 batch embeddings –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {:.2}ms ({:.1} items/sec)",
                    latency,
                    texts.len() as f64 / (latency / 1000.0)
                );
                Ok(embeddings)
            }
            Err(e) => {
                warn!("‚ö†Ô∏è Qwen3 batch –æ—à–∏–±–∫–∞: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º graceful fallback", e);
                metrics.failed_requests += texts.len() as u64;

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback service
                let mut fallback = self.fallback_service.write().await;
                match fallback.embed_batch(texts) {
                    Ok(embeddings) => {
                        metrics.fallback_requests += texts.len() as u64;
                        let latency = start_time.elapsed().as_millis() as f64;
                        metrics.total_latency_ms += latency;

                        warn!("üîÑ Fallback batch embeddings –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {:.2}ms", latency);
                        Ok(embeddings)
                    }
                    Err(fallback_error) => {
                        error!("‚ùå Fallback batch —Ç–∞–∫–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω: {}", fallback_error);
                        Err(anyhow::anyhow!(
                            "–í—Å–µ batch embedding –º–µ—Ç–æ–¥—ã –Ω–µ—É–¥–∞—á–Ω—ã: Qwen3: {}, Fallback: {}",
                            e,
                            fallback_error
                        ))
                    }
                }
            }
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding
    pub fn embedding_dim(&self) -> usize {
        1024 // Qwen3-Embedding-0.6B dimension
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub async fn get_metrics(&self) -> BridgeMetrics {
        let metrics = self.performance_metrics.read().await;
        (*metrics).clone()
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Qwen3 provider
    pub async fn is_qwen3_available(&self) -> bool {
        let test_result = {
            let provider = self.qwen3_provider.read().await;
            provider.embed_text("availability test")
        };
        test_result.is_ok()
    }

    /// –§–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å fallback —Ä–µ–∂–∏–º
    pub async fn force_fallback(&self) {
        // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback
        self.initialized
            .store(false, std::sync::atomic::Ordering::Relaxed);
        warn!("üîÑ Qwen3MemoryBridge –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ fallback —Ä–µ–∂–∏–º");
    }

    /// –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Qwen3 provider
    pub async fn try_recover(&self) -> bool {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        match self.initialize().await {
            Ok(()) => {
                info!("‚úÖ Qwen3 provider –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                true
            }
            Err(_) => false,
        }
    }
}

impl Clone for Qwen3MemoryBridge {
    fn clone(&self) -> Self {
        Self {
            qwen3_provider: Arc::clone(&self.qwen3_provider),
            fallback_service: Arc::clone(&self.fallback_service),
            config: self.config.clone(),
            initialized: std::sync::atomic::AtomicBool::new(
                self.initialized.load(std::sync::atomic::Ordering::Relaxed),
            ),
            performance_metrics: Arc::clone(&self.performance_metrics),
        }
    }
}

// Bridge —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–º–µ—Å—Ç–æ trait impl
// –≠—Ç–æ –∏–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å Send/Sync –∏ —É–ø—Ä–æ—â–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é

#[cfg(test)]
mod tests {
    use super::*;
    use ai::EmbeddingConfig;

    #[tokio::test]
    async fn test_qwen3_bridge_creation() -> Result<()> {
        let config = EmbeddingConfig {
            model_name: "qwen3emb".to_string(),
            batch_size: 32,
            max_length: 512,
            use_gpu: false,
            gpu_config: None,
            embedding_dim: Some(1024),
        };

        let bridge = Qwen3MemoryBridge::new(config).await?;
        assert_eq!(bridge.embedding_dim(), 1024);
        Ok(())
    }

    #[tokio::test]
    async fn test_qwen3_bridge_initialization() -> Result<()> {
        let config = EmbeddingConfig {
            model_name: "qwen3emb".to_string(),
            batch_size: 16,
            max_length: 256,
            use_gpu: false,
            gpu_config: None,
            embedding_dim: Some(1024),
        };

        let bridge = Qwen3MemoryBridge::new(config).await?;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ–π –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        // –Ω–æ bridge –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ fallback
        let _init_result = bridge.initialize().await;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å embedding (—á–µ—Ä–µ–∑ fallback –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        let embedding = bridge.embed_text("test").await?;
        assert_eq!(embedding.len(), 1024);

        Ok(())
    }

    #[tokio::test]
    async fn test_qwen3_bridge_metrics() -> Result<()> {
        let config = EmbeddingConfig {
            model_name: "qwen3emb".to_string(),
            batch_size: 8,
            max_length: 128,
            use_gpu: false,
            gpu_config: None,
            embedding_dim: Some(1024),
        };

        let bridge = Qwen3MemoryBridge::new(config).await?;

        // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        let _embedding1 = bridge.embed_text("test 1").await;
        let _embedding2 = bridge.embed_text("test 2").await;

        let metrics = bridge.get_metrics().await;
        assert!(metrics.total_requests >= 2);

        Ok(())
    }
}
