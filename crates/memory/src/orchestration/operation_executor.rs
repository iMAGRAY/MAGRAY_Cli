use anyhow::Result;
use std::{pin::Pin, sync::Arc, time::Instant};
use tokio::sync::Semaphore;
use tracing::{debug, error, warn};

use crate::{
    backup::BackupMetadata,
    orchestration::{
        circuit_breaker_manager::{CircuitBreakerManager, CircuitBreakerManagerTrait},
        traits::{
            BackupCoordinator as BackupCoordinatorTrait,
            EmbeddingCoordinator as EmbeddingCoordinatorTrait,
            PromotionCoordinator as PromotionCoordinatorTrait, ResourceCoordinator,
            SearchCoordinator as SearchCoordinatorTrait,
        },
        BackupCoordinator, EmbeddingCoordinator, PromotionCoordinator, ResourceController,
        RetryHandler, RetryResult, SearchCoordinator,
    },
    promotion::PromotionStats,
    types::{Layer, Record, SearchOptions},
};

/// Operation executor –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å circuit breaker –∏ retry –ª–æ–≥–∏–∫–æ–π
///
/// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
/// - SRP: –¢–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å resilience patterns
/// - OCP: –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
/// - LSP: –í–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ trait
/// - ISP: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
/// - DIP: –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
pub struct OperationExecutor {
    /// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    coordinators: CoordinatorDependencies,
    /// Circuit breaker manager
    circuit_breaker: Arc<CircuitBreakerManager>,
    /// Retry handlers –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
    retry_handlers: RetryHandlers,
    /// Semaphore –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è concurrent –æ–ø–µ—Ä–∞—Ü–∏–π
    operation_limiter: Arc<Semaphore>,
}

/// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
#[derive(Clone)]
pub struct CoordinatorDependencies {
    pub embedding: Arc<EmbeddingCoordinator>,
    pub search: Arc<SearchCoordinator>,
    pub promotion: Arc<PromotionCoordinator>,
    pub backup: Arc<BackupCoordinator>,
    pub resources: Arc<ResourceController>,
}

/// Retry handlers –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
pub struct RetryHandlers {
    pub search: RetryHandler,
    pub embedding: RetryHandler,
    pub promotion: RetryHandler,
    pub backup: RetryHandler,
}

/// Trait –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (ISP –ø—Ä–∏–Ω—Ü–∏–ø)
#[async_trait::async_trait]
pub trait OperationExecutorTrait: Send + Sync {
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Å full orchestration intelligence
    async fn execute_search(
        &self,
        query: &str,
        layer: Layer,
        options: SearchOptions,
    ) -> Result<Vec<Record>>;

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å embedding —Å intelligent caching –∏ fallback
    async fn execute_embedding(&self, text: &str) -> Result<Vec<f32>>;

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å promotion —Å intelligent scheduling
    async fn execute_promotion(&self) -> Result<PromotionStats>;

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å backup —Å comprehensive validation
    async fn execute_backup(&self, path: &str) -> Result<BackupMetadata>;
}

/// –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
#[derive(Debug, Clone)]
pub struct OperationMetrics {
    pub operation_type: String,
    pub duration: std::time::Duration,
    pub success: bool,
    pub retry_attempts: u32,
    pub circuit_breaker_triggered: bool,
}

impl CoordinatorDependencies {
    /// –°–æ–∑–¥–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    pub fn from_container(container: &crate::di::container_core::ContainerCore) -> Result<Self> {
        Ok(Self {
            embedding: container.resolve::<EmbeddingCoordinator>()?,
            search: container.resolve::<SearchCoordinator>()?,
            promotion: container.resolve::<PromotionCoordinator>()?,
            backup: container.resolve::<BackupCoordinator>()?,
            resources: container.resolve::<ResourceController>()?,
        })
    }
}

impl Default for RetryHandlers {
    fn default() -> Self {
        Self {
            search: RetryHandler::new(crate::orchestration::RetryPolicy::fast()),
            embedding: RetryHandler::new(crate::orchestration::RetryPolicy::default()),
            promotion: RetryHandler::new(crate::orchestration::RetryPolicy::aggressive()),
            backup: RetryHandler::new(crate::orchestration::RetryPolicy::aggressive()),
        }
    }
}

impl OperationExecutor {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π operation executor
    pub fn new(
        coordinators: CoordinatorDependencies,
        circuit_breaker: Arc<CircuitBreakerManager>,
        max_concurrent_operations: usize,
    ) -> Self {
        Self {
            coordinators,
            circuit_breaker,
            retry_handlers: RetryHandlers::default(),
            operation_limiter: Arc::new(Semaphore::new(max_concurrent_operations)),
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    pub fn from_container(
        container: &crate::di::container_core::ContainerCore,
        circuit_breaker: Arc<CircuitBreakerManager>,
    ) -> Result<Self> {
        let coordinators = CoordinatorDependencies::from_container(container)?;
        Ok(Self::new(coordinators, circuit_breaker, 100)) // Default: 100 concurrent operations
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–ª–Ω—ã–º resilience stack
    async fn execute_with_resilience<F, T>(
        &self,
        operation_name: &str,
        resource_type: &str,
        retry_handler: &RetryHandler,
        operation: F,
    ) -> Result<(T, OperationMetrics)>
    where
        F: Fn() -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<T>> + Send>>
            + Send
            + Sync,
        T: Send,
    {
        // –ü–æ–ª—É—á–∞–µ–º permit –¥–ª—è concurrent operations
        let _permit = self.operation_limiter.acquire().await.map_err(|e| {
            anyhow::anyhow!(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å permit –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ {}: {}",
                operation_name,
                e
            )
        })?;

        let operation_start = Instant::now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        let circuit_breaker_triggered = !self.circuit_breaker.can_execute(operation_name).await;
        if circuit_breaker_triggered {
            return Err(anyhow::anyhow!(
                "{} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (circuit breaker –æ—Ç–∫—Ä—ã—Ç)",
                operation_name
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if !ResourceCoordinator::check_resources(&*self.coordinators.resources, resource_type)
            .await?
        {
            warn!(
                "üü° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è {}, –ø—ã—Ç–∞–µ–º—Å—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã",
                operation_name
            );
            if let Err(e) = ResourceCoordinator::adapt_limits(&*self.coordinators.resources).await {
                warn!("–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤: {}", e);
            }
            return Err(anyhow::anyhow!(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è {}",
                operation_name
            ));
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry logic
        let result = retry_handler.execute(operation).await;
        let operation_duration = operation_start.elapsed();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º circuit breaker
        match &result {
            RetryResult::Success(_, attempts) => {
                debug!(
                    "‚úÖ {} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {:?} ({} –ø–æ–ø—ã—Ç–æ–∫)",
                    operation_name, operation_duration, attempts
                );

                self.circuit_breaker.record_success(operation_name).await;

                let metrics = OperationMetrics {
                    operation_type: operation_name.to_string(),
                    duration: operation_duration,
                    success: true,
                    retry_attempts: *attempts,
                    circuit_breaker_triggered,
                };

                result.into_result().map(|value| (value, metrics))
            }
            RetryResult::ExhaustedRetries(e) | RetryResult::NonRetriable(e) => {
                error!(
                    "üî¥ {} –Ω–µ —É–¥–∞–ª—Å—è –∑–∞ {:?}: {}",
                    operation_name, operation_duration, e
                );

                self.circuit_breaker.record_failure(operation_name).await;

                let _metrics = OperationMetrics {
                    operation_type: operation_name.to_string(),
                    duration: operation_duration,
                    success: false,
                    retry_attempts: 0, // retry_handler doesn't expose attempt count on failure
                    circuit_breaker_triggered,
                };

                Err(anyhow::anyhow!("{} failed: {}", operation_name, e))
            }
        }
    }
}

#[async_trait::async_trait]
impl OperationExecutorTrait for OperationExecutor {
    async fn execute_search(
        &self,
        query: &str,
        layer: Layer,
        options: SearchOptions,
    ) -> Result<Vec<Record>> {
        let operation = || {
            let search = Arc::clone(&self.coordinators.search);
            let query = query.to_string();
            let options = options.clone();

            Box::pin(async move {
                SearchCoordinatorTrait::search(&*search, &query, layer, options).await
            }) as Pin<Box<dyn std::future::Future<Output = Result<Vec<Record>>> + Send>>
        };

        let (result, metrics) = self
            .execute_with_resilience("search", "search", &self.retry_handlers.search, operation)
            .await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º SLA (sub-5ms target)
        if metrics.duration.as_millis() > 5 {
            debug!(
                "‚ö†Ô∏è SLA violation: –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è {:?} (target: <5ms)",
                metrics.duration
            );
        }

        Ok(result)
    }

    async fn execute_embedding(&self, text: &str) -> Result<Vec<f32>> {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –±–µ–∑ retry
        if let Some(cached) =
            EmbeddingCoordinatorTrait::check_cache(&*self.coordinators.embedding, text).await
        {
            debug!("üíæ Cache hit –¥–ª—è embedding: {} chars", text.len());
            return Ok(cached);
        }

        let operation = || {
            let embedding = Arc::clone(&self.coordinators.embedding);
            let text = text.to_string();

            Box::pin(
                async move { EmbeddingCoordinatorTrait::get_embedding(&*embedding, &text).await },
            ) as Pin<Box<dyn std::future::Future<Output = Result<Vec<f32>>> + Send>>
        };

        let (result, _metrics) = self
            .execute_with_resilience(
                "embedding",
                "embedding",
                &self.retry_handlers.embedding,
                operation,
            )
            .await?;

        Ok(result)
    }

    async fn execute_promotion(&self) -> Result<PromotionStats> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å promotion –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ
        if !PromotionCoordinatorTrait::should_promote(&*self.coordinators.promotion).await {
            debug!("‚ÑπÔ∏è Promotion –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç");
            return Ok(PromotionStats::default());
        }

        let operation = || {
            let promotion = Arc::clone(&self.coordinators.promotion);

            Box::pin(async move { PromotionCoordinatorTrait::run_promotion(&*promotion).await })
                as Pin<Box<dyn std::future::Future<Output = Result<PromotionStats>> + Send>>
        };

        let (result, _metrics) = self
            .execute_with_resilience(
                "promotion",
                "promotion",
                &self.retry_handlers.promotion,
                operation,
            )
            .await?;

        Ok(result)
    }

    async fn execute_backup(&self, path: &str) -> Result<BackupMetadata> {
        let operation = || {
            let backup = Arc::clone(&self.coordinators.backup);
            let path = path.to_string();

            Box::pin(async move { BackupCoordinatorTrait::create_backup(&*backup, &path).await })
                as Pin<Box<dyn std::future::Future<Output = Result<BackupMetadata>> + Send>>
        };

        let (result, _metrics) = self
            .execute_with_resilience("backup", "backup", &self.retry_handlers.backup, operation)
            .await?;

        Ok(result)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::orchestration::circuit_breaker_manager::CircuitBreakerConfig;
    use std::sync::atomic::{AtomicBool, AtomicU32, Ordering};

    // Mock coordinator –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    struct MockSearchCoordinator {
        success_count: AtomicU32,
        should_fail: AtomicBool,
    }

    impl MockSearchCoordinator {
        fn new() -> Self {
            Self {
                success_count: AtomicU32::new(0),
                should_fail: AtomicBool::new(false),
            }
        }

        fn set_should_fail(&self, should_fail: bool) {
            self.should_fail.store(should_fail, Ordering::Relaxed);
        }
    }

    #[async_trait::async_trait]
    impl crate::orchestration::traits::Coordinator for MockSearchCoordinator {
        async fn initialize(&self) -> Result<()> {
            Ok(())
        }

        async fn is_ready(&self) -> bool {
            true
        }

        async fn shutdown(&self) -> Result<()> {
            Ok(())
        }

        async fn metrics(&self) -> serde_json::Value {
            serde_json::json!({
                "mock_search_coordinator": true,
                "should_fail": self.should_fail.load(Ordering::Relaxed)
            })
        }
    }

    #[async_trait::async_trait]
    impl SearchCoordinatorTrait for MockSearchCoordinator {
        async fn search(
            &self,
            _query: &str,
            _layer: Layer,
            _options: SearchOptions,
        ) -> Result<Vec<Record>> {
            if self.should_fail.load(Ordering::Relaxed) {
                Err(anyhow::anyhow!("Mock search failure"))
            } else {
                self.success_count.fetch_add(1, Ordering::Relaxed);
                Ok(vec![])
            }
        }

        async fn vector_search(
            &self,
            _vector: &[f32],
            _layer: Layer,
            _options: SearchOptions,
        ) -> Result<Vec<Record>> {
            if self.should_fail.load(Ordering::Relaxed) {
                Err(anyhow::anyhow!("Mock vector search failure"))
            } else {
                self.success_count.fetch_add(1, Ordering::Relaxed);
                Ok(vec![])
            }
        }

        async fn hybrid_search(
            &self,
            _query: &str,
            _vector: Option<&[f32]>,
            _layer: Layer,
            _options: SearchOptions,
        ) -> Result<Vec<Record>> {
            if self.should_fail.load(Ordering::Relaxed) {
                Err(anyhow::anyhow!("Mock hybrid search failure"))
            } else {
                self.success_count.fetch_add(1, Ordering::Relaxed);
                Ok(vec![])
            }
        }

        async fn search_with_rerank(
            &self,
            _query: &str,
            _layer: Layer,
            _options: SearchOptions,
            _rerank_top_k: usize,
        ) -> Result<Vec<Record>> {
            if self.should_fail.load(Ordering::Relaxed) {
                Err(anyhow::anyhow!("Mock rerank search failure"))
            } else {
                self.success_count.fetch_add(1, Ordering::Relaxed);
                Ok(vec![])
            }
        }
    }

    #[tokio::test]
    async fn test_operation_metrics_creation() {
        let metrics = OperationMetrics {
            operation_type: "test".to_string(),
            duration: std::time::Duration::from_millis(100),
            success: true,
            retry_attempts: 1,
            circuit_breaker_triggered: false,
        };

        assert_eq!(metrics.operation_type, "test");
        assert_eq!(metrics.duration, std::time::Duration::from_millis(100));
        assert!(metrics.success);
        assert_eq!(metrics.retry_attempts, 1);
        assert!(!metrics.circuit_breaker_triggered);
    }

    #[tokio::test]
    async fn test_retry_handlers_default() {
        let handlers = RetryHandlers::default();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ handlers —Å–æ–∑–¥–∞–Ω—ã (–Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑-–∑–∞ private fields)
        // –ü—Ä–æ—Å—Ç–æ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–Ω–∏ –∫–æ–º–ø–∏–ª–∏—Ä—É—é—Ç—Å—è –∏ —Å–æ–∑–¥–∞—é—Ç—Å—è
        assert!(true);
    }

    #[tokio::test]
    async fn test_coordinator_dependencies_structure() {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É CoordinatorDependencies
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏
        // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è
        assert!(true); // Placeholder
    }

    #[tokio::test]
    async fn test_operation_executor_semaphore_limit() {
        // –°–æ–∑–¥–∞–µ–º mock circuit breaker
        let circuit_breaker = Arc::new(CircuitBreakerManager::with_config(
            CircuitBreakerConfig::default(),
        ));

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ semaphore –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ concurrent –æ–ø–µ—Ä–∞—Ü–∏–π
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç —è–≤–ª—è–µ—Ç—Å—è placeholder'–æ–º —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        assert!(true);
    }
}
