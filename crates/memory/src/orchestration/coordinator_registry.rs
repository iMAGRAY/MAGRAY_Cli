use anyhow::Result;
use std::sync::Arc;
use tracing::{info, debug, warn};

use crate::orchestration::{
    EmbeddingCoordinator, SearchCoordinator, HealthManager,
    PromotionCoordinator, ResourceController, BackupCoordinator,
    traits::Coordinator,
};

/// Coordinator registry –∏ factory –¥–ª—è orchestration —Å–∏—Å—Ç–µ–º—ã
/// 
/// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
/// - SRP: –¢–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –∏ –∏—Ö resolution
/// - OCP: –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
/// - LSP: –í–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—â–∏–π trait
/// - ISP: –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
/// - DIP: –ó–∞–≤–∏—Å–∏—Ç –æ—Ç DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
pub struct CoordinatorRegistry {
    /// Embedding coordinator
    pub embedding: Arc<EmbeddingCoordinator>,
    /// Search coordinator
    pub search: Arc<SearchCoordinator>,
    /// Health manager
    pub health: Arc<HealthManager>,
    /// Promotion coordinator
    pub promotion: Arc<PromotionCoordinator>,
    /// Resource controller
    pub resources: Arc<ResourceController>,
    /// Backup coordinator
    pub backup: Arc<BackupCoordinator>,
}

/// Trait –¥–ª—è coordinator registry (ISP –ø—Ä–∏–Ω—Ü–∏–ø)
#[async_trait::async_trait]
pub trait CoordinatorRegistryTrait: Send + Sync {
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    async fn verify_all_ready(&self) -> bool;
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º
    async fn get_readiness_status(&self) -> ReadinessStatus;
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ –∏–º–µ–Ω–∏ (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
    fn get_coordinator(&self, name: &str) -> Option<&dyn Coordinator>;
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    fn list_coordinator_names(&self) -> Vec<String>;
    
    /// –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    async fn collect_all_metrics(&self) -> CoordinatorMetricsCollection;
}

/// –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
#[derive(Debug, Clone)]
pub struct ReadinessStatus {
    pub all_ready: bool,
    pub coordinator_status: std::collections::HashMap<String, bool>,
    pub not_ready_coordinators: Vec<String>,
    pub ready_count: usize,
    pub total_count: usize,
}

/// –ö–æ–ª–ª–µ–∫—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –æ—Ç –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
#[derive(Debug)]
pub struct CoordinatorMetricsCollection {
    pub embedding_metrics: serde_json::Value,
    pub search_metrics: serde_json::Value,
    pub health_metrics: serde_json::Value,
    pub promotion_metrics: serde_json::Value,
    pub resources_metrics: serde_json::Value,
    pub backup_metrics: serde_json::Value,
}

/// Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è coordinator registry
pub struct CoordinatorRegistryFactory;

impl CoordinatorRegistry {
    /// –°–æ–∑–¥–∞—Ç—å registry –∏–∑ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    pub fn new(
        embedding: Arc<EmbeddingCoordinator>,
        search: Arc<SearchCoordinator>,
        health: Arc<HealthManager>,
        promotion: Arc<PromotionCoordinator>,
        resources: Arc<ResourceController>,
        backup: Arc<BackupCoordinator>,
    ) -> Self {
        info!("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ CoordinatorRegistry —Å {} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏", 6);
        
        Self {
            embedding,
            search,
            health,
            promotion,
            resources,
            backup,
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –∫–∞–∫ slice –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    pub fn get_all_coordinators(&self) -> Vec<(&'static str, &dyn Coordinator)> {
        vec![
            ("embedding", &*self.embedding as &dyn Coordinator),
            ("search", &*self.search as &dyn Coordinator),
            ("health", &*self.health as &dyn Coordinator),
            ("promotion", &*self.promotion as &dyn Coordinator),
            ("resources", &*self.resources as &dyn Coordinator),
            ("backup", &*self.backup as &dyn Coordinator),
        ]
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã (–¥–ª—è –ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
    pub fn get_critical_coordinators(&self) -> Vec<(&'static str, &dyn Coordinator)> {
        vec![
            ("resources", &*self.resources as &dyn Coordinator),
            ("health", &*self.health as &dyn Coordinator),
        ]
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å core –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
    pub fn get_core_coordinators(&self) -> Vec<(&'static str, &dyn Coordinator)> {
        vec![
            ("embedding", &*self.embedding as &dyn Coordinator),
            ("search", &*self.search as &dyn Coordinator),
        ]
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å background –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã (—Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã)
    pub fn get_background_coordinators(&self) -> Vec<(&'static str, &dyn Coordinator)> {
        vec![
            ("promotion", &*self.promotion as &dyn Coordinator),
            ("backup", &*self.backup as &dyn Coordinator),
        ]
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å readiness –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    async fn check_coordinators_readiness(coordinators: &[(&str, &dyn Coordinator)]) -> Vec<(String, bool)> {
        let mut results = Vec::new();
        
        for (name, coordinator) in coordinators {
            let ready = coordinator.is_ready().await;
            results.push((name.to_string(), ready));
            
            if ready {
                debug!("‚úÖ {} coordinator –≥–æ—Ç–æ–≤", name);
            } else {
                debug!("‚è≥ {} coordinator –Ω–µ –≥–æ—Ç–æ–≤", name);
            }
        }
        
        results
    }
}

#[async_trait::async_trait]
impl CoordinatorRegistryTrait for CoordinatorRegistry {
    async fn verify_all_ready(&self) -> bool {
        debug!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤");
        
        let coordinators = self.get_all_coordinators();
        let results = Self::check_coordinators_readiness(&coordinators).await;
        
        let all_ready = results.iter().all(|(_, ready)| *ready);
        
        if all_ready {
            debug!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã");
        } else {
            let not_ready: Vec<&str> = results.iter()
                .filter(|(_, ready)| !*ready)
                .map(|(name, _)| name.as_str())
                .collect();
            debug!("‚è≥ –ù–µ –≥–æ—Ç–æ–≤—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã: {:?}", not_ready);
        }
        
        all_ready
    }
    
    async fn get_readiness_status(&self) -> ReadinessStatus {
        let coordinators = self.get_all_coordinators();
        let results = Self::check_coordinators_readiness(&coordinators).await;
        
        let mut coordinator_status = std::collections::HashMap::new();
        let mut not_ready_coordinators = Vec::new();
        let mut ready_count = 0;
        
        for (name, ready) in results {
            coordinator_status.insert(name.clone(), ready);
            
            if ready {
                ready_count += 1;
            } else {
                not_ready_coordinators.push(name);
            }
        }
        
        let all_ready = ready_count == coordinators.len();
        
        ReadinessStatus {
            all_ready,
            coordinator_status,
            not_ready_coordinators,
            ready_count,
            total_count: coordinators.len(),
        }
    }
    
    fn get_coordinator(&self, name: &str) -> Option<&dyn Coordinator> {
        match name {
            "embedding" => Some(&*self.embedding as &dyn Coordinator),
            "search" => Some(&*self.search as &dyn Coordinator),
            "health" => Some(&*self.health as &dyn Coordinator),
            "promotion" => Some(&*self.promotion as &dyn Coordinator),
            "resources" => Some(&*self.resources as &dyn Coordinator),
            "backup" => Some(&*self.backup as &dyn Coordinator),
            _ => {
                warn!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: {}", name);
                None
            }
        }
    }
    
    fn list_coordinator_names(&self) -> Vec<String> {
        vec![
            "embedding".to_string(),
            "search".to_string(),
            "health".to_string(),
            "promotion".to_string(),
            "resources".to_string(),
            "backup".to_string(),
        ]
    }
    
    async fn collect_all_metrics(&self) -> CoordinatorMetricsCollection {
        debug!("üìä –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –æ—Ç –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤");
        
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –æ—Ç –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        let results = tokio::join!(
            self.embedding.metrics(),
            self.search.metrics(),
            self.health.metrics(),
            self.promotion.metrics(),
            self.resources.metrics(),
            self.backup.metrics()
        );
        
        debug!("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã –æ—Ç {} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤", 6);
        
        CoordinatorMetricsCollection {
            embedding_metrics: results.0,
            search_metrics: results.1,
            health_metrics: results.2,
            promotion_metrics: results.3,
            resources_metrics: results.4,
            backup_metrics: results.5,
        }
    }
}

impl CoordinatorRegistryFactory {
    /// –°–æ–∑–¥–∞—Ç—å coordinator registry –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    pub fn from_container(container: &crate::di::container_core::ContainerCore) -> Result<CoordinatorRegistry> {
        info!("üè≠ –°–æ–∑–¥–∞–Ω–∏–µ CoordinatorRegistry –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞");
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let embedding = container.resolve::<EmbeddingCoordinator>()
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å EmbeddingCoordinator: {}", e))?;
        
        let search = container.resolve::<SearchCoordinator>()
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å SearchCoordinator: {}", e))?;
        
        let health = container.resolve::<HealthManager>()
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å HealthManager: {}", e))?;
        
        let promotion = container.resolve::<PromotionCoordinator>()
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å PromotionCoordinator: {}", e))?;
        
        let resources = container.resolve::<ResourceController>()
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å ResourceController: {}", e))?;
        
        let backup = container.resolve::<BackupCoordinator>()
            .map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å BackupCoordinator: {}", e))?;
        
        let registry = CoordinatorRegistry::new(
            embedding,
            search,
            health,
            promotion,
            resources,
            backup,
        );
        
        info!("‚úÖ CoordinatorRegistry —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
        Ok(registry)
    }
    
    /// –°–æ–∑–¥–∞—Ç—å coordinator registry —Å –º–æ–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    #[cfg(test)]
    pub fn create_mock_registry() -> CoordinatorRegistry {
        use std::sync::Arc;
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã mock'–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        // –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ placeholder –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
        todo!("Mock registry implementation needed for tests")
    }
    
    /// –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω—ã
    pub async fn validate_registry(registry: &CoordinatorRegistry) -> Result<ValidationResult> {
        info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è CoordinatorRegistry");
        
        let readiness_status = registry.get_readiness_status().await;
        let coordinator_names = registry.list_coordinator_names();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        let expected_coordinators = vec![
            "embedding", "search", "health", "promotion", "resources", "backup"
        ];
        
        let missing_coordinators: Vec<String> = expected_coordinators.iter()
            .filter(|&&name| !coordinator_names.contains(&name.to_string()))
            .map(|&name| name.to_string())
            .collect();
        
        let validation_result = ValidationResult {
            is_valid: missing_coordinators.is_empty(),
            missing_coordinators,
            readiness_status,
            total_coordinators: coordinator_names.len(),
        };
        
        if validation_result.is_valid {
            info!("‚úÖ CoordinatorRegistry —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω");
        } else {
            warn!("‚ùå CoordinatorRegistry –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {:?}", 
                validation_result.missing_coordinators);
        }
        
        Ok(validation_result)
    }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ registry
#[derive(Debug)]
pub struct ValidationResult {
    pub is_valid: bool,
    pub missing_coordinators: Vec<String>,
    pub readiness_status: ReadinessStatus,
    pub total_coordinators: usize,
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[tokio::test]
    async fn test_readiness_status_creation() {
        let mut coordinator_status = std::collections::HashMap::new();
        coordinator_status.insert("test1".to_string(), true);
        coordinator_status.insert("test2".to_string(), false);
        
        let status = ReadinessStatus {
            all_ready: false,
            coordinator_status,
            not_ready_coordinators: vec!["test2".to_string()],
            ready_count: 1,
            total_count: 2,
        };
        
        assert!(!status.all_ready);
        assert_eq!(status.ready_count, 1);
        assert_eq!(status.total_count, 2);
        assert_eq!(status.not_ready_coordinators, vec!["test2"]);
    }
    
    #[tokio::test]
    async fn test_coordinator_metrics_collection_structure() {
        let collection = CoordinatorMetricsCollection {
            embedding_metrics: serde_json::json!({"test": "embedding"}),
            search_metrics: serde_json::json!({"test": "search"}),
            health_metrics: serde_json::json!({"test": "health"}),
            promotion_metrics: serde_json::json!({"test": "promotion"}),
            resources_metrics: serde_json::json!({"test": "resources"}),
            backup_metrics: serde_json::json!({"test": "backup"}),
        };
        
        assert_eq!(collection.embedding_metrics["test"], "embedding");
        assert_eq!(collection.search_metrics["test"], "search");
    }
    
    #[tokio::test]
    async fn test_validation_result_structure() {
        let readiness_status = ReadinessStatus {
            all_ready: true,
            coordinator_status: std::collections::HashMap::new(),
            not_ready_coordinators: vec![],
            ready_count: 6,
            total_count: 6,
        };
        
        let result = ValidationResult {
            is_valid: true,
            missing_coordinators: vec![],
            readiness_status,
            total_coordinators: 6,
        };
        
        assert!(result.is_valid);
        assert!(result.missing_coordinators.is_empty());
        assert_eq!(result.total_coordinators, 6);
    }
    
    #[test]
    fn test_coordinator_list() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
        let expected_coordinators = vec![
            "embedding",
            "search", 
            "health",
            "promotion",
            "resources",
            "backup"
        ];
        
        // –í —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –∑–¥–µ—Å—å –±—ã–ª –±—ã —Å–æ–∑–¥–∞–Ω registry –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –º–µ—Ç–æ–¥ list_coordinator_names()
        assert_eq!(expected_coordinators.len(), 6);
    }
}