//! LifecycleManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º orchestrator'–∞
//!
//! –†–µ–∞–ª–∏–∑—É–µ—Ç Single Responsibility Principle –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//! –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π, –∑–∞–ø—É—Å–∫–æ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤.

use anyhow::Result;
use std::collections::HashMap;
use std::sync::Arc;
use std::time::{Duration, Instant};
use tokio::sync::RwLock;
use tokio::time::{sleep, timeout};
use tracing::{debug, error, info, warn};

use crate::orchestration::traits::Coordinator;

/// –§–∞–∑—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
#[derive(Debug, Clone, PartialEq)]
pub enum LifecyclePhase {
    Uninitialized,
    CriticalInfrastructure,
    CoreServices,
    BackgroundServices,
    HealthVerification,
    BackgroundTasks,
    Ready,
    ShuttingDown,
    Stopped,
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ
#[derive(Debug, Clone)]
pub struct ComponentLifecycleState {
    pub name: String,
    pub phase: LifecyclePhase,
    pub initialized: bool,
    pub ready: bool,
    pub healthy: bool,
    pub last_health_check: Option<Instant>,
    pub initialization_time: Option<Duration>,
    pub error_message: Option<String>,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
#[derive(Debug, Clone)]
pub struct LifecycleConfig {
    /// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    pub critical_infrastructure_timeout: Duration,
    pub core_services_timeout: Duration,
    pub background_services_timeout: Duration,
    pub health_verification_timeout: Duration,
    pub shutdown_timeout: Duration,

    /// –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    pub readiness_check_interval: Duration,

    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    pub max_readiness_wait_time: Duration,
}

impl Default for LifecycleConfig {
    fn default() -> Self {
        Self {
            critical_infrastructure_timeout: Duration::from_secs(30),
            core_services_timeout: Duration::from_secs(45),
            background_services_timeout: Duration::from_secs(60),
            health_verification_timeout: Duration::from_secs(30),
            shutdown_timeout: Duration::from_secs(60),
            readiness_check_interval: Duration::from_millis(500),
            max_readiness_wait_time: Duration::from_secs(120),
        }
    }
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ orchestrator'–∞
pub struct LifecycleManager {
    config: LifecycleConfig,
    current_phase: Arc<RwLock<LifecyclePhase>>,
    components: Arc<RwLock<HashMap<String, ComponentLifecycleState>>>,
    start_time: Instant,
}

impl LifecycleManager {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    pub fn new(config: LifecycleConfig) -> Self {
        Self {
            config,
            current_phase: Arc::new(RwLock::new(LifecyclePhase::Uninitialized)),
            components: Arc::new(RwLock::new(HashMap::new())),
            start_time: Instant::now(),
        }
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
    pub async fn register_component(&self, name: String) {
        let mut components = self.components.write().await;
        components.insert(
            name.clone(),
            ComponentLifecycleState {
                name: name.clone(),
                phase: LifecyclePhase::Uninitialized,
                initialized: false,
                ready: false,
                healthy: false,
                last_health_check: None,
                initialization_time: None,
                error_message: None,
            },
        );
        debug!(
            "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è lifecycle management: {}",
            name
        );
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    pub async fn current_phase(&self) -> LifecyclePhase {
        self.current_phase.read().await.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    pub async fn get_component_states(&self) -> HashMap<String, ComponentLifecycleState> {
        self.components.read().await.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    pub async fn get_component_state(&self, name: &str) -> Option<ComponentLifecycleState> {
        let components = self.components.read().await;
        components.get(name).cloned()
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º CoordinatorRegistry
    pub async fn initialize_with_registry(
        &self,
        registry: &crate::orchestration::coordinator_registry::CoordinatorRegistry,
    ) -> Result<()> {
        info!("üöÄ –ó–∞–ø—É—Å–∫ production –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LifecycleManager —Å CoordinatorRegistry");

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        let init_order = registry.get_initialization_order();

        if init_order.is_empty() {
            warn!("CoordinatorRegistry –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
            return Ok(());
        }

        info!(
            "üìã –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {:?}",
            init_order
                .iter()
                .map(|(name, _)| name.clone())
                .collect::<Vec<_>>()
        );

        // Phase 1: Critical Infrastructure (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã)
        let critical_coordinators = registry.get_critical_coordinators();
        if !critical_coordinators.is_empty() {
            self.execute_phase_with_coordinators(
                LifecyclePhase::CriticalInfrastructure,
                critical_coordinators,
                self.config.critical_infrastructure_timeout,
            )
            .await?;
        }

        // Phase 2-4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        for (name, coordinator) in &init_order {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã (—É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
            if let Some(metadata) = registry.get_metadata(name) {
                if metadata.is_critical {
                    continue;
                }
            }

            info!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {}", name);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if !registry.check_coordinator_dependencies_ready(name).await {
                return Err(anyhow::anyhow!(
                    "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ '{}' –Ω–µ –≥–æ—Ç–æ–≤—ã",
                    name
                ));
            }

            let init_start = std::time::Instant::now();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∑—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            self.register_component(name.clone()).await;

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
            if let Err(e) = coordinator.initialize().await {
                error!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {}: {}", name, e);
                return Err(e);
            }

            let init_duration = init_start.elapsed();
            info!("‚úÖ {} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {:?}", name, init_duration);
        }

        // Phase 5: Health Verification
        self.verify_all_components_health_with_registry(registry)
            .await?;

        // Phase 6: Mark as ready
        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::Ready;
        }

        info!(
            "üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å CoordinatorRegistry –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {:?}",
            self.start_time.elapsed()
        );
        Ok(())
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–π API –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    pub async fn initialize_production<T: Coordinator + Send + Sync + 'static>(
        &self,
        coordinators: HashMap<String, Arc<T>>,
    ) -> Result<()> {
        info!("üöÄ –ó–∞–ø—É—Å–∫ production –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LifecycleManager");

        // Phase 1: Critical Infrastructure
        self.execute_phase(
            LifecyclePhase::CriticalInfrastructure,
            &coordinators,
            &["resources", "health"],
            self.config.critical_infrastructure_timeout,
        )
        .await?;

        // Phase 2: Core Services
        self.execute_phase(
            LifecyclePhase::CoreServices,
            &coordinators,
            &["embedding", "search"],
            self.config.core_services_timeout,
        )
        .await?;

        // Phase 3: Background Services
        self.execute_phase(
            LifecyclePhase::BackgroundServices,
            &coordinators,
            &["promotion", "backup"],
            self.config.background_services_timeout,
        )
        .await?;

        // Phase 4: Health Verification
        self.verify_all_components_health(&coordinators).await?;

        // Phase 5: Mark as ready
        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::Ready;
        }

        info!(
            "üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {:?}",
            self.start_time.elapsed()
        );
        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–∑—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async fn execute_phase<T: Coordinator + Send + Sync + 'static>(
        &self,
        phase: LifecyclePhase,
        coordinators: &HashMap<String, Arc<T>>,
        component_names: &[&str],
        phase_timeout: Duration,
    ) -> Result<()> {
        info!("üìä Phase: {:?} - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", phase);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∑—É
        {
            let mut current_phase = self.current_phase.write().await;
            *current_phase = phase.clone();
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        let mut initialization_tasks = Vec::new();

        for &component_name in component_names {
            if let Some(coordinator) = coordinators.get(component_name) {
                let coordinator = Arc::clone(coordinator);
                let components: Arc<RwLock<HashMap<String, ComponentLifecycleState>>> =
                    Arc::clone(&self.components);
                let name = component_name.to_string();
                let phase_clone = phase.clone();

                let task = tokio::spawn(async move {
                    let init_start = Instant::now();

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –Ω–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    {
                        let mut comp_states = components.write().await;
                        if let Some(state) = comp_states.get_mut(&name) {
                            state.phase = phase_clone.clone();
                        }
                    }

                    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                    let result = coordinator.initialize().await;
                    let init_duration = init_start.elapsed();

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    {
                        let mut comp_states = components.write().await;
                        if let Some(state) = comp_states.get_mut(&name) {
                            state.initialization_time = Some(init_duration);
                            match &result {
                                Ok(()) => {
                                    state.initialized = true;
                                    state.error_message = None;
                                }
                                Err(e) => {
                                    state.initialized = false;
                                    state.error_message = Some(e.to_string());
                                }
                            }
                        }
                    }

                    (name, result)
                });

                initialization_tasks.push(task);
            }
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —Å timeout
        let results = timeout(phase_timeout, async {
            let mut results = Vec::new();
            for task in initialization_tasks {
                results.push(
                    task.await
                        .map_err(|e| anyhow::anyhow!("Task join error: {}", e))?,
                );
            }
            Ok::<Vec<(String, Result<()>)>, anyhow::Error>(results)
        })
        .await
        .map_err(|_| anyhow::anyhow!("Phase {:?} timeout after {:?}", phase, phase_timeout))??;

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let mut failed_components = Vec::new();
        for (name, result) in results {
            match result {
                Ok(()) => {
                    info!("‚úÖ {} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ", name);
                }
                Err(e) => {
                    error!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {}: {}", name, e);
                    failed_components.push(name);
                }
            }
        }

        if !failed_components.is_empty() {
            return Err(anyhow::anyhow!(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Ñ–∞–∑–µ {:?}: {:?}",
                phase,
                failed_components
            ));
        }

        info!("‚úÖ Phase {:?} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", phase);
        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    async fn verify_all_components_health<T: Coordinator + Send + Sync + 'static>(
        &self,
        coordinators: &HashMap<String, Arc<T>>,
    ) -> Result<()> {
        info!("üè• Phase: Health Verification - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤");

        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::HealthVerification;
        }

        let verification_start = Instant::now();
        let verification_timeout = self.config.health_verification_timeout;

        while verification_start.elapsed() < verification_timeout {
            let mut all_ready = true;
            let mut all_healthy = true;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            let mut health_tasks = Vec::new();

            for (name, coordinator) in coordinators {
                let coordinator = Arc::clone(coordinator);
                let name = name.clone();
                let components: Arc<RwLock<HashMap<String, ComponentLifecycleState>>> =
                    Arc::clone(&self.components);

                let task = tokio::spawn(async move {
                    let check_start = Instant::now();
                    let ready = coordinator.is_ready().await;
                    let healthy = match coordinator.health_check().await {
                        Ok(_) => true,
                        Err(_) => false,
                    };

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    {
                        let mut comp_states = components.write().await;
                        if let Some(state) = comp_states.get_mut(&name) {
                            state.ready = ready;
                            state.healthy = healthy;
                            state.last_health_check = Some(check_start);
                        }
                    }

                    (name, ready, healthy)
                });

                health_tasks.push(task);
            }

            // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
            for task in health_tasks {
                let (name, ready, healthy) = task.await?;
                if !ready {
                    debug!("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} –Ω–µ –≥–æ—Ç–æ–≤", name);
                    all_ready = false;
                }
                if !healthy {
                    debug!("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} –Ω–µ–∑–¥–æ—Ä–æ–≤", name);
                    all_healthy = false;
                }
            }

            if all_ready && all_healthy {
                info!("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∏ –∑–¥–æ—Ä–æ–≤—ã");
                return Ok(());
            }

            debug!(
                "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤... (ready: {}, healthy: {})",
                all_ready, all_healthy
            );
            sleep(self.config.readiness_check_interval).await;
        }

        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        let component_states = self.components.read().await;
        let not_ready: Vec<_> = component_states
            .iter()
            .filter(|(_, state)| !state.ready)
            .map(|(name, _)| name.clone())
            .collect();
        let not_healthy: Vec<_> = component_states
            .iter()
            .filter(|(_, state)| !state.healthy)
            .map(|(name, _)| name.clone())
            .collect();

        Err(anyhow::anyhow!(
            "–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞. –ù–µ –≥–æ—Ç–æ–≤—ã: {:?}, –ù–µ–∑–¥–æ—Ä–æ–≤—ã: {:?}",
            not_ready,
            not_healthy
        ))
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    pub async fn all_components_ready<T: Coordinator + Send + Sync + 'static>(
        &self,
        coordinators: &HashMap<String, Arc<T>>,
    ) -> bool {
        for (name, coordinator) in coordinators {
            if !coordinator.is_ready().await {
                debug!("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} –Ω–µ –≥–æ—Ç–æ–≤", name);
                return false;
            }
        }
        true
    }

    /// Graceful shutdown –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    pub async fn shutdown_production<T: Coordinator + Send + Sync + 'static>(
        &self,
        coordinators: HashMap<String, Arc<T>>,
    ) -> Result<()> {
        info!("üõ°Ô∏è –ù–∞—á–∞–ª–æ production graceful shutdown");

        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::ShuttingDown;
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        let shutdown_order = vec![
            "backup",
            "promotion",
            "search",
            "embedding",
            "health",
            "resources",
        ];

        for component_name in shutdown_order {
            if let Some(coordinator) = coordinators.get(component_name) {
                let shutdown_result =
                    timeout(self.config.shutdown_timeout, coordinator.shutdown()).await;

                match shutdown_result {
                    Ok(Ok(())) => {
                        info!("‚úÖ {} coordinator —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", component_name);
                    }
                    Ok(Err(e)) => {
                        warn!(
                            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {} coordinator: {}",
                            component_name, e
                        );
                    }
                    Err(_) => {
                        error!("‚ùå Timeout –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {} coordinator", component_name);
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                {
                    let mut comp_states = self.components.write().await;
                    if let Some(state) = comp_states.get_mut(component_name) {
                        state.ready = false;
                        state.healthy = false;
                    }
                }
            }
        }

        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::Stopped;
        }

        info!(
            "üèÅ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {:?}",
            self.start_time.elapsed()
        );
        Ok(())
    }

    /// –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    pub async fn emergency_shutdown<T: Coordinator + Send + Sync + 'static>(
        &self,
        coordinators: HashMap<String, Arc<T>>,
    ) -> Result<()> {
        error!("üî¥ EMERGENCY SHUTDOWN –∑–∞–ø—É—â–µ–Ω!");

        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::ShuttingDown;
        }

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ timeout'–∞–º–∏
        let mut shutdown_tasks = Vec::new();

        for (name, coordinator) in coordinators {
            let coordinator = Arc::clone(&coordinator);
            let name = name.clone();

            let task = tokio::spawn(async move {
                let result = timeout(Duration::from_secs(5), coordinator.shutdown()).await;
                (name, result)
            });

            shutdown_tasks.push(task);
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for task in shutdown_tasks {
            let (name, result) = task.await?;
            match result {
                Ok(Ok(())) => info!("‚úÖ Emergency: {} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", name),
                Ok(Err(e)) => warn!("‚ö†Ô∏è Emergency: {} –æ—à–∏–±–∫–∞: {}", name, e),
                Err(_) => error!("‚ùå Emergency: {} timeout", name),
            }
        }

        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::Stopped;
        }

        error!("üöë EMERGENCY SHUTDOWN –∑–∞–≤–µ—Ä—à–µ–Ω");
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    pub async fn get_lifecycle_stats(&self) -> String {
        let current_phase = self.current_phase.read().await;
        let component_states = self.components.read().await;

        let mut stats = String::new();
        stats.push_str("=== Lifecycle Manager Statistics ===\n\n");

        stats.push_str(&format!("Current Phase: {:?}\n", *current_phase));
        stats.push_str(&format!("Uptime: {:?}\n", self.start_time.elapsed()));
        stats.push_str(&format!("Total Components: {}\n\n", component_states.len()));

        stats.push_str("Component States:\n");
        for (name, state) in component_states.iter() {
            let status_icon = if state.ready && state.healthy {
                "‚úÖ"
            } else if state.initialized {
                "üü°"
            } else {
                "‚ùå"
            };

            stats.push_str(&format!(
                "‚îú‚îÄ {} {}: Phase={:?}, Init={}, Ready={}, Healthy={}\n",
                status_icon, name, state.phase, state.initialized, state.ready, state.healthy
            ));

            if let Some(init_time) = state.initialization_time {
                stats.push_str(&format!("   ‚îú‚îÄ Init time: {:?}\n", init_time));
            }

            if let Some(last_health) = state.last_health_check {
                stats.push_str(&format!(
                    "   ‚îú‚îÄ Last health check: {:?} ago\n",
                    last_health.elapsed()
                ));
            }

            if let Some(ref error) = state.error_message {
                stats.push_str(&format!("   ‚îî‚îÄ Error: {}\n", error));
            }
        }

        stats
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
    pub async fn is_accepting_requests(&self) -> bool {
        let phase = self.current_phase.read().await;
        matches!(*phase, LifecyclePhase::Ready)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    pub fn uptime(&self) -> Duration {
        self.start_time.elapsed()
    }
}

impl LifecycleManager {
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–∑—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏
    async fn execute_phase_with_coordinators(
        &self,
        phase: LifecyclePhase,
        coordinators: Vec<Arc<dyn crate::orchestration::traits::Coordinator>>,
        phase_timeout: Duration,
    ) -> Result<()> {
        info!(
            "üìä Phase: {:?} - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤",
            phase,
            coordinators.len()
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∑—É
        {
            let mut current_phase = self.current_phase.write().await;
            *current_phase = phase.clone();
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        let mut initialization_tasks = Vec::new();

        for (index, coordinator) in coordinators.iter().enumerate() {
            let coordinator = Arc::clone(coordinator);
            let components: Arc<RwLock<HashMap<String, ComponentLifecycleState>>> =
                Arc::clone(&self.components);
            let coord_name = format!("coordinator_{}", index);
            let phase_clone = phase.clone();

            let task = tokio::spawn(async move {
                let init_start = std::time::Instant::now();

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –Ω–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                {
                    let mut comp_states = components.write().await;
                    if let Some(state) = comp_states.get_mut(&coord_name) {
                        state.phase = phase_clone.clone();
                    }
                }

                // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                let result = coordinator.initialize().await;
                let init_duration = init_start.elapsed();

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                {
                    let mut comp_states = components.write().await;
                    if let Some(state) = comp_states.get_mut(&coord_name) {
                        state.initialization_time = Some(init_duration);
                        match &result {
                            Ok(()) => {
                                state.initialized = true;
                                state.error_message = None;
                            }
                            Err(e) => {
                                state.initialized = false;
                                state.error_message = Some(e.to_string());
                            }
                        }
                    }
                }

                (coord_name, result)
            });

            initialization_tasks.push(task);
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —Å timeout
        let results = tokio::time::timeout(phase_timeout, async {
            let mut results = Vec::new();
            for task in initialization_tasks {
                results.push(
                    task.await
                        .map_err(|e| anyhow::anyhow!("Task join error: {}", e))?,
                );
            }
            Ok::<Vec<(String, Result<()>)>, anyhow::Error>(results)
        })
        .await
        .map_err(|_| anyhow::anyhow!("Phase {:?} timeout after {:?}", phase, phase_timeout))??;

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let mut failed_components = Vec::new();
        for (name, result) in results {
            match result {
                Ok(()) => {
                    info!("‚úÖ {} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ", name);
                }
                Err(e) => {
                    error!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {}: {}", name, e);
                    failed_components.push(name);
                }
            }
        }

        if !failed_components.is_empty() {
            return Err(anyhow::anyhow!(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Ñ–∞–∑–µ {:?}: {:?}",
                phase,
                failed_components
            ));
        }

        info!("‚úÖ Phase {:?} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", phase);
        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –Ω–æ–≤—ã–º CoordinatorRegistry
    pub async fn verify_all_components_health_with_registry(
        &self,
        registry: &crate::orchestration::coordinator_registry::CoordinatorRegistry,
    ) -> Result<()> {
        info!("üè• Phase: Health Verification - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞");

        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::HealthVerification;
        }

        let verification_start = std::time::Instant::now();
        let verification_timeout = self.config.health_verification_timeout;

        let all_coordinators = registry.get_all_coordinators();

        while verification_start.elapsed() < verification_timeout {
            let mut all_ready = true;
            let mut all_healthy = true;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            let mut health_tasks = Vec::new();

            for (name, coordinator) in &all_coordinators {
                let coordinator = Arc::clone(coordinator);
                let name = name.clone();
                let components: Arc<RwLock<HashMap<String, ComponentLifecycleState>>> =
                    Arc::clone(&self.components);

                let task = tokio::spawn(async move {
                    let check_start = std::time::Instant::now();
                    let ready = coordinator.is_ready().await;
                    let healthy = match coordinator.health_check().await {
                        Ok(_) => true,
                        Err(_) => false,
                    };

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    {
                        let mut comp_states = components.write().await;
                        if let Some(state) = comp_states.get_mut(&name) {
                            state.ready = ready;
                            state.healthy = healthy;
                            state.last_health_check = Some(check_start);
                        }
                    }

                    (name, ready, healthy)
                });

                health_tasks.push(task);
            }

            // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
            for task in health_tasks {
                let (name, ready, healthy) = task.await?;
                if !ready {
                    debug!("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä {} –Ω–µ –≥–æ—Ç–æ–≤", name);
                    all_ready = false;
                }
                if !healthy {
                    debug!("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä {} –Ω–µ–∑–¥–æ—Ä–æ–≤", name);
                    all_healthy = false;
                }
            }

            if all_ready && all_healthy {
                info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã –∏ –∑–¥–æ—Ä–æ–≤—ã");
                return Ok(());
            }

            debug!(
                "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤... (ready: {}, healthy: {})",
                all_ready, all_healthy
            );
            tokio::time::sleep(self.config.readiness_check_interval).await;
        }

        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞—Ö
        let component_states = self.components.read().await;
        let not_ready: Vec<_> = component_states
            .iter()
            .filter(|(_, state)| !state.ready)
            .map(|(name, _)| name.clone())
            .collect();
        let not_healthy: Vec<_> = component_states
            .iter()
            .filter(|(_, state)| !state.healthy)
            .map(|(name, _)| name.clone())
            .collect();

        Err(anyhow::anyhow!(
            "–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞. –ù–µ –≥–æ—Ç–æ–≤—ã: {:?}, –ù–µ–∑–¥–æ—Ä–æ–≤—ã: {:?}",
            not_ready,
            not_healthy
        ))
    }

    /// Graceful shutdown —Å CoordinatorRegistry
    pub async fn shutdown_with_registry(
        &self,
        registry: &crate::orchestration::coordinator_registry::CoordinatorRegistry,
    ) -> Result<()> {
        info!("üõ°Ô∏è –ù–∞—á–∞–ª–æ production graceful shutdown —Å CoordinatorRegistry");

        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::ShuttingDown;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        let init_order = registry.get_initialization_order();
        let mut shutdown_order = init_order;
        shutdown_order.reverse();

        for (name, coordinator) in shutdown_order {
            let shutdown_result =
                tokio::time::timeout(self.config.shutdown_timeout, coordinator.shutdown()).await;

            match shutdown_result {
                Ok(Ok(())) => {
                    info!("‚úÖ {} coordinator —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", name);
                }
                Ok(Err(e)) => {
                    warn!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {} coordinator: {}", name, e);
                }
                Err(_) => {
                    error!("‚ùå Timeout –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {} coordinator", name);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            {
                let mut comp_states = self.components.write().await;
                if let Some(state) = comp_states.get_mut(&name) {
                    state.ready = false;
                    state.healthy = false;
                }
            }
        }

        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::Stopped;
        }

        info!(
            "üèÅ Graceful shutdown —Å CoordinatorRegistry –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {:?}",
            self.start_time.elapsed()
        );
        Ok(())
    }

    /// –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å CoordinatorRegistry
    pub async fn emergency_shutdown_with_registry(
        &self,
        registry: &crate::orchestration::coordinator_registry::CoordinatorRegistry,
    ) -> Result<()> {
        error!("üî¥ EMERGENCY SHUTDOWN —Å CoordinatorRegistry –∑–∞–ø—É—â–µ–Ω!");

        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::ShuttingDown;
        }

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ timeout'–∞–º–∏
        let all_coordinators = registry.get_all_coordinators();
        let mut shutdown_tasks = Vec::new();

        for (name, coordinator) in all_coordinators {
            let coordinator = Arc::clone(&coordinator);
            let name = name.clone();

            let task = tokio::spawn(async move {
                let result =
                    tokio::time::timeout(Duration::from_secs(5), coordinator.shutdown()).await;
                (name, result)
            });

            shutdown_tasks.push(task);
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for task in shutdown_tasks {
            let (name, result) = task.await?;
            match result {
                Ok(Ok(())) => info!("‚úÖ Emergency: {} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", name),
                Ok(Err(e)) => warn!("‚ö†Ô∏è Emergency: {} –æ—à–∏–±–∫–∞: {}", name, e),
                Err(_) => error!("‚ùå Emergency: {} timeout", name),
            }
        }

        {
            let mut phase = self.current_phase.write().await;
            *phase = LifecyclePhase::Stopped;
        }

        error!("üöë EMERGENCY SHUTDOWN —Å CoordinatorRegistry –∑–∞–≤–µ—Ä—à–µ–Ω");
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use async_trait::async_trait;
    use std::sync::atomic::{AtomicBool, Ordering};

    struct MockCoordinator {
        name: String,
        initialized: Arc<AtomicBool>,
        ready: Arc<AtomicBool>,
        healthy: Arc<AtomicBool>,
    }

    impl MockCoordinator {
        fn new(name: &str) -> Self {
            Self {
                name: name.to_string(),
                initialized: Arc::new(AtomicBool::new(false)),
                ready: Arc::new(AtomicBool::new(false)),
                healthy: Arc::new(AtomicBool::new(true)),
            }
        }

        fn set_ready(&self, ready: bool) {
            self.ready.store(ready, Ordering::Relaxed);
        }

        fn set_healthy(&self, healthy: bool) {
            self.healthy.store(healthy, Ordering::Relaxed);
        }
    }

    #[async_trait]
    impl Coordinator for MockCoordinator {
        async fn initialize(&self) -> Result<()> {
            self.initialized.store(true, Ordering::Relaxed);
            self.ready.store(true, Ordering::Relaxed);
            Ok(())
        }

        async fn is_ready(&self) -> bool {
            self.ready.load(Ordering::Relaxed)
        }

        async fn health_check(&self) -> Result<()> {
            if self.healthy.load(Ordering::Relaxed) {
                Ok(())
            } else {
                Err(anyhow::anyhow!("Mock coordinator is unhealthy"))
            }
        }

        async fn shutdown(&self) -> Result<()> {
            self.ready.store(false, Ordering::Relaxed);
            self.initialized.store(false, Ordering::Relaxed);
            Ok(())
        }

        async fn metrics(&self) -> serde_json::Value {
            serde_json::json!({
                "name": self.name,
                "initialized": self.initialized.load(Ordering::Relaxed),
                "ready": self.ready.load(Ordering::Relaxed),
                "healthy": self.healthy.load(Ordering::Relaxed)
            })
        }
    }

    #[tokio::test]
    async fn test_lifecycle_manager_basic_functionality() {
        let config = LifecycleConfig {
            critical_infrastructure_timeout: Duration::from_millis(100),
            core_services_timeout: Duration::from_millis(100),
            background_services_timeout: Duration::from_millis(100),
            health_verification_timeout: Duration::from_millis(500),
            ..Default::default()
        };

        let manager = LifecycleManager::new(config);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        manager.register_component("resources".to_string()).await;
        manager.register_component("health".to_string()).await;
        manager.register_component("embedding".to_string()).await;
        manager.register_component("search".to_string()).await;

        // –°–æ–∑–¥–∞–µ–º mock –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
        let mut coordinators: HashMap<String, Arc<MockCoordinator>> = HashMap::new();
        coordinators.insert(
            "resources".to_string(),
            Arc::new(MockCoordinator::new("resources")),
        );
        coordinators.insert(
            "health".to_string(),
            Arc::new(MockCoordinator::new("health")),
        );
        coordinators.insert(
            "embedding".to_string(),
            Arc::new(MockCoordinator::new("embedding")),
        );
        coordinators.insert(
            "search".to_string(),
            Arc::new(MockCoordinator::new("search")),
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        assert_eq!(manager.current_phase().await, LifecyclePhase::Uninitialized);
        assert!(!manager.is_accepting_requests().await);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
        let result = manager
            .execute_phase(
                LifecyclePhase::CriticalInfrastructure,
                &coordinators,
                &["resources", "health"],
                Duration::from_millis(200),
            )
            .await;

        assert!(result.is_ok());
        assert_eq!(
            manager.current_phase().await,
            LifecyclePhase::CriticalInfrastructure
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        let states = manager.get_component_states().await;
        assert!(states["resources"].initialized);
        assert!(states["health"].initialized);
    }

    #[tokio::test]
    async fn test_lifecycle_manager_health_verification() {
        let config = LifecycleConfig {
            health_verification_timeout: Duration::from_millis(200),
            readiness_check_interval: Duration::from_millis(50),
            ..Default::default()
        };

        let manager = LifecycleManager::new(config);

        manager.register_component("test".to_string()).await;

        let mut coordinators: HashMap<String, Arc<MockCoordinator>> = HashMap::new();
        let mock_coord = Arc::new(MockCoordinator::new("test"));
        coordinators.insert("test".to_string(), mock_coord.clone());

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å timeout
        mock_coord.set_ready(false);
        let result = manager.verify_all_components_health(&coordinators).await;
        assert!(result.is_err());

        // –î–µ–ª–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ—Ç–æ–≤—ã–º
        mock_coord.set_ready(true);
        mock_coord.set_healthy(true);
        let result = manager.verify_all_components_health(&coordinators).await;
        assert!(result.is_ok());
    }

    #[tokio::test]
    async fn test_lifecycle_manager_shutdown() {
        let manager = LifecycleManager::new(LifecycleConfig::default());

        manager.register_component("test".to_string()).await;

        let mut coordinators: HashMap<String, Arc<MockCoordinator>> = HashMap::new();
        let mock_coord = Arc::new(MockCoordinator::new("test"));
        coordinators.insert("test".to_string(), mock_coord.clone());

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        mock_coord
            .initialize()
            .await
            .expect("Async operation should succeed");
        assert!(mock_coord.is_ready().await);

        // Shutdown
        manager
            .shutdown_production(coordinators)
            .await
            .expect("Async operation should succeed");
        assert_eq!(manager.current_phase().await, LifecyclePhase::Stopped);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        assert!(!mock_coord.is_ready().await);
    }

    #[tokio::test]
    async fn test_lifecycle_manager_stats() {
        let manager = LifecycleManager::new(LifecycleConfig::default());

        manager
            .register_component("test_component".to_string())
            .await;

        let stats = manager.get_lifecycle_stats().await;
        assert!(stats.contains("Lifecycle Manager Statistics"));
        assert!(stats.contains("test_component"));
        assert!(stats.contains("Uninitialized"));
    }
}
