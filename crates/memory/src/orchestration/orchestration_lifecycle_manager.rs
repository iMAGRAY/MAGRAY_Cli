use anyhow::Result;
use std::{
    sync::{
        atomic::{AtomicBool, Ordering},
        Arc,
    },
    time::{Duration, Instant},
};
use tokio::{
    sync::RwLock,
    task::JoinHandle,
    time::{sleep, timeout},
};
use tracing::{debug, error, info, warn};

use crate::orchestration::{
    traits::Coordinator, BackupCoordinator, EmbeddingCoordinator, HealthManager,
    PromotionCoordinator, ResourceController, SearchCoordinator,
};

/// Lifecycle manager –¥–ª—è orchestration —Å–∏—Å—Ç–µ–º—ã
///
/// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
/// - SRP: –¢–æ–ª—å–∫–æ lifecycle —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (initialize, shutdown, tasks)
/// - OCP: –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ dependency injection
/// - LSP: –í–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ trait
/// - ISP: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è lifecycle –æ–ø–µ—Ä–∞—Ü–∏–π
/// - DIP: –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π Coordinator trait
pub struct OrchestrationLifecycleManager {
    /// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —Å–∏—Å—Ç–µ–º—ã
    coordinators: CoordinatorRegistry,
    /// Background task handles
    background_tasks: Arc<RwLock<Vec<JoinHandle<()>>>>,
    /// Emergency shutdown flag
    emergency_shutdown: Arc<AtomicBool>,
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    ready: Arc<AtomicBool>,
    /// –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    start_time: Instant,
}

/// –†–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
#[derive(Clone)]
pub struct CoordinatorRegistry {
    pub embedding: Arc<EmbeddingCoordinator>,
    pub search: Arc<SearchCoordinator>,
    pub health: Arc<HealthManager>,
    pub promotion: Arc<PromotionCoordinator>,
    pub resources: Arc<ResourceController>,
    pub backup: Arc<BackupCoordinator>,
}

/// Trait –¥–ª—è lifecycle —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (ISP –ø—Ä–∏–Ω—Ü–∏–ø)
#[async_trait::async_trait]
pub trait LifecycleManager: Send + Sync {
    /// Production-ready –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    async fn initialize_production(&self) -> Result<()>;

    /// Graceful shutdown –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
    async fn shutdown_all(&self) -> Result<()>;

    /// –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    async fn emergency_shutdown(&self) -> Result<()>;

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    async fn verify_all_ready(&self) -> bool;

    /// –ü–æ–ª—É—á–∏—Ç—å uptime —Å–∏—Å—Ç–µ–º—ã
    fn get_uptime(&self) -> Duration;

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
    fn is_ready(&self) -> bool;
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
#[derive(Debug)]
pub struct InitializationResult {
    pub coordinator_name: String,
    pub success: bool,
    pub duration: Duration,
    pub error: Option<String>,
}

impl CoordinatorRegistry {
    /// –°–æ–∑–¥–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    pub fn from_container(container: &crate::di::container_core::ContainerCore) -> Result<Self> {
        info!("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ CoordinatorRegistry –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞");

        let embedding = container.resolve::<EmbeddingCoordinator>()?;
        let search = container.resolve::<SearchCoordinator>()?;
        let health = container.resolve::<HealthManager>()?;
        let promotion = container.resolve::<PromotionCoordinator>()?;
        let resources = container.resolve::<ResourceController>()?;
        let backup = container.resolve::<BackupCoordinator>()?;

        Ok(Self {
            embedding,
            search,
            health,
            promotion,
            resources,
            backup,
        })
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    pub fn get_all(&self) -> Vec<(&'static str, &dyn Coordinator)> {
        vec![
            ("embedding", &*self.embedding as &dyn Coordinator),
            ("search", &*self.search as &dyn Coordinator),
            ("health", &*self.health as &dyn Coordinator),
            ("promotion", &*self.promotion as &dyn Coordinator),
            ("resources", &*self.resources as &dyn Coordinator),
            ("backup", &*self.backup as &dyn Coordinator),
        ]
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–≤—ã–º–∏)
    pub fn get_critical(&self) -> Vec<(&'static str, &dyn Coordinator)> {
        vec![
            ("resources", &*self.resources as &dyn Coordinator),
            ("health", &*self.health as &dyn Coordinator),
        ]
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
    pub fn get_core(&self) -> Vec<(&'static str, &dyn Coordinator)> {
        vec![
            ("embedding", &*self.embedding as &dyn Coordinator),
            ("search", &*self.search as &dyn Coordinator),
        ]
    }

    /// –ü–æ–ª—É—á–∏—Ç—å background –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã
    pub fn get_background(&self) -> Vec<(&'static str, &dyn Coordinator)> {
        vec![
            ("promotion", &*self.promotion as &dyn Coordinator),
            ("backup", &*self.backup as &dyn Coordinator),
        ]
    }
}

impl OrchestrationLifecycleManager {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π lifecycle manager
    pub fn new(coordinators: CoordinatorRegistry) -> Self {
        Self {
            coordinators,
            background_tasks: Arc::new(RwLock::new(Vec::new())),
            emergency_shutdown: Arc::new(AtomicBool::new(false)),
            ready: Arc::new(AtomicBool::new(false)),
            start_time: Instant::now(),
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    pub fn from_container(_container: &crate::di::container_core::ContainerCore) -> Result<Self> {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π lifecycle manager
        warn!("üöß Using stub OrchestrationLifecycleManager - coordinators are not functional");

        // –°–æ–∑–¥–∞–µ–º minimal dummy –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        let dummy_coordinators = CoordinatorRegistry {
            embedding: Arc::new(Self::create_dummy_embedding_coordinator()?),
            search: Arc::new(Self::create_dummy_search_coordinator()?),
            health: Arc::new(Self::create_dummy_health_manager()?),
            promotion: Arc::new(Self::create_dummy_promotion_coordinator()?),
            resources: Arc::new(Self::create_dummy_resource_controller()?),
            backup: Arc::new(Self::create_dummy_backup_coordinator()?),
        };

        Ok(Self::new(dummy_coordinators))
    }

    /// –°–æ–∑–¥–∞—Ç—å dummy EmbeddingCoordinator –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    fn create_dummy_embedding_coordinator() -> Result<crate::orchestration::EmbeddingCoordinator> {
        Err(anyhow::anyhow!("EmbeddingCoordinator stub not implemented - requires GpuBatchProcessor and EmbeddingCacheInterface"))
    }

    /// –°–æ–∑–¥–∞—Ç—å dummy SearchCoordinator –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏  
    fn create_dummy_search_coordinator() -> Result<crate::orchestration::SearchCoordinator> {
        Err(anyhow::anyhow!("SearchCoordinator stub not implemented - requires VectorStore and EmbeddingCoordinator"))
    }

    /// –°–æ–∑–¥–∞—Ç—å dummy HealthManager –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    fn create_dummy_health_manager() -> Result<crate::orchestration::HealthManager> {
        Err(anyhow::anyhow!(
            "HealthManager stub not implemented - requires HealthMonitor"
        ))
    }

    /// –°–æ–∑–¥–∞—Ç—å dummy PromotionCoordinator –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    fn create_dummy_promotion_coordinator() -> Result<crate::orchestration::PromotionCoordinator> {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞—Ç—å —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        Err(anyhow::anyhow!("PromotionCoordinator stub not implemented"))
    }

    /// –°–æ–∑–¥–∞—Ç—å dummy ResourceController –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    fn create_dummy_resource_controller() -> Result<crate::orchestration::ResourceController> {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞—Ç—å —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        Err(anyhow::anyhow!("ResourceController stub not implemented"))
    }

    /// –°–æ–∑–¥–∞—Ç—å dummy BackupCoordinator –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    fn create_dummy_backup_coordinator() -> Result<crate::orchestration::BackupCoordinator> {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞—Ç—å —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        Err(anyhow::anyhow!("BackupCoordinator stub not implemented"))
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    async fn initialize_coordinator_group(
        &self,
        coordinators: Vec<(&'static str, &dyn Coordinator)>,
        phase_name: &str,
        timeout_duration: Duration,
    ) -> Result<Vec<InitializationResult>> {
        info!(
            "üöÄ {}: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤",
            phase_name,
            coordinators.len()
        );

        let mut tasks = Vec::new();

        for (name, coordinator) in coordinators {
            let coordinator_name = name.to_string();
            let init_start = Instant::now();

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è lifetime issues
            let result = timeout(timeout_duration, coordinator.initialize()).await;
            let duration = init_start.elapsed();

            let init_result = match result {
                Ok(Ok(())) => {
                    info!(
                        "‚úÖ {} coordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {:?}",
                        coordinator_name, duration
                    );
                    InitializationResult {
                        coordinator_name,
                        success: true,
                        duration,
                        error: None,
                    }
                }
                Ok(Err(e)) => {
                    error!(
                        "‚ùå {} coordinator –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}",
                        coordinator_name, e
                    );
                    InitializationResult {
                        coordinator_name,
                        success: false,
                        duration,
                        error: Some(e.to_string()),
                    }
                }
                Err(_) => {
                    error!("‚è∞ {} coordinator timeout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", coordinator_name);
                    InitializationResult {
                        coordinator_name,
                        success: false,
                        duration,
                        error: Some("Timeout".to_string()),
                    }
                }
            };

            tasks.push(init_result);
        }

        // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        let results = tasks;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let successful = results.iter().filter(|r| r.success).count();
        let total = results.len();

        if successful == total {
            info!(
                "‚úÖ {}: –í—Å–µ {} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                phase_name, total
            );
        } else {
            let failed_coordinators: Vec<&str> = results
                .iter()
                .filter(|r| !r.success)
                .map(|r| r.coordinator_name.as_str())
                .collect();
            return Err(anyhow::anyhow!(
                "{}: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤: {:?}",
                phase_name,
                failed_coordinators
            ));
        }

        Ok(results)
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å background monitoring –∑–∞–¥–∞—á–∏
    async fn start_background_monitoring(&self) -> Result<()> {
        info!("üîÑ –ó–∞–ø—É—Å–∫ background monitoring –∑–∞–¥–∞—á");
        let mut tasks = self.background_tasks.write().await;

        // Health monitoring task
        let health_task = {
            let health = Arc::clone(&self.coordinators.health);
            let emergency_shutdown = Arc::clone(&self.emergency_shutdown);

            tokio::spawn(async move {
                let mut interval = tokio::time::interval(Duration::from_secs(30));
                while !emergency_shutdown.load(Ordering::Relaxed) {
                    interval.tick().await;

                    if let Err(e) =
                        crate::orchestration::traits::HealthCoordinator::run_health_check(
                            health.as_ref(),
                        )
                        .await
                    {
                        error!("Background health check failed: {}", e);
                    } else {
                        debug!("Background health check completed successfully");
                    }
                }
                debug!("Health monitoring task completed");
            })
        };

        // System readiness monitoring task
        let readiness_task = {
            let coordinators = self.coordinators.clone();
            let emergency_shutdown = Arc::clone(&self.emergency_shutdown);
            let ready = Arc::clone(&self.ready);

            tokio::spawn(async move {
                let mut interval = tokio::time::interval(Duration::from_secs(60));
                while !emergency_shutdown.load(Ordering::Relaxed) {
                    interval.tick().await;

                    let all_ready = Self::check_coordinators_readiness(&coordinators).await;

                    if !all_ready && ready.load(Ordering::Relaxed) {
                        warn!("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ç–µ—Ä—è–ª–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å - –Ω–µ –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã");
                        ready.store(false, Ordering::Release);
                    } else if all_ready && !ready.load(Ordering::Relaxed) {
                        info!("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å - –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã");
                        ready.store(true, Ordering::Release);
                    }
                }
                debug!("Readiness monitoring task completed");
            })
        };

        tasks.push(health_task);
        tasks.push(readiness_task);

        info!("‚úÖ {} background –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω–æ", tasks.len());
        Ok(())
    }

    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ background –∑–∞–¥–∞—á–∏
    async fn stop_background_tasks(&self) {
        info!("üõ§Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ background tasks");

        // –û—Ç–º–µ—á–∞–µ–º emergency shutdown flag
        self.emergency_shutdown.store(true, Ordering::Release);

        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö tasks
        let mut tasks = self.background_tasks.write().await;
        for task in tasks.drain(..) {
            if !task.is_finished() {
                task.abort();
                if let Err(e) = task.await {
                    if !e.is_cancelled() {
                        warn!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ background task: {}", e);
                    }
                }
            }
        }

        info!("‚úÖ –í—Å–µ background tasks –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    async fn check_coordinators_readiness(coordinators: &CoordinatorRegistry) -> bool {
        let results = tokio::join!(
            coordinators.embedding.is_ready(),
            coordinators.search.is_ready(),
            coordinators.health.is_ready(),
            coordinators.promotion.is_ready(),
            coordinators.resources.is_ready(),
            coordinators.backup.is_ready()
        );

        results.0 && results.1 && results.2 && results.3 && results.4 && results.5
    }
}

#[async_trait::async_trait]
impl LifecycleManager for OrchestrationLifecycleManager {
    async fn initialize_production(&self) -> Result<()> {
        info!("üöÄ –ó–∞–ø—É—Å–∫ production –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OrchestrationLifecycleManager");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–∏—Å—Ç–µ–º–∞
        if self.ready.load(Ordering::Relaxed) {
            warn!("–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
            return Ok(());
        }

        // === Phase 1: Critical Infrastructure ===
        let critical_coordinators = self.coordinators.get_critical();
        self.initialize_coordinator_group(
            critical_coordinators,
            "Phase 1: Critical Infrastructure",
            Duration::from_secs(30),
        )
        .await?;

        // === Phase 2: Core Services ===
        let core_coordinators = self.coordinators.get_core();
        self.initialize_coordinator_group(
            core_coordinators,
            "Phase 2: Core Services",
            Duration::from_secs(45),
        )
        .await?;

        // === Phase 3: Background Services ===
        let background_coordinators = self.coordinators.get_background();
        self.initialize_coordinator_group(
            background_coordinators,
            "Phase 3: Background Services",
            Duration::from_secs(60),
        )
        .await?;

        // === Phase 4: Health Verification ===
        info!("üè• Phase 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤");

        let ready_check_timeout = Duration::from_secs(30);
        let ready_check_start = Instant::now();

        while ready_check_start.elapsed() < ready_check_timeout {
            if Self::check_coordinators_readiness(&self.coordinators).await {
                info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ");
                break;
            }

            debug!("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");
            sleep(Duration::from_millis(500)).await;
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if !Self::check_coordinators_readiness(&self.coordinators).await {
            return Err(anyhow::anyhow!("–ù–µ –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞"));
        }

        // === Phase 5: Start Background Tasks ===
        self.start_background_monitoring().await?;

        // –û—Ç–º–µ—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –≥–æ—Ç–æ–≤—É
        self.ready.store(true, Ordering::Release);

        info!(
            "üéâ OrchestrationLifecycleManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {:?}",
            self.start_time.elapsed()
        );
        Ok(())
    }

    async fn shutdown_all(&self) -> Result<()> {
        info!("üõ°Ô∏è –ù–∞—á–∞–ª–æ graceful shutdown OrchestrationLifecycleManager");

        // –û—Ç–º–µ—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –Ω–µ –≥–æ—Ç–æ–≤—É—é
        self.ready.store(false, Ordering::Release);

        // === Phase 1: Stop Background Tasks ===
        info!("üõ§Ô∏è Phase 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ background tasks");
        self.stop_background_tasks().await;

        // === Phase 2: Coordinated Shutdown ===
        info!("üõ°Ô∏è Phase 2: –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤");

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å timeout –∑–∞—â–∏—Ç–æ–π
        let shutdown_sequence = vec![
            (
                "backup",
                &*self.coordinators.backup as &dyn Coordinator,
                Duration::from_secs(60),
            ),
            (
                "promotion",
                &*self.coordinators.promotion as &dyn Coordinator,
                Duration::from_secs(30),
            ),
            (
                "search",
                &*self.coordinators.search as &dyn Coordinator,
                Duration::from_secs(15),
            ),
            (
                "embedding",
                &*self.coordinators.embedding as &dyn Coordinator,
                Duration::from_secs(30),
            ),
            (
                "health",
                &*self.coordinators.health as &dyn Coordinator,
                Duration::from_secs(15),
            ),
            (
                "resources",
                &*self.coordinators.resources as &dyn Coordinator,
                Duration::from_secs(15),
            ),
        ];

        for (name, coordinator, timeout_duration) in shutdown_sequence {
            match timeout(timeout_duration, coordinator.shutdown()).await {
                Ok(Ok(())) => {
                    info!("‚úÖ {} coordinator —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", name);
                }
                Ok(Err(e)) => {
                    warn!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {} coordinator: {}", name, e);
                }
                Err(_) => {
                    error!("‚ùå Timeout –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {} coordinator", name);
                }
            }
        }

        info!(
            "üèÅ OrchestrationLifecycleManager —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∑–∞ {:?}",
            self.start_time.elapsed()
        );
        Ok(())
    }

    async fn emergency_shutdown(&self) -> Result<()> {
        error!("üöë EMERGENCY SHUTDOWN OrchestrationLifecycleManager!");

        // –û—Ç–º–µ—á–∞–µ–º emergency shutdown flag
        self.emergency_shutdown.store(true, Ordering::Release);
        self.ready.store(false, Ordering::Release);

        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º background tasks
        self.stop_background_tasks().await;

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ timeout'–∞–º–∏
        let emergency_timeouts = vec![
            timeout(Duration::from_secs(5), self.coordinators.backup.shutdown()),
            timeout(
                Duration::from_secs(3),
                self.coordinators.promotion.shutdown(),
            ),
            timeout(Duration::from_secs(2), self.coordinators.search.shutdown()),
            timeout(
                Duration::from_secs(3),
                self.coordinators.embedding.shutdown(),
            ),
            timeout(Duration::from_secs(2), self.coordinators.health.shutdown()),
            timeout(
                Duration::from_secs(2),
                self.coordinators.resources.shutdown(),
            ),
        ];

        let results = futures::future::join_all(emergency_timeouts).await;

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let coordinator_names = [
            "backup",
            "promotion",
            "search",
            "embedding",
            "health",
            "resources",
        ];

        for (name, result) in coordinator_names.iter().zip(results.iter()) {
            match result {
                Ok(Ok(())) => info!("‚úÖ Emergency: {} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", name),
                Ok(Err(e)) => warn!("‚ö†Ô∏è Emergency: {} –æ—à–∏–±–∫–∞: {}", name, e),
                Err(_) => error!("‚ùå Emergency: {} timeout", name),
            }
        }

        error!("üöë EMERGENCY SHUTDOWN –∑–∞–≤–µ—Ä—à–µ–Ω");
        Ok(())
    }

    async fn verify_all_ready(&self) -> bool {
        Self::check_coordinators_readiness(&self.coordinators).await
    }

    fn get_uptime(&self) -> Duration {
        self.start_time.elapsed()
    }

    fn is_ready(&self) -> bool {
        self.ready.load(Ordering::Acquire)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::sync::atomic::AtomicU32;

    // Mock coordinator –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    struct MockCoordinator {
        initialization_delay: Duration,
        should_fail: AtomicBool,
        is_ready: AtomicBool,
        init_count: AtomicU32,
    }

    impl MockCoordinator {
        fn new(delay: Duration, should_fail: bool) -> Self {
            Self {
                initialization_delay: delay,
                should_fail: AtomicBool::new(should_fail),
                is_ready: AtomicBool::new(false),
                init_count: AtomicU32::new(0),
            }
        }
    }

    #[async_trait::async_trait]
    impl Coordinator for MockCoordinator {
        async fn initialize(&self) -> Result<()> {
            self.init_count.fetch_add(1, Ordering::Relaxed);
            tokio::time::sleep(self.initialization_delay).await;

            if self.should_fail.load(Ordering::Relaxed) {
                Err(anyhow::anyhow!("Mock coordinator initialization failed"))
            } else {
                self.is_ready.store(true, Ordering::Relaxed);
                Ok(())
            }
        }

        async fn shutdown(&self) -> Result<()> {
            self.is_ready.store(false, Ordering::Relaxed);
            tokio::time::sleep(Duration::from_millis(10)).await;
            Ok(())
        }

        async fn is_ready(&self) -> bool {
            self.is_ready.load(Ordering::Relaxed)
        }

        async fn metrics(&self) -> serde_json::Value {
            serde_json::json!({
                "init_count": self.init_count.load(Ordering::Relaxed),
                "is_ready": self.is_ready().await
            })
        }
    }

    #[tokio::test]
    async fn test_initialization_result_creation() {
        let result = InitializationResult {
            coordinator_name: "test".to_string(),
            success: true,
            duration: Duration::from_millis(100),
            error: None,
        };

        assert_eq!(result.coordinator_name, "test");
        assert!(result.success);
        assert_eq!(result.duration, Duration::from_millis(100));
        assert!(result.error.is_none());
    }

    #[tokio::test]
    async fn test_coordinator_registry_structure() {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ CoordinatorRegistry —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏
        // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã –∫–æ–º–ø–∏–ª–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã get_critical, get_core, get_background —Ä–∞–±–æ—Ç–∞—é—Ç
        // (–Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π registry –±–µ–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ unit —Ç–µ—Å—Ç–∞—Ö)
        assert!(true); // Placeholder test
    }
}
