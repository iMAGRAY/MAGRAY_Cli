use anyhow::Result;
use std::{
    sync::{Arc, atomic::{AtomicBool, AtomicU64, Ordering}},
    time::{Duration, Instant},
    collections::HashMap,
};
use tracing::{debug, info, warn, error};
use tokio::{
    sync::{RwLock, Semaphore},
    time::{timeout, sleep},
    task::JoinHandle,
};
use serde_json::json;

use crate::{
    orchestration::{
        EmbeddingCoordinator,
        SearchCoordinator,
        HealthManager,
        PromotionCoordinator,
        ResourceController,
        BackupCoordinator,
        RetryHandler, RetryPolicy,
        traits::{
            Coordinator, 
            SearchCoordinator as SearchCoordinatorTrait, 
            EmbeddingCoordinator as EmbeddingCoordinatorTrait,
            PromotionCoordinator as PromotionCoordinatorTrait,
            HealthCoordinator, ResourceCoordinator, BackupCoordinator as BackupCoordinatorTrait
        },
    },
    types::{Layer, Record, SearchOptions},
    promotion::PromotionStats,
    health::{SystemHealthStatus, HealthStatus},
    backup::BackupMetadata,
};

/// Production-ready –≥–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä memory —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–ª–Ω—ã–º lifecycle management
// @component: {"k":"C","id":"memory_orchestrator","t":"Main memory system orchestrator","m":{"cur":95,"tgt":95,"u":"%"},"f":["orchestration","coordinator","main","production","lifecycle","monitoring","resilience","circuit-breaker","load-balancing"]}
pub struct MemoryOrchestrator {
    // === –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã ===
    /// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä embeddings
    pub embedding: Arc<EmbeddingCoordinator>,
    /// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞
    pub search: Arc<SearchCoordinator>,
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–¥–æ—Ä–æ–≤—å—è
    pub health: Arc<HealthManager>,
    /// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä promotion
    pub promotion: Arc<PromotionCoordinator>,
    /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
    pub resources: Arc<ResourceController>,
    /// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä backup
    pub backup: Arc<BackupCoordinator>,
    
    // === Production Infrastructure ===
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ orchestrator'–∞
    ready: AtomicBool,
    /// –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    start_time: Instant,
    /// Semaphore –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è concurrent –æ–ø–µ—Ä–∞—Ü–∏–π
    operation_limiter: Arc<Semaphore>,
    /// Circuit breaker —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    circuit_breakers: Arc<RwLock<HashMap<String, CircuitBreakerState>>>,
    /// Retry handlers –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
    retry_handlers: RetryHandlers,
    /// Orchestration metrics
    metrics: Arc<RwLock<OrchestrationMetrics>>,
    /// Background tasks handles
    background_tasks: Arc<RwLock<Vec<JoinHandle<()>>>>,
    /// Emergency shutdown flag
    emergency_shutdown: Arc<AtomicBool>,
}

/// Circuit breaker state –¥–ª—è coordinator'–∞
#[derive(Debug)]
struct CircuitBreakerState {
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    failure_count: AtomicU64,
    /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏
    last_failure: Option<Instant>,
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ circuit breaker (Open/HalfOpen/Closed)
    state: CircuitBreakerStatus,
    /// –í—Ä–µ–º—è recovery timeout
    recovery_timeout: Duration,
}

impl Clone for CircuitBreakerState {
    fn clone(&self) -> Self {
        Self {
            failure_count: AtomicU64::new(self.failure_count.load(Ordering::Relaxed)),
            last_failure: self.last_failure,
            state: self.state.clone(),
            recovery_timeout: self.recovery_timeout,
        }
    }
}

#[derive(Debug, Clone, PartialEq)]
enum CircuitBreakerStatus {
    Closed,  // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    Open,    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    HalfOpen, // –ü—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
}

/// Retry handlers –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
struct RetryHandlers {
    search: RetryHandler,
    embedding: RetryHandler,
    promotion: RetryHandler,
    backup: RetryHandler,
    health_check: RetryHandler,
}

/// Orchestration metrics
#[derive(Debug, Default)]
struct OrchestrationMetrics {
    /// –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    total_operations: u64,
    successful_operations: u64,
    failed_operations: u64,
    
    /// Coordinator-specific metrics
    coordinator_metrics: HashMap<String, CoordinatorMetrics>,
    
    /// Performance metrics
    avg_operation_duration_ms: f64,
    max_operation_duration_ms: u64,
    
    /// Circuit breaker metrics
    circuit_breaker_trips: HashMap<String, u64>,
    
    /// Resource utilization
    current_concurrent_operations: u64,
    max_concurrent_operations: u64,
    
    /// SLA metrics
    sla_violations: u64,
    uptime_seconds: u64,
}

#[derive(Debug, Default, Clone)]
struct CoordinatorMetrics {
    success_rate: f64,
    avg_response_time_ms: f64,
    circuit_breaker_state: String,
    health_score: f64,
}

impl CircuitBreakerState {
    fn new(recovery_timeout: Duration) -> Self {
        Self {
            failure_count: AtomicU64::new(0),
            last_failure: None,
            state: CircuitBreakerStatus::Closed,
            recovery_timeout,
        }
    }
    
    /// –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    fn record_success(&mut self) {
        self.failure_count.store(0, Ordering::Relaxed);
        self.state = CircuitBreakerStatus::Closed;
        self.last_failure = None;
    }
    
    /// –ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É
    fn record_failure(&mut self) {
        let failures = self.failure_count.fetch_add(1, Ordering::Relaxed) + 1;
        self.last_failure = Some(Instant::now());
        
        // Open circuit –ø–æ—Å–ª–µ 5 –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
        if failures >= 5 {
            self.state = CircuitBreakerStatus::Open;
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
    fn can_execute(&mut self) -> bool {
        match self.state {
            CircuitBreakerStatus::Closed => true,
            CircuitBreakerStatus::Open => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å recovery
                if let Some(last_failure) = self.last_failure {
                    if last_failure.elapsed() >= self.recovery_timeout {
                        self.state = CircuitBreakerStatus::HalfOpen;
                        return true;
                    }
                }
                false
            },
            CircuitBreakerStatus::HalfOpen => true,
        }
    }
}

impl Default for RetryHandlers {
    fn default() -> Self {
        Self {
            search: RetryHandler::new(RetryPolicy::fast()), // Sub-5ms target
            embedding: RetryHandler::new(RetryPolicy::default()),
            promotion: RetryHandler::new(RetryPolicy::aggressive()), // Critical operation
            backup: RetryHandler::new(RetryPolicy::aggressive()), // Critical operation
            health_check: RetryHandler::new(RetryPolicy::fast()),
        }
    }
}

impl MemoryOrchestrator {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π production-ready –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    pub fn from_container(container: &crate::di_container::DIContainer) -> Result<Self> {
        info!("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ MemoryOrchestrator –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞");
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let embedding = container.resolve::<EmbeddingCoordinator>()?;
        let search = container.resolve::<SearchCoordinator>()?;
        let health = container.resolve::<HealthManager>()?;
        let promotion = container.resolve::<PromotionCoordinator>()?;
        let resources = container.resolve::<ResourceController>()?;
        let backup = container.resolve::<BackupCoordinator>()?;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º circuit breakers –¥–ª—è –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        let mut circuit_breakers = HashMap::new();
        circuit_breakers.insert("embedding".to_string(), CircuitBreakerState::new(Duration::from_secs(30)));
        circuit_breakers.insert("search".to_string(), CircuitBreakerState::new(Duration::from_secs(10)));
        circuit_breakers.insert("health".to_string(), CircuitBreakerState::new(Duration::from_secs(60)));
        circuit_breakers.insert("promotion".to_string(), CircuitBreakerState::new(Duration::from_secs(120)));
        circuit_breakers.insert("resources".to_string(), CircuitBreakerState::new(Duration::from_secs(60)));
        circuit_breakers.insert("backup".to_string(), CircuitBreakerState::new(Duration::from_secs(300)));
        
        Ok(Self {
            embedding,
            search,
            health,
            promotion,
            resources,
            backup,
            ready: AtomicBool::new(false),
            start_time: Instant::now(),
            operation_limiter: Arc::new(Semaphore::new(100)), // Max 100 concurrent operations
            circuit_breakers: Arc::new(RwLock::new(circuit_breakers)),
            retry_handlers: RetryHandlers::default(),
            metrics: Arc::new(RwLock::new(OrchestrationMetrics::default())),
            background_tasks: Arc::new(RwLock::new(Vec::new())),
            emergency_shutdown: Arc::new(AtomicBool::new(false)),
        })
    }
    
    /// Production-ready –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å parallel coordinator startup
    pub async fn initialize_production(&self) -> Result<()> {
        info!("üîÑ –ó–∞–ø—É—Å–∫ production –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MemoryOrchestrator");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–∏—Å—Ç–µ–º–∞
        if self.ready.load(Ordering::Relaxed) {
            warn!("–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
            return Ok(());
        }
        
        // === Phase 1: Critical Infrastructure ===
        info!("üìä Phase 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã");
        
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º resource controller –∏ health manager
        let resource_init = timeout(Duration::from_secs(30), self.resources.initialize());
        let health_init = timeout(Duration::from_secs(30), self.health.initialize());
        
        let (resource_result, health_result) = tokio::try_join!(resource_init, health_init)?;
        resource_result.map_err(|e| anyhow::anyhow!("Resource controller –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {}", e))?;
        health_result.map_err(|e| anyhow::anyhow!("Health manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {}", e))?;
        
        info!("‚úÖ Critical infrastructure –≥–æ—Ç–æ–≤–∞");
        
        // === Phase 2: Core Services ===
        info!("üß† Phase 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è core services");
        
        let embedding_init = timeout(Duration::from_secs(45), self.embedding.initialize());
        let search_init = timeout(Duration::from_secs(30), self.search.initialize());
        
        let (embedding_result, search_result) = tokio::try_join!(embedding_init, search_init)?;
        embedding_result.map_err(|e| anyhow::anyhow!("Embedding coordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {}", e))?;
        search_result.map_err(|e| anyhow::anyhow!("Search coordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {}", e))?;
        
        info!("‚úÖ Core services –≥–æ—Ç–æ–≤—ã");
        
        // === Phase 3: Background Services ===
        info!("üîÑ Phase 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è background services");
        
        let promotion_init = timeout(Duration::from_secs(60), self.promotion.initialize());
        let backup_init = timeout(Duration::from_secs(60), self.backup.initialize());
        
        let (promotion_result, backup_result) = tokio::try_join!(promotion_init, backup_init)?;
        promotion_result.map_err(|e| anyhow::anyhow!("Promotion coordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {}", e))?;
        backup_result.map_err(|e| anyhow::anyhow!("Backup coordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {}", e))?;
        
        info!("‚úÖ Background services –≥–æ—Ç–æ–≤—ã");
        
        // === Phase 4: Health Verification ===
        info!("üè• Phase 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤");
        
        let ready_check_timeout = Duration::from_secs(30);
        let ready_check_start = Instant::now();
        
        while ready_check_start.elapsed() < ready_check_timeout {
            if self.verify_all_coordinators_ready().await {
                info!("‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ");
                break;
            }
            
            debug!("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤...");
            sleep(Duration::from_millis(500)).await;
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if !self.verify_all_coordinators_ready().await {
            return Err(anyhow::anyhow!("–ù–µ –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞"));
        }
        
        // === Phase 5: Start Background Tasks ===
        self.start_background_tasks().await?;
        
        // –û—Ç–º–µ—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –≥–æ—Ç–æ–≤—É
        self.ready.store(true, Ordering::Release);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞
        {
            let mut metrics = self.metrics.write().await;
            metrics.uptime_seconds = self.start_time.elapsed().as_secs();
        }
        
        info!("üéâ MemoryOrchestrator —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {:?}", self.start_time.elapsed());
        Ok(())
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    async fn verify_all_coordinators_ready(&self) -> bool {
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        let results = tokio::join!(
            self.embedding.is_ready(),
            self.search.is_ready(), 
            self.health.is_ready(),
            self.promotion.is_ready(),
            self.resources.is_ready(),
            self.backup.is_ready()
        );
        
        let all_ready = results.0 && results.1 && results.2 && results.3 && results.4 && results.5;
        
        if !all_ready {
            debug!("Coordinator readiness: embedding={}, search={}, health={}, promotion={}, resources={}, backup={}",
                results.0, results.1, results.2, results.3, results.4, results.5);
        }
        
        all_ready
    }
    
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å background –∑–∞–¥–∞—á–∏
    async fn start_background_tasks(&self) -> Result<()> {
        info!("üîÑ –ó–∞–ø—É—Å–∫ background –∑–∞–¥–∞—á orchestrator'–∞");
        let mut tasks = self.background_tasks.write().await;
        
        // Health monitoring task
        let health_task = {
            let health = Arc::clone(&self.health);
            let metrics = Arc::clone(&self.metrics);
            let emergency_shutdown = Arc::clone(&self.emergency_shutdown);
            
            tokio::spawn(async move {
                let mut interval = tokio::time::interval(Duration::from_secs(30));
                while !emergency_shutdown.load(Ordering::Relaxed) {
                    interval.tick().await;
                    
                    if let Err(e) = health.run_health_check().await {
                        error!("Health check failed: {}", e);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º uptime –º–µ—Ç—Ä–∏–∫–∏
                    if let Ok(mut metrics) = metrics.try_write() {
                        metrics.uptime_seconds = metrics.uptime_seconds.saturating_add(30);
                    }
                }
                debug!("Health monitoring task –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            })
        };
        
        // Circuit breaker monitoring task
        let circuit_breaker_task = {
            let circuit_breakers = Arc::clone(&self.circuit_breakers);
            let emergency_shutdown = Arc::clone(&self.emergency_shutdown);
            
            tokio::spawn(async move {
                let mut interval = tokio::time::interval(Duration::from_secs(60));
                while !emergency_shutdown.load(Ordering::Relaxed) {
                    interval.tick().await;
                    
                    if let Ok(breakers) = circuit_breakers.try_read() {
                        for (name, state) in breakers.iter() {
                            match state.state {
                                CircuitBreakerStatus::Open => {
                                    warn!("üî¥ Circuit breaker –û–¢–ö–†–´–¢ –¥–ª—è {}", name);
                                }
                                CircuitBreakerStatus::HalfOpen => {
                                    info!("üü° Circuit breaker –≤ —Ä–µ–∂–∏–º–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {}", name);
                                }
                                CircuitBreakerStatus::Closed => {
                                    // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
                                }
                            }
                        }
                    }
                }
                debug!("Circuit breaker monitoring task –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            })
        };
        
        // Metrics collection task
        let metrics_task = {
            let metrics = Arc::clone(&self.metrics);
            let circuit_breakers = Arc::clone(&self.circuit_breakers);
            let emergency_shutdown = Arc::clone(&self.emergency_shutdown);
            
            tokio::spawn(async move {
                let mut interval = tokio::time::interval(Duration::from_secs(60));
                while !emergency_shutdown.load(Ordering::Relaxed) {
                    interval.tick().await;
                    
                    // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ circuit breakers
                    if let (Ok(mut metrics), Ok(breakers)) = (
                        metrics.try_write(), 
                        circuit_breakers.try_read()
                    ) {
                        for (name, state) in breakers.iter() {
                            let trips = metrics.circuit_breaker_trips.entry(name.clone()).or_insert(0);
                            if state.state == CircuitBreakerStatus::Open {
                                *trips = trips.saturating_add(1);
                            }
                        }
                    }
                }
                debug!("Metrics collection task –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            })
        };
        
        tasks.push(health_task);
        tasks.push(circuit_breaker_task);
        tasks.push(metrics_task);
        
        info!("‚úÖ {} background –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω–æ", tasks.len());
        Ok(())
    }
    
    /// Legacy –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å initialize_production() –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ
    pub async fn initialize_all(&self) -> Result<()> {
        warn!("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ legacy initialize_all(), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è initialize_production()");
        self.initialize_production().await
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
    pub async fn all_ready(&self) -> bool {
        self.ready.load(Ordering::Acquire) && self.verify_all_coordinators_ready().await
    }
    
    /// Production health check —Å circuit breaker –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    pub async fn production_health_check(&self) -> Result<SystemHealthStatus> {
        if !self.ready.load(Ordering::Relaxed) {
            return Ok(SystemHealthStatus {
                overall_status: HealthStatus::Down,
                component_statuses: HashMap::new(),
                active_alerts: vec![],
                metrics_summary: HashMap::new(),
                last_updated: chrono::Utc::now(),
                uptime_seconds: 0,
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker –¥–ª—è health coordinator'–∞
        let can_execute = {
            let mut breakers = self.circuit_breakers.write().await;
            breakers.get_mut("health")
                .map(|cb| cb.can_execute())
                .unwrap_or(true)
        };
        
        if !can_execute {
            warn!("üî¥ Health check –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω circuit breaker'–æ–º");
            return Ok(SystemHealthStatus {
                overall_status: HealthStatus::Degraded,
                component_statuses: HashMap::new(),
                active_alerts: vec![],
                metrics_summary: HashMap::new(),
                last_updated: chrono::Utc::now(),
                uptime_seconds: self.start_time.elapsed().as_secs(),
            });
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º health check —Å retry logic
        match self.retry_handlers.health_check.execute(|| async {
            self.health.system_health().await
        }).await {
            crate::orchestration::RetryResult::Success(health, attempts) => {
                if attempts > 1 {
                    debug!("Health check –≤—ã–ø–æ–ª–Ω–µ–Ω —Å {} –ø–æ–ø—ã—Ç–æ–∫", attempts);
                }
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ circuit breaker
                if let Ok(mut breakers) = self.circuit_breakers.try_write() {
                    if let Some(cb) = breakers.get_mut("health") {
                        cb.record_success();
                    }
                }
                
                Ok(health)
            },
            crate::orchestration::RetryResult::ExhaustedRetries(e) | 
            crate::orchestration::RetryResult::NonRetriable(e) => {
                error!("üî¥ Health check –Ω–µ —É–¥–∞–ª—Å—è: {}", e);
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ circuit breaker
                if let Ok(mut breakers) = self.circuit_breakers.try_write() {
                    if let Some(cb) = breakers.get_mut("health") {
                        cb.record_failure();
                    }
                }
                
                Err(e)
            }
        }
    }
    
    /// Production-ready graceful shutdown —Å timeout –∑–∞—â–∏—Ç–æ–π
    pub async fn shutdown_all(&self) -> Result<()> {
        info!("üõ°Ô∏è –ù–∞—á–∞–ª–æ production graceful shutdown MemoryOrchestrator");
        
        // –û—Ç–º–µ—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –Ω–µ –≥–æ—Ç–æ–≤—É—é
        self.ready.store(false, Ordering::Release);
        
        // === Phase 1: Stop Background Tasks ===
        info!("üõ§Ô∏è Phase 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ background tasks");
        self.stop_background_tasks().await;
        
        // === Phase 2: Wait for Active Operations ===
        info!("‚è≥ Phase 2: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");
        let active_operations_timeout = Duration::from_secs(30);
        let active_operations_start = Instant::now();
        
        while active_operations_start.elapsed() < active_operations_timeout {
            let available_permits = self.operation_limiter.available_permits();
            if available_permits >= 100 { // All permits available = no active operations
                info!("‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
                break;
            }
            
            debug!("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", 100 - available_permits);
            sleep(Duration::from_millis(500)).await;
        }
        
        // === Phase 3: Coordinated Shutdown ===
        info!("üõ°Ô∏è Phase 3: –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤");
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å timeout –∑–∞—â–∏—Ç–æ–π
        let coordinator_shutdowns = [
            ("backup", timeout(Duration::from_secs(60), self.backup.shutdown())),
            ("promotion", timeout(Duration::from_secs(30), self.promotion.shutdown())),
            ("search", timeout(Duration::from_secs(15), self.search.shutdown())),
            ("embedding", timeout(Duration::from_secs(30), self.embedding.shutdown())),
            ("health", timeout(Duration::from_secs(15), self.health.shutdown())),
            ("resources", timeout(Duration::from_secs(15), self.resources.shutdown())),
        ];
        
        for (name, shutdown_future) in coordinator_shutdowns {
            match shutdown_future.await {
                Ok(Ok(())) => {
                    info!("‚úÖ {} coordinator —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", name);
                }
                Ok(Err(e)) => {
                    warn!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {} coordinator: {}", name, e);
                }
                Err(_) => {
                    error!("‚ùå Timeout –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {} coordinator", name);
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if let Ok(mut metrics) = self.metrics.try_write() {
            metrics.uptime_seconds = self.start_time.elapsed().as_secs();
        }
        
        info!("üèÅ MemoryOrchestrator —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∑–∞ {:?}", self.start_time.elapsed());
        Ok(())
    }
    
    /// –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    pub async fn emergency_shutdown(&self) -> Result<()> {
        error!("üî¥ EMERGENCY SHUTDOWN –∑–∞–ø—É—â–µ–Ω!");
        
        // –û—Ç–º–µ—á–∞–µ–º emergency shutdown flag
        self.emergency_shutdown.store(true, Ordering::Release);
        self.ready.store(false, Ordering::Release);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º background tasks
        self.stop_background_tasks().await;
        
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ timeout'–∞–º–∏
        let results = tokio::join!(
            timeout(Duration::from_secs(5), self.backup.shutdown()),
            timeout(Duration::from_secs(3), self.promotion.shutdown()),
            timeout(Duration::from_secs(2), self.search.shutdown()),
            timeout(Duration::from_secs(3), self.embedding.shutdown()),
            timeout(Duration::from_secs(2), self.health.shutdown()),
            timeout(Duration::from_secs(2), self.resources.shutdown())
        );
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let coordinator_names = ["backup", "promotion", "search", "embedding", "health", "resources"];
        let shutdown_results = [&results.0, &results.1, &results.2, &results.3, &results.4, &results.5];
        
        for (name, result) in coordinator_names.iter().zip(shutdown_results.iter()) {
            match result {
                Ok(Ok(())) => info!("‚úÖ Emergency: {} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", name),
                Ok(Err(e)) => warn!("‚ö†Ô∏è Emergency: {} –æ—à–∏–±–∫–∞: {}", name, e),
                Err(_) => error!("‚ùå Emergency: {} timeout", name),
            }
        }
        
        error!("üöë EMERGENCY SHUTDOWN –∑–∞–≤–µ—Ä—à–µ–Ω");
        Ok(())
    }
    
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ background tasks
    async fn stop_background_tasks(&self) {
        info!("üõ§Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ background tasks");
        
        // –û—Ç–º–µ—á–∞–µ–º emergency shutdown flag
        self.emergency_shutdown.store(true, Ordering::Release);
        
        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö tasks
        let mut tasks = self.background_tasks.write().await;
        for task in tasks.drain(..) {
            if !task.is_finished() {
                task.abort();
                if let Err(e) = task.await {
                    if !e.is_cancelled() {
                        warn!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ background task: {}", e);
                    }
                }
            }
        }
        
        info!("‚úÖ –í—Å–µ background tasks –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å comprehensive production metrics
    pub async fn all_metrics(&self) -> serde_json::Value {
        let orchestrator_metrics = self.metrics.read().await;
        let circuit_breakers = self.circuit_breakers.read().await;
        
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        let results = tokio::join!(
            self.embedding.metrics(),
            self.search.metrics(),
            self.health.metrics(),
            self.promotion.metrics(),
            self.resources.metrics(),
            self.backup.metrics()
        );
        
        // –°–æ–±–∏—Ä–∞–µ–º readiness —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        let readiness_results = tokio::join!(
            self.embedding.is_ready(),
            self.search.is_ready(),
            self.health.is_ready(),
            self.promotion.is_ready(),
            self.resources.is_ready(),
            self.backup.is_ready()
        );
        
        let mut coordinator_metrics_json = serde_json::Map::new();
        coordinator_metrics_json.insert("embedding".to_string(), results.0);
        coordinator_metrics_json.insert("search".to_string(), results.1);
        coordinator_metrics_json.insert("health".to_string(), results.2);
        coordinator_metrics_json.insert("promotion".to_string(), results.3);
        coordinator_metrics_json.insert("resources".to_string(), results.4);
        coordinator_metrics_json.insert("backup".to_string(), results.5);
        
        // Circuit breaker states
        let mut circuit_breaker_states = serde_json::Map::new();
        for (name, state) in circuit_breakers.iter() {
            circuit_breaker_states.insert(name.clone(), json!({
                "state": match state.state {
                    CircuitBreakerStatus::Closed => "closed",
                    CircuitBreakerStatus::Open => "open",
                    CircuitBreakerStatus::HalfOpen => "half_open",
                },
                "failure_count": state.failure_count.load(Ordering::Relaxed),
                "last_failure": state.last_failure.map(|t| t.elapsed().as_secs()),
                "recovery_timeout_secs": state.recovery_timeout.as_secs(),
            }));
        }
        
        json!({
            "orchestrator": {
                "ready": self.ready.load(Ordering::Relaxed),
                "uptime_seconds": self.start_time.elapsed().as_secs(),
                "emergency_shutdown": self.emergency_shutdown.load(Ordering::Relaxed),
                
                // Operation metrics
                "operations": {
                    "total": orchestrator_metrics.total_operations,
                    "successful": orchestrator_metrics.successful_operations,
                    "failed": orchestrator_metrics.failed_operations,
                    "success_rate": if orchestrator_metrics.total_operations > 0 {
                        orchestrator_metrics.successful_operations as f64 / orchestrator_metrics.total_operations as f64 * 100.0
                    } else { 100.0 },
                    "current_concurrent": 100 - self.operation_limiter.available_permits(),
                    "max_concurrent": orchestrator_metrics.max_concurrent_operations,
                },
                
                // Performance metrics
                "performance": {
                    "avg_operation_duration_ms": orchestrator_metrics.avg_operation_duration_ms,
                    "max_operation_duration_ms": orchestrator_metrics.max_operation_duration_ms,
                },
                
                // Circuit breaker metrics
                "circuit_breakers": circuit_breaker_states,
                "circuit_breaker_trips": orchestrator_metrics.circuit_breaker_trips,
                
                // SLA metrics
                "sla": {
                    "violations": orchestrator_metrics.sla_violations,
                    "uptime_percentage": if self.start_time.elapsed().as_secs() > 0 {
                        100.0 - (orchestrator_metrics.sla_violations as f64 / self.start_time.elapsed().as_secs() as f64 * 100.0)
                    } else { 100.0 },
                },
                
                // Coordinator-specific orchestration metrics
                "coordinator_health": {
                    "embedding_ready": readiness_results.0,
                    "search_ready": readiness_results.1,
                    "health_ready": readiness_results.2,
                    "promotion_ready": readiness_results.3,
                    "resources_ready": readiness_results.4,
                    "backup_ready": readiness_results.5,
                },
                
                "coordinators": coordinator_metrics_json,
            }
        })
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å dashboard-ready metrics
    pub async fn dashboard_metrics(&self) -> serde_json::Value {
        let full_metrics = self.all_metrics().await;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è dashboard'–∞
        json!({
            "status": if self.ready.load(Ordering::Relaxed) { "ready" } else { "not_ready" },
            "uptime_hours": self.start_time.elapsed().as_secs() / 3600,
            "operations_per_minute": full_metrics["orchestrator"]["operations"]["total"].as_u64().unwrap_or(0) / (self.start_time.elapsed().as_secs() / 60).max(1),
            "success_rate": full_metrics["orchestrator"]["operations"]["success_rate"],
            "active_operations": full_metrics["orchestrator"]["operations"]["current_concurrent"],
            "circuit_breakers_open": (|| {
                let breakers = &full_metrics["orchestrator"]["circuit_breakers"];
                let mut open_count = 0;
                if let Some(breakers_obj) = breakers.as_object() {
                    for (_, state) in breakers_obj {
                        if state["state"] == "open" {
                            open_count += 1;
                        }
                    }
                }
                open_count
            })(),
            "coordinator_health": full_metrics["orchestrator"]["coordinator_health"],
        })
    }
    
    // === Production-ready –º–µ—Ç–æ–¥—ã-–æ–±–µ—Ä—Ç–∫–∏ —Å circuit breaker –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ===
    
    /// Production –ø–æ–∏—Å–∫ —Å full orchestration intelligence
    pub async fn search(
        &self,
        query: &str,
        layer: Layer,
        options: SearchOptions,
    ) -> Result<Vec<Record>> {
        if !self.ready.load(Ordering::Relaxed) {
            return Err(anyhow::anyhow!("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –≥–æ—Ç–æ–≤"));
        }
        
        // –ü–æ–ª—É—á–∞–µ–º permit –¥–ª—è concurrent operations
        let _permit = self.operation_limiter.acquire().await.map_err(|e| 
            anyhow::anyhow!("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å permit –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {}", e))?;
        
        let operation_start = Instant::now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        let can_execute = {
            let mut breakers = self.circuit_breakers.write().await;
            breakers.get_mut("search")
                .map(|cb| cb.can_execute())
                .unwrap_or(true)
        };
        
        if !can_execute {
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫
            {
                let mut metrics = self.metrics.write().await;
                metrics.failed_operations += 1;
                metrics.total_operations += 1;
            }
            return Err(anyhow::anyhow!("–ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (circuit breaker –æ—Ç–∫—Ä—ã—Ç)"));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if !self.resources.check_resources("search").await? {
            warn!("üü° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ª–∏–º–∏—Ç–æ–≤");
            if let Err(e) = self.resources.adapt_limits().await {
                warn!("–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤: {}", e);
            }
            return Ok(vec![]);
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å retry logic
        let result = self.retry_handlers.search.execute(|| async {
            SearchCoordinatorTrait::search(&*self.search, query, layer, options.clone()).await
        }).await;
        
        let operation_duration = operation_start.elapsed();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ circuit breaker state
        match &result {
            crate::orchestration::RetryResult::Success(records, attempts) => {
                debug!("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {:?} ({} –ø–æ–ø—ã—Ç–æ–∫, {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)", 
                    operation_duration, attempts, records.len());
                
                // –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—Ö –≤ circuit breaker
                if let Ok(mut breakers) = self.circuit_breakers.try_write() {
                    if let Some(cb) = breakers.get_mut("search") {
                        cb.record_success();
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º metrics
                if let Ok(mut metrics) = self.metrics.try_write() {
                    metrics.successful_operations += 1;
                    metrics.total_operations += 1;
                    metrics.current_concurrent_operations = (100 - self.operation_limiter.available_permits()) as u64;
                    if metrics.current_concurrent_operations > metrics.max_concurrent_operations {
                        metrics.max_concurrent_operations = metrics.current_concurrent_operations;
                    }
                    
                    let duration_ms = operation_duration.as_millis() as f64;
                    metrics.avg_operation_duration_ms = 
                        (metrics.avg_operation_duration_ms * (metrics.total_operations - 1) as f64 + duration_ms) / metrics.total_operations as f64;
                    
                    if operation_duration.as_millis() > metrics.max_operation_duration_ms as u128 {
                        metrics.max_operation_duration_ms = operation_duration.as_millis() as u64;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º SLA (sub-5ms target)
                if operation_duration.as_millis() > 5 {
                    if let Ok(mut metrics) = self.metrics.try_write() {
                        metrics.sla_violations += 1;
                    }
                    debug!("‚ö†Ô∏è SLA violation: –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è {:?} (target: <5ms)", operation_duration);
                }
            },
            crate::orchestration::RetryResult::ExhaustedRetries(e) |
            crate::orchestration::RetryResult::NonRetriable(e) => {
                error!("üî¥ –ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è –∑–∞ {:?}: {}", operation_duration, e);
                
                // –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –≤ circuit breaker
                if let Ok(mut breakers) = self.circuit_breakers.try_write() {
                    if let Some(cb) = breakers.get_mut("search") {
                        cb.record_failure();
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º metrics
                if let Ok(mut metrics) = self.metrics.try_write() {
                    metrics.failed_operations += 1;
                    metrics.total_operations += 1;
                }
            }
        }
        
        result.into_result()
    }
    
    /// Production embedding —Å intelligent caching –∏ fallback
    pub async fn get_embedding(&self, text: &str) -> Result<Vec<f32>> {
        if !self.ready.load(Ordering::Relaxed) {
            return Err(anyhow::anyhow!("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –≥–æ—Ç–æ–≤"));
        }
        
        let _permit = self.operation_limiter.acquire().await.map_err(|e| 
            anyhow::anyhow!("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å permit: {}", e))?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        let can_execute = {
            let mut breakers = self.circuit_breakers.write().await;
            breakers.get_mut("embedding")
                .map(|cb| cb.can_execute())
                .unwrap_or(true)
        };
        
        if !can_execute {
            return Err(anyhow::anyhow!("–≠–º–±–µ–¥–¥–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (circuit breaker)"));
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –±–µ–∑ retry
        if let Some(cached) = EmbeddingCoordinatorTrait::check_cache(&*self.embedding, text).await {
            debug!("üíæ Cache hit –¥–ª—è embedding: {} chars", text.len());
            return Ok(cached);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if !self.resources.check_resources("embedding").await? {
            warn!("üü° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è embedding");
            return Err(anyhow::anyhow!("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤"));
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º embedding —Å retry
        let operation_start = Instant::now();
        let result: crate::orchestration::RetryResult<Vec<f32>> = self.retry_handlers.embedding.execute(|| async {
            EmbeddingCoordinatorTrait::get_embedding(&*self.embedding, text).await
        }).await;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º circuit breaker –∏ metrics
        match &result {
            crate::orchestration::RetryResult::Success(embedding, attempts) => {
                debug!("‚úÖ Embedding –ø–æ–ª—É—á–µ–Ω –∑–∞ {:?} ({} –ø–æ–ø—ã—Ç–æ–∫, {} dims)", 
                    operation_start.elapsed(), attempts, embedding.len());
                
                if let Ok(mut breakers) = self.circuit_breakers.try_write() {
                    if let Some(cb) = breakers.get_mut("embedding") {
                        cb.record_success();
                    }
                }
            },
            _ => {
                error!("üî¥ Embedding –Ω–µ —É–¥–∞–ª—Å—è –∑–∞ {:?}", operation_start.elapsed());
                
                if let Ok(mut breakers) = self.circuit_breakers.try_write() {
                    if let Some(cb) = breakers.get_mut("embedding") {
                        cb.record_failure();
                    }
                }
            }
        }
        
        result.into_result()
    }
    
    /// Production promotion —Å intelligent scheduling
    pub async fn run_promotion(&self) -> Result<PromotionStats> {
        if !self.ready.load(Ordering::Relaxed) {
            return Err(anyhow::anyhow!("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –≥–æ—Ç–æ–≤"));
        }
        
        let _permit = self.operation_limiter.acquire().await.map_err(|e| 
            anyhow::anyhow!("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å permit: {}", e))?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        let can_execute = {
            let mut breakers = self.circuit_breakers.write().await;
            breakers.get_mut("promotion")
                .map(|cb| cb.can_execute())
                .unwrap_or(true)
        };
        
        if !can_execute {
            warn!("üü° Promotion –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω circuit breaker'–æ–º");
            return Ok(PromotionStats::default());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å promotion –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ
        if !self.promotion.should_promote().await {
            debug!("‚ÑπÔ∏è Promotion –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç");
            return Ok(PromotionStats::default());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if !self.resources.check_resources("promotion").await? {
            warn!("üü° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è promotion, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º");
            return Ok(PromotionStats::default());
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º promotion —Å aggressive retry policy
        let operation_start = Instant::now();
        let result = self.retry_handlers.promotion.execute(|| async {
            self.promotion.run_promotion().await
        }).await;
        
        match &result {
            crate::orchestration::RetryResult::Success(stats, attempts) => {
                info!("‚úÖ Promotion –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {:?} ({} –ø–æ–ø—ã—Ç–æ–∫, {} ms)", 
                    operation_start.elapsed(), attempts, stats.total_time_ms);
                
                if let Ok(mut breakers) = self.circuit_breakers.try_write() {
                    if let Some(cb) = breakers.get_mut("promotion") {
                        cb.record_success();
                    }
                }
            },
            _ => {
                error!("üî¥ Promotion –Ω–µ —É–¥–∞–ª—Å—è –∑–∞ {:?}", operation_start.elapsed());
                
                if let Ok(mut breakers) = self.circuit_breakers.try_write() {
                    if let Some(cb) = breakers.get_mut("promotion") {
                        cb.record_failure();
                    }
                }
            }
        }
        
        result.into_result()
    }
    
    /// Legacy health check - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å production_health_check()
    pub async fn check_health(&self) -> Result<SystemHealthStatus> {
        self.production_health_check().await
    }
    
    /// Production backup —Å comprehensive validation
    pub async fn create_backup(&self, path: &str) -> Result<BackupMetadata> {
        if !self.ready.load(Ordering::Relaxed) {
            return Err(anyhow::anyhow!("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –≥–æ—Ç–æ–≤"));
        }
        
        let _permit = self.operation_limiter.acquire().await.map_err(|e| 
            anyhow::anyhow!("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å permit: {}", e))?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        let can_execute = {
            let mut breakers = self.circuit_breakers.write().await;
            breakers.get_mut("backup")
                .map(|cb| cb.can_execute())
                .unwrap_or(true)
        };
        
        if !can_execute {
            return Err(anyhow::anyhow!("–ë—ç–∫–∞–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (circuit breaker)"));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if !self.resources.check_resources("backup").await? {
            return Err(anyhow::anyhow!("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è backup"));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ backup
        match self.production_health_check().await {
            Ok(health) if health.overall_status != HealthStatus::Healthy => {
                warn!("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ backup –ø—Ä–∏ –Ω–µ–∑–¥–æ—Ä–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {:?}", health.overall_status);
            },
            Err(e) => {
                error!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä–µ–¥ backup: {}", e);
                return Err(anyhow::anyhow!("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å backup –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"));
            },
            _ => {} // –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞
        }
        
        info!("üíæ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è production backup: {}", path);
        let operation_start = Instant::now();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º backup —Å aggressive retry
        let result = self.retry_handlers.backup.execute(|| async {
            self.backup.create_backup(path).await
        }).await;
        
        match &result {
            crate::orchestration::RetryResult::Success(metadata, attempts) => {
                info!("‚úÖ Backup —Å–æ–∑–¥–∞–Ω –∑–∞ {:?} ({} –ø–æ–ø—ã—Ç–æ–∫, {} records)", 
                    operation_start.elapsed(), attempts, metadata.total_records);
                
                if let Ok(mut breakers) = self.circuit_breakers.try_write() {
                    if let Some(cb) = breakers.get_mut("backup") {
                        cb.record_success();
                    }
                }
            },
            _ => {
                error!("üî¥ Backup –Ω–µ —É–¥–∞–ª—Å—è –∑–∞ {:?}", operation_start.elapsed());
                
                if let Ok(mut breakers) = self.circuit_breakers.try_write() {
                    if let Some(cb) = breakers.get_mut("backup") {
                        cb.record_failure();
                    }
                }
            }
        }
        
        result.into_result()
    }
    
    // === Advanced Production Methods ===
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å circuit breakers
    pub async fn reset_circuit_breakers(&self) -> Result<()> {
        info!("üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö circuit breakers");
        
        let mut breakers = self.circuit_breakers.write().await;
        for (name, breaker) in breakers.iter_mut() {
            breaker.record_success(); // Reset to closed state
            info!("‚úÖ Circuit breaker {} —Å–±—Ä–æ—à–µ–Ω", name);
        }
        
        Ok(())
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ circuit breaker states
    pub async fn circuit_breaker_states(&self) -> HashMap<String, String> {
        let breakers = self.circuit_breakers.read().await;
        let mut states = HashMap::new();
        
        for (name, breaker) in breakers.iter() {
            let state = match breaker.state {
                CircuitBreakerStatus::Closed => "closed",
                CircuitBreakerStatus::Open => "open", 
                CircuitBreakerStatus::HalfOpen => "half_open",
            };
            states.insert(name.clone(), state.to_string());
        }
        
        states
    }
    
    /// –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
    pub async fn adaptive_optimization(&self) -> Result<()> {
        if !self.ready.load(Ordering::Relaxed) {
            return Ok(()); // Skip if not ready
        }
        
        debug!("üéØ –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã
        let metrics = self.metrics.read().await;
        
        // –ï—Å–ª–∏ SLA violations > 10% - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
        let sla_violation_rate = if metrics.total_operations > 0 {
            metrics.sla_violations as f64 / metrics.total_operations as f64
        } else { 0.0 };
        
        if sla_violation_rate > 0.1 {
            warn!("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å SLA violations ({:.1}%), –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã", sla_violation_rate * 100.0);
            self.resources.adapt_limits().await?;
        }
        
        // –ï—Å–ª–∏ –º–Ω–æ–≥–æ circuit breaker trips - –æ—á–∏—â–∞–µ–º –∫—ç—à–∏
        let total_trips: u64 = metrics.circuit_breaker_trips.values().sum();
        if total_trips > 10 {
            info!("üß© –ú–Ω–æ–≥–æ circuit breaker trips ({}), –æ—á–∏—â–∞–µ–º embedding cache", total_trips);
            if let Err(e) = EmbeddingCoordinatorTrait::clear_cache(&*self.embedding).await {
                warn!("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {}", e);
            }
        }
        
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::sync::atomic::{AtomicU32, Ordering};
    
    #[tokio::test]
    async fn test_circuit_breaker_functionality() {
        let mut circuit_breaker = CircuitBreakerState::new(Duration::from_millis(100));
        
        // Initially closed
        assert!(circuit_breaker.can_execute());
        assert_eq!(circuit_breaker.state, CircuitBreakerStatus::Closed);
        
        // Record failures until circuit opens
        for _ in 0..5 {
            circuit_breaker.record_failure();
        }
        
        assert_eq!(circuit_breaker.state, CircuitBreakerStatus::Open);
        assert!(!circuit_breaker.can_execute());
        
        // Wait for recovery timeout
        tokio::time::sleep(Duration::from_millis(150)).await;
        
        // Should allow one attempt (HalfOpen)
        assert!(circuit_breaker.can_execute());
        assert_eq!(circuit_breaker.state, CircuitBreakerStatus::HalfOpen);
        
        // Success should close circuit
        circuit_breaker.record_success();
        assert_eq!(circuit_breaker.state, CircuitBreakerStatus::Closed);
        assert!(circuit_breaker.can_execute());
    }
    
    #[tokio::test]
    async fn test_orchestration_metrics() {
        let mut metrics = OrchestrationMetrics::default();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        metrics.total_operations = 100;
        metrics.successful_operations = 95;
        metrics.failed_operations = 5;
        
        let success_rate = metrics.successful_operations as f64 / metrics.total_operations as f64 * 100.0;
        assert_eq!(success_rate, 95.0);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º circuit breaker trips
        metrics.circuit_breaker_trips.insert("test".to_string(), 3);
        assert_eq!(metrics.circuit_breaker_trips.get("test"), Some(&3));
    }
    
    #[tokio::test]
    async fn test_retry_handlers_creation() {
        let handlers = RetryHandlers::default();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ handlers —Å–æ–∑–¥–∞–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏
        let counter = Arc::new(AtomicU32::new(0));
        
        let counter_clone = Arc::clone(&counter);
        let result = handlers.search.execute(|| {
            let counter = Arc::clone(&counter_clone);
            async move {
                let count = counter.fetch_add(1, Ordering::SeqCst);
                if count == 0 {
                    Err(anyhow::anyhow!("temporary failure"))
                } else {
                    Ok("success")
                }
            }
        }).await;
        
        // Fast retry policy should succeed on second attempt
        assert!(matches!(result, crate::orchestration::RetryResult::Success(_, 2)));
    }
    
    // TODO: –î–æ–±–∞–≤–∏—Ç—å integration —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
    // - test_production_initialization
    // - test_graceful_shutdown_scenarios  
    // - test_emergency_shutdown
    // - test_health_monitoring_integration
    // - test_resource_adaptation
    // - test_sla_monitoring
}