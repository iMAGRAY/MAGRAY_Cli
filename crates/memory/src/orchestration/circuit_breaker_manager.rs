use anyhow::Result;
use std::{
    collections::HashMap,
    sync::{
        atomic::{AtomicU64, Ordering},
        Arc,
    },
    time::{Duration, Instant},
};
use tokio::sync::RwLock;
use tracing::{debug, info, warn};

/// Circuit breaker manager –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ memory —Å–∏—Å—Ç–µ–º—ã
///
/// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
/// - SRP: –¢–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ circuit breaker –ª–æ–≥–∏–∫–æ–π
/// - OCP: –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
/// - LSP: –í–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ trait
/// - ISP: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è circuit breaker –æ–ø–µ—Ä–∞—Ü–∏–π
/// - DIP: –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
pub struct CircuitBreakerManager {
    /// Circuit breaker —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    breakers: Arc<RwLock<HashMap<String, CircuitBreakerState>>>,
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö breakers
    default_config: CircuitBreakerConfig,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è circuit breaker
#[derive(Clone, Debug)]
pub struct CircuitBreakerConfig {
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è circuit'–∞
    pub failure_threshold: u64,
    /// Timeout –¥–ª—è recovery (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    pub recovery_timeout: Duration,
}

/// Circuit breaker state –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
#[derive(Debug)]
struct CircuitBreakerState {
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    failure_count: AtomicU64,
    /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏
    last_failure: Option<Instant>,
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ circuit breaker
    state: CircuitBreakerStatus,
    /// –í—Ä–µ–º—è recovery timeout
    recovery_timeout: Duration,
    /// Threshold –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è circuit'–∞
    failure_threshold: u64,
}

#[derive(Debug, Clone, PartialEq)]
pub enum CircuitBreakerStatus {
    /// –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
    Closed,
    /// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ - circuit –æ—Ç–∫—Ä—ã—Ç
    Open,
    /// –ü—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç
    HalfOpen,
}

/// Trait –¥–ª—è circuit breaker —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (ISP –ø—Ä–∏–Ω—Ü–∏–ø)
#[async_trait::async_trait]
pub trait CircuitBreakerManagerTrait: Send + Sync {
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    async fn can_execute(&self, component: &str) -> bool;

    /// –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    async fn record_success(&self, component: &str);

    /// –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    async fn record_failure(&self, component: &str);

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å circuit breaker'–∞
    async fn get_status(&self, component: &str) -> Option<CircuitBreakerStatus>;

    /// –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ circuit breaker'—ã –≤ closed —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    async fn reset_all(&self) -> Result<()>;

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º circuit breaker'–∞–º
    async fn get_statistics(&self) -> HashMap<String, CircuitBreakerStatistics>;
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ circuit breaker'–∞
#[derive(Debug, Clone)]
pub struct CircuitBreakerStatistics {
    pub status: CircuitBreakerStatus,
    pub failure_count: u64,
    pub last_failure_seconds_ago: Option<u64>,
    pub recovery_timeout_seconds: u64,
}

impl Default for CircuitBreakerConfig {
    fn default() -> Self {
        Self {
            failure_threshold: 5,
            recovery_timeout: Duration::from_secs(30),
        }
    }
}

impl CircuitBreakerConfig {
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (search)
    pub fn fast() -> Self {
        Self {
            failure_threshold: 3,
            recovery_timeout: Duration::from_secs(10),
        }
    }

    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (backup, promotion)
    pub fn critical() -> Self {
        Self {
            failure_threshold: 2,
            recovery_timeout: Duration::from_secs(300), // 5 –º–∏–Ω—É—Ç
        }
    }

    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    pub fn standard() -> Self {
        Self {
            failure_threshold: 5,
            recovery_timeout: Duration::from_secs(30),
        }
    }
}

impl CircuitBreakerState {
    fn new(config: &CircuitBreakerConfig) -> Self {
        Self {
            failure_count: AtomicU64::new(0),
            last_failure: None,
            state: CircuitBreakerStatus::Closed,
            recovery_timeout: config.recovery_timeout,
            failure_threshold: config.failure_threshold,
        }
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    fn record_success(&mut self) {
        self.failure_count.store(0, Ordering::Relaxed);
        self.state = CircuitBreakerStatus::Closed;
        self.last_failure = None;
        debug!("Circuit breaker –ø–µ—Ä–µ—à–µ–ª –≤ Closed —Å–æ—Å—Ç–æ—è–Ω–∏–µ");
    }

    /// –ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É
    fn record_failure(&mut self) {
        let failures = self.failure_count.fetch_add(1, Ordering::Relaxed) + 1;
        self.last_failure = Some(Instant::now());

        if failures >= self.failure_threshold {
            self.state = CircuitBreakerStatus::Open;
            warn!("üî¥ Circuit breaker –û–¢–ö–†–´–¢ –ø–æ—Å–ª–µ {} –æ—à–∏–±–æ–∫", failures);
        } else {
            debug!(
                "Circuit breaker: {} –æ—à–∏–±–æ–∫ –∏–∑ {} –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö",
                failures, self.failure_threshold
            );
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
    fn can_execute(&mut self) -> bool {
        match self.state {
            CircuitBreakerStatus::Closed => true,
            CircuitBreakerStatus::Open => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å recovery
                if let Some(last_failure) = self.last_failure {
                    if last_failure.elapsed() >= self.recovery_timeout {
                        self.state = CircuitBreakerStatus::HalfOpen;
                        info!("üü° Circuit breaker –ø–µ—Ä–µ—à–µ–ª –≤ HalfOpen —Ä–µ–∂–∏–º –¥–ª—è recovery");
                        return true;
                    }
                }
                false
            }
            CircuitBreakerStatus::HalfOpen => true,
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    fn get_statistics(&self) -> CircuitBreakerStatistics {
        CircuitBreakerStatistics {
            status: self.state.clone(),
            failure_count: self.failure_count.load(Ordering::Relaxed),
            last_failure_seconds_ago: self.last_failure.map(|t| t.elapsed().as_secs()),
            recovery_timeout_seconds: self.recovery_timeout.as_secs(),
        }
    }
}

impl CircuitBreakerManager {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π circuit breaker manager —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pub fn new() -> Self {
        Self::with_config(CircuitBreakerConfig::default())
    }

    /// –°–æ–∑–¥–∞—Ç—å circuit breaker manager —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn with_config(config: CircuitBreakerConfig) -> Self {
        Self {
            breakers: Arc::new(RwLock::new(HashMap::new())),
            default_config: config,
        }
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å circuit breakers –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
    pub async fn initialize_standard_coordinators(&self) -> Result<()> {
        info!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è circuit breakers –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤");

        let mut breakers = self.breakers.write().await;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º circuit breakers —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
        breakers.insert(
            "embedding".to_string(),
            CircuitBreakerState::new(&CircuitBreakerConfig::standard()),
        );
        breakers.insert(
            "search".to_string(),
            CircuitBreakerState::new(&CircuitBreakerConfig::fast()),
        );
        breakers.insert(
            "health".to_string(),
            CircuitBreakerState::new(&CircuitBreakerConfig::standard()),
        );
        breakers.insert(
            "promotion".to_string(),
            CircuitBreakerState::new(&CircuitBreakerConfig::critical()),
        );
        breakers.insert(
            "resources".to_string(),
            CircuitBreakerState::new(&CircuitBreakerConfig::standard()),
        );
        breakers.insert(
            "backup".to_string(),
            CircuitBreakerState::new(&CircuitBreakerConfig::critical()),
        );

        info!("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {} circuit breakers", breakers.len());
        Ok(())
    }

    /// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π circuit breaker –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    pub async fn add_component(
        &self,
        component: &str,
        config: Option<CircuitBreakerConfig>,
    ) -> Result<()> {
        let config = config.unwrap_or_else(|| self.default_config.clone());
        let mut breakers = self.breakers.write().await;

        if breakers.contains_key(component) {
            warn!(
                "Circuit breaker –¥–ª—è {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º",
                component
            );
            return Ok(());
        }

        breakers.insert(component.to_string(), CircuitBreakerState::new(&config));
        info!("‚ûï –î–æ–±–∞–≤–ª–µ–Ω circuit breaker –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {}", component);
        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è circuit breaker –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    async fn ensure_component_exists(&self, component: &str) {
        let breakers = self.breakers.read().await;
        if !breakers.contains_key(component) {
            drop(breakers); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º read lock

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π circuit breaker —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if let Err(e) = self.add_component(component, None).await {
                warn!(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å circuit breaker –¥–ª—è {}: {}",
                    component, e
                );
            }
        }
    }
}

#[async_trait::async_trait]
impl CircuitBreakerManagerTrait for CircuitBreakerManager {
    async fn can_execute(&self, component: &str) -> bool {
        self.ensure_component_exists(component).await;

        let mut breakers = self.breakers.write().await;
        if let Some(breaker) = breakers.get_mut(component) {
            breaker.can_execute()
        } else {
            // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (fail-open policy)
            warn!(
                "Circuit breaker –¥–ª—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                component
            );
            true
        }
    }

    async fn record_success(&self, component: &str) {
        self.ensure_component_exists(component).await;

        let mut breakers = self.breakers.write().await;
        if let Some(breaker) = breakers.get_mut(component) {
            breaker.record_success();
            debug!("‚úÖ –ó–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—Ö –¥–ª—è circuit breaker: {}", component);
        }
    }

    async fn record_failure(&self, component: &str) {
        self.ensure_component_exists(component).await;

        let mut breakers = self.breakers.write().await;
        if let Some(breaker) = breakers.get_mut(component) {
            breaker.record_failure();
            debug!("‚ùå –ó–∞–ø–∏—Å–∞–Ω–∞ –æ—à–∏–±–∫–∞ –¥–ª—è circuit breaker: {}", component);
        }
    }

    async fn get_status(&self, component: &str) -> Option<CircuitBreakerStatus> {
        let breakers = self.breakers.read().await;
        breakers.get(component).map(|breaker| breaker.state.clone())
    }

    async fn reset_all(&self) -> Result<()> {
        info!("üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö circuit breakers");

        let mut breakers = self.breakers.write().await;
        for (name, breaker) in breakers.iter_mut() {
            breaker.record_success(); // Reset to closed state
            info!("‚úÖ Circuit breaker {} —Å–±—Ä–æ—à–µ–Ω –≤ Closed —Å–æ—Å—Ç–æ—è–Ω–∏–µ", name);
        }

        info!("‚úÖ –í—Å–µ circuit breakers —Å–±—Ä–æ—à–µ–Ω—ã");
        Ok(())
    }

    async fn get_statistics(&self) -> HashMap<String, CircuitBreakerStatistics> {
        let breakers = self.breakers.read().await;
        let mut statistics = HashMap::new();

        for (name, breaker) in breakers.iter() {
            statistics.insert(name.clone(), breaker.get_statistics());
        }

        statistics
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tokio::time::sleep;

    #[tokio::test]
    async fn test_circuit_breaker_lifecycle() {
        let manager = CircuitBreakerManager::new();
        manager
            .initialize_standard_coordinators()
            .await
            .expect("Test circuit breaker initialization should succeed");

        let component = "test_component";
        manager
            .add_component(
                component,
                Some(CircuitBreakerConfig {
                    failure_threshold: 2,
                    recovery_timeout: Duration::from_millis(100),
                }),
            )
            .await
            .expect("Adding test component should succeed");

        // Initially closed - should allow execution
        assert!(manager.can_execute(component).await);
        assert_eq!(
            manager.get_status(component).await,
            Some(CircuitBreakerStatus::Closed)
        );

        // Record failures until circuit opens
        manager.record_failure(component).await;
        assert!(manager.can_execute(component).await); // Still closed after 1 failure

        manager.record_failure(component).await;
        assert!(!manager.can_execute(component).await); // Should be open after 2 failures
        assert_eq!(
            manager.get_status(component).await,
            Some(CircuitBreakerStatus::Open)
        );

        // Wait for recovery timeout
        sleep(Duration::from_millis(150)).await;

        // Should allow one attempt (HalfOpen)
        assert!(manager.can_execute(component).await);
        assert_eq!(
            manager.get_status(component).await,
            Some(CircuitBreakerStatus::HalfOpen)
        );

        // Success should close circuit
        manager.record_success(component).await;
        assert_eq!(
            manager.get_status(component).await,
            Some(CircuitBreakerStatus::Closed)
        );
        assert!(manager.can_execute(component).await);
    }

    #[tokio::test]
    async fn test_circuit_breaker_statistics() {
        let manager = CircuitBreakerManager::new();
        let component = "stats_test";

        manager
            .add_component(component, None)
            .await
            .expect("Adding component for stats test should succeed");

        // Record some failures
        manager.record_failure(component).await;
        manager.record_failure(component).await;

        let stats = manager.get_statistics().await;
        let component_stats = stats
            .get(component)
            .expect("Component stats should be available after adding component");

        assert_eq!(component_stats.failure_count, 2);
        assert!(component_stats.last_failure_seconds_ago.is_some());
        assert_eq!(component_stats.status, CircuitBreakerStatus::Closed); // Still closed with threshold 5
    }

    #[tokio::test]
    async fn test_reset_all_circuit_breakers() {
        let manager = CircuitBreakerManager::new();
        manager
            .initialize_standard_coordinators()
            .await
            .expect("Test initialization should succeed");

        // Fail multiple components
        manager.record_failure("search").await;
        manager.record_failure("embedding").await;

        // Reset all
        manager.reset_all().await.expect("Reset all should succeed");

        // All should be in Closed state
        assert_eq!(
            manager.get_status("search").await,
            Some(CircuitBreakerStatus::Closed)
        );
        assert_eq!(
            manager.get_status("embedding").await,
            Some(CircuitBreakerStatus::Closed)
        );
    }

    #[tokio::test]
    async fn test_different_configurations() {
        let manager = CircuitBreakerManager::new();

        manager
            .add_component("fast", Some(CircuitBreakerConfig::fast()))
            .await
            .expect("Adding fast component should succeed");
        manager
            .add_component("critical", Some(CircuitBreakerConfig::critical()))
            .await
            .expect("Adding critical component should succeed");

        // Fast component should open after 3 failures
        for _ in 0..3 {
            manager.record_failure("fast").await;
        }
        assert!(!manager.can_execute("fast").await);

        // Critical component should open after 2 failures
        for _ in 0..2 {
            manager.record_failure("critical").await;
        }
        assert!(!manager.can_execute("critical").await);
    }
}
