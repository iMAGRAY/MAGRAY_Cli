//! Core Orchestrator - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
//!
//! –ü—Ä–∏–º–µ–Ω—è–µ—Ç Single Responsibility Principle - —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
//! –í—Å–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º.

use anyhow::Result;
use std::{
    sync::{atomic::AtomicBool, Arc},
    time::Instant,
};
use tokio::sync::Semaphore;
use tracing::info;

use super::{
    circuit_breaker_manager::CircuitBreakerManager,
    metrics_collector::MetricsCollector,
    operation_executor::OperationExecutor,
    retry_handler::RetryHandler,
    traits::{
        BackupCoordinator, EmbeddingCoordinator, HealthCoordinator, PromotionCoordinator,
        ResourceCoordinator, SearchCoordinator,
    },
};

/// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è
pub struct OrchestratorCore {
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã (dependency injection)
    pub embedding: Arc<dyn EmbeddingCoordinator>,
    pub search: Arc<dyn SearchCoordinator>,
    pub health: Arc<dyn HealthCoordinator>,
    pub promotion: Arc<dyn PromotionCoordinator>,
    pub resources: Arc<dyn ResourceCoordinator>,
    pub backup: Arc<dyn BackupCoordinator>,

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–∫–æ–º–ø–æ–∑–∏—Ü–∏—è)
    circuit_breaker_manager: Arc<CircuitBreakerManager>,
    metrics_collector: Arc<MetricsCollector>,
    operation_executor: Arc<OperationExecutor>,
    retry_handler: Arc<RetryHandler>,

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    ready: Arc<AtomicBool>,
    start_time: Instant,
    operation_limiter: Arc<Semaphore>,
}

impl OrchestratorCore {
    /// –°–æ–∑–¥–∞—Ç—å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (Constructor Injection)
    pub fn new(
        embedding: Arc<dyn EmbeddingCoordinator>,
        search: Arc<dyn SearchCoordinator>,
        health: Arc<dyn HealthCoordinator>,
        promotion: Arc<dyn PromotionCoordinator>,
        resources: Arc<dyn ResourceCoordinator>,
        backup: Arc<dyn BackupCoordinator>,
        circuit_breaker_manager: Arc<CircuitBreakerManager>,
        metrics_collector: Arc<MetricsCollector>,
        operation_executor: Arc<OperationExecutor>,
        retry_handler: Arc<RetryHandler>,
    ) -> Self {
        info!("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ OrchestratorCore —Å dependency injection");

        Self {
            embedding,
            search,
            health,
            promotion,
            resources,
            backup,
            circuit_breaker_manager,
            metrics_collector,
            operation_executor,
            retry_handler,
            ready: Arc::new(AtomicBool::new(false)),
            start_time: Instant::now(),
            operation_limiter: Arc::new(Semaphore::new(100)),
        }
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∞—Ü–∏—é
    pub async fn initialize(&self) -> Result<()> {
        info!("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∞—Ü–∏—é");

        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        self.operation_executor
            .initialize_all_coordinators(
                &*self.embedding,
                &*self.search,
                &*self.health,
                &*self.promotion,
                &*self.resources,
                &*self.backup,
            )
            .await?;

        self.ready.store(true, std::sync::atomic::Ordering::Release);
        info!("‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∞—Ü–∏—é
    pub async fn get_metrics(&self) -> serde_json::Value {
        self.metrics_collector
            .collect_all_metrics(
                &*self.embedding,
                &*self.search,
                &*self.health,
                &*self.promotion,
                &*self.resources,
                &*self.backup,
                &self.circuit_breaker_manager,
                &self.start_time,
                &self.ready,
                &self.operation_limiter,
            )
            .await
    }

    /// Graceful shutdown —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∞—Ü–∏—é
    pub async fn shutdown(&self) -> Result<()> {
        info!("üõ°Ô∏è Graceful shutdown —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∞—Ü–∏—é");

        self.ready
            .store(false, std::sync::atomic::Ordering::Release);

        self.operation_executor
            .shutdown_all_coordinators(
                &*self.embedding,
                &*self.search,
                &*self.health,
                &*self.promotion,
                &*self.resources,
                &*self.backup,
            )
            .await?;

        info!("‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    pub fn is_ready(&self) -> bool {
        self.ready.load(std::sync::atomic::Ordering::Acquire)
    }
}
