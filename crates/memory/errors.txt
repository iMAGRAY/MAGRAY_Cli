   Compiling ort-sys v2.0.0-rc.10
warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
  --> crates\common\src\service_traits.rs:24:5
   |
24 |     async fn shutdown(&self) -> Result<(), crate::MagrayCoreError> {
   |     ^^^^^
   |
   = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
   = note: `#[warn(async_fn_in_trait)]` on by default
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
   |
24 ~     fn shutdown(&self) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send {async {
25 |         Ok(())
26 ~     } }
   |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
  --> crates\common\src\service_traits.rs:35:5
   |
35 |     async fn update_config(&mut self, config: T) -> Result<(), crate::MagrayCoreError>;
   |     ^^^^^
   |
   = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
   |
35 -     async fn update_config(&mut self, config: T) -> Result<(), crate::MagrayCoreError>;
35 +     fn update_config(&mut self, config: T) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send;
   |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
  --> crates\common\src\service_traits.rs:63:5
   |
63 |     async fn execute_with_circuit_breaker<F, R, E>(&self, operation: F) -> Result<R, E>
   |     ^^^^^
   |
   = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
   |
63 -     async fn execute_with_circuit_breaker<F, R, E>(&self, operation: F) -> Result<R, E>
63 +     fn execute_with_circuit_breaker<F, R, E>(&self, operation: F) -> impl std::future::Future<Output = Result<R, E>> + Send
   |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
  --> crates\common\src\service_traits.rs:82:5
   |
82 |     async fn execute_with_retry<F, Fut, R, E>(&self, operation: F) -> Result<R, E>
   |     ^^^^^
   |
   = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
   |
82 -     async fn execute_with_retry<F, Fut, R, E>(&self, operation: F) -> Result<R, E>
82 +     fn execute_with_retry<F, Fut, R, E>(&self, operation: F) -> impl std::future::Future<Output = Result<R, E>> + Send
   |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:116:5
    |
116 |     async fn initialize(&mut self) -> Result<(), crate::MagrayCoreError>;
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
116 -     async fn initialize(&mut self) -> Result<(), crate::MagrayCoreError>;
116 +     fn initialize(&mut self) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send;
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:119:5
    |
119 |     async fn start(&mut self) -> Result<(), crate::MagrayCoreError>;
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
119 -     async fn start(&mut self) -> Result<(), crate::MagrayCoreError>;
119 +     fn start(&mut self) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send;
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:122:5
    |
122 |     async fn pause(&mut self) -> Result<(), crate::MagrayCoreError> {
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
122 ~     fn pause(&mut self) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send {async {
123 |         Ok(())
124 ~     } }
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:127:5
    |
127 |     async fn resume(&mut self) -> Result<(), crate::MagrayCoreError> {
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
127 ~     fn resume(&mut self) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send {async {
128 |         Ok(())
129 ~     } }
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:132:5
    |
132 |     async fn stop(&mut self) -> Result<(), crate::MagrayCoreError>;
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
132 -     async fn stop(&mut self) -> Result<(), crate::MagrayCoreError>;
132 +     fn stop(&mut self) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send;
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:155:5
    |
155 |     async fn register_service(
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
155 ~     fn register_service(
156 |         &mut self,
157 |         service: Arc<Self::Service>,
158 ~     ) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send;
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:161:5
    |
161 |     async fn unregister_service(
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
161 ~     fn unregister_service(
162 |         &mut self,
163 |         service_name: &str,
164 ~     ) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send;
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:196:5
    |
196 |     async fn get_connection(&self) -> Result<Self::Connection, Self::Error>;
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
196 -     async fn get_connection(&self) -> Result<Self::Connection, Self::Error>;
196 +     fn get_connection(&self) -> impl std::future::Future<Output = Result<Self::Connection, Self::Error>> + Send;
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:199:5
    |
199 |     async fn return_connection(&self, connection: Self::Connection) -> Result<(), Self::Error>;
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
199 -     async fn return_connection(&self, connection: Self::Connection) -> Result<(), Self::Error>;
199 +     fn return_connection(&self, connection: Self::Connection) -> impl std::future::Future<Output = Result<(), Self::Error>> + Send;
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:216:5
    |
216 |     async fn get(&self, key: &K) -> Option<V>;
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
216 -     async fn get(&self, key: &K) -> Option<V>;
216 +     fn get(&self, key: &K) -> impl std::future::Future<Output = Option<V>> + Send;
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:219:5
    |
219 |     async fn set(&self, key: K, value: V) -> Result<(), crate::MagrayCoreError>;
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
219 -     async fn set(&self, key: K, value: V) -> Result<(), crate::MagrayCoreError>;
219 +     fn set(&self, key: K, value: V) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send;
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:222:5
    |
222 |     async fn remove(&self, key: &K) -> Result<bool, crate::MagrayCoreError>;
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
222 -     async fn remove(&self, key: &K) -> Result<bool, crate::MagrayCoreError>;
222 +     fn remove(&self, key: &K) -> impl std::future::Future<Output = Result<bool, crate::MagrayCoreError>> + Send;
    |

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
   --> crates\common\src\service_traits.rs:225:5
    |
225 |     async fn clear(&self) -> Result<(), crate::MagrayCoreError>;
    |     ^^^^^
    |
    = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
    |
225 -     async fn clear(&self) -> Result<(), crate::MagrayCoreError>;
225 +     fn clear(&self) -> impl std::future::Future<Output = Result<(), crate::MagrayCoreError>> + Send;
    |

warning: `common` (lib) generated 17 warnings
    Checking ort v2.0.0-rc.10
    Checking ai v0.1.0 (C:\Users\1\Documents\GitHub\MAGRAY_Cli\crates\ai)
    Checking memory v0.1.0 (C:\Users\1\Documents\GitHub\MAGRAY_Cli\crates\memory)
error[E0252]: the name `LifetimeStrategy` is defined multiple times
   --> crates\memory\src\di\mod.rs:152:28
    |
111 | pub use lifetime_manager::{ExtensibleLifetimeManager, LifetimeManagerImpl, LifetimeStrategy};
    |                                                                            ---------------- previous import of the trait `LifetimeStrategy` here
...
152 | pub use lifetime_manager::{LifetimeStrategy};
    | ---------------------------^^^^^^^^^^^^^^^^--
    | |                          |
    | |                          `LifetimeStrategy` reimported here
    | help: remove unnecessary import
    |
    = note: `LifetimeStrategy` must be defined only once in the type namespace of this module

error[E0432]: unresolved imports `unified_container::create_default_memory_config`, `unified_container::MemoryServiceConfig`
   --> crates\memory\src\di\mod.rs:119:5
    |
119 |     create_default_memory_config, ComponentFactory, MemoryServiceConfig,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^                    ^^^^^^^^^^^^^^^^^^^ no `MemoryServiceConfig` in `di::unified_container`
    |     |
    |     no `create_default_memory_config` in `di::unified_container`
    |
    = help: consider importing this struct through its public re-export instead:
            crate::service_di_facade::MemoryServiceConfig

error[E0432]: unresolved import `container_configuration::ContainerConfiguration`
   --> crates\memory\src\di\mod.rs:150:35
    |
150 | pub use container_configuration::{ContainerConfiguration};
    |                                   ^^^^^^^^^^^^^^^^^^^^^^
    |                                   |
    |                                   no `ContainerConfiguration` in `di::container_configuration`
    |                                   help: a similar name exists in the module: `DIContainerConfiguration`
    |
    = help: consider importing one of these structs instead:
            crate::di::core_traits::ContainerConfiguration
            crate::di::unified_container::ContainerConfiguration

error[E0425]: cannot find value `container` in this scope
   --> crates\memory\src\di\unified_container_impl.rs:607:51
    |
607 |         let instance_any = (factory_info.factory)(container)?;
    |                                                   ^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `container` in this scope
   --> crates\memory\src\di\unified_container_impl.rs:630:51
    |
630 |         let instance_any = (factory_info.factory)(container)?;
    |                                                   ^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `MemoryServiceConfig` in this scope
    --> crates\memory\src\di\unified_container.rs:1013:42
     |
1013 |     pub async fn configure_full(config: &MemoryServiceConfig) -> Result<UnifiedDIContainer> {
     |                                          ^^^^^^^^^^^^^^^^^^^ not found in this scope
     |
help: consider importing this struct through its public re-export
     |
20   + use crate::service_di_facade::MemoryServiceConfig;
     |

error[E0412]: cannot find type `MemoryServiceConfig` in this scope
    --> crates\memory\src\di\unified_container.rs:1034:45
     |
1034 |     pub async fn configure_minimal(config: &MemoryServiceConfig) -> Result<UnifiedDIContainer> {
     |                                             ^^^^^^^^^^^^^^^^^^^ not found in this scope
     |
help: consider importing this struct through its public re-export
     |
20   + use crate::service_di_facade::MemoryServiceConfig;
     |

error[E0412]: cannot find type `MemoryServiceConfig` in this scope
    --> crates\memory\src\di\unified_container.rs:1052:46
     |
1052 |     pub async fn configure_cpu_only(config: &MemoryServiceConfig) -> Result<UnifiedDIContainer> {
     |                                              ^^^^^^^^^^^^^^^^^^^ not found in this scope
     |
help: consider importing this struct through its public re-export
     |
20   + use crate::service_di_facade::MemoryServiceConfig;
     |

error[E0412]: cannot find type `MemoryServiceConfig` in this scope
    --> crates\memory\src\di\unified_container.rs:1068:18
     |
1068 |         config: &MemoryServiceConfig,
     |                  ^^^^^^^^^^^^^^^^^^^ not found in this scope
     |
help: consider importing this struct through its public re-export
     |
20   + use crate::service_di_facade::MemoryServiceConfig;
     |

error[E0412]: cannot find type `MemoryServiceConfig` in this scope
    --> crates\memory\src\di\unified_container.rs:1091:18
     |
1091 |         config: &MemoryServiceConfig,
     |                  ^^^^^^^^^^^^^^^^^^^ not found in this scope
     |
help: consider importing this struct through its public re-export
     |
20   + use crate::service_di_facade::MemoryServiceConfig;
     |

error[E0412]: cannot find type `MemoryServiceConfig` in this scope
    --> crates\memory\src\di\unified_container.rs:1109:18
     |
1109 |         config: &MemoryServiceConfig,
     |                  ^^^^^^^^^^^^^^^^^^^ not found in this scope
     |
help: consider importing this struct through its public re-export
     |
20   + use crate::service_di_facade::MemoryServiceConfig;
     |

error[E0412]: cannot find type `MemoryServiceConfig` in this scope
    --> crates\memory\src\di\unified_container.rs:1127:18
     |
1127 |         config: &MemoryServiceConfig,
     |                  ^^^^^^^^^^^^^^^^^^^ not found in this scope
     |
help: consider importing this struct through its public re-export
     |
20   + use crate::service_di_facade::MemoryServiceConfig;
     |

error[E0412]: cannot find type `MemoryServiceConfig` in this scope
    --> crates\memory\src\di\unified_container.rs:1151:18
     |
1151 |         config: &MemoryServiceConfig,
     |                  ^^^^^^^^^^^^^^^^^^^ not found in this scope
     |
help: consider importing this struct through its public re-export
     |
20   + use crate::service_di_facade::MemoryServiceConfig;
     |

error[E0603]: trait import `DependencyValidator` is private
   --> crates\memory\src\di\mod.rs:151:32
    |
151 | pub use dependency_validator::{DependencyValidator};
    |                                ^^^^^^^^^^^^^^^^^^^ private trait import
    |
note: the trait import `DependencyValidator` is defined here...
   --> crates\memory\src\di\dependency_validator.rs:10:5
    |
10  | use super::traits::DependencyValidator;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the trait `DependencyValidator` which is defined here
   --> crates\memory\src\di\traits.rs:66:1
    |
66  | pub trait DependencyValidator: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `DependencyValidator` through the re-export
    |
151 | pub use dependency_validator::{traits::DependencyValidator};
    |                                ++++++++

warning: unused import: `serde::Serialize`
 --> crates\memory\src\ml_promotion\algorithms.rs:4:5
  |
4 | use serde::Serialize;
  |     ^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `TrainingExample`
  --> crates\memory\src\ml_promotion\coordinator.rs:13:80
   |
13 |     DataProcessor, PromotionAlgorithm, PromotionMetrics, PromotionRulesEngine, TrainingExample,
   |                                                                                ^^^^^^^^^^^^^^^

warning: unused imports: `MLPromotionConfig` and `SemanticContext`
  --> crates\memory\src\ml_promotion\data_processor.rs:11:35
   |
11 | use super::types::{AccessPattern, MLPromotionConfig, PromotionFeatures, SemanticContext};
   |                                   ^^^^^^^^^^^^^^^^^                     ^^^^^^^^^^^^^^^

warning: unused import: `DateTime`
 --> crates\memory\src\ml_promotion\legacy_facade.rs:5:14
  |
5 | use chrono::{DateTime, Utc};
  |              ^^^^^^^^

warning: unused import: `warn`
 --> crates\memory\src\ml_promotion\legacy_facade.rs:7:28
  |
7 | use tracing::{debug, info, warn};
  |                            ^^^^

warning: unused import: `warn`
  --> crates\memory\src\simd_feature_detection.rs:13:28
   |
13 | use tracing::{debug, info, warn};
   |                            ^^^^

warning: unused imports: `debug`, `error`, and `warn`
  --> crates\memory\src\di\unified_container_impl.rs:30:11
   |
30 | use log::{debug, error, warn};
   |           ^^^^^  ^^^^^  ^^^^

warning: unused import: `Duration`
 --> crates\memory\src\di\lifetime_manager.rs:7:12
  |
7 |     time::{Duration, Instant},
  |            ^^^^^^^^

warning: unused imports: `MetricsReporter` and `TypeMetrics`
  --> crates\memory\src\di\lifetime_manager.rs:11:48
   |
11 | use super::traits::{Lifetime, LifetimeManager, MetricsReporter, TypeMetrics};
   |                                                ^^^^^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused imports: `DIRegistrar`, `Lifetime`, and `UnifiedDIContainerBuilder`
  --> crates\memory\src\di\migration_facade.rs:19:13
   |
19 | use super::{DIRegistrar, DIResolver, Lifetime, UnifiedDIContainer, UnifiedDIContainerBuilder};
   |             ^^^^^^^^^^^              ^^^^^^^^                      ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `PromotionConfig` and `Record`
    --> crates\memory\src\di\unified_container.rs:1071:28
     |
1071 |         use crate::types::{PromotionConfig, Record};
     |                            ^^^^^^^^^^^^^^^  ^^^^^^

warning: unexpected `cfg` condition value: `hot-reload`
   --> crates\memory\src\di\config_loader.rs:525:7
    |
525 | #[cfg(feature = "hot-reload")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `cpu`, `default`, `gpu`, and `minimal`
    = help: consider adding `hot-reload` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `hot-reload`
   --> crates\memory\src\di\config_loader.rs:532:7
    |
532 | #[cfg(feature = "hot-reload")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `cpu`, `default`, `gpu`, and `minimal`
    = help: consider adding `hot-reload` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused imports: `CoreSystemConfig`, `DatabaseConfig`, `MemorySystemConfig`, `OrchestrationConfig`, `PerformanceConfig`, and `SecurityConfig`
  --> crates\memory\src\di\config_presets.rs:11:5
   |
11 |     CoreSystemConfig, DatabaseConfig, Environment, FeatureFlags, MemorySystemConfig,
   |     ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^                             ^^^^^^^^^^^^^^^^^^
12 |     OrchestrationConfig, PerformanceConfig, PerformanceThresholds, ProfilingConfig,
   |     ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^
13 |     RateLimitConfig, SecurityConfig, UnifiedDIConfiguration,
   |                      ^^^^^^^^^^^^^^

warning: unused import: `LifetimeStrategy`
   --> crates\memory\src\di\mod.rs:152:28
    |
152 | pub use lifetime_manager::{LifetimeStrategy};
    |                            ^^^^^^^^^^^^^^^^

warning: unused import: `traits::DIResolver`
  --> crates\memory\src\services\cache_service.rs:16:49
   |
16 |     di::{unified_container::UnifiedDIContainer, traits::DIResolver},
   |                                                 ^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> crates\memory\src\ml_promotion\coordinator.rs:113:24
    |
113 |     pub async fn build(mut self) -> Result<PromotionCoordinator> {
    |                        ----^^^^
    |                        |
    |                        help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `health_manager`
   --> crates\memory\src\service_di\coordinator_factory.rs:232:21
    |
232 |         if let Some(health_manager) = &self.health_manager {
    |                     ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_health_manager`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `stats`
   --> crates\memory\src\service_di\coordinator_factory.rs:257:17
    |
257 |             let stats = search_coord.metrics().await;
    |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_stats`

error[E0308]: mismatched types
   --> crates\memory\src\service_di\coordinator_factory.rs:384:38
    |
384 |         self.create_all_coordinators(&container)
    |              ----------------------- ^^^^^^^^^^ expected `&UnifiedDIContainer`, found `&DIContainer`
    |              |
    |              arguments to this method are incorrect
    |
    = note: expected reference `&unified_container::UnifiedDIContainer`
               found reference `&container_builder::DIContainer`
note: method defined here
   --> crates\memory\src\service_di\coordinator_factory.rs:310:18
    |
310 |     pub async fn create_all_coordinators(
    |                  ^^^^^^^^^^^^^^^^^^^^^^^
311 |         &self,
312 |         container: &DIContainer,
    |         -----------------------

error[E0599]: no method named `resolve` found for reference `&unified_container::UnifiedDIContainer` in the current scope
   --> crates\memory\src\service_di\coordinator_factory.rs:409:14
    |
408 |           let gpu_processor = container
    |  _____________________________-
409 | |             .resolve::<GpuBatchProcessor>()
    | |_____________-^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `DIResolver` which provides `resolve` is implemented but not in scope; perhaps you want to import it
    |
6   + use crate::di::traits::DIResolver;
    |
help: there is a method `try_resolve` with a similar name
    |
409 |             .try_resolve::<GpuBatchProcessor>()
    |              ++++

error[E0599]: no method named `resolve` found for reference `&unified_container::UnifiedDIContainer` in the current scope
   --> crates\memory\src\service_di\coordinator_factory.rs:438:14
    |
437 |           let store = container
    |  _____________________-
438 | |             .resolve::<VectorStore>()
    | |_____________-^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `DIResolver` which provides `resolve` is implemented but not in scope; perhaps you want to import it
    |
6   + use crate::di::traits::DIResolver;
    |
help: there is a method `try_resolve` with a similar name
    |
438 |             .try_resolve::<VectorStore>()
    |              ++++

error[E0599]: no method named `resolve` found for reference `&unified_container::UnifiedDIContainer` in the current scope
   --> crates\memory\src\service_di\coordinator_factory.rs:457:14
    |
456 |           let health_monitor = container
    |  ______________________________-
457 | |             .resolve::<HealthMonitor>()
    | |_____________-^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `DIResolver` which provides `resolve` is implemented but not in scope; perhaps you want to import it
    |
6   + use crate::di::traits::DIResolver;
    |
help: there is a method `try_resolve` with a similar name
    |
457 |             .try_resolve::<HealthMonitor>()
    |              ++++

error[E0599]: no method named `resolve` found for reference `&unified_container::UnifiedDIContainer` in the current scope
   --> crates\memory\src\service_di\coordinator_factory.rs:474:14
    |
473 |           let resource_manager = container
    |  ________________________________-
474 | |             .resolve::<parking_lot::RwLock<crate::resource_manager::ResourceManager>>()
    | |_____________-^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `DIResolver` which provides `resolve` is implemented but not in scope; perhaps you want to import it
    |
6   + use crate::di::traits::DIResolver;
    |
help: there is a method `try_resolve` with a similar name
    |
474 |             .try_resolve::<parking_lot::RwLock<crate::resource_manager::ResourceManager>>()
    |              ++++

error[E0308]: mismatched types
   --> crates\memory\src\di\migration_facade.rs:217:13
    |
217 |             store.delete_by_id(id, layer).await
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<(), Error>`, found `Result<bool, Error>`
    |
    = note: expected enum `std::result::Result<(), _>`
               found enum `std::result::Result<bool, _>`

warning: unused variable: `path`
   --> crates\memory\src\di\migration_facade.rs:226:39
    |
226 |     pub async fn create_backup(&self, path: &str) -> Result<BackupMetadata> {
    |                                       ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `container`
   --> crates\memory\src\di\migration_facade.rs:362:9
    |
362 |         container: &UnifiedDIContainer,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_container`

error[E0061]: this function takes 0 arguments but 1 argument was supplied
    --> crates\memory\src\di\unified_container.rs:1098:25
     |
1098 |             move |_| Ok(DatabaseManager::new(&db_path)),
     |                         ^^^^^^^^^^^^^^^^^^^^ -------- unexpected argument
     |
note: associated function defined here
    --> crates\memory\src\database_manager.rs:17:12
     |
17   |     pub fn new() -> Self {
     |            ^^^
help: remove the extra argument
     |
1098 -             move |_| Ok(DatabaseManager::new(&db_path)),
1098 +             move |_| Ok(DatabaseManager::new()),
     |

error[E0061]: this function takes 2 arguments but 1 argument was supplied
    --> crates\memory\src\di\unified_container.rs:1116:25
     |
1116 |             move |_| Ok(EmbeddingCacheLRU::new(&cache_config)?),
     |                         ^^^^^^^^^^^^^^^^^^^^^^--------------- argument #2 of type `cache_lru::CacheConfig` is missing
     |
note: associated function defined here
    --> crates\memory\src\cache_lru.rs:174:12
     |
174  |     pub fn new(cache_path: impl AsRef<Path>, config: CacheConfig) -> Result<Self> {
     |            ^^^                               -------------------
help: provide the argument
     |
1116 |             move |_| Ok(EmbeddingCacheLRU::new(&cache_config, /* cache_lru::CacheConfig */)?),
     |                                                             ++++++++++++++++++++++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
    --> crates\memory\src\di\unified_container.rs:1159:20
     |
1159 |                 Ok(EmbeddingCoordinator::new(vector_store))
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^-------------- argument #2 of type `Arc<(dyn EmbeddingCacheInterface + 'static)>` is missing
     |
note: expected `Arc<GpuBatchProcessor>`, found `Arc<VectorStore>`
    --> crates\memory\src\di\unified_container.rs:1159:46
     |
1159 |                 Ok(EmbeddingCoordinator::new(vector_store))
     |                                              ^^^^^^^^^^^^
     = note: expected struct `Arc<GpuBatchProcessor>`
                found struct `Arc<storage::VectorStore>`
note: associated function defined here
    --> crates\memory\src\orchestration\embedding_coordinator.rs:115:12
     |
115  |     pub fn new(
     |            ^^^
116  |         gpu_processor: Arc<GpuBatchProcessor>,
     |         -------------------------------------
117  |         cache: Arc<dyn EmbeddingCacheInterface>,
     |         ---------------------------------------
help: provide the argument
     |
1159 -                 Ok(EmbeddingCoordinator::new(vector_store))
1159 +                 Ok(EmbeddingCoordinator::new(/* Arc<GpuBatchProcessor> */, /* Arc<(dyn EmbeddingCacheInterface + 'static)> */))
     |

error[E0061]: this function takes 2 arguments but 1 argument was supplied
    --> crates\memory\src\di\unified_container.rs:1168:20
     |
1168 |                 Ok(SearchCoordinator::new(vector_store))
     |                    ^^^^^^^^^^^^^^^^^^^^^^-------------- argument #2 of type `Arc<embedding_coordinator::EmbeddingCoordinator>` is missing
     |
note: associated function defined here
    --> crates\memory\src\orchestration\search_coordinator.rs:100:12
     |
100  |     pub fn new(store: Arc<VectorStore>, embedding_coordinator: Arc<EmbeddingCoordinator>) -> Self {
     |            ^^^                          ------------------------------------------------
help: provide the argument
     |
1168 |                 Ok(SearchCoordinator::new(vector_store, /* Arc<embedding_coordinator::EmbeddingCoordinator> */))
     |                                                       ++++++++++++++++++++++++++++++++++++++++++++++++++++++++

warning: value assigned to `circuit_breaker_triggered` is never read
   --> crates\memory\src\orchestration\operation_executor.rs:167:13
    |
167 |             circuit_breaker_triggered = true;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `metrics`
   --> crates\memory\src\orchestration\operation_executor.rs:223:21
    |
223 |                 let metrics = OperationMetrics {
    |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_metrics`

warning: unused variable: `query`
   --> crates\memory\src\orchestration\orchestration_facade.rs:120:9
    |
120 |         query: &str,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

warning: unused variable: `layer`
   --> crates\memory\src\orchestration\orchestration_facade.rs:121:9
    |
121 |         layer: Layer,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_layer`

warning: unused variable: `options`
   --> crates\memory\src\orchestration\orchestration_facade.rs:122:9
    |
122 |         options: SearchOptions,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `text`
   --> crates\memory\src\orchestration\orchestration_facade.rs:130:39
    |
130 |     pub async fn get_embedding(&self, text: &str) -> Result<Vec<f32>> {
    |                                       ^^^^ help: if this is intentional, prefix it with an underscore: `_text`

warning: unused variable: `path`
   --> crates\memory\src\orchestration\orchestration_facade.rs:144:39
    |
144 |     pub async fn create_backup(&self, path: &str) -> Result<BackupMetadata> {
    |                                       ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `container`
   --> crates\memory\src\services\factory_traits.rs:520:9
    |
520 |         container: &UnifiedDIContainer,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_container`

warning: unused variable: `lifetime`
   --> crates\memory\src\di\container_core.rs:314:57
    |
314 |     fn resolve_with_lifetime<T>(&self, type_id: TypeId, lifetime: Lifetime) -> Result<Arc<T>>
    |                                                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_lifetime`

warning: unused variable: `dependency`
   --> crates\memory\src\di\dependency_validator.rs:126:18
    |
126 |             for &dependency in deps {
    |                  ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dependency`

warning: unused variable: `base`
   --> crates\memory\src\di\config_loader.rs:456:9
    |
456 |         base: UnifiedDIConfiguration,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_base`

warning: unused variable: `other`
   --> crates\memory\src\di\container_configuration.rs:337:33
    |
337 |     pub fn merge_with(mut self, other: DIContainerConfiguration) -> Self {
    |                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_other`

warning: variable does not need to be mutable
   --> crates\memory\src\di\container_configuration.rs:337:23
    |
337 |     pub fn merge_with(mut self, other: DIContainerConfiguration) -> Self {
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: unused variable: `cache_stats`
   --> crates\memory\src\di\optimized_unified_container.rs:162:13
    |
162 |         let cache_stats = self.cache.stats();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_cache_stats`

Some errors have detailed explanations: E0061, E0252, E0308, E0412, E0425, E0432, E0599, E0603.
For more information about an error, try `rustc --explain E0061`.
warning: `memory` (lib) generated 35 warnings
error: could not compile `memory` (lib) due to 24 previous errors; 35 warnings emitted
