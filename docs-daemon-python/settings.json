{
  "project": {
    "name": "MAGRAY_CLI",
    "crates_dir": "crates",
    "claude_md_file": "CLAUDE.md",
    "description": "Production-ready Rust AI агент с многослойной памятью",
    "file_extensions": [
      ".rs",
      ".toml"
    ]
  },
  "scanning": {
    "exclude_dirs": [
      "target",
      "node_modules",
      ".git",
      "__pycache__",
      "dist",
      "build"
    ],
    "file_extensions": [
      ".rs",
      ".toml"
    ],
    "max_file_size_mb": 5,
    "exclude_files": [
      "*.tmp",
      "*.log",
      "*.bak",
      "Cargo.lock"
    ],
    "follow_symlinks": false
  },
  "parsing": {
    "ctl2": {
      "enabled": true,
      "patterns": [
        "//\\\\s*@component:\\\\s*(\\\\{.*\\\\})",
        "//\\\\s*@test_component:\\\\s*(\\\\{.*\\\\})"
      ],
      "strict_validation": true
    },
    "ctl3": {
      "enabled": true,
      "use_enhanced": true,
      "patterns": [
        "//\\\\s*@ctl3:\\\\s*([ⱧD]\\\\[.*?\\\\]\\\\s*:=\\\\s*\\\\{[^}]*\\\\})",
        "//\\\\s*@tensor:\\\\s*([ⱧD]\\\\[.*?\\\\]\\\\s*:=\\\\s*\\\\{[^}]*\\\\})"
      ],
      "tensor_symbols": {
        "unicode": [],
        "ascii": []
      },
      "auto_infer_kind": true,
      "auto_migrate_v2": true,
      "extract_conditions": true,
      "nested_expressions": true
    }
  },
  "validation": {
    "component": {
      "required_fields": [
        "k",
        "id",
        "t"
      ],
      "valid_kinds": [
        "T",
        "A",
        "B",
        "F",
        "M",
        "S",
        "R",
        "P",
        "D",
        "C",
        "E"
      ],
      "max_id_length": 64,
      "max_description_length": 80,
      "max_dependencies": 10,
      "max_flags": 10
    },
    "maturity": {
      "min_value": 0,
      "max_value": 100,
      "default_unit": "%",
      "require_target_higher": true
    }
  },
  "output": {
    "claude_md": {
      "auto_update": true,
      "backup_before_update": true,
      "section_marker": "# AUTO-GENERATED ARCHITECTURE",
      "timestamp_format": "%Y-%m-%d %H:%M:%S UTC",
      "preserve_manual_sections": true
    },
    "format": {
      "indent_json": 2,
      "sort_components": true,
      "sort_by": "id",
      "include_file_paths": true,
      "include_stats": true
    }
  },
  "features": {
    "colored_output": true,
    "statistics": true,
    "health_checks": true,
    "auto_fix_common_errors": true,
    "smart_component_inference": true
  },
  "watching": {
    "enabled": true,
    "debounce_seconds": 2.0,
    "recursive": true,
    "ignore_patterns": [
      "*.tmp",
      "*.swp",
      "*~"
    ],
    "batch_updates": true,
    "max_batch_size": 50
  },
  "logging": {
    "level": "INFO",
    "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    "file_logging": false,
    "log_file": "ctl_sync.log",
    "max_log_size_mb": 10,
    "backup_count": 3
  },
  "performance": {
    "max_concurrent_files": 10,
    "cache_enabled": true,
    "cache_ttl_seconds": 300,
    "memory_limit_mb": 256,
    "progress_reporting": true
  },
  "kind_mapping": {
    "T": "Test",
    "A": "Agent",
    "B": "Batch",
    "F": "Function",
    "M": "Module",
    "S": "Service",
    "R": "Resource",
    "P": "Process",
    "D": "Data",
    "C": "Component",
    "E": "Error"
  },
  "auto_inference": {
    "enabled": true,
    "rules": {
      "test": "T",
      "agent": "A",
      "batch": "B",
      "function": "F",
      "module": "M",
      "service": "S",
      "resource": "R",
      "process": "P",
      "data": "D",
      "error": "E",
      "component": "C"
    },
    "keywords": {
      "gpu": [
        "gpu",
        "cuda",
        "opencl",
        "vulkan"
      ],
      "ai": [
        "ai",
        "ml",
        "neural",
        "embedding",
        "model"
      ],
      "async": [
        "async",
        "await",
        "future",
        "tokio"
      ],
      "performance": [
        "simd",
        "parallel",
        "optimize",
        "fast"
      ],
      "memory": [
        "cache",
        "pool",
        "alloc",
        "memory"
      ],
      "network": [
        "http",
        "tcp",
        "udp",
        "websocket"
      ]
    }
  }
}