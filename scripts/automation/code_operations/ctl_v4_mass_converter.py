#!/usr/bin/env python3
"""
üöÄ CTL v4.0 Mass Converter - –°–≤–µ—Ä—Ö–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è JSON –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π

–ú–æ—â–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ JSON –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ —Å–≤–µ—Ä—Ö–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π CTL v4.0 —Ñ–æ—Ä–º–∞—Ç
—Å —ç–∫–æ–Ω–æ–º–∏–µ–π ~70% —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–π –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
- –ü–∞—Ä—Å–∏–Ω–≥ 112+ JSON –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ CLAUDE.md
- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CTL v4.0: ID:TYPE:CUR%:TGT%:FLAGS
- –ó–∞–º–µ–Ω–∞ @component –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ –∫–æ–¥–µ
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è —Ñ–ª–∞–≥–æ–≤
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ç—á–µ—Ç—ã
- Dry-run —Ä–µ–∂–∏–º

–§–û–†–ú–ê–¢ CTL v4.0:
// @ctl4: unified_agent_v2:C:90:95:clean,di,solid
// @ctl4: memory_lib:C:92:100:production,hnsw
// @ctl4: test_gpu:T:100:100:benchmark

–¢–ò–ü–´: C=Component, T=Test, A=Agent, S=Service, E=Error

–ê–≤—Ç–æ—Ä: Claude Code AI Agent
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import json
import re
import os
import sys
import argparse
import logging
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Set
from dataclasses import dataclass
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor, as_completed
import time


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging(verbose: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s | %(levelname)s | %(message)s',
        datefmt='%H:%M:%S'
    )
    

@dataclass
class Component:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    id: str
    type: str
    description: str
    current: int
    target: int
    unit: str
    flags: List[str]
    file_path: str
    dependencies: List[str] = None
    
    def __post_init__(self):
        if self.dependencies is None:
            self.dependencies = []


class CTL4Converter:
    """–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä CTL v4.0"""
    
    # Mapping –¥–ª—è —Å–∂–∞—Ç–∏—è —Ç–∏–ø–æ–≤
    TYPE_MAPPING = {
        'C': 'C',  # Component
        'T': 'T',  # Test  
        'A': 'A',  # Agent
        'S': 'S',  # Service
        'E': 'E',  # Error
        'B': 'B',  # Benchmark
    }
    
    # –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ —Ñ–ª–∞–≥–æ–≤ - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
    FLAG_COMPRESSION = {
        # Architecture patterns
        'clean_architecture': 'clean',
        'solid_principles': 'solid',
        'single_responsibility': 'sr',
        'dependency_injection': 'di',
        'di_integration': 'di',
        'di_ready': 'di',
        'strategy_pattern': 'strategy',
        'circuit_breaker': 'cb',
        
        # Production & Quality
        'production_ready': 'prod',
        'production': 'prod',
        'performance': 'perf',
        'optimization': 'opt',
        'optimized': 'opt',
        'resilience': 'resilient',
        'monitoring': 'monitor',
        'alerting': 'alerts',
        
        # AI/ML specific
        'ai_powered': 'ai',
        'ai-optimized': 'ai',
        'embeddings': 'embed',
        'machine_learning': 'ml',
        'neural_network': 'nn',
        'deep_learning': 'dl',
        
        # Technical specifics
        'multi_provider': 'multi',
        'orchestration': 'orchestr',
        'coordination': 'coord',
        'concurrent': 'concur',
        'asynchronous': 'async',
        'real_time': 'rt',
        'streaming': 'stream',
        'transactional': 'tx',
        
        # Testing & Quality
        'integration': 'integ',
        'comprehensive': 'comp',
        'unit_tests': 'unit',
        'benchmark': 'bench',
        'profiler': 'prof',
        'coverage': 'cov',
        
        # Infrastructure
        'infrastructure': 'infra',
        'configuration': 'config',
        'validation': 'valid',
        'serialization': 'serial',
        'deserialization': 'deserial',
        'registration': 'reg',
    }
    
    def __init__(self, project_root: str, dry_run: bool = False):
        self.project_root = Path(project_root)
        self.dry_run = dry_run
        self.logger = logging.getLogger(__name__)
        self.components: List[Component] = []
        self.conversion_stats = defaultdict(int)
        self.file_mappings: Dict[str, str] = {}
        self.mapping_table: List[Dict[str, str]] = []  # –î–ª—è –æ—Ç—á–µ—Ç–∞ mapping
        
    def extract_components_from_claude_md(self) -> List[Component]:
        """–ò–∑–≤–ª–µ—á—å –≤—Å–µ JSON –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ CLAUDE.md"""
        claude_md_path = self.project_root / "CLAUDE.md"
        
        if not claude_md_path.exists():
            raise FileNotFoundError(f"CLAUDE.md –Ω–µ –Ω–∞–π–¥–µ–Ω: {claude_md_path}")
            
        self.logger.info(f"üìñ –ü–∞—Ä—Å–∏–Ω–≥ CLAUDE.md: {claude_md_path}")
        
        with open(claude_md_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é AUTO-GENERATED ARCHITECTURE
        auto_gen_match = re.search(r'# AUTO-GENERATED ARCHITECTURE.*?```json\n(.*?)\n```', 
                                  content, re.DOTALL)
        
        if not auto_gen_match:
            raise ValueError("–°–µ–∫—Ü–∏—è AUTO-GENERATED ARCHITECTURE –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        json_section = auto_gen_match.group(1)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON —Å—Ç—Ä–æ–∫
        components = []
        json_lines = [line.strip() for line in json_section.split('\n') if line.strip()]
        
        for i, line in enumerate(json_lines):
            try:
                data = json.loads(line)
                component = self._parse_json_component(data)
                if component:
                    components.append(component)
                    self.conversion_stats['parsed'] += 1
            except json.JSONDecodeError as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}: {e}")
                self.conversion_stats['parse_errors'] += 1
                
        self.logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(components)}")
        return components
        
    def _parse_json_component(self, data: Dict) -> Optional[Component]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ JSON –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
            component_id = data.get('id', '')
            component_type = data.get('k', 'C')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Component
            description = data.get('t', '')
            file_path = data.get('x_file', '')
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∑—Ä–µ–ª–æ—Å—Ç–∏
            maturity = data.get('m', {})
            current = maturity.get('cur', 0)
            target = maturity.get('tgt', 100)
            unit = maturity.get('u', '%')
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤
            flags = data.get('f', [])
            if isinstance(flags, str):
                flags = [flags]
                
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            dependencies = data.get('d', [])
            if isinstance(dependencies, str):
                dependencies = [dependencies]
            
            return Component(
                id=component_id,
                type=component_type,
                description=description,
                current=current,
                target=target,
                unit=unit,
                flags=flags,
                file_path=file_path,
                dependencies=dependencies
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {e}")
            return None
            
    def compress_flags(self, flags: List[str]) -> str:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è —Ñ–ª–∞–≥–æ–≤"""
        if not flags:
            return ""
            
        compressed_flags = []
        
        for flag in flags:
            # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
            compressed = self.FLAG_COMPRESSION.get(flag, flag)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
            if len(compressed) > 8:
                # –£–¥–∞–ª–∏—Ç—å –≥–ª–∞—Å–Ω—ã–µ –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤
                if len(compressed) > 10:
                    compressed = re.sub(r'[aeiou]', '', compressed[2:-2])
                    compressed = flag[:2] + compressed + flag[-2:]
                    
            compressed_flags.append(compressed)
            
        # –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        unique_flags = sorted(set(compressed_flags))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ 5 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
        return ','.join(unique_flags[:5])
        
    def convert_to_ctl4(self, component: Component) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ CTL v4.0 —Ñ–æ—Ä–º–∞—Ç"""
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø
        type_key = self.TYPE_MAPPING.get(component.type, 'C')
        
        # –°–∂–∞—Ç—å —Ñ–ª–∞–≥–∏
        compressed_flags = self.compress_flags(component.flags)
        
        # –°–æ–±—Ä–∞—Ç—å CTL v4.0 –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
        ctl4_parts = [
            component.id,
            type_key,
            str(component.current),
            str(component.target)
        ]
        
        if compressed_flags:
            ctl4_parts.append(compressed_flags)
            
        ctl4_annotation = f"// @ctl4: {':'.join(ctl4_parts)}"
        
        # –ü–æ–¥—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
        original_json = json.dumps({
            "k": component.type,
            "id": component.id,
            "t": component.description,
            "m": {"cur": component.current, "tgt": component.target, "u": component.unit},
            "f": component.flags,
            "x_file": component.file_path
        }, separators=(',', ':'))
        
        # –î–æ–±–∞–≤–∏—Ç—å –≤ mapping —Ç–∞–±–ª–∏—Ü—É
        self.mapping_table.append({
            'id': component.id,
            'type': component.type,
            'original': original_json[:50] + '...' if len(original_json) > 50 else original_json,
            'ctl4': ctl4_annotation,
            'compression': f"{len(original_json)}‚Üí{len(ctl4_annotation)} ({round((1-len(ctl4_annotation)/len(original_json))*100, 1)}%)",
            'file': component.file_path.split(':')[0] if component.file_path else 'N/A'
        })
        
        self.conversion_stats['original_size'] += len(original_json)
        self.conversion_stats['compressed_size'] += len(ctl4_annotation)
        
        return ctl4_annotation
        
    def find_component_in_code(self, component: Component) -> Optional[Tuple[str, int]]:
        """–ù–∞–π—Ç–∏ @component –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –≤ –∫–æ–¥–µ"""
        if not component.file_path:
            return None
            
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ - –∑–∞–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –Ω–∞ –ø—Ä—è–º—ã–µ
        normalized_path = component.file_path.split(':')[0].replace('\\', '/')
        file_path = self.project_root / normalized_path
        
        if not file_path.exists():
            self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π @component –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            pattern = rf'//\s*@component:\s*{{\s*".*?"id"\s*:\s*"{re.escape(component.id)}"'
            
            for line_num, line in enumerate(lines, 1):
                if re.search(pattern, line):
                    return str(file_path), line_num
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            
        return None
        
    def replace_component_annotation(self, component: Component, ctl4_annotation: str) -> bool:
        """–ó–∞–º–µ–Ω–∏—Ç—å @component –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –Ω–∞ CTL v4.0"""
        location = self.find_component_in_code(component)
        
        if not location:
            self.logger.warning(f"‚ö†Ô∏è –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è {component.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ")
            return False
            
        file_path, line_num = location
        
        if self.dry_run:
            self.logger.info(f"üîç [DRY-RUN] –ó–∞–º–µ–Ω–∏—Ç—å –≤ {file_path}:{line_num}")
            return True
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            # –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É
            lines[line_num - 1] = ctl4_annotation + '\n'
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(lines)
                
            self.conversion_stats['replaced'] += 1
            self.logger.debug(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –≤ {file_path}:{line_num}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –≤ {file_path}: {e}")
            return False
            
    def generate_compact_section(self, components: List[Component]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –¥–ª—è CLAUDE.md"""
        self.logger.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏...")
        
        sections = {
            'C': [],  # Components
            'T': [],  # Tests
            'A': [],  # Agents
            'S': [],  # Services
            'E': [],  # Errors
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        for component in components:
            ctl4_annotation = self.convert_to_ctl4(component)
            sections[component.type].append(ctl4_annotation)
            
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        compact_section = [
            "## Components (CTL v4.0 Ultra-Compact Format)",
            "",
            "```ctl4"
        ]
        
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        for type_name, type_components in sections.items():
            if type_components:
                type_label = {
                    'C': 'Core Components',
                    'T': 'Tests & Benchmarks', 
                    'A': 'AI Agents',
                    'S': 'Services',
                    'E': 'Error Types'
                }.get(type_name, f'Type {type_name}')
                
                compact_section.extend([
                    f"",
                    f"// {type_label} ({len(type_components)})",
                    *sorted(type_components)
                ])
                
        compact_section.append("```")
        
        return '\n'.join(compact_section)
        
    def generate_mapping_table_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π mapping —Ç–∞–±–ª–∏—Ü—ã"""
        self.logger.info("[TABLE] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mapping —Ç–∞–±–ª–∏—Ü—ã...")
        
        if not self.mapping_table:
            return "[ERROR] Mapping —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞"
            
        table_lines = [
            "\n[MAPPING] –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
            "=" * 120,
            f"{'ID':<25} {'Type':<4} {'Compression':<20} {'File':<40} {'CTL4 Format':<35}",
            "-" * 120
        ]
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É –∏ ID
        sorted_mappings = sorted(self.mapping_table, key=lambda x: (x['type'], x['id']))
        
        current_type = None
        for mapping in sorted_mappings:
            # –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞
            if current_type != mapping['type']:
                type_name = {
                    'C': 'Components',
                    'T': 'Tests',
                    'A': 'Agents', 
                    'S': 'Services',
                    'E': 'Errors'
                }.get(mapping['type'], f"Type {mapping['type']}")
                table_lines.append(f"\n--- {type_name} ---")
                current_type = mapping['type']
                
            table_lines.append(
                f"{mapping['id']:<25} {mapping['type']:<4} {mapping['compression']:<20} "
                f"{mapping['file'][-37:]+'...' if len(mapping['file']) > 40 else mapping['file']:<40} "
                f"{mapping['ctl4']:<35}"
            )
            
        table_lines.extend([
            "-" * 120,
            f"–ò—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(self.mapping_table)}",
            ""
        ])
        
        return '\n'.join(table_lines)
        
    def process_all_components(self) -> Dict[str, any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.logger.info("üöÄ –ù–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ CTL v4.0...")
        
        start_time = time.time()
        
        # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ CLAUDE.md
        self.components = self.extract_components_from_claude_md()
        
        if not self.components:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            
        # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –∑–∞–º–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        self.logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {len(self.components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        success_count = 0
        with ThreadPoolExecutor(max_workers=4) as executor:
            future_to_component = {}
            
            for component in self.components:
                ctl4_annotation = self.convert_to_ctl4(component)
                future = executor.submit(self.replace_component_annotation, 
                                       component, ctl4_annotation)
                future_to_component[future] = component
                
            for future in as_completed(future_to_component):
                component = future_to_component[future]
                try:
                    if future.result():
                        success_count += 1
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {component.id}: {e}")
                    
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        compact_section = self.generate_compact_section(self.components)
        
        # 4. –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        processing_time = time.time() - start_time
        
        original_size = self.conversion_stats['original_size']
        compressed_size = self.conversion_stats['compressed_size']
        compression_ratio = (1 - compressed_size / original_size) * 100 if original_size > 0 else 0
        
        results = {
            'total_components': len(self.components),
            'successful_conversions': success_count,
            'failed_conversions': len(self.components) - success_count,
            'original_size_bytes': original_size,
            'compressed_size_bytes': compressed_size,
            'compression_ratio_percent': round(compression_ratio, 1),
            'processing_time_seconds': round(processing_time, 2),
            'compact_section': compact_section,
            'conversion_stats': dict(self.conversion_stats),
            'mapping_table_report': self.generate_mapping_table_report()
        }
        
        return results
        
    def save_compact_section_to_file(self, compact_section: str, output_file: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        output_path = Path(output_file)
        
        if self.dry_run:
            self.logger.info(f"üîç [DRY-RUN] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: {output_path}")
            return
            
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(compact_section)
            self.logger.info(f"[SAVE] –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        except Exception as e:
            self.logger.error(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {output_path}: {e}")


def create_validation_report(results: Dict[str, any]) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    report_lines = [
        "[*] CTL v4.0 Conversion Validation Report",
        "=" * 50,
        "",
        f"[STAT] –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:",
        f"   ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {results['total_components']}",
        f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {results['successful_conversions']}",
        f"   ‚Ä¢ –û—à–∏–±–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {results['failed_conversions']}",
        f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results['processing_time_seconds']}s",
        "",
        f"[SIZE] –≠–ö–û–ù–û–ú–ò–Ø –†–ê–ó–ú–ï–†–ê:",
        f"   ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {results['original_size_bytes']} –±–∞–π—Ç",
        f"   ‚Ä¢ –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {results['compressed_size_bytes']} –±–∞–π—Ç", 
        f"   ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {results['compression_ratio_percent']}%",
        f"   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: {results['original_size_bytes'] - results['compressed_size_bytes']} –±–∞–π—Ç",
        "",
        f"[DETAILS] –î–ï–¢–ê–õ–ò –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò:",
        f"   ‚Ä¢ –†–∞—Å–ø–∞—Ä—à–µ–Ω–æ –∏–∑ JSON: {results['conversion_stats'].get('parsed', 0)}",
        f"   ‚Ä¢ –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {results['conversion_stats'].get('parse_errors', 0)}",
        f"   ‚Ä¢ –ó–∞–º–µ–Ω–µ–Ω–æ –≤ –∫–æ–¥–µ: {results['conversion_stats'].get('replaced', 0)}",
        "",
        f"[QUALITY] –ö–ê–ß–ï–°–¢–í–û –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò:",
    ]
    
    success_rate = (results['successful_conversions'] / results['total_components'] * 100) if results['total_components'] > 0 else 0
    
    if success_rate >= 95:
        report_lines.append("   [OK] –û–¢–õ–ò–ß–ù–û - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    elif success_rate >= 85:
        report_lines.append("   [WARN] –•–û–†–û–®–û - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
    else:
        report_lines.append("   [ERROR] –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø - –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        
    report_lines.extend([
        f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%",
        "",
        "[FORMAT] CTL v4.0 –§–û–†–ú–ê–¢ –ü–†–ò–ú–ï–†–´:",
        "   // @ctl4: unified_agent_v2:C:90:95:clean,di,solid",
        "   // @ctl4: memory_lib:C:92:100:prod,hnsw",
        "   // @ctl4: test_gpu:T:100:100:bench",
        "",
    ])
    
    return '\n'.join(report_lines)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="üöÄ CTL v4.0 Mass Converter - –°–≤–µ—Ä—Ö–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è JSON –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:

  # Dry-run —Ä–µ–∂–∏–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞)
  python ctl_v4_mass_converter.py --dry-run

  # –ü–æ–ª–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
  python ctl_v4_mass_converter.py --convert

  # –° –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º  
  python ctl_v4_mass_converter.py --convert --verbose

  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é –≤ —Ñ–∞–π–ª
  python ctl_v4_mass_converter.py --convert --output compact_section.md

–§–û–†–ú–ê–¢ CTL v4.0:
  // @ctl4: ID:TYPE:CUR%:TGT%:FLAGS
  
–¢–ò–ü–´: C=Component, T=Test, A=Agent, S=Service, E=Error
        """
    )
    
    parser.add_argument(
        '--project-root',
        default='.',
        help='–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'
    )
    
    parser.add_argument(
        '--convert',
        action='store_true', 
        help='–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é'
    )
    
    parser.add_argument(
        '--output',
        help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª'
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.verbose)
    logger = logging.getLogger(__name__)
    
    if not args.dry_run and not args.convert:
        logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ --dry-run –∏–ª–∏ --convert")
        sys.exit(1)
        
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        converter = CTL4Converter(
            project_root=args.project_root,
            dry_run=args.dry_run
        )
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        results = converter.process_all_components()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞  
        report = create_validation_report(results)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sys.stdout.write –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ Windows
        import sys
        sys.stdout.buffer.write(("\n" + report).encode('utf-8'))
        sys.stdout.flush()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω output
        if args.output:
            converter.save_compact_section_to_file(
                results['compact_section'],
                args.output
            )
            
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        if args.dry_run:
            preview_content = "\n" + "="*60 + "\n"
            preview_content += "[PREVIEW] –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫)\n"
            preview_content += "="*60 + "\n"
            preview_lines = results['compact_section'].split('\n')[:20]
            for line in preview_lines:
                preview_content += line + "\n"
            if len(results['compact_section'].split('\n')) > 20:
                preview_content += "... (–µ—â–µ —Å—Ç—Ä–æ–∫)\n"
            sys.stdout.buffer.write(preview_content.encode('utf-8'))
            sys.stdout.flush()
                
        logger.info("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()