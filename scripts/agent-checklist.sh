#!/usr/bin/env bash
set -euo pipefail

echo "ü§ñ CLI-Agent Background Execution Checklist"
echo "============================================"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1"
    else
        echo "‚ùå $1"
        return 1
    fi
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–µ—Ä–æ–≤
echo "üö® 1. Critical Blockers Status"
INCOMPLETE_FILE="implementation_plan/INCOMPLETE.md"
if [ -f "$INCOMPLETE_FILE" ]; then
    BLOCKERS=$(grep -c "–ë–õ–û–ö–ï–†" "$INCOMPLETE_FILE" 2>/dev/null || echo "0")
    echo "   üìä Active blockers: $BLOCKERS"
    
    if [ "$BLOCKERS" -gt 0 ]; then
        echo "   üîç Current blockers:"
        grep -A 2 "–ë–õ–û–ö–ï–†" "$INCOMPLETE_FILE" | head -10
    fi
else
    echo "   ‚ö†Ô∏è  INCOMPLETE.md not found"
fi

# 2. –ü–ª–∞–Ω –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
echo ""
echo "üìã 2. Planning & Documentation"
if [ -f "docs/workflow_state.md" ]; then
    LAST_UPDATE=$(stat -c %Y "docs/workflow_state.md" 2>/dev/null || echo "0")
    CURRENT_TIME=$(date +%s)
    AGE_HOURS=$(( (CURRENT_TIME - LAST_UPDATE) / 3600 ))
    
    if [ $AGE_HOURS -lt 24 ]; then
        echo "   ‚úÖ Workflow state updated recently ($AGE_HOURS hours ago)"
    else
        echo "   ‚ö†Ô∏è  Workflow state outdated ($AGE_HOURS hours ago)"
    fi
else
    echo "   ‚ùå workflow_state.md missing"
fi

# 3. –ö–æ–¥ –∏ —Ç–µ—Å—Ç—ã
echo ""
echo "üß™ 3. Code Quality & Tests"
if command -v cargo >/dev/null 2>&1; then
    echo "   ü¶Ä Running Rust checks..."
    
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è
    if cargo check --all --quiet 2>/dev/null; then
        echo "   ‚úÖ Compilation successful"
    else
        echo "   ‚ùå Compilation failed"
    fi
    
    # –¢–µ—Å—Ç—ã
    if cargo test --all --quiet 2>/dev/null; then
        echo "   ‚úÖ Tests passing"
    else
        echo "   ‚ùå Tests failing"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
    STUBS=$(find . -name "*.rs" -exec grep -l "#INCOMPLETE\|fake_content\|–∑–∞–≥–ª—É—à–∫–∞" {} \; 2>/dev/null | wc -l)
    if [ "$STUBS" -eq 0 ]; then
        echo "   ‚úÖ No stubs found in code"
    else
        echo "   ‚ö†Ô∏è  $STUBS files contain stubs"
    fi
fi

# 4. Memory –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
echo ""
echo "üß† 4. Memory & Indexing"
MEMORY_DIR="$HOME/.ourcli"
if [ -d "$MEMORY_DIR" ]; then
    DB_SIZE=$(du -sh "$MEMORY_DIR" 2>/dev/null | cut -f1)
    echo "   üìä Memory store size: $DB_SIZE"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite –ë–î
    if [ -f "$MEMORY_DIR/projects/*/memory.db" ]; then
        echo "   ‚úÖ Memory database exists"
    else
        echo "   ‚ö†Ô∏è  Memory database not found"
    fi
else
    echo "   ‚ùå Memory directory not initialized"
fi

# 5. Todo –∏ –∑–∞–¥–∞—á–∏
echo ""
echo "üìù 5. Todo & Task Management"
if command -v cli >/dev/null 2>&1; then
    TODO_COUNT=$(cli todo list --state ready 2>/dev/null | wc -l || echo "0")
    echo "   üìä Ready tasks: $TODO_COUNT"
    
    BLOCKED_COUNT=$(cli todo list --state blocked 2>/dev/null | wc -l || echo "0")
    if [ "$BLOCKED_COUNT" -gt 0 ]; then
        echo "   ‚ö†Ô∏è  Blocked tasks: $BLOCKED_COUNT"
    fi
else
    echo "   ‚ö†Ô∏è  CLI tool not available"
fi

# 6. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–µ—Ç—Ä–∏–∫–∏
echo ""
echo "üìà 6. Performance & Metrics"
if [ -f "logs/app.log" ]; then
    LOG_SIZE=$(du -sh "logs/app.log" | cut -f1)
    ERROR_COUNT=$(grep -c "ERROR" "logs/app.log" 2>/dev/null || echo "0")
    
    echo "   üìä Log size: $LOG_SIZE"
    if [ "$ERROR_COUNT" -eq 0 ]; then
        echo "   ‚úÖ No errors in logs"
    else
        echo "   ‚ö†Ô∏è  $ERROR_COUNT errors in logs"
    fi
fi

# 7. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
echo ""
echo "üöÄ 7. Execution Readiness"
READY_SCORE=0

# –ü–æ–¥—Å—á—ë—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
[ "$BLOCKERS" -eq 0 ] && READY_SCORE=$((READY_SCORE + 2))
[ -f "docs/workflow_state.md" ] && READY_SCORE=$((READY_SCORE + 1))
[ "$STUBS" -eq 0 ] && READY_SCORE=$((READY_SCORE + 2))
[ -d "$MEMORY_DIR" ] && READY_SCORE=$((READY_SCORE + 1))

echo "   üìä Readiness Score: $READY_SCORE/6"

if [ "$READY_SCORE" -ge 5 ]; then
    echo "   ‚úÖ System ready for autonomous execution"
elif [ "$READY_SCORE" -ge 3 ]; then
    echo "   ‚ö†Ô∏è  System partially ready - some issues need attention"
else
    echo "   ‚ùå System not ready - critical issues must be resolved"
fi

echo ""
echo "üéØ Next Actions:"
if [ "$BLOCKERS" -gt 0 ]; then
    echo "   1. Resolve critical blockers in toolsvc/llm"
fi
if [ "$STUBS" -gt 0 ]; then
    echo "   2. Replace stubs with real implementations"
fi
if [ ! -d "$MEMORY_DIR" ]; then
    echo "   3. Initialize memory system: cli init"
fi

echo ""
echo "‚ú® Agent checklist completed!"
