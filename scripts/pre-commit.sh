#!/usr/bin/env bash
set -euo pipefail

echo "üîç [CLI-Agent Pre-commit] Multi-level quality checks"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
CHANGED_FILES=$(git diff --cached --name-only 2>/dev/null || echo "")
CRITICAL_COMPONENTS="toolsvc|llm|memory|executor"

if echo "$CHANGED_FILES" | grep -qE "$CRITICAL_COMPONENTS"; then
    CHECK_LEVEL="L2"
    echo "üö® Critical components changed - running L2 checks"
else
    CHECK_LEVEL="L1" 
    echo "üìù Standard changes - running L1 checks"
fi

# L1: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤—Å–µ–≥–¥–∞)
echo "üìã L1: Basic checks"
if command -v cargo >/dev/null 2>&1; then
    echo "  ü¶Ä Rust formatting..."
    cargo fmt --all
    
    echo "  üîß Rust linting..."
    if ! cargo clippy --all-targets -- -D warnings; then
        echo "‚ùå Clippy failed - attempting auto-fix"
        cargo clippy --all-targets --fix --allow-dirty --allow-staged || true
    fi
    
    echo "  ‚úÖ Rust compilation..."
    cargo check --all
    
    echo "  üß™ Unit tests..."
    cargo test --all --quiet
fi

# TOML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if command -v taplo >/dev/null 2>&1; then
    echo "  üìÑ TOML formatting..."
    taplo fmt **/*.toml || true
fi

# L2: –ö–∞—á–µ—Å—Ç–≤–æ (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
if [ "$CHECK_LEVEL" = "L2" ]; then
    echo "üéØ L2: Quality checks for critical components"
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if command -v cargo-nextest >/dev/null 2>&1; then
        echo "  üöÄ Parallel testing..."
        cargo nextest run --all
    fi
    
    # –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
    if command -v cargo-tarpaulin >/dev/null 2>&1; then
        echo "  üìä Code coverage..."
        cargo tarpaulin --out Xml --timeout 120 --skip-clean
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
        if [ -f cobertura.xml ]; then
            COVERAGE=$(grep -o 'line-rate="[^"]*"' cobertura.xml | head -1 | cut -d'"' -f2)
            COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | cut -d. -f1)
            echo "  üìà Coverage: ${COVERAGE_PERCENT}%"
            
            if [ "$COVERAGE_PERCENT" -lt 60 ]; then
                echo "‚ö†Ô∏è  Coverage below 60% - consider adding tests"
            fi
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL –º–∏–≥—Ä–∞—Ü–∏–π
    if command -v sqlx >/dev/null 2>&1 && [ -d "migrations" ]; then
        echo "  üóÑÔ∏è  Database migrations..."
        sqlx migrate info || echo "‚ö†Ô∏è  Migration check failed"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    echo "  üîç Checking for stubs in critical components..."
    STUBS_FOUND=$(grep -r "#INCOMPLETE\|TODO.*BLOCKER\|fake_content\|–∑–∞–≥–ª—É—à–∫–∞" \
        --include="*.rs" \
        implementation_plan/rust_skeleton/crates/ 2>/dev/null || true)
    
    if [ -n "$STUBS_FOUND" ]; then
        echo "‚ö†Ô∏è  Found stubs in critical code:"
        echo "$STUBS_FOUND"
        echo "üí° Consider implementing these before committing"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
echo "üìö Documentation checks"
if [ -f "implementation_plan/INCOMPLETE.md" ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–ª—ë–Ω –ª–∏ INCOMPLETE.md –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞
    if echo "$CHANGED_FILES" | grep -q "\.rs$" && ! echo "$CHANGED_FILES" | grep -q "INCOMPLETE.md"; then
        echo "üí° Code changed but INCOMPLETE.md not updated - consider updating status"
    fi
fi

# JavaScript/TypeScript (–µ—Å–ª–∏ –µ—Å—Ç—å)
if [ -f package.json ]; then
    echo "üåê JavaScript checks"
    npm run lint || echo "‚ö†Ô∏è  JS lint failed"
    npm test -- --coverage --watchAll=false || echo "‚ö†Ô∏è  JS tests failed"
fi

# Python (–µ—Å–ª–∏ –µ—Å—Ç—å)
if test -f "pyproject.toml" || test -f "requirements.txt"; then
    echo "üêç Python checks"
    black . || echo "‚ö†Ô∏è  Black formatting failed"
    ruff check . || echo "‚ö†Ô∏è  Ruff linting failed"
    pytest -q || echo "‚ö†Ô∏è  Python tests failed"
fi

echo "‚úÖ Pre-commit checks completed (Level: $CHECK_LEVEL)"

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –¥–ª—è —É—Å–ø–µ—Ö–∞ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö)
exit 0
