# CLI Development Best Practices

## Архитектура CLI

### Структура команд
- Используем паттерн: `app VERB NOUN --ADJECTIVE`
- Примеры: `magray create project`, `magray analyze code`
- Подкоманды группируем логически

### Флаги и аргументы
- Короткие флаги для частых операций: `-v`, `-h`
- Длинные флаги для ясности: `--verbose`, `--help`
- Обязательные аргументы - позиционные
- Опциональные - через флаги

## UX принципы

### Обратная связь
- Цветной вывод для статусов (✅ успех, ❌ ошибка, ⚠️ предупреждение)
- Progress bars для длительных операций
- Понятные сообщения об ошибках с предложениями исправления

### Интерактивность
- Подтверждение опасных операций
- Автодополнение для всех команд
- Fuzzy search для выбора из списков

## Технические решения

### Для Rust CLI
```rust
// Рекомендуемые крейты
clap = "4"          // Парсинг аргументов
tokio = "1"         // Async runtime
indicatif = "0.17"  // Progress bars
dialoguer = "0.11"  // Интерактивные промпты
colored = "2"       // Цветной вывод
```

### Обработка ошибок
- Всегда показываем контекст ошибки
- Предлагаем возможные решения
- Логируем детали в debug режиме

## Примеры хороших CLI
- `git` - интуитивная структура команд
- `cargo` - отличная обратная связь
- `docker` - логичная группировка
- `kubectl` - мощные алиасы