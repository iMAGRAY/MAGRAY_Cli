//! MAGRAY CLI Human-Like Testing System
//! 
//! –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è MAGRAY CLI —Å human-like interaction testing
//! –∏ GPT-5 nano evaluation. –°–∏—Å—Ç–µ–º–∞ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—É—Å–∫–∞–µ—Ç CLI –∫–∞–∫ subprocess,
//! –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI API.
//!
//! ## –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
//!
//! - **TestExecutor** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ subprocess –¥–ª—è CLI –∏ human-like interaction
//! - **ScenarioManager** - –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ YAML —Ñ–∞–π–ª–æ–≤
//! - **Gpt5Evaluator** - –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ GPT-5 nano API
//! - **TestReportGenerator** - —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ HTML/JSON/Markdown
//!
//! ## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
//!
//! ```rust
//! use magray_testing::{TestExecutor, ScenarioManager, Gpt5Evaluator, TestReportGenerator};
//! 
//! #[tokio::main]
//! async fn main() -> Result<(), Box<dyn std::error::Error>> {
//!     // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
//!     let scenario_manager = ScenarioManager::new("./tests/scenarios");
//!     let scenarios = scenario_manager.load_scenarios_from_file("complex_scenarios.yaml")?;
//!     
//!     // 2. –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
//!     let executor = TestExecutor::new();
//!     let test_results = executor.execute_test_suite(scenarios.clone()).await?;
//!     
//!     // 3. –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ GPT-5
//!     let evaluator = Gpt5Evaluator::from_env()?;
//!     let evaluations = evaluator.evaluate_test_batch(&scenarios, &test_results).await?;
//!     
//!     // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
//!     let report_generator = TestReportGenerator::new("./test_reports");
//!     let report = report_generator.generate_full_report(
//!         &scenarios, &test_results, &evaluations, "test_session_001".to_string()
//!     ).await?;
//!     
//!     // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
//!     let saved_files = report_generator.save_report(&report).await?;
//!     println!("Reports saved: {:?}", saved_files);
//!     
//!     Ok(())
//! }
//! ```

pub mod integration {
    pub mod human_like_testing;
}

pub mod scenarios {
    pub mod scenario_manager;
}

pub mod evaluators {
    pub mod gpt5_evaluator;
}

pub mod reports {
    pub mod test_report_generator;
}

// Re-export main types for convenient access
pub use integration::human_like_testing::{TestExecutor, TestResult, TestScenario};
pub use scenarios::scenario_manager::{ScenarioManager, ScenarioStats};
pub use evaluators::gpt5_evaluator::{Gpt5Evaluator, EvaluationResult, EvaluationScores};
pub use reports::test_report_generator::{TestReportGenerator, TestSummaryReport};

/// –û—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
pub struct MagrayTestSuite {
    executor: TestExecutor,
    scenario_manager: ScenarioManager,
    evaluator: Gpt5Evaluator,
    report_generator: TestReportGenerator,
}

impl MagrayTestSuite {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pub fn new() -> anyhow::Result<Self> {
        Ok(Self {
            executor: TestExecutor::new(),
            scenario_manager: ScenarioManager::new("./tests/scenarios"),
            evaluator: Gpt5Evaluator::from_env()?,
            report_generator: TestReportGenerator::new("./test_reports"),
        })
    }

    /// –°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—É—Ç—è–º–∏
    pub fn with_paths(
        scenarios_dir: &str,
        reports_dir: &str,
        api_key: Option<String>,
    ) -> anyhow::Result<Self> {
        let evaluator = match api_key {
            Some(key) => Gpt5Evaluator::new(key),
            None => Gpt5Evaluator::from_env()?,
        };

        Ok(Self {
            executor: TestExecutor::new(),
            scenario_manager: ScenarioManager::new(scenarios_dir),
            evaluator,
            report_generator: TestReportGenerator::new(reports_dir),
        })
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí –æ—Ü–µ–Ω–∫–∞ ‚Üí –æ—Ç—á–µ—Ç
    pub async fn run_full_test_suite(&self, scenarios_file: &str) -> anyhow::Result<Vec<String>> {
        println!("üöÄ Starting MAGRAY CLI Human-Like Testing Suite");

        // 1. Health check
        println!("üîç Performing CLI health check...");
        if !self.executor.health_check().await? {
            return Err(anyhow::anyhow!("CLI health check failed - MAGRAY CLI is not responding"));
        }

        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        println!("üìã Loading test scenarios from: {}", scenarios_file);
        let scenarios = self.scenario_manager.load_scenarios_from_file(scenarios_file)?;
        self.scenario_manager.validate_scenarios(&scenarios)?;

        // 3. –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        println!("üß™ Executing {} test scenarios...", scenarios.len());
        let test_results = self.executor.execute_test_suite(scenarios.clone()).await?;

        // 4. –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        println!("ü§ñ Evaluating response quality with GPT-5 nano...");
        let evaluation_results = self.evaluator.evaluate_test_batch(&scenarios, &test_results).await?;

        // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        println!("üìä Generating comprehensive test report...");
        let session_id = format!("MAGRAY_TEST_{}", chrono::Utc::now().format("%Y%m%d_%H%M%S"));
        let report = self.report_generator.generate_full_report(
            &scenarios,
            &test_results,
            &evaluation_results,
            session_id,
        ).await?;

        // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        println!("üíæ Saving test report...");
        let saved_files = self.report_generator.save_report(&report).await?;

        // 7. –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        self.print_test_summary(&report);

        Ok(saved_files)
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    pub async fn run_targeted_tests(&self, test_type: &str) -> anyhow::Result<Vec<String>> {
        println!("üéØ Running targeted tests for type: {}", test_type);

        let scenarios = self.scenario_manager.load_scenarios_by_type(test_type)?;
        if scenarios.is_empty() {
            return Err(anyhow::anyhow!("No scenarios found for type: {}", test_type));
        }

        let test_results = self.executor.execute_test_suite(scenarios.clone()).await?;
        let evaluation_results = self.evaluator.evaluate_test_batch(&scenarios, &test_results).await?;

        let session_id = format!("MAGRAY_TARGETED_{}_{}", test_type.to_uppercase(), chrono::Utc::now().format("%Y%m%d_%H%M%S"));
        let report = self.report_generator.generate_full_report(
            &scenarios,
            &test_results,
            &evaluation_results,
            session_id,
        ).await?;

        let saved_files = self.report_generator.save_report(&report).await?;
        self.print_test_summary(&report);

        Ok(saved_files)
    }

    /// –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    fn print_test_summary(&self, report: &TestSummaryReport) {
        println!("\nüèÅ TEST SUITE COMPLETED");
        println!("=" .repeat(50));
        println!("üìä EXECUTION SUMMARY:");
        println!("   ‚Ä¢ Total Tests: {}", report.execution_summary.total_tests);
        println!("   ‚Ä¢ Success Rate: {:.1}%", report.execution_summary.success_rate);
        println!("   ‚Ä¢ Avg Response Time: {:.0}ms", report.execution_summary.average_response_time_ms);
        
        println!("\nüéØ QUALITY EVALUATION:");
        println!("   ‚Ä¢ Overall Score: {:.1}/10", report.evaluation_summary.average_overall_score);
        println!("   ‚Ä¢ Technical Accuracy: {:.1}/10", report.evaluation_summary.average_scores.technical_accuracy);
        println!("   ‚Ä¢ Completeness: {:.1}/10", report.evaluation_summary.average_scores.completeness);
        
        println!("\nüìà SCORE DISTRIBUTION:");
        println!("   ‚Ä¢ Excellent (9-10): {} scenarios", report.evaluation_summary.score_distribution.excellent);
        println!("   ‚Ä¢ Good (7-8.9): {} scenarios", report.evaluation_summary.score_distribution.good);
        println!("   ‚Ä¢ Satisfactory (5-6.9): {} scenarios", report.evaluation_summary.score_distribution.satisfactory);
        println!("   ‚Ä¢ Poor (1-4.9): {} scenarios", report.evaluation_summary.score_distribution.poor);

        println!("\nüí° KEY RECOMMENDATIONS:");
        for (i, rec) in report.recommendations.iter().take(3).enumerate() {
            println!("   {}. {}", i + 1, rec);
        }

        println!("\nüìÑ Report ID: {}", report.metadata.report_id);
        println!("=" .repeat(50));
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    pub fn get_scenario_stats(&self) -> anyhow::Result<ScenarioStats> {
        self.scenario_manager.get_scenarios_stats()
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    pub async fn verify_system_readiness(&self) -> anyhow::Result<bool> {
        println!("üîß Verifying system readiness...");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ CLI
        if !self.executor.health_check().await? {
            println!("‚ùå CLI health check failed");
            return Ok(false);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        match self.scenario_manager.load_all_scenarios() {
            Ok(scenarios) => {
                if scenarios.is_empty() {
                    println!("‚ùå No test scenarios found");
                    return Ok(false);
                }
                println!("‚úÖ Found {} test scenarios", scenarios.len());
            }
            Err(e) => {
                println!("‚ùå Failed to load scenarios: {}", e);
                return Ok(false);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ (–Ω–µ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        println!("‚úÖ GPT-5 evaluator configured");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
        std::fs::create_dir_all(&self.report_generator.output_dir).map_err(|e| {
            println!("‚ùå Cannot create reports directory: {}", e);
            e
        })?;
        println!("‚úÖ Reports directory ready");

        println!("üéâ System is ready for testing!");
        Ok(true)
    }
}

impl Default for MagrayTestSuite {
    fn default() -> Self {
        Self::new().expect("Failed to create default MagrayTestSuite")
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_magray_test_suite_creation() {
        // This test requires environment setup, so we'll skip it in normal runs
        if std::env::var("OPENAI_API_KEY").is_ok() {
            let suite = MagrayTestSuite::new();
            assert!(suite.is_ok());
        }
    }

    #[test]
    fn test_module_exports() {
        // Test that all main types are properly exported
        use crate::{TestExecutor, ScenarioManager, Gpt5Evaluator, TestReportGenerator};
        
        let _executor = TestExecutor::new();
        let _manager = ScenarioManager::new("./test");
        // GPT5Evaluator and TestReportGenerator require additional setup
    }
}