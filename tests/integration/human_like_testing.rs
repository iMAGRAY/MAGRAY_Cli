use anyhow::{Context, Result};
use serde::{Deserialize, Serialize};
use std::env;
use std::io::{BufRead, BufReader, Write};
use std::path::{Path, PathBuf};
use std::process::{Child, Command, Stdio};
use std::time::{Duration, Instant};
use tokio::time::timeout;
use uuid::Uuid;

/// Test Executor - –∑–∞–ø—É—Å–∫–∞–µ—Ç MAGRAY CLI –∫–∞–∫ subprocess –∏ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
pub struct TestExecutor {
    binary_path: Option<PathBuf>,
    use_cargo_run: bool,
    timeout_duration: Duration,
    session_id: String,
    project_root: PathBuf,
    max_retries: u32,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TestResult {
    pub scenario_id: String,
    pub input: String,
    pub output: String,
    pub execution_time_ms: u64,
    pub success: bool,
    pub error_message: Option<String>,
    pub timestamp: String,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TestScenario {
    pub id: String,
    pub name: String,
    pub input: String,
    pub expected_type: String, // "simple_response", "complex_task", "error_handling"
    pub timeout_seconds: u64,
    pub evaluation_criteria: Vec<String>,
}

/// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è
pub struct InteractiveCliProcess {
    pub process: Child,
    pub start_time: Instant,
}

impl InteractiveCliProcess {
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ CLI
    pub async fn send_message(&mut self, message: &str) -> Result<()> {
        if let Some(ref mut stdin) = self.process.stdin {
            writeln!(stdin, "{message}")?;
            stdin.flush()?;
            Ok(())
        } else {
            Err(anyhow::anyhow!("stdin not available"))
        }
    }

    /// –ß–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ CLI —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    pub async fn read_response(&mut self, timeout_duration: Duration) -> Result<String> {
        if let Some(stdout) = self.process.stdout.take() {
            let handle = tokio::task::spawn_blocking(move || -> Result<String> {
                let reader = BufReader::new(stdout);
                let mut output = String::new();
                let mut lines_read = 0;

                for line in reader.lines() {
                    match line {
                        Ok(line_str) => {
                            output.push_str(&line_str);
                            output.push('\n');
                            lines_read += 1;

                            // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                            if line_str.contains("‚úì")
                                || line_str.contains("Done")
                                || line_str.contains("completed")
                                || line_str.contains("–í—ã:")
                                || (lines_read > 10 && line_str.trim().is_empty())
                            {
                                break;
                            }
                        }
                        Err(_) => break,
                    }
                }

                Ok(output)
            });

            match timeout(timeout_duration, handle).await {
                Ok(Ok(Ok(output))) => Ok(output),
                Ok(Ok(Err(e))) => Err(e),
                Ok(Err(e)) => Err(anyhow::anyhow!("Task join error: {}", e)),
                Err(_) => Err(anyhow::anyhow!("Read timeout")),
            }
        } else {
            Err(anyhow::anyhow!("stdout not available"))
        }
    }

    /// –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å CLI
    pub fn terminate(mut self) -> Result<()> {
        let _ = self.process.kill();
        let _ = self.process.wait();
        Ok(())
    }
}

impl TestExecutor {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Test Executor
    pub fn new() -> Self {
        let current_dir = env::current_dir().unwrap_or_else(|_| PathBuf::from("."));

        Self {
            binary_path: None,
            use_cargo_run: false,
            timeout_duration: Duration::from_secs(30),
            session_id: Uuid::new_v4().to_string(),
            project_root: current_dir,
            max_retries: 3,
        }
    }

    /// –°–æ–∑–¥–∞–µ—Ç Test Executor —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    pub fn with_project_root<P: AsRef<Path>>(root: P) -> Self {
        let mut executor = Self::new();
        executor.project_root = root.as_ref().to_path_buf();
        executor
    }

    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–æ–º—É —Ñ–∞–π–ª—É CLI
    pub fn with_binary_path<P: AsRef<Path>>(mut self, path: P) -> Self {
        self.binary_path = Some(path.as_ref().to_path_buf());
        self.use_cargo_run = false;
        self
    }

    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç timeout –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    pub fn with_timeout(mut self, duration: Duration) -> Self {
        self.timeout_duration = duration;
        self
    }

    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    pub fn with_retries(mut self, retries: u32) -> Self {
        self.max_retries = retries;
        self
    }

    /// –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç MAGRAY CLI –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    pub async fn compile_magray_cli(&mut self) -> Result<()> {
        println!("üî® Compiling MAGRAY CLI...");

        let compile_start = Instant::now();

        // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        let output = Command::new("cargo")
            .args(["build", "-p", "cli", "--bin", "magray"])
            .current_dir(&self.project_root)
            .output()
            .context("Failed to run cargo build")?;

        if !output.status.success() {
            let stderr = String::from_utf8_lossy(&output.stderr);
            return Err(anyhow::anyhow!("Compilation failed:\n{}", stderr));
        }

        let compile_time = compile_start.elapsed();
        println!(
            "‚úÖ MAGRAY CLI compiled successfully in {:.2}s",
            compile_time.as_secs_f64()
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –±–∏–Ω–∞—Ä–Ω–∏–∫—É
        self.detect_binary_path()?;

        Ok(())
    }

    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –±–∏–Ω–∞—Ä–Ω–∏–∫—É
    fn detect_binary_path(&mut self) -> Result<()> {
        let target_dir = self.project_root.join("target").join("debug");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Windows –∏ Unix –≤–∞—Ä–∏–∞–Ω—Ç—ã
        let binary_candidates = if cfg!(windows) {
            vec!["magray.exe"]
        } else {
            vec!["magray"]
        };

        for candidate in binary_candidates {
            let binary_path = target_dir.join(candidate);
            if binary_path.exists() {
                println!("üéØ Found MAGRAY binary at: {}", binary_path.display());
                self.binary_path = Some(binary_path);
                self.use_cargo_run = false;
                return Ok(());
            }
        }

        // Fallback –∫ cargo run
        println!("‚ö†Ô∏è  Binary not found, will use 'cargo run --bin magray'");
        self.binary_path = None;
        self.use_cargo_run = true;

        Ok(())
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pub async fn setup_environment(&self) -> Result<()> {
        println!("üîß Setting up test environment...");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
        let env_path = self.project_root.join(".env");
        if !env_path.exists() {
            println!("üìù Creating .env file with test configuration...");
            let env_content = r#"# MAGRAY CLI Test Environment
# OpenAI API key for testing (optional)
# OPENAI_API_KEY=your_key_here

# Test configuration
TEST_MODE=true
LOG_LEVEL=info
"#;
            std::fs::write(&env_path, env_content).context("Failed to create .env file")?;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π (graceful fallback)
        let models_dir = self.project_root.join("models");
        if !models_dir.exists() {
            println!("üìÅ Models directory not found - tests will run with fallback");
        } else {
            println!("‚úÖ Models directory found");
        }

        println!("‚úÖ Environment setup completed");
        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    pub async fn execute_scenario(&self, scenario: &TestScenario) -> Result<TestResult> {
        println!("üöÄ Executing scenario: {}", scenario.name);

        for attempt in 1..=self.max_retries {
            match self.try_execute_scenario(scenario, attempt).await {
                Ok(result) => return Ok(result),
                Err(e) if attempt < self.max_retries => {
                    println!("‚ö†Ô∏è  Attempt {}/{} failed: {}", attempt, self.max_retries, e);
                    println!("üîÑ Retrying in {}s...", attempt * 2);
                    tokio::time::sleep(Duration::from_secs(attempt as u64 * 2)).await;
                }
                Err(e) => return Err(e),
            }
        }

        unreachable!()
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–∑–∞–ø—É—Å–∫->—Å–æ–æ–±—â–µ–Ω–∏–µ->–æ—Ç–≤–µ—Ç->–∑–∞–∫—Ä—ã—Ç–∏–µ)
    pub async fn execute_interactive_scenario(
        &self,
        scenario: &TestScenario,
    ) -> Result<TestResult> {
        println!("üöÄ Executing interactive scenario: {}", scenario.name);
        let start_time = Instant::now();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        let mut cli_process = self.start_interactive_cli().await?;

        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CLI
        tokio::time::sleep(Duration::from_secs(2)).await;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        println!("üì§ Sending: {}", scenario.input);
        cli_process.send_message(&scenario.input).await?;

        // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        let timeout_duration = Duration::from_secs(scenario.timeout_seconds);
        let output = match cli_process.read_response(timeout_duration).await {
            Ok(response) => {
                println!("üì• Received response ({} chars)", response.len());
                response
            }
            Err(e) => {
                println!("‚ùå Failed to read response: {e}");
                cli_process.terminate()?;
                return Ok(TestResult {
                    scenario_id: scenario.id.clone(),
                    input: scenario.input.clone(),
                    output: String::new(),
                    execution_time_ms: start_time.elapsed().as_millis() as u64,
                    success: false,
                    error_message: Some(format!("Failed to read response: {e}")),
                    timestamp: chrono::Utc::now().to_rfc3339(),
                });
            }
        };

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        cli_process.terminate()?;

        let execution_time_ms = start_time.elapsed().as_millis() as u64;
        let success = !output.is_empty();

        Ok(TestResult {
            scenario_id: scenario.id.clone(),
            input: scenario.input.clone(),
            output,
            execution_time_ms,
            success,
            error_message: if !success {
                Some("Empty response".to_string())
            } else {
                None
            },
            timestamp: chrono::Utc::now().to_rfc3339(),
        })
    }

    /// –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥)
    async fn try_execute_scenario(
        &self,
        scenario: &TestScenario,
        attempt: u32,
    ) -> Result<TestResult> {
        let start_time = Instant::now();

        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        let mut command = if self.use_cargo_run || self.binary_path.is_none() {
            let mut cmd = Command::new("cargo");
            cmd.args([
                "run",
                "-p",
                "cli",
                "--bin",
                "magray",
                "--",
                "chat",
                &scenario.input,
            ])
            .current_dir(&self.project_root);
            cmd
        } else if let Some(ref binary_path) = self.binary_path {
            let mut cmd = Command::new(binary_path);
            cmd.args(["chat", &scenario.input]);
            cmd
        } else {
            return Err(anyhow::anyhow!(
                "No valid binary path or cargo run configuration"
            ));
        };

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º stdin/stdout/stderr
        let output = command
            .output()
            .context("Failed to execute MAGRAY CLI process")?;

        let execution_time_ms = start_time.elapsed().as_millis() as u64;
        let stdout_str = String::from_utf8_lossy(&output.stdout).to_string();
        let stderr_str = String::from_utf8_lossy(&output.stderr).to_string();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        let success = output.status.success() && !stdout_str.is_empty();
        let error_message = if !success {
            Some(if !stderr_str.is_empty() {
                stderr_str
            } else {
                "No output received".to_string()
            })
        } else {
            None
        };

        Ok(TestResult {
            scenario_id: scenario.id.clone(),
            input: scenario.input.clone(),
            output: stdout_str,
            execution_time_ms,
            success,
            error_message,
            timestamp: chrono::Utc::now().to_rfc3339(),
        })
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è
    pub async fn start_interactive_cli(&self) -> Result<InteractiveCliProcess> {
        println!("üöÄ Starting interactive MAGRAY CLI process...");

        let mut command = if self.use_cargo_run || self.binary_path.is_none() {
            let mut cmd = Command::new("cargo");
            cmd.args(["run", "-p", "cli", "--bin", "magray"])
                .current_dir(&self.project_root);
            cmd
        } else if let Some(ref binary_path) = self.binary_path {
            Command::new(binary_path)
        } else {
            return Err(anyhow::anyhow!(
                "No valid binary path or cargo run configuration"
            ));
        };

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º stdin/stdout/stderr –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        let child = command
            .stdin(Stdio::piped())
            .stdout(Stdio::piped())
            .stderr(Stdio::piped())
            .spawn()
            .context("Failed to spawn MAGRAY CLI process")?;

        Ok(InteractiveCliProcess {
            process: child,
            start_time: Instant::now(),
        })
    }

    /// –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    async fn try_execute_scenario_old(
        &self,
        scenario: &TestScenario,
        attempt: u32,
    ) -> Result<TestResult> {
        let start_time = Instant::now();

        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        let mut command = if self.use_cargo_run || self.binary_path.is_none() {
            let mut cmd = Command::new("cargo");
            cmd.args(["run", "-p", "cli", "--bin", "magray"])
                .current_dir(&self.project_root);
            cmd
        } else if let Some(ref binary_path) = self.binary_path {
            Command::new(binary_path)
        } else {
            return Err(anyhow::anyhow!(
                "No valid binary path or cargo run configuration"
            ));
        };

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º stdin/stdout/stderr
        let mut child = command
            .stdin(Stdio::piped())
            .stdout(Stdio::piped())
            .stderr(Stdio::piped())
            .spawn()
            .context("Failed to spawn MAGRAY CLI process")?;

        let stdin = child.stdin.take().context("Failed to get stdin")?;
        let stdout = child.stdout.take().context("Failed to get stdout")?;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let input_clone = scenario.input.clone();
        let write_handle = tokio::task::spawn_blocking(move || -> Result<()> {
            let mut stdin = stdin;
            writeln!(stdin, "{input_clone}")?;
            stdin.flush()?;
            Ok(())
        });

        // –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ —Å timeout
        let timeout_duration = Duration::from_secs(scenario.timeout_seconds);
        let read_handle = tokio::task::spawn_blocking(move || -> Result<String> {
            let reader = BufReader::new(stdout);
            let mut output = String::new();

            for line in reader.lines() {
                match line {
                    Ok(line_str) => {
                        output.push_str(&line_str);
                        output.push('\n');

                        // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                        if line_str.contains("‚úì")
                            || line_str.contains("Done")
                            || line_str.contains("completed")
                            || line_str.trim().is_empty()
                        {
                            break;
                        }
                    }
                    Err(_) => break,
                }
            }

            Ok(output)
        });

        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å timeout
        let output_result = match timeout(timeout_duration, read_handle).await {
            Ok(Ok(output)) => output,
            Ok(Err(e)) => {
                return Ok(TestResult {
                    scenario_id: scenario.id.clone(),
                    input: scenario.input.clone(),
                    output: String::new(),
                    execution_time_ms: start_time.elapsed().as_millis() as u64,
                    success: false,
                    error_message: Some(format!("Read error: {e}")),
                    timestamp: chrono::Utc::now().to_rfc3339(),
                })
            }
            Err(_) => {
                return Ok(TestResult {
                    scenario_id: scenario.id.clone(),
                    input: scenario.input.clone(),
                    output: String::new(),
                    execution_time_ms: start_time.elapsed().as_millis() as u64,
                    success: false,
                    error_message: Some("Timeout exceeded".to_string()),
                    timestamp: chrono::Utc::now().to_rfc3339(),
                })
            }
        };

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        if let Err(e) = write_handle
            .await
            .unwrap_or_else(|e| Err(anyhow::anyhow!("Join error: {}", e)))
        {
            eprintln!("Warning: Write error: {e}");
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        let _ = child.kill();
        let _ = child.wait();

        let execution_time = start_time.elapsed().as_millis() as u64;

        Ok(TestResult {
            scenario_id: scenario.id.clone(),
            input: scenario.input.clone(),
            output: output_result?,
            execution_time_ms: execution_time,
            success: true,
            error_message: None,
            timestamp: chrono::Utc::now().to_rfc3339(),
        })
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MAGRAY CLI
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–∫–æ–º–ø–∏–ª—è—Ü–∏—è + health check)
    pub async fn full_readiness_check(&mut self) -> Result<bool> {
        println!("üîç Starting full readiness check...");

        // 1. –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º MAGRAY CLI
        println!("üì¶ Step 1: Compiling MAGRAY CLI...");
        self.compile_magray_cli().await?;

        // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        println!("üîß Step 2: Setting up environment...");
        self.setup_environment().await?;

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        println!("üè• Step 3: Running health check...");
        let health_ok = self.health_check().await?;

        if health_ok {
            println!("‚úÖ Full readiness check passed!");
        } else {
            println!("‚ùå Health check failed!");
        }

        Ok(health_ok)
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    pub async fn execute_test_suite(
        &self,
        scenarios: Vec<TestScenario>,
    ) -> Result<Vec<TestResult>> {
        let mut results = Vec::new();
        let total_scenarios = scenarios.len();

        for (index, scenario) in scenarios.into_iter().enumerate() {
            println!("\n{}", "=".repeat(60));
            println!(
                "üìã Test {}/{}: {}",
                index + 1,
                total_scenarios,
                scenario.name
            );
            println!("{}", "-".repeat(60));

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            let result =
                if scenario.expected_type == "complex_task" || scenario.input.contains('\n') {
                    self.execute_interactive_scenario(&scenario).await?
                } else {
                    self.execute_scenario(&scenario).await?
                };

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.success {
                println!(
                    "‚úÖ Success! Response received in {}ms",
                    result.execution_time_ms
                );
                if result.output.len() > 200 {
                    println!("üìÑ Response preview: {}...", &result.output[..200]);
                } else {
                    println!("üìÑ Response: {}", result.output);
                }
            } else {
                println!(
                    "‚ùå Failed: {}",
                    result
                        .error_message
                        .as_ref()
                        .unwrap_or(&"Unknown error".to_string())
                );
            }

            results.push(result);
        }

        println!("\n{}", "=".repeat(60));
        println!("üìä Test Suite Summary");
        println!("{}", "=".repeat(60));

        let successful = results.iter().filter(|r| r.success).count();
        let failed = results.len() - successful;

        println!("‚úÖ Successful: {successful}");
        println!("‚ùå Failed: {failed}");
        println!(
            "‚è±Ô∏è  Total execution time: {}ms",
            results.iter().map(|r| r.execution_time_ms).sum::<u64>()
        );

        Ok(results)
    }

    pub async fn health_check(&self) -> Result<bool> {
        println!("üîç Performing comprehensive health check for MAGRAY CLI...");

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.binary_path.is_none() && !self.use_cargo_run {
            println!("üîß Binary path not set, attempting to detect...");
            let mut executor_copy = TestExecutor {
                binary_path: self.binary_path.clone(),
                use_cargo_run: self.use_cargo_run,
                timeout_duration: self.timeout_duration,
                session_id: self.session_id.clone(),
                project_root: self.project_root.clone(),
                max_retries: self.max_retries,
            };

            if let Err(e) = executor_copy.detect_binary_path() {
                println!("‚ö†Ô∏è  Could not detect binary path: {e}");
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å CLI
        let health_scenarios = vec![
            ("help", "Checking help command"),
            ("--help", "Checking help flag"),
            ("–ø—Ä–∏–≤–µ—Ç", "Checking basic interaction"),
        ];

        for (input, description) in health_scenarios {
            println!("üß™ {description}: '{input}'");

            let scenario = TestScenario {
                id: format!("health_check_{}", input.replace("--", "").replace(" ", "_")),
                name: description.to_string(),
                input: input.to_string(),
                expected_type: "simple_response".to_string(),
                timeout_seconds: 15,
                evaluation_criteria: vec!["responds_appropriately".to_string()],
            };

            match self.try_execute_scenario(&scenario, 1).await {
                Ok(result) => {
                    if result.success && !result.output.trim().is_empty() {
                        println!(
                            "‚úÖ Health check passed with '{input}' - MAGRAY CLI is responding"
                        );
                        println!(
                            "üìù Response preview: {}",
                            result.output.lines().take(2).collect::<Vec<_>>().join(" ")
                        );
                        return Ok(true);
                    }
                }
                Err(e) => {
                    println!("‚ö†Ô∏è  Health check attempt with '{input}' failed: {e}");
                }
            }
        }

        println!("‚ùå All health check attempts failed - CLI may not be ready");
        Ok(false)
    }
}

// –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–µ—Ç–æ–¥—ã

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_executor_creation() {
        let executor = TestExecutor::new();
        assert!(!executor.session_id.is_empty());
        assert!(!executor.use_cargo_run);
        assert_eq!(executor.max_retries, 3);
    }

    #[test]
    fn test_binary_path_detection() {
        let mut executor = TestExecutor::new();
        // This test just checks that the method doesn't panic
        let _ = executor.detect_binary_path();
    }

    #[tokio::test]
    async fn test_environment_setup() {
        let executor = TestExecutor::new();
        // This test checks environment setup doesn't fail
        let result = executor.setup_environment().await;
        assert!(result.is_ok());
    }

    #[tokio::test]
    async fn test_health_check() {
        let executor = TestExecutor::new();
        // Note: This test requires actual MAGRAY CLI to be available
        // In CI/CD it might fail, which is expected
        let result = executor.health_check().await;
        assert!(result.is_ok());
    }
}
