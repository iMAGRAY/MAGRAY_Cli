// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏

use memory::{MemoryCoordinator, MemoryConfig, MemMeta};
use memory::types::ExecutionContext;
use tempfile::TempDir;
use std::path::PathBuf;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    tracing_subscriber::fmt::init();
    
    println!("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏");
    
    // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    let temp_dir = TempDir::new()?;
    let base_path = temp_dir.path().to_path_buf();
    
    // –°–æ–∑–¥–∞—ë–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π
    tokio::fs::create_dir_all(base_path.join("src/Qwen3-Embedding-0.6B-ONNX")).await?;
    tokio::fs::create_dir_all(base_path.join("src/Qwen3-Reranker-0.6B-ONNX")).await?;
    
    let config = MemoryConfig {
        base_path: base_path.clone(),
        sqlite_path: base_path.join("memory.db"),
        blobs_path: base_path.join("blobs"),
        vectors_path: base_path.join("vectors"),
        cache_path: base_path.join("cache.db"),
        ..Default::default()
    };
    
    println!("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏...");
    let coordinator = MemoryCoordinator::new(config).await?;
    
    let ctx = ExecutionContext::default();
    
    // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    println!("üî∏ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é");
    let mut meta = MemMeta::default();
    meta.content_type = "text/plain".to_string();
    meta.tags.push("test".to_string());
    
    let result = coordinator.smart_put("test_key", b"Hello, World!", meta.clone(), &ctx).await?;
    println!("  ‚úÖ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö: success = {}", result.success);
    
    let retrieved = coordinator.smart_get("test_key", &ctx).await?;
    if let Some((data, meta_retrieved, mem_ref)) = retrieved {
        println!("  ‚úÖ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {} –±–∞–π—Ç, —Å–ª–æ–π: {:?}", data.len(), mem_ref.layer);
        println!("  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {}", meta_retrieved.access_count);
    }
    
    // –¢–µ—Å—Ç 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    println!("üî∏ –¢–µ—Å—Ç 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    let documents = [
        ("doc1", "–≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ"),
        ("doc2", "–í —ç—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–∏—Ä–æ–¥–µ"),
        ("doc3", "–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"),
    ];
    
    for (key, text) in &documents {
        let mut doc_meta = MemMeta::default();
        doc_meta.content_type = "text/plain".to_string();
        coordinator.smart_put(key, text.as_bytes(), doc_meta, &ctx).await?;
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    tokio::time::sleep(tokio::time::Duration::from_millis(200)).await;
    
    let search_results = coordinator.semantic_search("–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 5, &ctx).await?;
    println!("  üîç –ù–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'", search_results.len());
    
    for (i, result) in search_results.iter().enumerate() {
        println!("    {}. –ö–ª—é—á: {}, –û—Ü–µ–Ω–∫–∞: {:.3}, –°–ª–æ–π: {:?}", 
                i + 1, result.mem_ref.key, result.score, result.mem_ref.layer);
    }
    
    // –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    println!("üî∏ –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏");
    let stats = coordinator.get_usage_stats().await?;
    println!("  üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {}", stats.total_items);
    println!("  üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", stats.total_size_bytes);
    println!("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ—è–º:");
    
    for (layer, layer_stats) in &stats.layers {
        println!("    {:?}: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, {} –±–∞–π—Ç", 
                layer, layer_stats.total_items, layer_stats.total_size_bytes);
    }
    
    // –¢–µ—Å—Ç 4: –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    println!("üî∏ –¢–µ—Å—Ç 4: –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö");
    let cleaned = coordinator.cleanup_expired().await?;
    println!("  üßπ –û—á–∏—â–µ–Ω–æ {} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤", cleaned);
    
    // –¢–µ—Å—Ç 5: –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    println!("üî∏ –¢–µ—Å—Ç 5: –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö");
    let deleted = coordinator.delete("test_key").await?;
    println!("  üóëÔ∏è –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã: {}", deleted);
    
    let check_deleted = coordinator.smart_get("test_key", &ctx).await?;
    println!("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {}", if check_deleted.is_none() { "—É—Å–ø–µ—à–Ω–æ" } else { "–æ—à–∏–±–∫–∞" });
    
    println!("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    println!("üí° –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è ONNX –º–æ–¥–µ–ª–µ–π");
    
    Ok(())
}