use anyhow::Result;
use std::collections::HashMap;
use tracing::{info, debug};
use crate::{ExecutionPlan, PlanNode, StepStatus};

// === DAG Planner ===

pub struct DagPlanner {
    // #INCOMPLETE: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM –¥–ª—è —É–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    templates: HashMap<String, PlanTemplate>,
}

impl DagPlanner {
    pub fn new() -> Self {
        let mut planner = Self {
            templates: HashMap::new(),
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–ª–∞–Ω–æ–≤
        planner.load_basic_templates();
        planner
    }

    pub async fn create_plan(&self, goal: &str) -> Result<ExecutionPlan> {
        info!("üîç –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –¥–ª—è —Ü–µ–ª–∏: {}", goal);
        
        // #INCOMPLETE: –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω NLU –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        let intent = self.classify_intent(goal);
        
        match intent.as_str() {
            "analyze_code" => self.create_analysis_plan(goal),
            "file_operation" => self.create_file_plan(goal),
            "research" => self.create_research_plan(goal),
            _ => self.create_generic_plan(goal),
        }
    }

    fn classify_intent(&self, goal: &str) -> String {
        let goal_lower = goal.to_lowercase();
        
        if goal_lower.contains("–∞–Ω–∞–ª–∏–∑") || goal_lower.contains("analyze") {
            "analyze_code".to_string()
        } else if goal_lower.contains("—Ñ–∞–π–ª") || goal_lower.contains("file") {
            "file_operation".to_string()
        } else if goal_lower.contains("–∏—Å—Å–ª–µ–¥–æ–≤") || goal_lower.contains("research") {
            "research".to_string()
        } else {
            "generic".to_string()
        }
    }

    fn create_analysis_plan(&self, goal: &str) -> Result<ExecutionPlan> {
        let mut plan = ExecutionPlan::new();
        
        // –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        let analyze_node = PlanNode::new(
            "analyze_request".to_string(),
            "analyze".to_string(),
            format!("–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {}", goal)
        ).with_tool("analyze".to_string());
        plan.add_node(analyze_node)?;
        
        // –®–∞–≥ 2: –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        let search_node = PlanNode::new(
            "search_files".to_string(), 
            "search".to_string(),
            "–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞".to_string()
        ).with_tool("file_search".to_string())
        .depends_on("analyze_request".to_string());
        plan.add_node(search_node)?;
        
        // –®–∞–≥ 3: –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        let read_node = PlanNode::new(
            "read_files".to_string(),
            "read".to_string(), 
            "–ß—Ç–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤".to_string()
        ).with_tool("file_read".to_string())
        .depends_on("search_files".to_string());
        plan.add_node(read_node)?;
        
        // –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        let code_analysis_node = PlanNode::new(
            "analyze_code".to_string(),
            "think".to_string(),
            "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞".to_string()
        ).with_tool("think".to_string())
        .depends_on("read_files".to_string());
        plan.add_node(code_analysis_node)?;
        
        // –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        let report_node = PlanNode::new(
            "generate_report".to_string(),
            "report".to_string(),
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞".to_string()
        ).depends_on("analyze_code".to_string());
        plan.add_node(report_node)?;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ
        plan.add_dependency("search_files", "analyze_request")?;
        plan.add_dependency("read_files", "search_files")?;
        plan.add_dependency("analyze_code", "read_files")?;
        plan.add_dependency("generate_report", "analyze_code")?;
        
        plan.validate()?;
        debug!("‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –∞–Ω–∞–ª–∏–∑–∞ —Å {} —à–∞–≥–∞–º–∏", plan.nodes.len());
        
        Ok(plan)
    }

    fn create_file_plan(&self, goal: &str) -> Result<ExecutionPlan> {
        let mut plan = ExecutionPlan::new();
        
        // –ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
        let read_node = PlanNode::new(
            "read_target_file".to_string(),
            "read".to_string(),
            format!("–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º: {}", goal)
        ).with_tool("file_read".to_string())
        .with_param("path".to_string(), serde_json::Value::String("./".to_string()));
        
        plan.add_node(read_node)?;
        
        let process_node = PlanNode::new(
            "process_file".to_string(),
            "process".to_string(),
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞".to_string()
        ).depends_on("read_target_file".to_string());
        
        plan.add_node(process_node)?;
        plan.add_dependency("process_file", "read_target_file")?;
        
        plan.validate()?;
        debug!("‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ —Å {} —à–∞–≥–∞–º–∏", plan.nodes.len());
        
        Ok(plan)
    }

    fn create_research_plan(&self, goal: &str) -> Result<ExecutionPlan> {
        let mut plan = ExecutionPlan::new();
        
        // –ü–ª–∞–Ω –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á
        let research_node = PlanNode::new(
            "research_topic".to_string(),
            "research".to_string(),
            format!("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã: {}", goal)
        ).with_tool("web_search".to_string());
        
        plan.add_node(research_node)?;
        
        let analyze_node = PlanNode::new(
            "analyze_findings".to_string(),
            "think".to_string(),
            "–ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏".to_string()
        ).with_tool("think".to_string())
        .depends_on("research_topic".to_string());
        
        plan.add_node(analyze_node)?;
        plan.add_dependency("analyze_findings", "research_topic")?;
        
        plan.validate()?;
        debug!("‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å {} —à–∞–≥–∞–º–∏", plan.nodes.len());
        
        Ok(plan)
    }

    fn create_generic_plan(&self, goal: &str) -> Result<ExecutionPlan> {
        let mut plan = ExecutionPlan::new();
        
        // –ë–∞–∑–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
        let analyze_node = PlanNode::new(
            "analyze_goal".to_string(),
            "analyze".to_string(),
            format!("–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏: {}", goal)
        ).with_tool("analyze".to_string());
        
        plan.add_node(analyze_node)?;
        
        let execute_node = PlanNode::new(
            "execute_action".to_string(),
            "execute".to_string(),
            "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è".to_string()
        ).depends_on("analyze_goal".to_string());
        
        plan.add_node(execute_node)?;
        plan.add_dependency("execute_action", "analyze_goal")?;
        
        plan.validate()?;
        debug!("‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å {} —à–∞–≥–∞–º–∏", plan.nodes.len());
        
        Ok(plan)
    }

    fn load_basic_templates(&mut self) {
        // #INCOMPLETE: –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø–ª–∞–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        let analysis_template = PlanTemplate {
            name: "code_analysis".to_string(),
            description: "–®–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞".to_string(),
            steps: vec![
                "analyze_request".to_string(),
                "search_files".to_string(),
                "read_files".to_string(),
                "analyze_code".to_string(),
                "generate_report".to_string(),
            ],
        };
        
        self.templates.insert("analyze_code".to_string(), analysis_template);
        
        debug!("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —à–∞–±–ª–æ–Ω–æ–≤ –ø–ª–∞–Ω–æ–≤", self.templates.len());
    }
}

// === Plan Template ===

#[derive(Debug, Clone)]
struct PlanTemplate {
    name: String,
    description: String,
    steps: Vec<String>,
}

impl PlanTemplate {
    pub fn instantiate(&self, goal: &str) -> Result<ExecutionPlan> {
        let mut plan = ExecutionPlan::new();
        
        for (i, step) in self.steps.iter().enumerate() {
            let node = PlanNode::new(
                format!("{}_{}", step, i),
                step.clone(),
                format!("–®–∞–≥ {}: {} –¥–ª—è —Ü–µ–ª–∏ '{}'", i + 1, step, goal)
            );
            
            plan.add_node(node)?;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
            if i > 0 {
                let prev_step = format!("{}_{}", self.steps[i-1], i-1);
                let curr_step = format!("{}_{}", step, i);
                plan.add_dependency(&curr_step, &prev_step)?;
            }
        }
        
        plan.validate()?;
        Ok(plan)
    }
}