use anyhow::Result;
use clap::{Parser, Subcommand};
use llm::LlmClient;
use std::io::{self, Write};
use tracing::{info, error};

#[derive(Parser)]
#[command(name = "magray")]
#[command(about = "–ü—Ä–æ—Å—Ç–æ–π CLI —á–∞—Ç —Å LLM –º–æ–¥–µ–ª—è–º–∏")]
#[command(version = "0.1.0")]
struct Cli {
    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// –ß–∞—Ç —Å LLM –º–æ–¥–µ–ª—å—é
    Chat {
        /// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)
        message: Option<String>,
    },
}

#[tokio::main]
async fn main() -> Result<()> {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt()
        .with_env_filter("info")
        .init();

    let cli = Cli::parse();

    match cli.command {
        Commands::Chat { message } => {
            handle_chat(message).await?;
        }
    }

    Ok(())
}

async fn handle_chat(message: Option<String>) -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞
    let llm_client = match LlmClient::from_env() {
        Ok(client) => client,
        Err(e) => {
            error!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM: {}", e);
            println!("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:");
            println!("   cp .env.example .env");
            println!("   # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à API –∫–ª—é—á");
            return Err(e);
        }
    };

    info!("ü§ñ LLM –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    if let Some(msg) = message {
        // –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_message(&llm_client, &msg).await?;
    } else {
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        println!("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MAGRAY Chat!");
        println!("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞)");
        println!();

        loop {
            print!("üë§ –í—ã: ");
            io::stdout().flush()?;

            let mut input = String::new();
            io::stdin().read_line(&mut input)?;
            let input = input.trim();

            if input.is_empty() {
                continue;
            }

            if input == "exit" || input == "quit" {
                println!("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                break;
            }

            send_message(&llm_client, input).await?;
            println!();
        }
    }

    Ok(())
}

async fn send_message(client: &LlmClient, message: &str) -> Result<()> {
    print!("ü§ñ –î—É–º–∞—é...");
    io::stdout().flush()?;

    match client.chat(message).await {
        Ok(response) => {
            print!("\rü§ñ –û—Ç–≤–µ—Ç: ");
            println!("{}", response);
        }
        Err(e) => {
            print!("\r");
            error!("‚ùå –û—à–∏–±–∫–∞ LLM: {}", e);
            println!("‚ùå –û—à–∏–±–∫–∞: {}", e);
        }
    }

    Ok(())
}
