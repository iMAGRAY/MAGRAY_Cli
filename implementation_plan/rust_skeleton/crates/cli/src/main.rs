use anyhow::Result;
use clap::{Parser, Subcommand};
use magray_core::{DocStore, ProjectId, Request, TodoItem, TaskState};
use memory::{TodoService, SqliteStore, MemoryCoordinator};
use std::env;
use std::sync::Arc;
use tracing::{info, error};

#[derive(Parser)]
#[command(name = "magray")]
#[command(about = "–õ–æ–∫–∞–ª—å–Ω—ã–π CLI-–∞–≥–µ–Ω—Ç —Å 5-—Å–ª–æ–π–Ω–æ–π –ø–∞–º—è—Ç—å—é –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º")]
#[command(version = "0.1.0")]
struct Cli {
    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DocStore –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    Init {
        /// –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
        #[arg(short, long)]
        path: Option<String>,
    },
    /// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ Todo
    Todo {
        #[command(subcommand)]
        action: TodoAction,
    },
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
    Run {
        /// –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        goal: String,
    },
    /// –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    Vec {
        #[command(subcommand)]
        action: VecAction,
    },
    /// –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é
    Mem {
        #[command(subcommand)]
        action: MemAction,
    },
}

#[derive(Subcommand)]
enum TodoAction {
    /// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    Add {
        /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
        title: String,
        /// –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        #[arg(short, long, default_value = "")]
        desc: String,
        /// –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (YYYY-MM-DD)
        #[arg(long)]
        due: Option<String>,
        /// –¢–µ–≥–∏ –∑–∞–¥–∞—á–∏
        #[arg(short, long)]
        tag: Vec<String>,
        /// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        #[arg(short, long, default_value = "0")]
        priority: i32,
    },
    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    List {
        /// –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        #[arg(long)]
        state: Option<String>,
        /// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (priority, created, due)
        #[arg(long, default_value = "priority")]
        sort: String,
    },
    /// –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    Done {
        /// ID –∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
        id: String,
    },
    /// –û—Ç–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É
    Snooze {
        /// ID –∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
        id: String,
        /// –ù–∞ —Å–∫–æ–ª—å–∫–æ –æ—Ç–ª–æ–∂–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3d, 1w, 2h)
        #[arg(long, default_value = "1d")]
        for_duration: String,
    },
    /// –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–¥–∞—á–∏
    Prune {
        /// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å–æ staleness –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        #[arg(long, default_value = "7.0")]
        stale: f32,
    },
}

#[derive(Subcommand)]
enum VecAction {
    /// –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä—ã
    Reindex,
    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    Stats,
}

#[derive(Subcommand)]
enum MemAction {
    /// –°–∂–∞—Ç—å –ø–∞–º—è—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    Compact,
    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ —Å–ª–æ—è–º
    Stats,
}

fn setup_tracing() {
    tracing_subscriber::fmt()
        .with_env_filter(
            tracing_subscriber::EnvFilter::from_default_env()
                .add_directive("magray=info".parse().unwrap())
        )
        .init();
}

fn get_project_id(path: Option<String>) -> Result<ProjectId> {
    let project_path = if let Some(p) = path {
        std::path::PathBuf::from(p)
    } else {
        env::current_dir()?
    };
    
    Ok(ProjectId::from_path(&project_path))
}

#[tokio::main]
async fn main() -> Result<()> {
    setup_tracing();
    
    let cli = Cli::parse();
    
    match cli.command {
        Commands::Init { path } => {
            let project_id = get_project_id(path)?;
            let docstore = DocStore::new(&project_id)?;
            
            info!("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DocStore –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {}", project_id.as_str());
            docstore.init()?;
            
            println!("‚úÖ DocStore –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {}", docstore.root.display());
            println!("üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {}", docstore.root.join("config.toml").display());
            println!("üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {}", docstore.sqlite_path().display());
            println!("üìù –ó–∞–¥–∞—á–∏: {}", docstore.tasks_path().display());
        }
        
        Commands::Todo { action } => {
            let project_id = get_project_id(None)?;
            let docstore = DocStore::new(&project_id)?;
            
            if !docstore.root.exists() {
                error!("DocStore –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'magray init' —Å–Ω–∞—á–∞–ª–∞.");
                std::process::exit(1);
            }
            
            handle_todo_action(action, &docstore).await?;
        }
        
        Commands::Run { goal } => {
            let project_id = get_project_id(None)?;
            let docstore = DocStore::new(&project_id)?;
            
            if !docstore.root.exists() {
                error!("DocStore –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'magray init' —Å–Ω–∞—á–∞–ª–∞.");
                std::process::exit(1);
            }
            
            let request = Request::new(goal.clone(), project_id);
            info!("–°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å: {} (ID: {})", goal, request.id);
            
            // #INCOMPLETE: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Planner –∏ Executor
            println!("üöÄ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç: {}", goal);
            println!("üÜî ID –∑–∞–ø—Ä–æ—Å–∞: {}", request.id);
            println!("‚è≥ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö");
        }
        
        Commands::Vec { action } => {
            let project_id = get_project_id(None)?;
            let docstore = DocStore::new(&project_id)?;
            
            if !docstore.root.exists() {
                error!("DocStore –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'magray init' —Å–Ω–∞—á–∞–ª–∞.");
                std::process::exit(1);
            }
            
            handle_vec_action(action, &docstore).await?;
        }
        
        Commands::Mem { action } => {
            let project_id = get_project_id(None)?;
            let docstore = DocStore::new(&project_id)?;
            
            if !docstore.root.exists() {
                error!("DocStore –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'magray init' —Å–Ω–∞—á–∞–ª–∞.");
                std::process::exit(1);
            }
            
            handle_mem_action(action, &docstore).await?;
        }
    }
    
    Ok(())
}

async fn handle_todo_action(action: TodoAction, docstore: &DocStore) -> Result<()> {
    let todo_service = TodoService::new(docstore)?;
    
    match action {
        TodoAction::Add { title, desc, due, tag, priority } => {
            let mut todo = TodoItem::new(title.clone(), desc);
            todo.priority = priority;
            todo.tags = tag;
            
            if let Some(due_str) = due {
                // #INCOMPLETE: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
                println!("‚ö†Ô∏è  –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã '{}' –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ", due_str);
            }
            
            let saved_todo = todo_service.add(todo).await?;
            
            println!("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {}", title);
            println!("üÜî ID: {}", saved_todo.id);
            println!("üìÖ –°–æ–∑–¥–∞–Ω–∞: {}", saved_todo.created_at.format("%Y-%m-%d %H:%M:%S"));
            println!("‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {}", saved_todo.priority);
            println!("üìä Staleness: {:.2}", saved_todo.staleness);
            if !saved_todo.tags.is_empty() {
                println!("üè∑Ô∏è  –¢–µ–≥–∏: {}", saved_todo.tags.join(", "));
            }
        }
        
        TodoAction::List { state, sort } => {
            let state_filter = state.as_ref().and_then(|s| match s.as_str() {
                "planned" => Some(TaskState::Planned),
                "ready" => Some(TaskState::Ready),
                "in-progress" => Some(TaskState::InProgress),
                "blocked" => Some(TaskState::Blocked),
                "done" => Some(TaskState::Done),
                "archived" => Some(TaskState::Archived),
                _ => None,
            });
            
            let todos = todo_service.list(state_filter, &sort, Some(50)).await?;
            
            println!("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ({} –Ω–∞–π–¥–µ–Ω–æ):", todos.len());
            if let Some(state_filter) = state {
                println!("üîç –§–∏–ª—å—Ç—Ä: —Å–æ—Å—Ç–æ—è–Ω–∏–µ = {}", state_filter);
            }
            println!("üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {}", sort);
            println!();
            
            if todos.is_empty() {
                println!("üì≠ –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            } else {
                for (i, todo) in todos.iter().enumerate() {
                    let status_icon = match todo.state {
                        TaskState::Planned => "üìã",
                        TaskState::Ready => "üîÑ", 
                        TaskState::InProgress => "‚ö°",
                        TaskState::Blocked => "üö´",
                        TaskState::Done => "‚úÖ",
                        TaskState::Archived => "üì¶",
                    };
                    
                    println!("{}. {} {} ({})", 
                        i + 1, 
                        status_icon, 
                        todo.title,
                        todo.state
                    );
                    
                    if !todo.desc.is_empty() {
                        println!("   üìù {}", todo.desc);
                    }
                    
                    println!("   üÜî {} | ‚≠ê {} | üìä {:.1} | üìÖ {}", 
                        todo.id.to_string()[..8].to_string(),
                        todo.priority,
                        todo.staleness,
                        todo.created_at.format("%m-%d %H:%M")
                    );
                    
                    if !todo.tags.is_empty() {
                        println!("   üè∑Ô∏è  {}", todo.tags.join(", "));
                    }
                    
                    println!();
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                let counts = todo_service.count_by_state().await?;
                print!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ");
                for (state, count) in counts {
                    print!("{}: {} ", state, count);
                }
                println!();
            }
        }
        
        TodoAction::Done { id } => {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ UUID –∏–ª–∏ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
            let todo_id = if let Ok(uuid) = uuid::Uuid::parse_str(&id) {
                uuid
            } else {
                // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É ID
                let todos = todo_service.list(None, "created", None).await?;
                if let Some(todo) = todos.iter().find(|t| t.id.to_string().starts_with(&id)) {
                    todo.id
                } else {
                    println!("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id);
                    return Ok(());
                }
            };
            
            if todo_service.update_state(&todo_id, TaskState::Done).await? {
                println!("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è: {}", todo_id);
            } else {
                println!("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id);
            }
        }
        
        TodoAction::Snooze { id, for_duration } => {
            println!("üò¥ –ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞: {} –Ω–∞ {}", id, for_duration);
            // #INCOMPLETE: –ü–∞—Ä—Å–∏–Ω–≥ duration –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
            println!("‚è≥ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ");
        }
        
        TodoAction::Prune { stale } => {
            let removed = todo_service.prune_stale(stale).await?;
            println!("üßπ –£–¥–∞–ª–µ–Ω–æ {} –∑–∞–¥–∞—á —Å–æ staleness > {}", removed, stale);
        }
    }
    
    Ok(())
}

async fn handle_vec_action(action: VecAction, docstore: &DocStore) -> Result<()> {
    match action {
        VecAction::Reindex => {
            println!("üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤...");
            println!("üìÅ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞: {}", docstore.vectors_dir().display());
            // #INCOMPLETE: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å VectorizerSvc –∏ Semantic Index
            println!("‚è≥ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö");
        }
        
        VecAction::Stats => {
            println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞:");
            println!("üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {}", docstore.vectors_dir().display());
            // #INCOMPLETE: –ü–æ–∫–∞–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            println!("‚è≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞");
        }
    }
    
    Ok(())
}

async fn handle_mem_action(action: MemAction, docstore: &DocStore) -> Result<()> {
    match action {
        MemAction::Compact => {
            println!("üóúÔ∏è  –°–∂–∞—Ç–∏–µ –ø–∞–º—è—Ç–∏...");
            println!("üóÑÔ∏è  SQLite: {}", docstore.sqlite_path().display());
            println!("üìÅ Blobs: {}", docstore.blobs_dir().display());
            // #INCOMPLETE: –†–µ–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ MemoryCoordinator
            println!("‚è≥ –°–∂–∞—Ç–∏–µ –ø–∞–º—è—Ç–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ memory crate");
        }
        
        MemAction::Stats => {
            println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ —Å–ª–æ—è–º:");
            println!("üß† M0 (Ephemeral): –í RAM, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            println!("‚ö° M1 (Short): {}", docstore.sqlite_path().display());
            println!("üìö M2 (Medium): {}", docstore.sqlite_path().display()); 
            println!("üì¶ M3 (Long): {}", docstore.blobs_dir().display());
            println!("üîç M4 (Semantic): {}", docstore.vectors_dir().display());
            // #INCOMPLETE: –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            println!("‚è≥ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ memory crate");
        }
    }
    
    Ok(())
}
