name: Multi-Variant Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Build matrix for all three variants
  build:
    name: Build ${{ matrix.variant }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        variant: [minimal, cpu, gpu]
        exclude:
          # GPU builds only on Linux and Windows (macOS has limited CUDA support)
          - os: macos-latest
            variant: gpu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git  
          target
        key: ${{ runner.os }}-${{ matrix.variant }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.variant }}-cargo-
          ${{ runner.os }}-cargo-

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Setup CUDA (Linux GPU build)
      if: matrix.variant == 'gpu' && runner.os == 'Linux'
      uses: Jimver/cuda-toolkit@v0.2.14
      with:
        cuda: '12.0'

    - name: Setup CUDA (Windows GPU build)  
      if: matrix.variant == 'gpu' && runner.os == 'Windows'
      uses: Jimver/cuda-toolkit@v0.2.14
      with:
        cuda: '12.0'

    - name: Download ONNX Runtime (Windows GPU)
      if: matrix.variant == 'gpu' && runner.os == 'Windows'
      run: |
        if (!(Test-Path "scripts/onnxruntime")) {
          Write-Host "Downloading ONNX Runtime GPU libraries..."
          # This would typically download and extract ONNX Runtime
          # For now, we'll create a placeholder structure
          New-Item -ItemType Directory -Force -Path "scripts/onnxruntime/lib"
          Write-Host "ONNX Runtime placeholder created"
        }
      shell: pwsh

    - name: Build ${{ matrix.variant }} variant
      run: |
        # Build based on variant and OS
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          case "${{ matrix.variant }}" in
            "minimal") 
              powershell -File "scripts/build_all.ps1" -Variant minimal
              ;;
            "cpu")
              powershell -File "scripts/build_all.ps1" -Variant cpu  
              ;;
            "gpu")
              powershell -File "scripts/build_all.ps1" -Variant gpu
              ;;
          esac
        else
          case "${{ matrix.variant }}" in
            "minimal")
              chmod +x scripts/build_minimal.sh && ./scripts/build_minimal.sh
              ;;
            "cpu") 
              chmod +x scripts/build_cpu.sh && ./scripts/build_cpu.sh
              ;;
            "gpu")
              chmod +x scripts/build_gpu.sh && ./scripts/build_gpu.sh
              ;;
          esac
        fi
      shell: bash

    - name: Run basic tests
      run: |
        # Find the built binary and run basic tests
        if [ "${{ runner.os }}" = "Windows" ]; then
          BINARY="target/${{ matrix.variant }}/release/magray.exe"
        else
          BINARY="target/${{ matrix.variant }}/release/magray"
        fi
        
        if [ -f "$BINARY" ]; then
          echo "Testing binary: $BINARY"
          $BINARY --version
          
          # Variant-specific tests
          case "${{ matrix.variant }}" in
            "cpu")
              echo "Testing CPU features..."
              $BINARY models list || echo "Models command not available (expected in CI)"
              ;;
            "gpu") 
              echo "Testing GPU features..."
              $BINARY gpu info || echo "GPU not available in CI (expected)"
              ;;
          esac
        else
          echo "Binary not found: $BINARY"
          exit 1
        fi
      shell: bash

    - name: Get binary size
      id: binary-size
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          BINARY="target/${{ matrix.variant }}/release/magray.exe"
        else
          BINARY="target/${{ matrix.variant }}/release/magray"
        fi
        
        if [ -f "$BINARY" ]; then
          SIZE=$(du -h "$BINARY" | cut -f1)
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          echo "Binary size: $SIZE"
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: magray-${{ matrix.variant }}-${{ runner.os }}
        path: |
          target/${{ matrix.variant }}/release/magray*
        retention-days: 30

  # Integration tests across variants
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Run integration tests
      run: |
        echo "Running integration tests across variants..."
        
        # List downloaded artifacts
        find artifacts/ -name "magray*" -type f
        
        # Make binaries executable
        chmod +x artifacts/*/magray* || true
        
        # Test each variant
        for variant in minimal cpu; do
          BINARY="artifacts/magray-${variant}-Linux/magray"
          if [ -f "$BINARY" ]; then
            echo "Testing $variant variant..."
            $BINARY --version
            
            # Add more integration tests here
            echo "$variant variant integration test passed"
          else
            echo "Binary not found: $BINARY"
          fi
        done

  # Release builds (only on release events)
  release:
    name: Release Builds
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release'
    needs: build
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build all variants for release
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          powershell -File "scripts/build_all.ps1" -Variant all -Clean
        else
          chmod +x scripts/build_*.sh
          ./scripts/build_minimal.sh
          ./scripts/build_cpu.sh
          if [ "${{ runner.os }}" != "macOS" ]; then
            ./scripts/build_gpu.sh
          fi
        fi
      shell: bash

    - name: Create release archive
      run: |
        # Create archives for each variant
        mkdir -p release/
        
        for variant in minimal cpu gpu; do
          if [ "${{ runner.os }}" = "Windows" ]; then
            BINARY="target/${variant}/release/magray.exe"
            if [ -f "$BINARY" ]; then
              cp "$BINARY" "release/magray-${variant}-windows.exe"
            fi
          else
            BINARY="target/${variant}/release/magray"  
            if [ -f "$BINARY" ]; then
              OS_NAME=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
              cp "$BINARY" "release/magray-${variant}-${OS_NAME}"
            fi
          fi
        done
        
        ls -la release/
      shell: bash

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ runner.os }}
        path: release/*