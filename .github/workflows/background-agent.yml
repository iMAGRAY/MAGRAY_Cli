name: Background Agent Automation

on:
  issues:
    types: [opened, labeled]
  schedule:
    # Каждые 6 часов проверяем задачи
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      task:
        description: 'Task for background agent'
        required: true
        type: string
      priority:
        description: 'Task priority'
        required: false
        default: 'normal'
        type: choice
        options:
          - blocker
          - critical
          - normal
          - low

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Автоматическая обработка issues
  process-issue:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          
      - name: Analyze issue
        id: analyze
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          echo "🔍 Analyzing issue: $ISSUE_TITLE"
          
          # Определяем тип задачи
          if echo "$ISSUE_TITLE $ISSUE_BODY" | grep -qi "blocker\|critical\|urgent"; then
            echo "priority=blocker" >> $GITHUB_OUTPUT
          elif echo "$ISSUE_TITLE $ISSUE_BODY" | grep -qi "toolsvc\|llm\|memory"; then
            echo "priority=critical" >> $GITHUB_OUTPUT
          else
            echo "priority=normal" >> $GITHUB_OUTPUT
          fi
          
          # Проверяем, можно ли автоматизировать
          if echo "$ISSUE_TITLE $ISSUE_BODY" | grep -qi "implement\|fix\|add\|update"; then
            echo "automatable=true" >> $GITHUB_OUTPUT
          else
            echo "automatable=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Create task file
        if: steps.analyze.outputs.automatable == 'true'
        run: |
          TASK_ID="issue-${{ github.event.issue.number }}"
          TASK_FILE="docs/task_master/${TASK_ID}.md"
          
          mkdir -p docs/task_master
          
          cat > "$TASK_FILE" << EOF
          # Task $TASK_ID: ${{ github.event.issue.title }}
          
          ## Goal
          ${{ github.event.issue.body }}
          
          ## Priority
          ${{ steps.analyze.outputs.priority }}
          
          ## Source
          - Issue: #${{ github.event.issue.number }}
          - Created: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Assignee: BackgroundAgent
          
          ## Plan
          TBD - will be generated by planner
          
          ## Execution Log
          ### Step 0: Task Created
          Action: Parsed issue and created task file
          Result: Task ready for planning
          Next: Generate execution plan
          EOF
          
          echo "📝 Created task file: $TASK_FILE"
          
      - name: Add to project board
        if: steps.analyze.outputs.automatable == 'true'
        run: |
          # Добавляем issue в project board с соответствующим приоритетом
          gh issue edit ${{ github.event.issue.number }} \
            --add-label "background-agent" \
            --add-label "priority:${{ steps.analyze.outputs.priority }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Периодическая проверка задач
  scheduled-check:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check for stale tasks
        run: |
          echo "🔍 Checking for stale tasks..."
          
          # Проверяем задачи старше 24 часов без обновлений
          find docs/task_master -name "*.md" -mtime +1 | while read task_file; do
            echo "⚠️ Stale task found: $task_file"
            
            # Извлекаем ID задачи
            TASK_ID=$(basename "$task_file" .md)
            
            # Создаём комментарий о просроченной задаче
            if [[ "$TASK_ID" =~ ^issue-([0-9]+)$ ]]; then
              ISSUE_NUM="${BASH_REMATCH[1]}"
              gh issue comment "$ISSUE_NUM" \
                --body "🤖 Background agent: Task appears stale. Last update >24h ago. Reviewing priority..."
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run agent checklist
        run: |
          bash scripts/agent-checklist.sh > agent-status.txt
          
          # Если есть критические проблемы, создаём issue
          if grep -q "❌.*System not ready" agent-status.txt; then
            gh issue create \
              --title "🚨 Background Agent System Not Ready" \
              --body "$(cat agent-status.txt)" \
              --label "background-agent,priority:blocker"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Ручное выполнение задачи
  manual-execution:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup environment
        run: |
          # Установка зависимостей для агента
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev libsqlite3-dev
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
          
      - name: Create task
        run: |
          TASK_ID="manual-$(date +%s)"
          TASK_FILE="docs/task_master/${TASK_ID}.md"
          
          mkdir -p docs/task_master
          
          cat > "$TASK_FILE" << EOF
          # Task $TASK_ID: ${{ github.event.inputs.task }}
          
          ## Goal
          ${{ github.event.inputs.task }}
          
          ## Priority
          ${{ github.event.inputs.priority }}
          
          ## Source
          - Manual trigger via GitHub Actions
          - Created: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Assignee: BackgroundAgent
          
          ## Constraints
          - Execution timeout: 60 minutes
          - Must pass all CI checks
          - Must update INCOMPLETE.md if resolving blockers
          
          ## Plan
          TBD - will be generated by planner
          
          ## Execution Log
          ### Step 0: Task Created
          Action: Manual task creation via workflow dispatch
          Result: Task ready for planning
          Next: Generate execution plan
          EOF
          
          echo "📝 Created manual task: $TASK_FILE"
          echo "TASK_FILE=$TASK_FILE" >> $GITHUB_ENV
          
      - name: Execute task (simulation)
        run: |
          echo "🤖 Background Agent would execute task here"
          echo "Task: ${{ github.event.inputs.task }}"
          echo "Priority: ${{ github.event.inputs.priority }}"
          
          # В реальной реализации здесь был бы вызов CLI агента
          # cargo run -- run "${{ github.event.inputs.task }}"
          
          # Пока что просто обновляем статус
          cat >> "$TASK_FILE" << EOF
          
          ### Step 1: Task Analysis
          Action: Analyzed task requirements and constraints
          Result: Task categorized as ${{ github.event.inputs.priority }} priority
          Checks: ✅ syntax ✅ feasibility ✅ resources
          Next: Begin implementation
          EOF
          
      - name: Commit results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Background Agent"
          
          git add docs/task_master/
          git commit -m "🤖 Background Agent: Task execution results" || exit 0
          git push
          
      - name: Create summary
        run: |
          echo "## 🤖 Background Agent Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Task:** ${{ github.event.inputs.task }}" >> $GITHUB_STEP_SUMMARY
          echo "**Priority:** ${{ github.event.inputs.priority }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Completed (simulation)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Files Modified:**" >> $GITHUB_STEP_SUMMARY
          echo "- $TASK_FILE" >> $GITHUB_STEP_SUMMARY