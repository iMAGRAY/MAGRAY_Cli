name: CI/CD Pipeline - MAGRAY CLI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ 03:00 UTC
    - cron: '0 3 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # –î–ª—è ONNX models –≤ CI –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ GPU
  ORT_STRATEGY: system
  ORT_LIB_LOCATION: /opt/onnxruntime
  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å mock GPU –≤ CI
  MAGRAY_GPU_MODE: mock
  MAGRAY_TEST_ENV: ci

jobs:
  # =========================================
  # FAST PRE-CHECKS (2-3 –º–∏–Ω—É—Ç—ã)
  # =========================================
  pre-checks:
    name: üöÄ Fast Pre-Checks
    runs-on: ubuntu-latest
    outputs:
      should-run-full: ${{ steps.changes.outputs.rust }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Detect File Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rust:
              - 'crates/**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - '.github/workflows/**'
              - 'scripts/**'
            docs:
              - 'docs/**'
              - '*.md'

      - name: üì¶ Extract Version
        id: version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: üîß Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: üìù Check Formatting
        run: cargo fmt --all -- --check

      - name: üìã Basic Clippy Check
        run: |
          cargo clippy --workspace --all-targets -- -D warnings \
            -A clippy::too_many_arguments \
            -A clippy::large_enum_variant

  # =========================================
  # SECURITY SCANNING (Parallel)
  # =========================================
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-full == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: üõ°Ô∏è Cargo Audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üïµÔ∏è Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  codeql-analysis:
    name: üîç CodeQL Analysis
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-full == 'true'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: üîß Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'rust'
          queries: security-and-quality

      - name: üèóÔ∏è Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: üìä Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # =========================================
  # MULTI-PLATFORM BUILDS & TESTS
  # =========================================
  test-matrix:
    name: üß™ Test Matrix
    needs: [pre-checks, security-audit]
    if: needs.pre-checks.outputs.should-run-full == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            features: "cpu"
            binary-suffix: ".exe"
          
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            features: "cpu,gpu"
            binary-suffix: ""
          
          # Linux ARM64 (cross-compile)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            features: "cpu"
            binary-suffix: ""
            cross: true
          
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            features: "cpu"
            binary-suffix: ""
          
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            features: "cpu"
            binary-suffix: ""
            cross: true

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: üîß Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      # Caching —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      - name: üì¶ Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
            ${{ runner.os }}-cargo-

      - name: üì¶ Cache Target Directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-target-${{ matrix.features }}-
            ${{ runner.os }}-${{ matrix.target }}-target-

      # Cross-compilation setup –¥–ª—è ARM64
      - name: üîÑ Install Cross-Compilation Tools
        if: matrix.cross
        run: |
          if [[ "${{ matrix.target }}" == *"linux"* ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
          cargo install cross --git https://github.com/cross-rs/cross

      # ONNX Runtime setup —Å conditional installation
      - name: üì• Setup ONNX Runtime (Linux)
        if: matrix.os == 'ubuntu-latest' && !matrix.cross
        run: |
          sudo mkdir -p /opt/onnxruntime
          if [[ "${{ matrix.features }}" == *"gpu"* ]]; then
            # GPU version –¥–ª—è Linux CI (mock)
            wget -q https://github.com/microsoft/onnxruntime/releases/download/v1.16.3/onnxruntime-linux-x64-gpu-1.16.3.tgz
            tar xzf onnxruntime-linux-x64-gpu-1.16.3.tgz
            sudo cp -r onnxruntime-linux-x64-gpu-1.16.3/* /opt/onnxruntime/
          else
            # CPU –≤–µ—Ä—Å–∏—è
            wget -q https://github.com/microsoft/onnxruntime/releases/download/v1.16.3/onnxruntime-linux-x64-1.16.3.tgz
            tar xzf onnxruntime-linux-x64-1.16.3.tgz
            sudo cp -r onnxruntime-linux-x64-1.16.3/* /opt/onnxruntime/
          fi
          echo "ORT_LIB_LOCATION=/opt/onnxruntime/lib" >> $GITHUB_ENV

      - name: üì• Setup ONNX Runtime (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install wget
          mkdir -p /usr/local/onnxruntime
          wget -q https://github.com/microsoft/onnxruntime/releases/download/v1.16.3/onnxruntime-osx-x86_64-1.16.3.tgz
          tar xzf onnxruntime-osx-x86_64-1.16.3.tgz
          cp -r onnxruntime-osx-x86_64-1.16.3/* /usr/local/onnxruntime/
          echo "ORT_LIB_LOCATION=/usr/local/onnxruntime/lib" >> $GITHUB_ENV

      - name: üì• Setup ONNX Runtime (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $url = "https://github.com/microsoft/onnxruntime/releases/download/v1.16.3/onnxruntime-win-x64-1.16.3.zip"
          Invoke-WebRequest -Uri $url -OutFile "onnxruntime.zip"
          Expand-Archive -Path "onnxruntime.zip" -DestinationPath "C:\onnxruntime"
          Move-Item "C:\onnxruntime\onnxruntime-win-x64-1.16.3\*" "C:\onnxruntime\"
          echo "ORT_LIB_LOCATION=C:\onnxruntime\lib" >> $env:GITHUB_ENV
          echo "PATH=$env:PATH;C:\onnxruntime\lib" >> $env:GITHUB_ENV

      # Mock ONNX Models –¥–ª—è CI (–≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
      - name: üìÅ Setup Mock ONNX Models
        run: |
          mkdir -p models/qwen3emb models/qwen3_reranker
          # –°–æ–∑–¥–∞–µ–º mock —Ñ–∞–π–ª—ã –¥–ª—è CI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          echo '{"mock": "model"}' > models/qwen3emb/config.json
          echo '{"mock": "tokenizer"}' > models/qwen3emb/tokenizer.json
          echo '{"mock": "model"}' > models/qwen3_reranker/config.json

      # Comprehensive Testing —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ stages
      - name: üß™ Unit Tests
        run: |
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            cross test --target ${{ matrix.target }} --features ${{ matrix.features }} --lib
          else
            cargo test --target ${{ matrix.target }} --features ${{ matrix.features }} --lib --verbose
          fi

      - name: üîó Integration Tests
        if: '!matrix.cross'  # Integration tests —Ç–æ–ª—å–∫–æ –Ω–∞ native platforms
        run: |
          # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è integration —Ç–µ—Å—Ç–æ–≤ —Å mocking
          export MAGRAY_INTEGRATION_TEST=true
          export MAGRAY_MOCK_GPU=true
          cargo test --target ${{ matrix.target }} --features ${{ matrix.features }} --test integration_*

      - name: ‚ö° Performance Tests
        if: matrix.os == 'ubuntu-latest' && !matrix.cross
        run: |
          # Regression tests –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
          export MAGRAY_BENCH_MODE=ci
          cargo test --release --target ${{ matrix.target }} --features ${{ matrix.features }} test_vector_search_performance
          cargo test --release --target ${{ matrix.target }} --features ${{ matrix.features }} test_hnsw_stress

      # Build Artifacts
      - name: üèóÔ∏è Build Release Binary
        run: |
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }} --features ${{ matrix.features }} --bin magray
          else
            cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }} --bin magray
          fi

      # Binary Optimization & Size Check
      - name: üìè Check Binary Size
        run: |
          binary_path="target/${{ matrix.target }}/release/magray${{ matrix.binary-suffix }}"
          if [[ -f "$binary_path" ]]; then
            size=$(stat --format=%s "$binary_path" 2>/dev/null || stat -f%z "$binary_path")
            echo "Binary size: $(($size / 1024 / 1024)) MB"
            
            # Target ~16MB, warning –ø—Ä–∏ > 20MB
            if (( size > 20971520 )); then
              echo "‚ö†Ô∏è WARNING: Binary size exceeds 20MB target!"
              echo "Current size: $(($size / 1024 / 1024)) MB"
            fi
          fi

      # Strip binaries –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
      - name: ‚úÇÔ∏è Strip Binary (Unix)
        if: runner.os != 'Windows'
        run: |
          binary_path="target/${{ matrix.target }}/release/magray${{ matrix.binary-suffix }}"
          if [[ -f "$binary_path" ]]; then
            if [[ "${{ matrix.cross }}" == "true" && "${{ matrix.target }}" == *"linux"* ]]; then
              aarch64-linux-gnu-strip "$binary_path" || true
            else
              strip "$binary_path" || true
            fi
          fi

      # Upload artifacts –¥–ª—è release
      - name: üì§ Upload Binary Artifact
        uses: actions/upload-artifact@v3
        with:
          name: magray-${{ matrix.target }}-${{ matrix.features }}
          path: target/${{ matrix.target }}/release/magray${{ matrix.binary-suffix }}
          retention-days: 30

  # =========================================
  # CODE COVERAGE ANALYSIS
  # =========================================
  coverage:
    name: üìä Code Coverage
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-full == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: üîß Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: üì¶ Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: coverage-${{ hashFiles('**/Cargo.lock') }}

      # Mock ONNX setup –¥–ª—è coverage
      - name: üì• Setup Mock Environment
        run: |
          sudo mkdir -p /opt/onnxruntime/lib
          echo "ORT_LIB_LOCATION=/opt/onnxruntime/lib" >> $GITHUB_ENV
          mkdir -p models/qwen3emb models/qwen3_reranker
          echo '{"mock": "config"}' > models/qwen3emb/config.json

      - name: üß∞ Install Tarpaulin
        run: cargo install cargo-tarpaulin

      - name: üìà Generate Coverage Report
        run: |
          cargo tarpaulin \
            --verbose \
            --timeout 300 \
            --features cpu \
            --exclude-files "target/*" \
            --exclude-files "examples/*" \
            --exclude-files "benches/*" \
            --out Html \
            --out Xml \
            --output-dir coverage/

      - name: üìä Coverage Quality Gate
        run: |
          COVERAGE=$(grep -oP 'covered="\K[^"]*' coverage/tarpaulin-report.xml | head -1)
          echo "Current coverage: $COVERAGE%"
          
          # Quality gate: –º–∏–Ω–∏–º—É–º 60% –¥–ª—è merge, —Ü–µ–ª—å 80%
          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "‚ùå FAIL: Coverage $COVERAGE% is below 60% threshold!"
            exit 1
          elif (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "‚ö†Ô∏è WARNING: Coverage $COVERAGE% is below 80% target"
          else
            echo "‚úÖ PASS: Coverage $COVERAGE% meets quality standards!"
          fi

      - name: üì§ Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/tarpaulin-report.xml
          fail_ci_if_error: false

  # =========================================
  # DOCKER BUILDS (Multi-Arch)
  # =========================================
  docker:
    name: üê≥ Docker Builds
    runs-on: ubuntu-latest
    needs: [test-matrix, coverage]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    strategy:
      matrix:
        variant: [cpu, gpu, minimal]
    steps:
      - uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üîë Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Download binaries from previous jobs
      - name: üì• Download Linux Binaries
        uses: actions/download-artifact@v3
        with:
          name: magray-x86_64-unknown-linux-gnu-cpu
          path: ./binaries/x86_64/

      - name: üì• Download ARM64 Binaries
        uses: actions/download-artifact@v3
        with:
          name: magray-aarch64-unknown-linux-gnu-cpu
          path: ./binaries/aarch64/

      - name: üèóÔ∏è Build and Push Multi-Arch Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./scripts/docker/Dockerfile.${{ matrix.variant }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            magray/magray-cli:${{ matrix.variant }}
            magray/magray-cli:${{ matrix.variant }}-${{ needs.pre-checks.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =========================================
  # RELEASE AUTOMATION
  # =========================================
  release:
    name: üöÄ Release
    runs-on: ubuntu-latest
    needs: [test-matrix, coverage, docker]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download –≤—Å–µ artifacts –¥–ª—è release
      - name: üì• Download All Artifacts
        uses: actions/download-artifact@v3

      - name: üìù Generate Changelog
        id: changelog
        run: |
          # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–≥–∞
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%an)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "First release of MAGRAY CLI" >> CHANGELOG.md
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üéÅ Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          files: |
            magray-*/magray*
          prerelease: ${{ contains(github.ref, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =========================================
  # MONITORING & NOTIFICATIONS
  # =========================================
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [test-matrix, coverage, security-audit, codeql-analysis]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: üìä Build Status Summary
        run: |
          echo "## CI/CD Pipeline Summary" > summary.md
          echo "" >> summary.md
          echo "- **Tests**: ${{ needs.test-matrix.result }}" >> summary.md
          echo "- **Coverage**: ${{ needs.coverage.result }}" >> summary.md
          echo "- **Security**: ${{ needs.security-audit.result }}" >> summary.md
          echo "- **CodeQL**: ${{ needs.codeql-analysis.result }}" >> summary.md
          echo "" >> summary.md
          if [[ "${{ needs.test-matrix.result }}" != "success" ]] || [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "‚ùå Pipeline failed - requires attention!" >> summary.md
          else
            echo "‚úÖ Pipeline succeeded - all checks passed!" >> summary.md
          fi

      # –í production –∑–¥–µ—Å—å –±—ã –±—ã–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å:
      # - Slack/Teams notifications
      # - PagerDuty –¥–ª—è critical failures
      # - Monitoring dashboards (DataDog/New Relic)
      - name: üîî Pipeline Status (Mock)
        run: |
          echo "=== PIPELINE STATUS ==="
          cat summary.md
          echo "========================"
          
          # Mock notification - –≤ production –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ webhooks
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "‚úÖ Would send success notification to Slack/Teams"
          else
            echo "‚ùå Would send failure alert to PagerDuty"
          fi

  # =========================================
  # PERFORMANCE REGRESSION DETECTION
  # =========================================
  benchmark:
    name: üèÅ Performance Benchmarks
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-full == 'true' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: üîß Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: üì¶ Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: benchmark-${{ hashFiles('**/Cargo.lock') }}

      - name: üì• Setup Mock Environment
        run: |
          sudo mkdir -p /opt/onnxruntime/lib
          echo "ORT_LIB_LOCATION=/opt/onnxruntime/lib" >> $GITHUB_ENV

      - name: ‚ö° Run Benchmarks
        run: |
          # Benchmark key performance metrics
          cargo bench --features cpu -- --output-format json | tee benchmark-results.json
          
          # Performance regression detection (simplified)
          if [[ -f "benchmark-baseline.json" ]]; then
            echo "üîç Checking for performance regressions..."
            # –í production: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å baseline –∏ alert –ø—Ä–∏ regression > 10%
            python scripts/ci/check_benchmark_regression.py || true
          fi

      - name: üì§ Store Benchmark Results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json