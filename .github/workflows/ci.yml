name: CLI-Agent CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # –ù–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è PR
  quick-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
          override: true
          
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        
      - name: Quick checks
        run: |
          cargo fmt --all -- --check
          cargo clippy --all-targets -- -D warnings
          cargo check --all

  # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è main/develop
  full-test:
    if: github.event_name == 'push' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        rust: [stable, beta]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy, rustfmt
          override: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev libsqlite3-dev
          
      - name: Install Rust tools
        run: |
          cargo install cargo-nextest cargo-tarpaulin sqlx-cli taplo-cli --locked
          
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        
      - name: Install project dependencies
        run: |
          if [ -f package.json ]; then npm ci; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Run comprehensive tests
        run: |
          # L2 –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
          export CHECK_LEVEL=L2
          bash scripts/pre-commit.sh
          
      - name: Check for critical blockers
        run: |
          echo "üîç Checking for unresolved blockers..."
          if grep -q "–ë–õ–û–ö–ï–†.*–ù–ï–¢" implementation_plan/INCOMPLETE.md; then
            echo "‚ö†Ô∏è Critical blockers found:"
            grep "–ë–õ–û–ö–ï–†.*–ù–ï–¢" implementation_plan/INCOMPLETE.md
            echo "üí° These should be resolved before release"
          else
            echo "‚úÖ No critical blockers found"
          fi
          
      - name: Upload coverage reports
        if: matrix.rust == 'stable'
        uses: codecov/codecov-action@v3
        with:
          file: ./cobertura.xml
          fail_ci_if_error: false
          
      - name: Agent readiness check
        run: bash scripts/agent-checklist.sh

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          
      - name: Security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check for secrets in code
        run: |
          if grep -r "api_key.*=" --include="*.rs" --include="*.toml" .; then
            echo "‚ùå Potential hardcoded secrets found"
            exit 1
          fi

  # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è main)
  integration-test:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [full-test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup test environment
        run: |
          # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è CLI
          mkdir -p test-workspace
          cd test-workspace
          
      - name: End-to-end test
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: init ‚Üí todo ‚Üí run
          if [ -n "$OPENAI_API_KEY" ]; then
            echo "üß™ Running E2E test with real LLM"
            # cargo run -- init
            # cargo run -- todo add "test task"
            # cargo run -- run "analyze test file"
          else
            echo "‚ö†Ô∏è Skipping E2E test - no OpenAI key"
          fi

  # –î–µ–ø–ª–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  docs-deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [full-test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate docs
        run: |
          cargo doc --all --no-deps
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
