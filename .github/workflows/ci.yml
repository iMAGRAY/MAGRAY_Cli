name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0' # Weekly security audit

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  # Quick checks for fast feedback
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Clippy lints
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Check compilation
        run: cargo check --all-features

  # Comprehensive tests on multiple platforms
  test-matrix:
    name: Test ${{ matrix.os }} / ${{ matrix.rust }}
    needs: quick-check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
        exclude:
          - os: windows-latest
            rust: nightly  # Skip nightly on Windows to save time
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Install ONNX Runtime (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://github.com/microsoft/onnxruntime/releases/download/v1.18.0/onnxruntime-linux-x64-1.18.0.tgz
          tar -xzf onnxruntime-linux-x64-1.18.0.tgz
          echo "ORT_LIB_LOCATION=$PWD/onnxruntime-linux-x64-1.18.0" >> $GITHUB_ENV
      
      - name: Install ONNX Runtime (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri https://github.com/microsoft/onnxruntime/releases/download/v1.18.0/onnxruntime-win-x64-1.18.0.zip -OutFile ort.zip
          Expand-Archive ort.zip -DestinationPath .
          echo "ORT_LIB_LOCATION=$PWD\onnxruntime-win-x64-1.18.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      
      - name: Install ONNX Runtime (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          wget https://github.com/microsoft/onnxruntime/releases/download/v1.18.0/onnxruntime-osx-arm64-1.18.0.tgz
          tar -xzf onnxruntime-osx-arm64-1.18.0.tgz
          echo "ORT_LIB_LOCATION=$PWD/onnxruntime-osx-arm64-1.18.0" >> $GITHUB_ENV
      
      - name: Download models
        run: |
          mkdir -p models
          echo "Model download would happen here in production"
      
      - name: Run tests
        run: cargo test --all-features --verbose
      
      - name: Run benchmarks
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: cargo bench --no-run

  # Code coverage
  coverage:
    name: Code Coverage
    needs: quick-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage
        run: cargo tarpaulin --out xml --all-features --workspace --timeout 300
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cobertura.xml
          fail_ci_if_error: false

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for hardcoded secrets
        run: |
          # Simple check for common patterns
          ! grep -r "api_key\|secret\|password\|token" --include="*.rs" crates/ || echo "Warning: Potential secrets found"

  # Build release binaries
  build-release:
    name: Build Release ${{ matrix.target }}
    needs: [test-matrix]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: magray-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: magray-windows-amd64.exe
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: magray-macos-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --features cpu
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: target/${{ matrix.target }}/release/magray*

  # Deploy documentation
  docs:
    name: Deploy Documentation
    needs: [test-matrix]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build documentation
        run: cargo doc --all-features --no-deps
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc