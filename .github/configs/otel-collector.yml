# =============================================================================
# OpenTelemetry Collector Configuration для MAGRAY CLI
# Comprehensive observability: metrics, traces, logs
# =============================================================================

receivers:
  # OTLP receiver для application telemetry
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  
  # Prometheus receiver для scraping metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'magray-cli'
          static_configs:
            - targets: ['localhost:8080']
          scrape_interval: 10s
          metrics_path: '/metrics'
  
  # Host metrics для system monitoring
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      disk:
        metrics:
          system.disk.io:
            enabled: true
      network:
        metrics:
          system.network.io:
            enabled: true
      process:
        mute_process_name_error: true
        mute_process_exe_error: true
        mute_process_io_error: true

  # Docker stats для containerized environments
  docker_stats:
    endpoint: unix:///var/run/docker.sock
    collection_interval: 10s
    timeout: 20s
    api_version: 1.40

processors:
  # Batch processor для efficiency
  batch:
    timeout: 1s
    send_batch_size: 8192
  
  # Memory limiter для preventing OOM
  memory_limiter:
    limit_mib: 512
    spike_limit_mib: 128
  
  # Resource processor для service identification
  resource:
    attributes:
      - key: service.name
        value: magray-cli
        action: upsert
      - key: service.version
        value: ${MAGRAY_VERSION:-dev}
        action: upsert
      - key: deployment.environment
        value: ${DEPLOYMENT_ENVIRONMENT:-development}
        action: upsert
      - key: service.namespace
        value: ai-assistant
        action: upsert
  
  # Probabilistic sampling для high-volume traces
  probabilistic_sampler:
    sampling_percentage: 10.0  # 10% sampling rate
  
  # Span metrics processor
  spanmetrics:
    metrics_exporter: prometheus
    latency_histogram_buckets: [2ms, 5ms, 10ms, 20ms, 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s]
    dimensions:
      - name: http.method
        default: GET
      - name: http.status_code
      - name: service.version

  # Tail sampling для intelligent trace selection
  tail_sampling:
    decision_wait: 10s
    num_traces: 50000
    expected_new_traces_per_sec: 10
    policies:
      - name: error_policy
        type: status_code
        status_code: { status_codes: [ERROR] }
      - name: slow_policy
        type: latency
        latency: { threshold_ms: 1000 }
      - name: random_policy
        type: probabilistic
        probabilistic: { sampling_percentage: 5.0 }

exporters:
  # Prometheus metrics export
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: "magray"
    const_labels:
      service: "magray-cli"
    enable_open_metrics: true
    
  # Jaeger traces export
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true
    
  # OTLP export к external observability platforms
  otlp/production:
    endpoint: "${OTEL_EXPORTER_OTLP_ENDPOINT:-http://localhost:4317}"
    headers:
      api-key: "${OTEL_API_KEY:-}"
    tls:
      insecure: true
  
  # Logging exporter для debugging
  logging:
    loglevel: info
    
  # File exporter для local persistence
  file:
    path: /tmp/otel-data.json

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133
    
  # pprof extension для performance profiling
  pprof:
    endpoint: 0.0.0.0:1777
    
  # zpages extension для internal debugging
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus, hostmetrics, docker_stats]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, otlp/production, logging]
    
    # Traces pipeline  
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, tail_sampling, spanmetrics, batch]
      exporters: [jaeger, otlp/production, logging]
    
    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [otlp/production, file, logging]

  telemetry:
    logs:
      level: "info"
      development: false
      encoding: "json"
    metrics:
      address: 0.0.0.0:8888
      level: "detailed"